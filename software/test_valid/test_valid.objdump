
test_valid.elf:     file format elf32-littlenios2
test_valid.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000b970 memsz 0x0000b970 flags r-x
    LOAD off    0x0000c990 vaddr 0x0004b990 paddr 0x0004cce8 align 2**12
         filesz 0x00001358 memsz 0x00001358 flags rw-
    LOAD off    0x0000e040 vaddr 0x0004e040 paddr 0x0004e040 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b55c  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001f0  0004b7a0  0004b7a0  0000c7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001358  0004b990  0004cce8  0000c990  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0004e040  0004e040  0000e040  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0004e160  0004e160  0000dce8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000dce8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000bb8  00000000  00000000  0000dd10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00011073  00000000  00000000  0000e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006069  00000000  00000000  0001f93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000073ca  00000000  00000000  000259a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001e00  00000000  00000000  0002cd70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003cf5  00000000  00000000  0002eb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bce1  00000000  00000000  00032865  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0003e548  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012e0  00000000  00000000  0003e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00042782  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00042785  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004278f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00042790  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00042791  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00042795  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00042799  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004279d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000427a6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000427af  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000e  00000000  00000000  000427b8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000022  00000000  00000000  000427c6  2**0
                  CONTENTS, READONLY
 29 .jdi          00005b59  00000000  00000000  000427e8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006730c  00000000  00000000  00048341  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
0004b7a0 l    d  .rodata	00000000 .rodata
0004b990 l    d  .rwdata	00000000 .rwdata
0004e040 l    d  .bss	00000000 .bss
0004e160 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_valid_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_fmod.c
0004b820 l     O .rodata	00000010 Zero
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0004b990 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00046db4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0004751c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00047684 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000477b8 l     F .text	00000034 alt_dev_reg
0004ba70 l     O .rwdata	00000038 i2c_dac
0004baa8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00047894 l     F .text	00000110 optional_irq_callback
000479f4 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000496b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
000498c4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00049efc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0004a274 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0004a3c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004a3f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004a8f8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004aa38 l     F .text	0000003c alt_get_errno
0004aa74 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0004e05c g     O .bss	00000004 alt_instruction_exception_handler
00046ce8 g     F .text	0000001c putchar
00047608 g     F .text	0000007c alt_main
000418c8 g     F .text	0000009c convert_adc_to_signal
00046d04 g     F .text	00000080 _puts_r
0004e060 g     O .bss	00000100 alt_irq
00042130 g     F .text	0000019c log
0004cce8 g       *ABS*	00000000 __flash_rwdata_start
00045658 g     F .text	00000088 .hidden __eqdf2
00046c94 g     F .text	0000004c printf
000480ec g     F .text	000000a8 alt_avalon_i2c_rx_read
00041e54 g     F .text	00000100 round
0004348c g     F .text	00000440 .hidden __divsf3
000492ec g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00047e70 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
000411e8 g     F .text	00000234 calc_order
00041a7c g     F .text	0000004c initialize_pipeline
0004141c g     F .text	000000f4 modulo
00048b48 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
00044330 g     F .text	00000070 .hidden __fixsfsi
000456e0 g     F .text	000000dc .hidden __gtdf2
0004b0fc g     F .text	00000024 altera_nios2_gen2_irq_init
00046c48 g     F .text	00000010 __errno
00040000 g     F .entry	0000001c __reset
00040cdc g     F .text	00000328 anti_diff_2nd
00041c74 g     F .text	000001e0 ceil
00040020 g       *ABS*	00000000 __flash_exceptions_start
000422cc g     F .text	00000340 __ieee754_fmod
0004e040 g     O .bss	00000004 errno
0004e048 g     O .bss	00000004 alt_argv
00054cb0 g       *ABS*	00000000 _gp
00049330 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00043e4c g     F .text	000004e4 .hidden __subsf3
00048000 g     F .text	00000044 alt_avalon_i2c_is_busy
0004cb30 g     O .rwdata	00000180 alt_fd_list
00046ce0 g     F .text	00000008 _putchar_r
00047da4 g     F .text	000000cc alt_avalon_i2c_master_config_set
0004a594 g     F .text	00000090 alt_find_dev
0004b45c g     F .text	00000028 memcpy
00046850 g     F .text	000000dc .hidden __floatsidf
0004a9bc g     F .text	0000007c alt_io_redirect
0004b7a0 g       *ABS*	00000000 __DTOR_END__
0004898c g     F .text	000001bc alt_avalon_i2c_master_transmit
00046d84 g     F .text	00000014 puts
0004b35c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00040304 g     F .text	00000130 updateMovingAverage
00042d28 g     F .text	00000074 __fpclassifyd
00049abc g     F .text	0000021c altera_avalon_jtag_uart_read
00046c58 g     F .text	0000003c _printf_r
00042f08 g     F .text	00000064 .hidden __udivsi3
00041f54 g     F .text	00000084 roundf
00043988 g     F .text	000000c8 .hidden __lesf2
0004b2cc g     F .text	00000090 alt_icache_flush
00047c10 g     F .text	00000098 alt_avalon_i2c_enable
00049220 g     F .text	00000068 alt_avalon_i2c_int_disable
0004ccd4 g     O .rwdata	00000004 alt_max_fd
00041004 g     F .text	000001e4 anti_diff_1st
00048d50 g     F .text	0000020c alt_avalon_i2c_master_receive
0004692c g     F .text	00000110 .hidden __extendsfdf2
000444c4 g     F .text	000008ac .hidden __adddf3
0004ccb0 g     O .rwdata	00000004 __fdlib_version
00049288 g     F .text	00000064 alt_avalon_i2c_int_enable
0004ccb4 g     O .rwdata	00000004 _global_impure_ptr
0004e160 g       *ABS*	00000000 __bss_end
0004a808 g     F .text	000000f0 alt_iic_isr_register
0004aff4 g     F .text	00000108 alt_tick
00049148 g     F .text	00000058 alt_avalon_i2c_int_status_get
0004a7bc g     F .text	0000004c alt_ic_irq_enabled
0004af58 g     F .text	0000009c alt_alarm_stop
00047a90 g     F .text	00000054 alt_avalon_i2c_register_callback
0004e050 g     O .bss	00000004 alt_irq_active
00047ae4 g     F .text	000000ec alt_avalon_i2c_init
000400fc g     F .exceptions	000000d4 alt_irq_handler
0004cb08 g     O .rwdata	00000028 alt_dev_null
00041964 g     F .text	00000090 top
0004a380 g     F .text	00000048 alt_dcache_flush_all
000419f4 g     F .text	00000088 generate_test_data
000467d0 g     F .text	00000080 .hidden __fixdfsi
0004cce8 g       *ABS*	00000000 __ram_rwdata_end
0004cccc g     O .rwdata	00000008 alt_dev_list
000476c0 g     F .text	000000f8 write
0004746c g     F .text	00000058 _putc_r
00048420 g     F .text	0000004c alt_avalon_i2c_check_arblost
000438cc g     F .text	000000bc .hidden __gtsf2
000491e4 g     F .text	0000003c alt_avalon_i2c_int_clear
0004b990 g       *ABS*	00000000 __ram_rodata_end
0004ccbc g     O .rwdata	00000008 alt_avalon_i2c_list
00042f6c g     F .text	00000058 .hidden __umodsi3
0004e160 g       *ABS*	00000000 end
00040870 g     F .text	0000046c anti_diff_3rd
000495f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00047bd0 g     F .text	00000040 alt_avalon_i2c_open
0004b7a0 g       *ABS*	00000000 __CTOR_LIST__
00067100 g       *ABS*	00000000 __alt_stack_pointer
000485a0 g     F .text	000000e8 alt_avalon_i2c_master_tx
00049f74 g     F .text	0000007c alt_avalon_timer_sc_init
00046be4 g     F .text	00000064 .hidden __clzsi2
00041fd8 g     F .text	00000158 fmod
00049cd8 g     F .text	00000224 altera_avalon_jtag_uart_write
00046e20 g     F .text	00000524 ___vfprintf_internal_r
0004ac8c g     F .text	0000022c alt_printf
0004b5dc g     F .text	00000190 __call_exitprocs
000479a4 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00040244 g     F .text	0000004c _start
0004e054 g     O .bss	00000004 _alt_tick_rate
00040640 g     F .text	00000230 anti_diff_nth
00048f5c g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
0004937c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0004e058 g     O .bss	00000004 _alt_nticks
00047824 g     F .text	00000070 alt_sys_init
000443a0 g     F .text	00000124 .hidden __floatsisf
0004b484 g     F .text	00000158 __register_exitproc
000487c4 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00049964 g     F .text	00000068 altera_avalon_jtag_uart_close
0004b990 g       *ABS*	00000000 __ram_rwdata_start
0004b7a0 g       *ABS*	00000000 __ram_rodata_start
00049494 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004b228 g     F .text	000000a4 alt_get_fd
0004a11c g     F .text	00000158 alt_busy_sleep
0004b42c g     F .text	00000030 memcmp
00048044 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00049554 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004e160 g       *ABS*	00000000 __alt_stack_base
000495a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00044d70 g     F .text	000008e8 .hidden __divdf3
000457bc g     F .text	00000718 .hidden __muldf3
0004b120 g     F .text	00000108 alt_find_file
0004a430 g     F .text	000000a4 alt_dev_llist_insert
0004846c g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
000483d4 g     F .text	0000004c alt_avalon_i2c_check_nack
00047360 g     F .text	000000b8 __sfvwrite_small_dev
0004e040 g       *ABS*	00000000 __bss_start
00041ac8 g     F .text	000001ac main
000483a0 g     F .text	00000034 alt_avalon_i2c_master_target_set
0004e04c g     O .bss	00000004 alt_envp
000494f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000491a0 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00043988 g     F .text	000000c8 .hidden __ltsf2
00042d9c g     F .text	00000008 matherr
00046a3c g     F .text	000001a8 .hidden __truncdfsf2
00040290 g     F .text	00000074 initMovingAverage
0004ccd8 g     O .rwdata	00000004 alt_errno
00047418 g     F .text	00000054 putc
00042e10 g     F .text	00000084 .hidden __divsi3
00040434 g     F .text	000000e0 initReconstructor
0004b7a0 g       *ABS*	00000000 __CTOR_END__
00043a50 g     F .text	000003fc .hidden __mulsf3
0004b7a0 g       *ABS*	00000000 __flash_rodata_start
0004b7a0 g       *ABS*	00000000 __DTOR_LIST__
00041804 g     F .text	000000c4 float_to_dac
00045658 g     F .text	00000088 .hidden __nedf2
000477ec g     F .text	00000038 alt_irq_init
0004aef4 g     F .text	00000064 alt_release_fd
0004b830 g     O .rodata	00000100 .hidden __clz_tab
0004b3f8 g     F .text	00000014 atexit
000438cc g     F .text	000000bc .hidden __gesf2
000474c4 g     F .text	00000058 _write_r
00041510 g     F .text	0000009c center_to_2lam
0004ccb8 g     O .rwdata	00000004 _impure_ptr
0004e044 g     O .bss	00000004 alt_argc
0004a534 g     F .text	00000060 _do_dtors
0004260c g     F .text	0000071c __ieee754_log
00048368 g     F .text	00000038 alt_avalon_i2c_master_target_get
00048278 g     F .text	000000f0 alt_avalon_i2c_send_address
00040020 g       .exceptions	00000000 alt_irq_entry
0004ccc4 g     O .rwdata	00000008 alt_fs_list
00042da4 g     F .text	0000000c nan
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0004942c g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0004a658 g     F .text	00000050 alt_ic_isr_register
00047ca8 g     F .text	0000004c alt_avalon_i2c_disable
0004cce8 g       *ABS*	00000000 _edata
0004e160 g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
000499cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00047cf4 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0004a730 g     F .text	0000008c alt_ic_irq_disable
0004b40c g     F .text	00000020 exit
00042e94 g     F .text	00000074 .hidden __modsi3
00067100 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00047f04 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000415ac g     F .text	00000258 update
00048194 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00042db0 g     F .text	00000060 .hidden __fixunssfsi
0004b76c g     F .text	00000034 _exit
00049ff0 g     F .text	0000012c alt_alarm_start
00046d98 g     F .text	0000001c strlen
0004ab38 g     F .text	00000154 open
000456e0 g     F .text	000000dc .hidden __gedf2
0004aeb8 g     F .text	0000003c alt_putchar
0004a624 g     F .text	00000034 alt_icache_flush_all
00040514 g     F .text	0000012c nth_order_difference
0004ccdc g     O .rwdata	00000004 alt_priority_mask
0004a6a8 g     F .text	00000088 alt_ic_irq_enable
00047344 g     F .text	0000001c __vfprintf_internal
00045ed4 g     F .text	000008fc .hidden __subdf3
0004cce0 g     O .rwdata	00000008 alt_alarm_list
0004a4d4 g     F .text	00000060 _do_ctors
0004a2b0 g     F .text	000000d0 close
00042fc4 g     F .text	000004c8 .hidden __addsf3
000493e0 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00047584 g     F .text	00000084 alt_load
00048688 g     F .text	0000013c alt_avalon_i2c_master_rx



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8f04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10b81804 	addi	r2,r2,-8096
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10b81804 	addi	r2,r2,-8096
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd902c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd9020>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a4eb17 	ldw	r2,-27732(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a4eb17 	ldw	r2,-27732(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffd9148>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   4025c:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40260:	d6932c14 	ori	gp,gp,19632
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40268:	10b81014 	ori	r2,r2,57408

    movhi r3, %hi(__bss_end)
   4026c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40270:	18f85814 	ori	r3,r3,57696

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffd9178>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	00475840 	call	47584 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	00476080 	call	47608 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffd918c>

00040290 <initMovingAverage>:
    float buffer[MA_WINDOW_SIZE];
    int index;
    int count;
    float sum;
} MovingAverage;
void initMovingAverage(MovingAverage *ma) {
   40290:	defffd04 	addi	sp,sp,-12
   40294:	df000215 	stw	fp,8(sp)
   40298:	df000204 	addi	fp,sp,8
   4029c:	e13fff15 	stw	r4,-4(fp)
    ma->index = 0;
   402a0:	e0bfff17 	ldw	r2,-4(fp)
   402a4:	10006415 	stw	zero,400(r2)
    ma->count = 0;
   402a8:	e0bfff17 	ldw	r2,-4(fp)
   402ac:	10006515 	stw	zero,404(r2)
    ma->sum = 0.0;
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	10006615 	stw	zero,408(r2)

    for (int i = 0; i < MA_WINDOW_SIZE; i++) {
   402b8:	e03ffe15 	stw	zero,-8(fp)
   402bc:	00000906 	br	402e4 <initMovingAverage+0x54>
        ma->buffer[i] = 0.0;
   402c0:	e0ffff17 	ldw	r3,-4(fp)
   402c4:	e0bffe17 	ldw	r2,-8(fp)
   402c8:	1085883a 	add	r2,r2,r2
   402cc:	1085883a 	add	r2,r2,r2
   402d0:	1885883a 	add	r2,r3,r2
   402d4:	10000015 	stw	zero,0(r2)
void initMovingAverage(MovingAverage *ma) {
    ma->index = 0;
    ma->count = 0;
    ma->sum = 0.0;

    for (int i = 0; i < MA_WINDOW_SIZE; i++) {
   402d8:	e0bffe17 	ldw	r2,-8(fp)
   402dc:	10800044 	addi	r2,r2,1
   402e0:	e0bffe15 	stw	r2,-8(fp)
   402e4:	e0bffe17 	ldw	r2,-8(fp)
   402e8:	10801910 	cmplti	r2,r2,100
   402ec:	103ff41e 	bne	r2,zero,402c0 <__alt_data_end+0xfffd91c0>
        ma->buffer[i] = 0.0;
    }
}
   402f0:	0001883a 	nop
   402f4:	e037883a 	mov	sp,fp
   402f8:	df000017 	ldw	fp,0(sp)
   402fc:	dec00104 	addi	sp,sp,4
   40300:	f800283a 	ret

00040304 <updateMovingAverage>:

/* Update the moving average with a new sample */
float updateMovingAverage(MovingAverage *ma, float new_sample) {
   40304:	defffb04 	addi	sp,sp,-20
   40308:	dfc00415 	stw	ra,16(sp)
   4030c:	df000315 	stw	fp,12(sp)
   40310:	dc000215 	stw	r16,8(sp)
   40314:	df000304 	addi	fp,sp,12
   40318:	e13ffd15 	stw	r4,-12(fp)
   4031c:	e17ffe15 	stw	r5,-8(fp)
    // Remove the oldest sample from the sum
    ma->sum -= ma->buffer[ma->index];
   40320:	e0bffd17 	ldw	r2,-12(fp)
   40324:	11006617 	ldw	r4,408(r2)
   40328:	e0bffd17 	ldw	r2,-12(fp)
   4032c:	10806417 	ldw	r2,400(r2)
   40330:	e0fffd17 	ldw	r3,-12(fp)
   40334:	1085883a 	add	r2,r2,r2
   40338:	1085883a 	add	r2,r2,r2
   4033c:	1885883a 	add	r2,r3,r2
   40340:	10c00017 	ldw	r3,0(r2)
   40344:	180b883a 	mov	r5,r3
   40348:	0043e4c0 	call	43e4c <__subsf3>
   4034c:	1009883a 	mov	r4,r2
   40350:	2007883a 	mov	r3,r4
   40354:	e0bffd17 	ldw	r2,-12(fp)
   40358:	10c06615 	stw	r3,408(r2)

    // Add the new sample to the buffer and sum
    ma->buffer[ma->index] = new_sample;
   4035c:	e0bffd17 	ldw	r2,-12(fp)
   40360:	10806417 	ldw	r2,400(r2)
   40364:	e0fffd17 	ldw	r3,-12(fp)
   40368:	1085883a 	add	r2,r2,r2
   4036c:	1085883a 	add	r2,r2,r2
   40370:	1885883a 	add	r2,r3,r2
   40374:	e0fffe17 	ldw	r3,-8(fp)
   40378:	10c00015 	stw	r3,0(r2)
    ma->sum += new_sample;
   4037c:	e0bffd17 	ldw	r2,-12(fp)
   40380:	10c06617 	ldw	r3,408(r2)
   40384:	e17ffe17 	ldw	r5,-8(fp)
   40388:	1809883a 	mov	r4,r3
   4038c:	0042fc40 	call	42fc4 <__addsf3>
   40390:	1009883a 	mov	r4,r2
   40394:	2007883a 	mov	r3,r4
   40398:	e0bffd17 	ldw	r2,-12(fp)
   4039c:	10c06615 	stw	r3,408(r2)

    // Update the index (circular buffer)
    ma->index = (ma->index + 1) % MA_WINDOW_SIZE;
   403a0:	e0bffd17 	ldw	r2,-12(fp)
   403a4:	10806417 	ldw	r2,400(r2)
   403a8:	10800044 	addi	r2,r2,1
   403ac:	01401904 	movi	r5,100
   403b0:	1009883a 	mov	r4,r2
   403b4:	0042e940 	call	42e94 <__modsi3>
   403b8:	1007883a 	mov	r3,r2
   403bc:	e0bffd17 	ldw	r2,-12(fp)
   403c0:	10c06415 	stw	r3,400(r2)

    // Update the count (if less than window size)
    if (ma->count < MA_WINDOW_SIZE) {
   403c4:	e0bffd17 	ldw	r2,-12(fp)
   403c8:	10806517 	ldw	r2,404(r2)
   403cc:	10801908 	cmpgei	r2,r2,100
   403d0:	1000051e 	bne	r2,zero,403e8 <updateMovingAverage+0xe4>
        ma->count++;
   403d4:	e0bffd17 	ldw	r2,-12(fp)
   403d8:	10806517 	ldw	r2,404(r2)
   403dc:	10c00044 	addi	r3,r2,1
   403e0:	e0bffd17 	ldw	r2,-12(fp)
   403e4:	10c06515 	stw	r3,404(r2)
    }

    // Compute the moving average
    return ma->sum / ma->count;
   403e8:	e0bffd17 	ldw	r2,-12(fp)
   403ec:	14006617 	ldw	r16,408(r2)
   403f0:	e0bffd17 	ldw	r2,-12(fp)
   403f4:	10806517 	ldw	r2,404(r2)
   403f8:	1009883a 	mov	r4,r2
   403fc:	00443a00 	call	443a0 <__floatsisf>
   40400:	1007883a 	mov	r3,r2
   40404:	180b883a 	mov	r5,r3
   40408:	8009883a 	mov	r4,r16
   4040c:	004348c0 	call	4348c <__divsf3>
   40410:	1009883a 	mov	r4,r2
   40414:	2007883a 	mov	r3,r4
   40418:	1805883a 	mov	r2,r3
}
   4041c:	e6ffff04 	addi	sp,fp,-4
   40420:	dfc00217 	ldw	ra,8(sp)
   40424:	df000117 	ldw	fp,4(sp)
   40428:	dc000017 	ldw	r16,0(sp)
   4042c:	dec00304 	addi	sp,sp,12
   40430:	f800283a 	ret

00040434 <initReconstructor>:


} UnlimitedSamplerReconstructor;

/* Initialize the reconstructor */
void initReconstructor(UnlimitedSamplerReconstructor *recon, float lam) {
   40434:	defffc04 	addi	sp,sp,-16
   40438:	df000315 	stw	fp,12(sp)
   4043c:	df000304 	addi	fp,sp,12
   40440:	e13ffe15 	stw	r4,-8(fp)
   40444:	e17fff15 	stw	r5,-4(fp)
    recon->lam = lam;
   40448:	e0bffe17 	ldw	r2,-8(fp)
   4044c:	e0ffff17 	ldw	r3,-4(fp)
   40450:	10c00015 	stw	r3,0(r2)
    recon->prev_y = 0.0;
   40454:	e0bffe17 	ldw	r2,-8(fp)
   40458:	10000115 	stw	zero,4(r2)
    recon->prev_eps = 0.0;
   4045c:	e0bffe17 	ldw	r2,-8(fp)
   40460:	10000215 	stw	zero,8(r2)
    recon->initialized = 0;
   40464:	e0bffe17 	ldw	r2,-8(fp)
   40468:	10000315 	stw	zero,12(r2)
    recon->max_in=0.001;
   4046c:	e0fffe17 	ldw	r3,-8(fp)
   40470:	008ea0f4 	movhi	r2,14979
   40474:	10849bc4 	addi	r2,r2,4719
   40478:	18800415 	stw	r2,16(r3)
    recon->sampling_interval=0.000001;
   4047c:	e0fffe17 	ldw	r3,-8(fp)
   40480:	008d61b4 	movhi	r2,13702
   40484:	108def44 	addi	r2,r2,14269
   40488:	1880d215 	stw	r2,840(r3)
    recon->diff_reset=0;
   4048c:	e0bffe17 	ldw	r2,-8(fp)
   40490:	10000615 	stw	zero,24(r2)
    recon-> anti_diff_reset=0;
   40494:	e0bffe17 	ldw	r2,-8(fp)
   40498:	10000715 	stw	zero,28(r2)
//    recon->max_order=10;
    recon->order=1;
   4049c:	e0bffe17 	ldw	r2,-8(fp)
   404a0:	00c00044 	movi	r3,1
   404a4:	10c00515 	stw	r3,20(r2)
//    recon->J=MAX_J;

    for (int i = 0; i < MAX_ORDER+1; i++) {
   404a8:	e03ffd15 	stw	zero,-12(fp)
   404ac:	00001106 	br	404f4 <initReconstructor+0xc0>
        recon->diff_buffer[i] = 0.0;
   404b0:	e0fffe17 	ldw	r3,-8(fp)
   404b4:	e0bffd17 	ldw	r2,-12(fp)
   404b8:	10800204 	addi	r2,r2,8
   404bc:	1085883a 	add	r2,r2,r2
   404c0:	1085883a 	add	r2,r2,r2
   404c4:	1885883a 	add	r2,r3,r2
   404c8:	10000015 	stw	zero,0(r2)
        recon->anti_diff_buffer[i] = 0.0;
   404cc:	e0fffe17 	ldw	r3,-8(fp)
   404d0:	e0bffd17 	ldw	r2,-12(fp)
   404d4:	10801b44 	addi	r2,r2,109
   404d8:	1085883a 	add	r2,r2,r2
   404dc:	1085883a 	add	r2,r2,r2
   404e0:	1885883a 	add	r2,r3,r2
   404e4:	10000015 	stw	zero,0(r2)
    recon-> anti_diff_reset=0;
//    recon->max_order=10;
    recon->order=1;
//    recon->J=MAX_J;

    for (int i = 0; i < MAX_ORDER+1; i++) {
   404e8:	e0bffd17 	ldw	r2,-12(fp)
   404ec:	10800044 	addi	r2,r2,1
   404f0:	e0bffd15 	stw	r2,-12(fp)
   404f4:	e0bffd17 	ldw	r2,-12(fp)
   404f8:	10801950 	cmplti	r2,r2,101
   404fc:	103fec1e 	bne	r2,zero,404b0 <__alt_data_end+0xfffd93b0>
//    }
//    for (int i = 0; i <= MAX_ORDER; ++i)
//        recon->anti_diff_buffer[i] = 0.0f;


}
   40500:	0001883a 	nop
   40504:	e037883a 	mov	sp,fp
   40508:	df000017 	ldw	fp,0(sp)
   4050c:	dec00104 	addi	sp,sp,4
   40510:	f800283a 	ret

00040514 <nth_order_difference>:
float nth_order_difference(float new_sample,UnlimitedSamplerReconstructor *recon) {
   40514:	defff804 	addi	sp,sp,-32
   40518:	dfc00715 	stw	ra,28(sp)
   4051c:	df000615 	stw	fp,24(sp)
   40520:	df000604 	addi	fp,sp,24
   40524:	e13ffe15 	stw	r4,-8(fp)
   40528:	e17fff15 	stw	r5,-4(fp)
	float x = new_sample;
   4052c:	e0bffe17 	ldw	r2,-8(fp)
   40530:	e0bffa15 	stw	r2,-24(fp)
	if (recon->diff_reset >0){
   40534:	e0bfff17 	ldw	r2,-4(fp)
   40538:	10800617 	ldw	r2,24(r2)
   4053c:	0080130e 	bge	zero,r2,4058c <nth_order_difference+0x78>
		for (int i = 0; i <= recon->order; ++i){
   40540:	e03ffb15 	stw	zero,-20(fp)
   40544:	00000a06 	br	40570 <nth_order_difference+0x5c>
		recon->diff_buffer[i]=0;
   40548:	e0ffff17 	ldw	r3,-4(fp)
   4054c:	e0bffb17 	ldw	r2,-20(fp)
   40550:	10800204 	addi	r2,r2,8
   40554:	1085883a 	add	r2,r2,r2
   40558:	1085883a 	add	r2,r2,r2
   4055c:	1885883a 	add	r2,r3,r2
   40560:	10000015 	stw	zero,0(r2)

}
float nth_order_difference(float new_sample,UnlimitedSamplerReconstructor *recon) {
	float x = new_sample;
	if (recon->diff_reset >0){
		for (int i = 0; i <= recon->order; ++i){
   40564:	e0bffb17 	ldw	r2,-20(fp)
   40568:	10800044 	addi	r2,r2,1
   4056c:	e0bffb15 	stw	r2,-20(fp)
   40570:	e0bfff17 	ldw	r2,-4(fp)
   40574:	10c00517 	ldw	r3,20(r2)
   40578:	e0bffb17 	ldw	r2,-20(fp)
   4057c:	18bff20e 	bge	r3,r2,40548 <__alt_data_end+0xfffd9448>
		recon->diff_buffer[i]=0;

		}
		recon->diff_reset=0;
   40580:	e0bfff17 	ldw	r2,-4(fp)
   40584:	10000615 	stw	zero,24(r2)
   40588:	00001f06 	br	40608 <nth_order_difference+0xf4>
	}else
	{
		for (int i = 0; i <= recon->order; ++i) {
   4058c:	e03ffc15 	stw	zero,-16(fp)
   40590:	00001906 	br	405f8 <nth_order_difference+0xe4>
	//        if (!init_done[i]) {
	//            diff_buffers[i] = x;
	//            init_done[i] = 1;
	//            return 0.0;  // NaN to signal not ready
	//        } else {
			float delta = x - recon->diff_buffer[i];
   40594:	e0ffff17 	ldw	r3,-4(fp)
   40598:	e0bffc17 	ldw	r2,-16(fp)
   4059c:	10800204 	addi	r2,r2,8
   405a0:	1085883a 	add	r2,r2,r2
   405a4:	1085883a 	add	r2,r2,r2
   405a8:	1885883a 	add	r2,r3,r2
   405ac:	10c00017 	ldw	r3,0(r2)
   405b0:	180b883a 	mov	r5,r3
   405b4:	e13ffa17 	ldw	r4,-24(fp)
   405b8:	0043e4c0 	call	43e4c <__subsf3>
   405bc:	1007883a 	mov	r3,r2
   405c0:	e0fffd15 	stw	r3,-12(fp)
			recon->diff_buffer[i] = x;
   405c4:	e0ffff17 	ldw	r3,-4(fp)
   405c8:	e0bffc17 	ldw	r2,-16(fp)
   405cc:	10800204 	addi	r2,r2,8
   405d0:	1085883a 	add	r2,r2,r2
   405d4:	1085883a 	add	r2,r2,r2
   405d8:	1885883a 	add	r2,r3,r2
   405dc:	e0fffa17 	ldw	r3,-24(fp)
   405e0:	10c00015 	stw	r3,0(r2)
			x = delta;
   405e4:	e0bffd17 	ldw	r2,-12(fp)
   405e8:	e0bffa15 	stw	r2,-24(fp)

		}
		recon->diff_reset=0;
	}else
	{
		for (int i = 0; i <= recon->order; ++i) {
   405ec:	e0bffc17 	ldw	r2,-16(fp)
   405f0:	10800044 	addi	r2,r2,1
   405f4:	e0bffc15 	stw	r2,-16(fp)
   405f8:	e0bfff17 	ldw	r2,-4(fp)
   405fc:	10c00517 	ldw	r3,20(r2)
   40600:	e0bffc17 	ldw	r2,-16(fp)
   40604:	18bfe30e 	bge	r3,r2,40594 <__alt_data_end+0xfffd9494>
			recon->diff_buffer[i] = x;
			x = delta;
	//        }
		}
	}
    return recon->diff_buffer[recon->order];
   40608:	e0bfff17 	ldw	r2,-4(fp)
   4060c:	10800517 	ldw	r2,20(r2)
   40610:	e0ffff17 	ldw	r3,-4(fp)
   40614:	10800204 	addi	r2,r2,8
   40618:	1085883a 	add	r2,r2,r2
   4061c:	1085883a 	add	r2,r2,r2
   40620:	1885883a 	add	r2,r3,r2
   40624:	10c00017 	ldw	r3,0(r2)
   40628:	1805883a 	mov	r2,r3
}
   4062c:	e037883a 	mov	sp,fp
   40630:	dfc00117 	ldw	ra,4(sp)
   40634:	df000017 	ldw	fp,0(sp)
   40638:	dec00204 	addi	sp,sp,8
   4063c:	f800283a 	ret

00040640 <anti_diff_nth>:

float anti_diff_nth(float diffN,UnlimitedSamplerReconstructor *recon) {
   40640:	defff604 	addi	sp,sp,-40
   40644:	dfc00915 	stw	ra,36(sp)
   40648:	df000815 	stw	fp,32(sp)
   4064c:	dcc00715 	stw	r19,28(sp)
   40650:	dc800615 	stw	r18,24(sp)
   40654:	dc400515 	stw	r17,20(sp)
   40658:	dc000415 	stw	r16,16(sp)
   4065c:	df000804 	addi	fp,sp,32
   40660:	e13ffa15 	stw	r4,-24(fp)
   40664:	e17ffb15 	stw	r5,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   40668:	e0bffa17 	ldw	r2,-24(fp)
   4066c:	e0bff815 	stw	r2,-32(fp)

	for (int i = 0; i < recon->order-1; ++i) {
   40670:	e03ff915 	stw	zero,-28(fp)
   40674:	00005506 	br	407cc <anti_diff_nth+0x18c>
//		int idx = recon->res_index[i] % recon->J;
	    // 1. Integrate current level
	    x = recon->anti_diff_buffer[i] + x;
   40678:	e0fffb17 	ldw	r3,-20(fp)
   4067c:	e0bff917 	ldw	r2,-28(fp)
   40680:	10801b44 	addi	r2,r2,109
   40684:	1085883a 	add	r2,r2,r2
   40688:	1085883a 	add	r2,r2,r2
   4068c:	1885883a 	add	r2,r3,r2
   40690:	10c00017 	ldw	r3,0(r2)
   40694:	180b883a 	mov	r5,r3
   40698:	e13ff817 	ldw	r4,-32(fp)
   4069c:	0042fc40 	call	42fc4 <__addsf3>
   406a0:	1007883a 	mov	r3,r2
   406a4:	e0fff815 	stw	r3,-32(fp)
	    x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   406a8:	e0bffb17 	ldw	r2,-20(fp)
   406ac:	10c00017 	ldw	r3,0(r2)
   406b0:	1809883a 	mov	r4,r3
   406b4:	004692c0 	call	4692c <__extendsfdf2>
   406b8:	1011883a 	mov	r8,r2
   406bc:	1813883a 	mov	r9,r3
   406c0:	400d883a 	mov	r6,r8
   406c4:	480f883a 	mov	r7,r9
   406c8:	4009883a 	mov	r4,r8
   406cc:	480b883a 	mov	r5,r9
   406d0:	00444c40 	call	444c4 <__adddf3>
   406d4:	1009883a 	mov	r4,r2
   406d8:	180b883a 	mov	r5,r3
   406dc:	2021883a 	mov	r16,r4
   406e0:	2823883a 	mov	r17,r5
   406e4:	e13ff817 	ldw	r4,-32(fp)
   406e8:	004692c0 	call	4692c <__extendsfdf2>
   406ec:	1025883a 	mov	r18,r2
   406f0:	1827883a 	mov	r19,r3
   406f4:	e0bffb17 	ldw	r2,-20(fp)
   406f8:	10c00017 	ldw	r3,0(r2)
   406fc:	1809883a 	mov	r4,r3
   40700:	004692c0 	call	4692c <__extendsfdf2>
   40704:	1011883a 	mov	r8,r2
   40708:	1813883a 	mov	r9,r3
   4070c:	400d883a 	mov	r6,r8
   40710:	480f883a 	mov	r7,r9
   40714:	4009883a 	mov	r4,r8
   40718:	480b883a 	mov	r5,r9
   4071c:	00444c40 	call	444c4 <__adddf3>
   40720:	1009883a 	mov	r4,r2
   40724:	180b883a 	mov	r5,r3
   40728:	2005883a 	mov	r2,r4
   4072c:	2807883a 	mov	r3,r5
   40730:	100d883a 	mov	r6,r2
   40734:	180f883a 	mov	r7,r3
   40738:	9009883a 	mov	r4,r18
   4073c:	980b883a 	mov	r5,r19
   40740:	0044d700 	call	44d70 <__divdf3>
   40744:	1009883a 	mov	r4,r2
   40748:	180b883a 	mov	r5,r3
   4074c:	2005883a 	mov	r2,r4
   40750:	2807883a 	mov	r3,r5
   40754:	1009883a 	mov	r4,r2
   40758:	180b883a 	mov	r5,r3
   4075c:	0041e540 	call	41e54 <round>
   40760:	1009883a 	mov	r4,r2
   40764:	180b883a 	mov	r5,r3
   40768:	200d883a 	mov	r6,r4
   4076c:	280f883a 	mov	r7,r5
   40770:	8009883a 	mov	r4,r16
   40774:	880b883a 	mov	r5,r17
   40778:	00457bc0 	call	457bc <__muldf3>
   4077c:	1009883a 	mov	r4,r2
   40780:	180b883a 	mov	r5,r3
   40784:	2005883a 	mov	r2,r4
   40788:	2807883a 	mov	r3,r5
   4078c:	1009883a 	mov	r4,r2
   40790:	180b883a 	mov	r5,r3
   40794:	0046a3c0 	call	46a3c <__truncdfsf2>
   40798:	1007883a 	mov	r3,r2
   4079c:	e0fff815 	stw	r3,-32(fp)
//	    x+=2*recon->lam*(6*recon->max_in/recon->lam+1);
	    recon->anti_diff_buffer[i] = x;
   407a0:	e0fffb17 	ldw	r3,-20(fp)
   407a4:	e0bff917 	ldw	r2,-28(fp)
   407a8:	10801b44 	addi	r2,r2,109
   407ac:	1085883a 	add	r2,r2,r2
   407b0:	1085883a 	add	r2,r2,r2
   407b4:	1885883a 	add	r2,r3,r2
   407b8:	e0fff817 	ldw	r3,-32(fp)
   407bc:	10c00015 	stw	r3,0(r2)
}

float anti_diff_nth(float diffN,UnlimitedSamplerReconstructor *recon) {
	float x = diffN;  // the N-th difference input (Δⁿε[k])

	for (int i = 0; i < recon->order-1; ++i) {
   407c0:	e0bff917 	ldw	r2,-28(fp)
   407c4:	10800044 	addi	r2,r2,1
   407c8:	e0bff915 	stw	r2,-28(fp)
   407cc:	e0bffb17 	ldw	r2,-20(fp)
   407d0:	10800517 	ldw	r2,20(r2)
   407d4:	10bfffc4 	addi	r2,r2,-1
   407d8:	e0fff917 	ldw	r3,-28(fp)
   407dc:	18bfa616 	blt	r3,r2,40678 <__alt_data_end+0xfffd9578>
//	    printf("anti_diff_buffer at layer %d= %f.\n", i,recon->anti_diff_buffer[i] );

	}

	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   407e0:	e0bffb17 	ldw	r2,-20(fp)
   407e4:	10800517 	ldw	r2,20(r2)
   407e8:	10bfffc4 	addi	r2,r2,-1
   407ec:	e0fffb17 	ldw	r3,-20(fp)
   407f0:	10801b44 	addi	r2,r2,109
   407f4:	1085883a 	add	r2,r2,r2
   407f8:	1085883a 	add	r2,r2,r2
   407fc:	1885883a 	add	r2,r3,r2
   40800:	10c00017 	ldw	r3,0(r2)
   40804:	180b883a 	mov	r5,r3
   40808:	e13ff817 	ldw	r4,-32(fp)
   4080c:	0042fc40 	call	42fc4 <__addsf3>
   40810:	1007883a 	mov	r3,r2
   40814:	e0fff815 	stw	r3,-32(fp)
	recon->anti_diff_buffer[recon->order-1] = x;
   40818:	e0bffb17 	ldw	r2,-20(fp)
   4081c:	10800517 	ldw	r2,20(r2)
   40820:	10bfffc4 	addi	r2,r2,-1
   40824:	e0fffb17 	ldw	r3,-20(fp)
   40828:	10801b44 	addi	r2,r2,109
   4082c:	1085883a 	add	r2,r2,r2
   40830:	1085883a 	add	r2,r2,r2
   40834:	1885883a 	add	r2,r3,r2
   40838:	e0fff817 	ldw	r3,-32(fp)
   4083c:	10c00015 	stw	r3,0(r2)

	return x;  // final reconstructed sample g[k]
   40840:	e0bff817 	ldw	r2,-32(fp)
   40844:	1007883a 	mov	r3,r2
}
   40848:	1805883a 	mov	r2,r3
   4084c:	e6fffc04 	addi	sp,fp,-16
   40850:	dfc00517 	ldw	ra,20(sp)
   40854:	df000417 	ldw	fp,16(sp)
   40858:	dcc00317 	ldw	r19,12(sp)
   4085c:	dc800217 	ldw	r18,8(sp)
   40860:	dc400117 	ldw	r17,4(sp)
   40864:	dc000017 	ldw	r16,0(sp)
   40868:	dec00604 	addi	sp,sp,24
   4086c:	f800283a 	ret

00040870 <anti_diff_3rd>:
float anti_diff_3rd(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   40870:	defff204 	addi	sp,sp,-56
   40874:	dfc00d15 	stw	ra,52(sp)
   40878:	df000c15 	stw	fp,48(sp)
   4087c:	dcc00b15 	stw	r19,44(sp)
   40880:	dc800a15 	stw	r18,40(sp)
   40884:	dc400915 	stw	r17,36(sp)
   40888:	dc000815 	stw	r16,32(sp)
   4088c:	df000c04 	addi	fp,sp,48
   40890:	e13ff815 	stw	r4,-32(fp)
   40894:	e17ff915 	stw	r5,-28(fp)
   40898:	e1bffa15 	stw	r6,-24(fp)
   4089c:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   408a0:	e0bff817 	ldw	r2,-32(fp)
   408a4:	e0bff415 	stw	r2,-48(fp)

	x = recon->anti_diff_buffer[0] + x;
   408a8:	e0bff917 	ldw	r2,-28(fp)
   408ac:	10c06d17 	ldw	r3,436(r2)
   408b0:	180b883a 	mov	r5,r3
   408b4:	e13ff417 	ldw	r4,-48(fp)
   408b8:	0042fc40 	call	42fc4 <__addsf3>
   408bc:	1007883a 	mov	r3,r2
   408c0:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   408c4:	e0bff917 	ldw	r2,-28(fp)
   408c8:	10c00017 	ldw	r3,0(r2)
   408cc:	1809883a 	mov	r4,r3
   408d0:	004692c0 	call	4692c <__extendsfdf2>
   408d4:	1011883a 	mov	r8,r2
   408d8:	1813883a 	mov	r9,r3
   408dc:	400d883a 	mov	r6,r8
   408e0:	480f883a 	mov	r7,r9
   408e4:	4009883a 	mov	r4,r8
   408e8:	480b883a 	mov	r5,r9
   408ec:	00444c40 	call	444c4 <__adddf3>
   408f0:	1009883a 	mov	r4,r2
   408f4:	180b883a 	mov	r5,r3
   408f8:	2021883a 	mov	r16,r4
   408fc:	2823883a 	mov	r17,r5
   40900:	e13ff417 	ldw	r4,-48(fp)
   40904:	004692c0 	call	4692c <__extendsfdf2>
   40908:	1025883a 	mov	r18,r2
   4090c:	1827883a 	mov	r19,r3
   40910:	e0bff917 	ldw	r2,-28(fp)
   40914:	10c00017 	ldw	r3,0(r2)
   40918:	1809883a 	mov	r4,r3
   4091c:	004692c0 	call	4692c <__extendsfdf2>
   40920:	1011883a 	mov	r8,r2
   40924:	1813883a 	mov	r9,r3
   40928:	400d883a 	mov	r6,r8
   4092c:	480f883a 	mov	r7,r9
   40930:	4009883a 	mov	r4,r8
   40934:	480b883a 	mov	r5,r9
   40938:	00444c40 	call	444c4 <__adddf3>
   4093c:	1009883a 	mov	r4,r2
   40940:	180b883a 	mov	r5,r3
   40944:	2005883a 	mov	r2,r4
   40948:	2807883a 	mov	r3,r5
   4094c:	100d883a 	mov	r6,r2
   40950:	180f883a 	mov	r7,r3
   40954:	9009883a 	mov	r4,r18
   40958:	980b883a 	mov	r5,r19
   4095c:	0044d700 	call	44d70 <__divdf3>
   40960:	1009883a 	mov	r4,r2
   40964:	180b883a 	mov	r5,r3
   40968:	2005883a 	mov	r2,r4
   4096c:	2807883a 	mov	r3,r5
   40970:	1009883a 	mov	r4,r2
   40974:	180b883a 	mov	r5,r3
   40978:	0041e540 	call	41e54 <round>
   4097c:	1009883a 	mov	r4,r2
   40980:	180b883a 	mov	r5,r3
   40984:	200d883a 	mov	r6,r4
   40988:	280f883a 	mov	r7,r5
   4098c:	8009883a 	mov	r4,r16
   40990:	880b883a 	mov	r5,r17
   40994:	00457bc0 	call	457bc <__muldf3>
   40998:	1009883a 	mov	r4,r2
   4099c:	180b883a 	mov	r5,r3
   409a0:	2005883a 	mov	r2,r4
   409a4:	2807883a 	mov	r3,r5
   409a8:	1009883a 	mov	r4,r2
   409ac:	180b883a 	mov	r5,r3
   409b0:	0046a3c0 	call	46a3c <__truncdfsf2>
   409b4:	1007883a 	mov	r3,r2
   409b8:	e0fff415 	stw	r3,-48(fp)
	float avg1 = updateMovingAverage(ma1, x);
   409bc:	e17ff417 	ldw	r5,-48(fp)
   409c0:	e13ffa17 	ldw	r4,-24(fp)
   409c4:	00403040 	call	40304 <updateMovingAverage>
   409c8:	e0bff515 	stw	r2,-44(fp)

	recon->anti_diff_buffer[0] = x;
   409cc:	e0bff917 	ldw	r2,-28(fp)
   409d0:	e0fff417 	ldw	r3,-48(fp)
   409d4:	10c06d15 	stw	r3,436(r2)

	x=x-avg1;
   409d8:	e17ff517 	ldw	r5,-44(fp)
   409dc:	e13ff417 	ldw	r4,-48(fp)
   409e0:	0043e4c0 	call	43e4c <__subsf3>
   409e4:	1007883a 	mov	r3,r2
   409e8:	e0fff415 	stw	r3,-48(fp)

	x = recon->anti_diff_buffer[1] + x;
   409ec:	e0bff917 	ldw	r2,-28(fp)
   409f0:	10c06e17 	ldw	r3,440(r2)
   409f4:	180b883a 	mov	r5,r3
   409f8:	e13ff417 	ldw	r4,-48(fp)
   409fc:	0042fc40 	call	42fc4 <__addsf3>
   40a00:	1007883a 	mov	r3,r2
   40a04:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40a08:	e0bff917 	ldw	r2,-28(fp)
   40a0c:	10c00017 	ldw	r3,0(r2)
   40a10:	1809883a 	mov	r4,r3
   40a14:	004692c0 	call	4692c <__extendsfdf2>
   40a18:	1011883a 	mov	r8,r2
   40a1c:	1813883a 	mov	r9,r3
   40a20:	400d883a 	mov	r6,r8
   40a24:	480f883a 	mov	r7,r9
   40a28:	4009883a 	mov	r4,r8
   40a2c:	480b883a 	mov	r5,r9
   40a30:	00444c40 	call	444c4 <__adddf3>
   40a34:	1009883a 	mov	r4,r2
   40a38:	180b883a 	mov	r5,r3
   40a3c:	2021883a 	mov	r16,r4
   40a40:	2823883a 	mov	r17,r5
   40a44:	e13ff417 	ldw	r4,-48(fp)
   40a48:	004692c0 	call	4692c <__extendsfdf2>
   40a4c:	1025883a 	mov	r18,r2
   40a50:	1827883a 	mov	r19,r3
   40a54:	e0bff917 	ldw	r2,-28(fp)
   40a58:	10c00017 	ldw	r3,0(r2)
   40a5c:	1809883a 	mov	r4,r3
   40a60:	004692c0 	call	4692c <__extendsfdf2>
   40a64:	1011883a 	mov	r8,r2
   40a68:	1813883a 	mov	r9,r3
   40a6c:	400d883a 	mov	r6,r8
   40a70:	480f883a 	mov	r7,r9
   40a74:	4009883a 	mov	r4,r8
   40a78:	480b883a 	mov	r5,r9
   40a7c:	00444c40 	call	444c4 <__adddf3>
   40a80:	1009883a 	mov	r4,r2
   40a84:	180b883a 	mov	r5,r3
   40a88:	2005883a 	mov	r2,r4
   40a8c:	2807883a 	mov	r3,r5
   40a90:	100d883a 	mov	r6,r2
   40a94:	180f883a 	mov	r7,r3
   40a98:	9009883a 	mov	r4,r18
   40a9c:	980b883a 	mov	r5,r19
   40aa0:	0044d700 	call	44d70 <__divdf3>
   40aa4:	1009883a 	mov	r4,r2
   40aa8:	180b883a 	mov	r5,r3
   40aac:	2005883a 	mov	r2,r4
   40ab0:	2807883a 	mov	r3,r5
   40ab4:	1009883a 	mov	r4,r2
   40ab8:	180b883a 	mov	r5,r3
   40abc:	0041e540 	call	41e54 <round>
   40ac0:	1009883a 	mov	r4,r2
   40ac4:	180b883a 	mov	r5,r3
   40ac8:	200d883a 	mov	r6,r4
   40acc:	280f883a 	mov	r7,r5
   40ad0:	8009883a 	mov	r4,r16
   40ad4:	880b883a 	mov	r5,r17
   40ad8:	00457bc0 	call	457bc <__muldf3>
   40adc:	1009883a 	mov	r4,r2
   40ae0:	180b883a 	mov	r5,r3
   40ae4:	2005883a 	mov	r2,r4
   40ae8:	2807883a 	mov	r3,r5
   40aec:	1009883a 	mov	r4,r2
   40af0:	180b883a 	mov	r5,r3
   40af4:	0046a3c0 	call	46a3c <__truncdfsf2>
   40af8:	1007883a 	mov	r3,r2
   40afc:	e0fff415 	stw	r3,-48(fp)
	float avg2 = updateMovingAverage(ma2, x);
   40b00:	e17ff417 	ldw	r5,-48(fp)
   40b04:	e13ffb17 	ldw	r4,-20(fp)
   40b08:	00403040 	call	40304 <updateMovingAverage>
   40b0c:	e0bff615 	stw	r2,-40(fp)

	recon->anti_diff_buffer[1] = x;
   40b10:	e0bff917 	ldw	r2,-28(fp)
   40b14:	e0fff417 	ldw	r3,-48(fp)
   40b18:	10c06e15 	stw	r3,440(r2)
	x=x-avg2;
   40b1c:	e17ff617 	ldw	r5,-40(fp)
   40b20:	e13ff417 	ldw	r4,-48(fp)
   40b24:	0043e4c0 	call	43e4c <__subsf3>
   40b28:	1007883a 	mov	r3,r2
   40b2c:	e0fff415 	stw	r3,-48(fp)


	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   40b30:	e0bff917 	ldw	r2,-28(fp)
   40b34:	10800517 	ldw	r2,20(r2)
   40b38:	10bfffc4 	addi	r2,r2,-1
   40b3c:	e0fff917 	ldw	r3,-28(fp)
   40b40:	10801b44 	addi	r2,r2,109
   40b44:	1085883a 	add	r2,r2,r2
   40b48:	1085883a 	add	r2,r2,r2
   40b4c:	1885883a 	add	r2,r3,r2
   40b50:	10c00017 	ldw	r3,0(r2)
   40b54:	180b883a 	mov	r5,r3
   40b58:	e13ff417 	ldw	r4,-48(fp)
   40b5c:	0042fc40 	call	42fc4 <__addsf3>
   40b60:	1007883a 	mov	r3,r2
   40b64:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40b68:	e0bff917 	ldw	r2,-28(fp)
   40b6c:	10c00017 	ldw	r3,0(r2)
   40b70:	1809883a 	mov	r4,r3
   40b74:	004692c0 	call	4692c <__extendsfdf2>
   40b78:	1011883a 	mov	r8,r2
   40b7c:	1813883a 	mov	r9,r3
   40b80:	400d883a 	mov	r6,r8
   40b84:	480f883a 	mov	r7,r9
   40b88:	4009883a 	mov	r4,r8
   40b8c:	480b883a 	mov	r5,r9
   40b90:	00444c40 	call	444c4 <__adddf3>
   40b94:	1009883a 	mov	r4,r2
   40b98:	180b883a 	mov	r5,r3
   40b9c:	2021883a 	mov	r16,r4
   40ba0:	2823883a 	mov	r17,r5
   40ba4:	e13ff417 	ldw	r4,-48(fp)
   40ba8:	004692c0 	call	4692c <__extendsfdf2>
   40bac:	1025883a 	mov	r18,r2
   40bb0:	1827883a 	mov	r19,r3
   40bb4:	e0bff917 	ldw	r2,-28(fp)
   40bb8:	10c00017 	ldw	r3,0(r2)
   40bbc:	1809883a 	mov	r4,r3
   40bc0:	004692c0 	call	4692c <__extendsfdf2>
   40bc4:	1011883a 	mov	r8,r2
   40bc8:	1813883a 	mov	r9,r3
   40bcc:	400d883a 	mov	r6,r8
   40bd0:	480f883a 	mov	r7,r9
   40bd4:	4009883a 	mov	r4,r8
   40bd8:	480b883a 	mov	r5,r9
   40bdc:	00444c40 	call	444c4 <__adddf3>
   40be0:	1009883a 	mov	r4,r2
   40be4:	180b883a 	mov	r5,r3
   40be8:	2005883a 	mov	r2,r4
   40bec:	2807883a 	mov	r3,r5
   40bf0:	100d883a 	mov	r6,r2
   40bf4:	180f883a 	mov	r7,r3
   40bf8:	9009883a 	mov	r4,r18
   40bfc:	980b883a 	mov	r5,r19
   40c00:	0044d700 	call	44d70 <__divdf3>
   40c04:	1009883a 	mov	r4,r2
   40c08:	180b883a 	mov	r5,r3
   40c0c:	2005883a 	mov	r2,r4
   40c10:	2807883a 	mov	r3,r5
   40c14:	1009883a 	mov	r4,r2
   40c18:	180b883a 	mov	r5,r3
   40c1c:	0041e540 	call	41e54 <round>
   40c20:	1009883a 	mov	r4,r2
   40c24:	180b883a 	mov	r5,r3
   40c28:	200d883a 	mov	r6,r4
   40c2c:	280f883a 	mov	r7,r5
   40c30:	8009883a 	mov	r4,r16
   40c34:	880b883a 	mov	r5,r17
   40c38:	00457bc0 	call	457bc <__muldf3>
   40c3c:	1009883a 	mov	r4,r2
   40c40:	180b883a 	mov	r5,r3
   40c44:	2005883a 	mov	r2,r4
   40c48:	2807883a 	mov	r3,r5
   40c4c:	1009883a 	mov	r4,r2
   40c50:	180b883a 	mov	r5,r3
   40c54:	0046a3c0 	call	46a3c <__truncdfsf2>
   40c58:	1007883a 	mov	r3,r2
   40c5c:	e0fff415 	stw	r3,-48(fp)

	recon->anti_diff_buffer[recon->order-1] = x;
   40c60:	e0bff917 	ldw	r2,-28(fp)
   40c64:	10800517 	ldw	r2,20(r2)
   40c68:	10bfffc4 	addi	r2,r2,-1
   40c6c:	e0fff917 	ldw	r3,-28(fp)
   40c70:	10801b44 	addi	r2,r2,109
   40c74:	1085883a 	add	r2,r2,r2
   40c78:	1085883a 	add	r2,r2,r2
   40c7c:	1885883a 	add	r2,r3,r2
   40c80:	e0fff417 	ldw	r3,-48(fp)
   40c84:	10c00015 	stw	r3,0(r2)
	float avg3 = updateMovingAverage(ma3, x);
   40c88:	e17ff417 	ldw	r5,-48(fp)
   40c8c:	e1000217 	ldw	r4,8(fp)
   40c90:	00403040 	call	40304 <updateMovingAverage>
   40c94:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg3;
   40c98:	e17ff717 	ldw	r5,-36(fp)
   40c9c:	e13ff417 	ldw	r4,-48(fp)
   40ca0:	0043e4c0 	call	43e4c <__subsf3>
   40ca4:	1007883a 	mov	r3,r2
   40ca8:	e0fff415 	stw	r3,-48(fp)

	return x;  // final reconstructed sample g[k]
   40cac:	e0bff417 	ldw	r2,-48(fp)
   40cb0:	1007883a 	mov	r3,r2
}
   40cb4:	1805883a 	mov	r2,r3
   40cb8:	e6fffc04 	addi	sp,fp,-16
   40cbc:	dfc00517 	ldw	ra,20(sp)
   40cc0:	df000417 	ldw	fp,16(sp)
   40cc4:	dcc00317 	ldw	r19,12(sp)
   40cc8:	dc800217 	ldw	r18,8(sp)
   40ccc:	dc400117 	ldw	r17,4(sp)
   40cd0:	dc000017 	ldw	r16,0(sp)
   40cd4:	dec00604 	addi	sp,sp,24
   40cd8:	f800283a 	ret

00040cdc <anti_diff_2nd>:
float anti_diff_2nd(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   40cdc:	defff304 	addi	sp,sp,-52
   40ce0:	dfc00c15 	stw	ra,48(sp)
   40ce4:	df000b15 	stw	fp,44(sp)
   40ce8:	dcc00a15 	stw	r19,40(sp)
   40cec:	dc800915 	stw	r18,36(sp)
   40cf0:	dc400815 	stw	r17,32(sp)
   40cf4:	dc000715 	stw	r16,28(sp)
   40cf8:	df000b04 	addi	fp,sp,44
   40cfc:	e13ff815 	stw	r4,-32(fp)
   40d00:	e17ff915 	stw	r5,-28(fp)
   40d04:	e1bffa15 	stw	r6,-24(fp)
   40d08:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   40d0c:	e0bff817 	ldw	r2,-32(fp)
   40d10:	e0bff515 	stw	r2,-44(fp)

	x = recon->anti_diff_buffer[0] + x;
   40d14:	e0bff917 	ldw	r2,-28(fp)
   40d18:	10c06d17 	ldw	r3,436(r2)
   40d1c:	180b883a 	mov	r5,r3
   40d20:	e13ff517 	ldw	r4,-44(fp)
   40d24:	0042fc40 	call	42fc4 <__addsf3>
   40d28:	1007883a 	mov	r3,r2
   40d2c:	e0fff515 	stw	r3,-44(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40d30:	e0bff917 	ldw	r2,-28(fp)
   40d34:	10c00017 	ldw	r3,0(r2)
   40d38:	1809883a 	mov	r4,r3
   40d3c:	004692c0 	call	4692c <__extendsfdf2>
   40d40:	1011883a 	mov	r8,r2
   40d44:	1813883a 	mov	r9,r3
   40d48:	400d883a 	mov	r6,r8
   40d4c:	480f883a 	mov	r7,r9
   40d50:	4009883a 	mov	r4,r8
   40d54:	480b883a 	mov	r5,r9
   40d58:	00444c40 	call	444c4 <__adddf3>
   40d5c:	1009883a 	mov	r4,r2
   40d60:	180b883a 	mov	r5,r3
   40d64:	2021883a 	mov	r16,r4
   40d68:	2823883a 	mov	r17,r5
   40d6c:	e13ff517 	ldw	r4,-44(fp)
   40d70:	004692c0 	call	4692c <__extendsfdf2>
   40d74:	1025883a 	mov	r18,r2
   40d78:	1827883a 	mov	r19,r3
   40d7c:	e0bff917 	ldw	r2,-28(fp)
   40d80:	10c00017 	ldw	r3,0(r2)
   40d84:	1809883a 	mov	r4,r3
   40d88:	004692c0 	call	4692c <__extendsfdf2>
   40d8c:	1011883a 	mov	r8,r2
   40d90:	1813883a 	mov	r9,r3
   40d94:	400d883a 	mov	r6,r8
   40d98:	480f883a 	mov	r7,r9
   40d9c:	4009883a 	mov	r4,r8
   40da0:	480b883a 	mov	r5,r9
   40da4:	00444c40 	call	444c4 <__adddf3>
   40da8:	1009883a 	mov	r4,r2
   40dac:	180b883a 	mov	r5,r3
   40db0:	2005883a 	mov	r2,r4
   40db4:	2807883a 	mov	r3,r5
   40db8:	100d883a 	mov	r6,r2
   40dbc:	180f883a 	mov	r7,r3
   40dc0:	9009883a 	mov	r4,r18
   40dc4:	980b883a 	mov	r5,r19
   40dc8:	0044d700 	call	44d70 <__divdf3>
   40dcc:	1009883a 	mov	r4,r2
   40dd0:	180b883a 	mov	r5,r3
   40dd4:	2005883a 	mov	r2,r4
   40dd8:	2807883a 	mov	r3,r5
   40ddc:	1009883a 	mov	r4,r2
   40de0:	180b883a 	mov	r5,r3
   40de4:	0041e540 	call	41e54 <round>
   40de8:	1009883a 	mov	r4,r2
   40dec:	180b883a 	mov	r5,r3
   40df0:	200d883a 	mov	r6,r4
   40df4:	280f883a 	mov	r7,r5
   40df8:	8009883a 	mov	r4,r16
   40dfc:	880b883a 	mov	r5,r17
   40e00:	00457bc0 	call	457bc <__muldf3>
   40e04:	1009883a 	mov	r4,r2
   40e08:	180b883a 	mov	r5,r3
   40e0c:	2005883a 	mov	r2,r4
   40e10:	2807883a 	mov	r3,r5
   40e14:	1009883a 	mov	r4,r2
   40e18:	180b883a 	mov	r5,r3
   40e1c:	0046a3c0 	call	46a3c <__truncdfsf2>
   40e20:	1007883a 	mov	r3,r2
   40e24:	e0fff515 	stw	r3,-44(fp)
	float avg1 = updateMovingAverage(ma1, x);
   40e28:	e17ff517 	ldw	r5,-44(fp)
   40e2c:	e13ffa17 	ldw	r4,-24(fp)
   40e30:	00403040 	call	40304 <updateMovingAverage>
   40e34:	e0bff615 	stw	r2,-40(fp)

	recon->anti_diff_buffer[0] = x;
   40e38:	e0bff917 	ldw	r2,-28(fp)
   40e3c:	e0fff517 	ldw	r3,-44(fp)
   40e40:	10c06d15 	stw	r3,436(r2)
	x=x-avg1;
   40e44:	e17ff617 	ldw	r5,-40(fp)
   40e48:	e13ff517 	ldw	r4,-44(fp)
   40e4c:	0043e4c0 	call	43e4c <__subsf3>
   40e50:	1007883a 	mov	r3,r2
   40e54:	e0fff515 	stw	r3,-44(fp)



	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   40e58:	e0bff917 	ldw	r2,-28(fp)
   40e5c:	10800517 	ldw	r2,20(r2)
   40e60:	10bfffc4 	addi	r2,r2,-1
   40e64:	e0fff917 	ldw	r3,-28(fp)
   40e68:	10801b44 	addi	r2,r2,109
   40e6c:	1085883a 	add	r2,r2,r2
   40e70:	1085883a 	add	r2,r2,r2
   40e74:	1885883a 	add	r2,r3,r2
   40e78:	10c00017 	ldw	r3,0(r2)
   40e7c:	180b883a 	mov	r5,r3
   40e80:	e13ff517 	ldw	r4,-44(fp)
   40e84:	0042fc40 	call	42fc4 <__addsf3>
   40e88:	1007883a 	mov	r3,r2
   40e8c:	e0fff515 	stw	r3,-44(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40e90:	e0bff917 	ldw	r2,-28(fp)
   40e94:	10c00017 	ldw	r3,0(r2)
   40e98:	1809883a 	mov	r4,r3
   40e9c:	004692c0 	call	4692c <__extendsfdf2>
   40ea0:	1011883a 	mov	r8,r2
   40ea4:	1813883a 	mov	r9,r3
   40ea8:	400d883a 	mov	r6,r8
   40eac:	480f883a 	mov	r7,r9
   40eb0:	4009883a 	mov	r4,r8
   40eb4:	480b883a 	mov	r5,r9
   40eb8:	00444c40 	call	444c4 <__adddf3>
   40ebc:	1009883a 	mov	r4,r2
   40ec0:	180b883a 	mov	r5,r3
   40ec4:	2021883a 	mov	r16,r4
   40ec8:	2823883a 	mov	r17,r5
   40ecc:	e13ff517 	ldw	r4,-44(fp)
   40ed0:	004692c0 	call	4692c <__extendsfdf2>
   40ed4:	1025883a 	mov	r18,r2
   40ed8:	1827883a 	mov	r19,r3
   40edc:	e0bff917 	ldw	r2,-28(fp)
   40ee0:	10c00017 	ldw	r3,0(r2)
   40ee4:	1809883a 	mov	r4,r3
   40ee8:	004692c0 	call	4692c <__extendsfdf2>
   40eec:	1011883a 	mov	r8,r2
   40ef0:	1813883a 	mov	r9,r3
   40ef4:	400d883a 	mov	r6,r8
   40ef8:	480f883a 	mov	r7,r9
   40efc:	4009883a 	mov	r4,r8
   40f00:	480b883a 	mov	r5,r9
   40f04:	00444c40 	call	444c4 <__adddf3>
   40f08:	1009883a 	mov	r4,r2
   40f0c:	180b883a 	mov	r5,r3
   40f10:	2005883a 	mov	r2,r4
   40f14:	2807883a 	mov	r3,r5
   40f18:	100d883a 	mov	r6,r2
   40f1c:	180f883a 	mov	r7,r3
   40f20:	9009883a 	mov	r4,r18
   40f24:	980b883a 	mov	r5,r19
   40f28:	0044d700 	call	44d70 <__divdf3>
   40f2c:	1009883a 	mov	r4,r2
   40f30:	180b883a 	mov	r5,r3
   40f34:	2005883a 	mov	r2,r4
   40f38:	2807883a 	mov	r3,r5
   40f3c:	1009883a 	mov	r4,r2
   40f40:	180b883a 	mov	r5,r3
   40f44:	0041e540 	call	41e54 <round>
   40f48:	1009883a 	mov	r4,r2
   40f4c:	180b883a 	mov	r5,r3
   40f50:	200d883a 	mov	r6,r4
   40f54:	280f883a 	mov	r7,r5
   40f58:	8009883a 	mov	r4,r16
   40f5c:	880b883a 	mov	r5,r17
   40f60:	00457bc0 	call	457bc <__muldf3>
   40f64:	1009883a 	mov	r4,r2
   40f68:	180b883a 	mov	r5,r3
   40f6c:	2005883a 	mov	r2,r4
   40f70:	2807883a 	mov	r3,r5
   40f74:	1009883a 	mov	r4,r2
   40f78:	180b883a 	mov	r5,r3
   40f7c:	0046a3c0 	call	46a3c <__truncdfsf2>
   40f80:	1007883a 	mov	r3,r2
   40f84:	e0fff515 	stw	r3,-44(fp)

	recon->anti_diff_buffer[recon->order-1] = x;
   40f88:	e0bff917 	ldw	r2,-28(fp)
   40f8c:	10800517 	ldw	r2,20(r2)
   40f90:	10bfffc4 	addi	r2,r2,-1
   40f94:	e0fff917 	ldw	r3,-28(fp)
   40f98:	10801b44 	addi	r2,r2,109
   40f9c:	1085883a 	add	r2,r2,r2
   40fa0:	1085883a 	add	r2,r2,r2
   40fa4:	1885883a 	add	r2,r3,r2
   40fa8:	e0fff517 	ldw	r3,-44(fp)
   40fac:	10c00015 	stw	r3,0(r2)
	float avg2 = updateMovingAverage(ma2, x);
   40fb0:	e17ff517 	ldw	r5,-44(fp)
   40fb4:	e13ffb17 	ldw	r4,-20(fp)
   40fb8:	00403040 	call	40304 <updateMovingAverage>
   40fbc:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg2;
   40fc0:	e17ff717 	ldw	r5,-36(fp)
   40fc4:	e13ff517 	ldw	r4,-44(fp)
   40fc8:	0043e4c0 	call	43e4c <__subsf3>
   40fcc:	1007883a 	mov	r3,r2
   40fd0:	e0fff515 	stw	r3,-44(fp)


	return x;  // final reconstructed sample g[k]
   40fd4:	e0bff517 	ldw	r2,-44(fp)
   40fd8:	1007883a 	mov	r3,r2
}
   40fdc:	1805883a 	mov	r2,r3
   40fe0:	e6fffc04 	addi	sp,fp,-16
   40fe4:	dfc00517 	ldw	ra,20(sp)
   40fe8:	df000417 	ldw	fp,16(sp)
   40fec:	dcc00317 	ldw	r19,12(sp)
   40ff0:	dc800217 	ldw	r18,8(sp)
   40ff4:	dc400117 	ldw	r17,4(sp)
   40ff8:	dc000017 	ldw	r16,0(sp)
   40ffc:	dec00604 	addi	sp,sp,24
   41000:	f800283a 	ret

00041004 <anti_diff_1st>:
float anti_diff_1st(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   41004:	defff404 	addi	sp,sp,-48
   41008:	dfc00b15 	stw	ra,44(sp)
   4100c:	df000a15 	stw	fp,40(sp)
   41010:	dcc00915 	stw	r19,36(sp)
   41014:	dc800815 	stw	r18,32(sp)
   41018:	dc400715 	stw	r17,28(sp)
   4101c:	dc000615 	stw	r16,24(sp)
   41020:	df000a04 	addi	fp,sp,40
   41024:	e13ff815 	stw	r4,-32(fp)
   41028:	e17ff915 	stw	r5,-28(fp)
   4102c:	e1bffa15 	stw	r6,-24(fp)
   41030:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   41034:	e0bff817 	ldw	r2,-32(fp)
   41038:	e0bff615 	stw	r2,-40(fp)

	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   4103c:	e0bff917 	ldw	r2,-28(fp)
   41040:	10800517 	ldw	r2,20(r2)
   41044:	10bfffc4 	addi	r2,r2,-1
   41048:	e0fff917 	ldw	r3,-28(fp)
   4104c:	10801b44 	addi	r2,r2,109
   41050:	1085883a 	add	r2,r2,r2
   41054:	1085883a 	add	r2,r2,r2
   41058:	1885883a 	add	r2,r3,r2
   4105c:	10c00017 	ldw	r3,0(r2)
   41060:	180b883a 	mov	r5,r3
   41064:	e13ff617 	ldw	r4,-40(fp)
   41068:	0042fc40 	call	42fc4 <__addsf3>
   4106c:	1007883a 	mov	r3,r2
   41070:	e0fff615 	stw	r3,-40(fp)


	recon->anti_diff_buffer[recon->order-1] = x;
   41074:	e0bff917 	ldw	r2,-28(fp)
   41078:	10800517 	ldw	r2,20(r2)
   4107c:	10bfffc4 	addi	r2,r2,-1
   41080:	e0fff917 	ldw	r3,-28(fp)
   41084:	10801b44 	addi	r2,r2,109
   41088:	1085883a 	add	r2,r2,r2
   4108c:	1085883a 	add	r2,r2,r2
   41090:	1885883a 	add	r2,r3,r2
   41094:	e0fff617 	ldw	r3,-40(fp)
   41098:	10c00015 	stw	r3,0(r2)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   4109c:	e0bff917 	ldw	r2,-28(fp)
   410a0:	10c00017 	ldw	r3,0(r2)
   410a4:	1809883a 	mov	r4,r3
   410a8:	004692c0 	call	4692c <__extendsfdf2>
   410ac:	1011883a 	mov	r8,r2
   410b0:	1813883a 	mov	r9,r3
   410b4:	400d883a 	mov	r6,r8
   410b8:	480f883a 	mov	r7,r9
   410bc:	4009883a 	mov	r4,r8
   410c0:	480b883a 	mov	r5,r9
   410c4:	00444c40 	call	444c4 <__adddf3>
   410c8:	1009883a 	mov	r4,r2
   410cc:	180b883a 	mov	r5,r3
   410d0:	2021883a 	mov	r16,r4
   410d4:	2823883a 	mov	r17,r5
   410d8:	e13ff617 	ldw	r4,-40(fp)
   410dc:	004692c0 	call	4692c <__extendsfdf2>
   410e0:	1025883a 	mov	r18,r2
   410e4:	1827883a 	mov	r19,r3
   410e8:	e0bff917 	ldw	r2,-28(fp)
   410ec:	10c00017 	ldw	r3,0(r2)
   410f0:	1809883a 	mov	r4,r3
   410f4:	004692c0 	call	4692c <__extendsfdf2>
   410f8:	1011883a 	mov	r8,r2
   410fc:	1813883a 	mov	r9,r3
   41100:	400d883a 	mov	r6,r8
   41104:	480f883a 	mov	r7,r9
   41108:	4009883a 	mov	r4,r8
   4110c:	480b883a 	mov	r5,r9
   41110:	00444c40 	call	444c4 <__adddf3>
   41114:	1009883a 	mov	r4,r2
   41118:	180b883a 	mov	r5,r3
   4111c:	2005883a 	mov	r2,r4
   41120:	2807883a 	mov	r3,r5
   41124:	100d883a 	mov	r6,r2
   41128:	180f883a 	mov	r7,r3
   4112c:	9009883a 	mov	r4,r18
   41130:	980b883a 	mov	r5,r19
   41134:	0044d700 	call	44d70 <__divdf3>
   41138:	1009883a 	mov	r4,r2
   4113c:	180b883a 	mov	r5,r3
   41140:	2005883a 	mov	r2,r4
   41144:	2807883a 	mov	r3,r5
   41148:	1009883a 	mov	r4,r2
   4114c:	180b883a 	mov	r5,r3
   41150:	0041e540 	call	41e54 <round>
   41154:	1009883a 	mov	r4,r2
   41158:	180b883a 	mov	r5,r3
   4115c:	200d883a 	mov	r6,r4
   41160:	280f883a 	mov	r7,r5
   41164:	8009883a 	mov	r4,r16
   41168:	880b883a 	mov	r5,r17
   4116c:	00457bc0 	call	457bc <__muldf3>
   41170:	1009883a 	mov	r4,r2
   41174:	180b883a 	mov	r5,r3
   41178:	2005883a 	mov	r2,r4
   4117c:	2807883a 	mov	r3,r5
   41180:	1009883a 	mov	r4,r2
   41184:	180b883a 	mov	r5,r3
   41188:	0046a3c0 	call	46a3c <__truncdfsf2>
   4118c:	1007883a 	mov	r3,r2
   41190:	e0fff615 	stw	r3,-40(fp)
	float avg2 = updateMovingAverage(ma2, x);
   41194:	e17ff617 	ldw	r5,-40(fp)
   41198:	e13ffb17 	ldw	r4,-20(fp)
   4119c:	00403040 	call	40304 <updateMovingAverage>
   411a0:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg2;
   411a4:	e17ff717 	ldw	r5,-36(fp)
   411a8:	e13ff617 	ldw	r4,-40(fp)
   411ac:	0043e4c0 	call	43e4c <__subsf3>
   411b0:	1007883a 	mov	r3,r2
   411b4:	e0fff615 	stw	r3,-40(fp)


	return x;  // final reconstructed sample g[k]
   411b8:	e0bff617 	ldw	r2,-40(fp)
   411bc:	1007883a 	mov	r3,r2
}
   411c0:	1805883a 	mov	r2,r3
   411c4:	e6fffc04 	addi	sp,fp,-16
   411c8:	dfc00517 	ldw	ra,20(sp)
   411cc:	df000417 	ldw	fp,16(sp)
   411d0:	dcc00317 	ldw	r19,12(sp)
   411d4:	dc800217 	ldw	r18,8(sp)
   411d8:	dc400117 	ldw	r17,4(sp)
   411dc:	dc000017 	ldw	r16,0(sp)
   411e0:	dec00604 	addi	sp,sp,24
   411e4:	f800283a 	ret

000411e8 <calc_order>:

int calc_order(UnlimitedSamplerReconstructor *recon) {
   411e8:	defff704 	addi	sp,sp,-36
   411ec:	dfc00815 	stw	ra,32(sp)
   411f0:	df000715 	stw	fp,28(sp)
   411f4:	dc400615 	stw	r17,24(sp)
   411f8:	dc000515 	stw	r16,20(sp)
   411fc:	df000704 	addi	fp,sp,28
   41200:	e13ffd15 	stw	r4,-12(fp)
	float denominator = recon->sampling_interval * M_PI * M_E;
   41204:	e0bffd17 	ldw	r2,-12(fp)
   41208:	10c0d217 	ldw	r3,840(r2)
   4120c:	1809883a 	mov	r4,r3
   41210:	004692c0 	call	4692c <__extendsfdf2>
   41214:	1011883a 	mov	r8,r2
   41218:	1813883a 	mov	r9,r3
   4121c:	01951134 	movhi	r6,21572
   41220:	318b4604 	addi	r6,r6,11544
   41224:	01d00274 	movhi	r7,16393
   41228:	39c87ec4 	addi	r7,r7,8699
   4122c:	4009883a 	mov	r4,r8
   41230:	480b883a 	mov	r5,r9
   41234:	00457bc0 	call	457bc <__muldf3>
   41238:	1009883a 	mov	r4,r2
   4123c:	180b883a 	mov	r5,r3
   41240:	2005883a 	mov	r2,r4
   41244:	2807883a 	mov	r3,r5
   41248:	01a2c534 	movhi	r6,35604
   4124c:	3195da44 	addi	r6,r6,22377
   41250:	01d001b4 	movhi	r7,16390
   41254:	39efc284 	addi	r7,r7,-16630
   41258:	1009883a 	mov	r4,r2
   4125c:	180b883a 	mov	r5,r3
   41260:	00457bc0 	call	457bc <__muldf3>
   41264:	1009883a 	mov	r4,r2
   41268:	180b883a 	mov	r5,r3
   4126c:	2005883a 	mov	r2,r4
   41270:	2807883a 	mov	r3,r5
   41274:	1009883a 	mov	r4,r2
   41278:	180b883a 	mov	r5,r3
   4127c:	0046a3c0 	call	46a3c <__truncdfsf2>
   41280:	1007883a 	mov	r3,r2
   41284:	e0fffa15 	stw	r3,-24(fp)

    if (recon->lam <= 0 || recon->max_in <= 0 || denominator <= 0) {
   41288:	e0bffd17 	ldw	r2,-12(fp)
   4128c:	10c00017 	ldw	r3,0(r2)
   41290:	000b883a 	mov	r5,zero
   41294:	1809883a 	mov	r4,r3
   41298:	00439880 	call	43988 <__lesf2>
   4129c:	00800a0e 	bge	zero,r2,412c8 <calc_order+0xe0>
   412a0:	e0bffd17 	ldw	r2,-12(fp)
   412a4:	10c00417 	ldw	r3,16(r2)
   412a8:	000b883a 	mov	r5,zero
   412ac:	1809883a 	mov	r4,r3
   412b0:	00439880 	call	43988 <__lesf2>
   412b4:	0080040e 	bge	zero,r2,412c8 <calc_order+0xe0>
   412b8:	000b883a 	mov	r5,zero
   412bc:	e13ffa17 	ldw	r4,-24(fp)
   412c0:	00439880 	call	43988 <__lesf2>
   412c4:	00800216 	blt	zero,r2,412d0 <calc_order+0xe8>
        // Handle invalid input
        return 1;  // or any other error signal
   412c8:	00800044 	movi	r2,1
   412cc:	00004c06 	br	41400 <calc_order+0x218>
    }

    float ratio = log(recon->lam) - log(recon->max_in);
   412d0:	e0bffd17 	ldw	r2,-12(fp)
   412d4:	10c00017 	ldw	r3,0(r2)
   412d8:	1809883a 	mov	r4,r3
   412dc:	004692c0 	call	4692c <__extendsfdf2>
   412e0:	100b883a 	mov	r5,r2
   412e4:	180d883a 	mov	r6,r3
   412e8:	2809883a 	mov	r4,r5
   412ec:	300b883a 	mov	r5,r6
   412f0:	00421300 	call	42130 <log>
   412f4:	1021883a 	mov	r16,r2
   412f8:	1823883a 	mov	r17,r3
   412fc:	e0bffd17 	ldw	r2,-12(fp)
   41300:	10c00417 	ldw	r3,16(r2)
   41304:	1809883a 	mov	r4,r3
   41308:	004692c0 	call	4692c <__extendsfdf2>
   4130c:	100b883a 	mov	r5,r2
   41310:	180d883a 	mov	r6,r3
   41314:	2809883a 	mov	r4,r5
   41318:	300b883a 	mov	r5,r6
   4131c:	00421300 	call	42130 <log>
   41320:	1009883a 	mov	r4,r2
   41324:	180b883a 	mov	r5,r3
   41328:	200d883a 	mov	r6,r4
   4132c:	280f883a 	mov	r7,r5
   41330:	8009883a 	mov	r4,r16
   41334:	880b883a 	mov	r5,r17
   41338:	0045ed40 	call	45ed4 <__subdf3>
   4133c:	1009883a 	mov	r4,r2
   41340:	180b883a 	mov	r5,r3
   41344:	2005883a 	mov	r2,r4
   41348:	2807883a 	mov	r3,r5
   4134c:	1009883a 	mov	r4,r2
   41350:	180b883a 	mov	r5,r3
   41354:	0046a3c0 	call	46a3c <__truncdfsf2>
   41358:	1007883a 	mov	r3,r2
   4135c:	e0fffb15 	stw	r3,-20(fp)
    float denom_log = log(denominator);
   41360:	e13ffa17 	ldw	r4,-24(fp)
   41364:	004692c0 	call	4692c <__extendsfdf2>
   41368:	100b883a 	mov	r5,r2
   4136c:	180d883a 	mov	r6,r3
   41370:	2809883a 	mov	r4,r5
   41374:	300b883a 	mov	r5,r6
   41378:	00421300 	call	42130 <log>
   4137c:	100b883a 	mov	r5,r2
   41380:	180d883a 	mov	r6,r3
   41384:	2809883a 	mov	r4,r5
   41388:	300b883a 	mov	r5,r6
   4138c:	0046a3c0 	call	46a3c <__truncdfsf2>
   41390:	1007883a 	mov	r3,r2
   41394:	e0fffc15 	stw	r3,-16(fp)
    int N = (int)ceil(ratio / denom_log);
   41398:	e17ffc17 	ldw	r5,-16(fp)
   4139c:	e13ffb17 	ldw	r4,-20(fp)
   413a0:	004348c0 	call	4348c <__divsf3>
   413a4:	1007883a 	mov	r3,r2
   413a8:	1805883a 	mov	r2,r3
   413ac:	1009883a 	mov	r4,r2
   413b0:	004692c0 	call	4692c <__extendsfdf2>
   413b4:	100b883a 	mov	r5,r2
   413b8:	180d883a 	mov	r6,r3
   413bc:	2809883a 	mov	r4,r5
   413c0:	300b883a 	mov	r5,r6
   413c4:	0041c740 	call	41c74 <ceil>
   413c8:	100b883a 	mov	r5,r2
   413cc:	180d883a 	mov	r6,r3
   413d0:	2809883a 	mov	r4,r5
   413d4:	300b883a 	mov	r5,r6
   413d8:	00467d00 	call	467d0 <__fixdfsi>
   413dc:	e0bff915 	stw	r2,-28(fp)
//    return N;
    if (N> MAX_ORDER){
   413e0:	e0bff917 	ldw	r2,-28(fp)
   413e4:	10801950 	cmplti	r2,r2,101
   413e8:	1000021e 	bne	r2,zero,413f4 <calc_order+0x20c>
    	N=MAX_ORDER;
   413ec:	00801904 	movi	r2,100
   413f0:	e0bff915 	stw	r2,-28(fp)
    }
    return N > 1 ? N : 1;
   413f4:	e0bff917 	ldw	r2,-28(fp)
   413f8:	00800116 	blt	zero,r2,41400 <calc_order+0x218>
   413fc:	00800044 	movi	r2,1
}
   41400:	e6fffe04 	addi	sp,fp,-8
   41404:	dfc00317 	ldw	ra,12(sp)
   41408:	df000217 	ldw	fp,8(sp)
   4140c:	dc400117 	ldw	r17,4(sp)
   41410:	dc000017 	ldw	r16,0(sp)
   41414:	dec00404 	addi	sp,sp,16
   41418:	f800283a 	ret

0004141c <modulo>:
/* Centered modulo function into [-λ, λ) */
float modulo(float x, float lam) {
   4141c:	defff804 	addi	sp,sp,-32
   41420:	dfc00715 	stw	ra,28(sp)
   41424:	df000615 	stw	fp,24(sp)
   41428:	dc400515 	stw	r17,20(sp)
   4142c:	dc000415 	stw	r16,16(sp)
   41430:	df000604 	addi	fp,sp,24
   41434:	e13ffc15 	stw	r4,-16(fp)
   41438:	e17ffd15 	stw	r5,-12(fp)
    float two_lam = 2.0 * lam;
   4143c:	e0bffd17 	ldw	r2,-12(fp)
   41440:	100b883a 	mov	r5,r2
   41444:	1009883a 	mov	r4,r2
   41448:	0042fc40 	call	42fc4 <__addsf3>
   4144c:	1007883a 	mov	r3,r2
   41450:	e0fffb15 	stw	r3,-20(fp)
    float mod = fmod(x + lam, two_lam);
   41454:	e17ffd17 	ldw	r5,-12(fp)
   41458:	e13ffc17 	ldw	r4,-16(fp)
   4145c:	0042fc40 	call	42fc4 <__addsf3>
   41460:	1007883a 	mov	r3,r2
   41464:	1805883a 	mov	r2,r3
   41468:	1009883a 	mov	r4,r2
   4146c:	004692c0 	call	4692c <__extendsfdf2>
   41470:	1021883a 	mov	r16,r2
   41474:	1823883a 	mov	r17,r3
   41478:	e13ffb17 	ldw	r4,-20(fp)
   4147c:	004692c0 	call	4692c <__extendsfdf2>
   41480:	1009883a 	mov	r4,r2
   41484:	180b883a 	mov	r5,r3
   41488:	200d883a 	mov	r6,r4
   4148c:	280f883a 	mov	r7,r5
   41490:	8009883a 	mov	r4,r16
   41494:	880b883a 	mov	r5,r17
   41498:	0041fd80 	call	41fd8 <fmod>
   4149c:	100b883a 	mov	r5,r2
   414a0:	180d883a 	mov	r6,r3
   414a4:	2809883a 	mov	r4,r5
   414a8:	300b883a 	mov	r5,r6
   414ac:	0046a3c0 	call	46a3c <__truncdfsf2>
   414b0:	1007883a 	mov	r3,r2
   414b4:	e0fffa15 	stw	r3,-24(fp)
    if (mod < 0) mod += two_lam;
   414b8:	000b883a 	mov	r5,zero
   414bc:	e13ffa17 	ldw	r4,-24(fp)
   414c0:	00439880 	call	43988 <__lesf2>
   414c4:	1000050e 	bge	r2,zero,414dc <modulo+0xc0>
   414c8:	e17ffb17 	ldw	r5,-20(fp)
   414cc:	e13ffa17 	ldw	r4,-24(fp)
   414d0:	0042fc40 	call	42fc4 <__addsf3>
   414d4:	1007883a 	mov	r3,r2
   414d8:	e0fffa15 	stw	r3,-24(fp)
    return mod - lam;
   414dc:	e17ffd17 	ldw	r5,-12(fp)
   414e0:	e13ffa17 	ldw	r4,-24(fp)
   414e4:	0043e4c0 	call	43e4c <__subsf3>
   414e8:	1009883a 	mov	r4,r2
   414ec:	2007883a 	mov	r3,r4
   414f0:	1805883a 	mov	r2,r3
}
   414f4:	e6fffe04 	addi	sp,fp,-8
   414f8:	dfc00317 	ldw	ra,12(sp)
   414fc:	df000217 	ldw	fp,8(sp)
   41500:	dc400117 	ldw	r17,4(sp)
   41504:	dc000017 	ldw	r16,0(sp)
   41508:	dec00404 	addi	sp,sp,16
   4150c:	f800283a 	ret

00041510 <center_to_2lam>:
float center_to_2lam(float x, float lam) {
   41510:	defffb04 	addi	sp,sp,-20
   41514:	dfc00415 	stw	ra,16(sp)
   41518:	df000315 	stw	fp,12(sp)
   4151c:	dc000215 	stw	r16,8(sp)
   41520:	df000304 	addi	fp,sp,12
   41524:	e13ffd15 	stw	r4,-12(fp)
   41528:	e17ffe15 	stw	r5,-8(fp)
    return 2.0f * lam * roundf(x / (2.0f * lam));
   4152c:	e0bffe17 	ldw	r2,-8(fp)
   41530:	100b883a 	mov	r5,r2
   41534:	1009883a 	mov	r4,r2
   41538:	0042fc40 	call	42fc4 <__addsf3>
   4153c:	1007883a 	mov	r3,r2
   41540:	1821883a 	mov	r16,r3
   41544:	e0bffe17 	ldw	r2,-8(fp)
   41548:	100b883a 	mov	r5,r2
   4154c:	1009883a 	mov	r4,r2
   41550:	0042fc40 	call	42fc4 <__addsf3>
   41554:	1007883a 	mov	r3,r2
   41558:	1805883a 	mov	r2,r3
   4155c:	100b883a 	mov	r5,r2
   41560:	e13ffd17 	ldw	r4,-12(fp)
   41564:	004348c0 	call	4348c <__divsf3>
   41568:	1007883a 	mov	r3,r2
   4156c:	1805883a 	mov	r2,r3
   41570:	1009883a 	mov	r4,r2
   41574:	0041f540 	call	41f54 <roundf>
   41578:	1007883a 	mov	r3,r2
   4157c:	180b883a 	mov	r5,r3
   41580:	8009883a 	mov	r4,r16
   41584:	0043a500 	call	43a50 <__mulsf3>
   41588:	1009883a 	mov	r4,r2
   4158c:	2007883a 	mov	r3,r4
   41590:	1805883a 	mov	r2,r3
}
   41594:	e6ffff04 	addi	sp,fp,-4
   41598:	dfc00217 	ldw	ra,8(sp)
   4159c:	df000117 	ldw	fp,4(sp)
   415a0:	dc000017 	ldw	r16,0(sp)
   415a4:	dec00304 	addi	sp,sp,12
   415a8:	f800283a 	ret

000415ac <update>:
//#define EPS_HISTORY_SIZE 10  // Like `J` in Python
//
//double eps_history[EPS_HISTORY_SIZE];
//int eps_index = 0;
/* Update function: process one sample */
float update(UnlimitedSamplerReconstructor *recon, float yk,MovingAverage *ma1,MovingAverage *ma2,MovingAverage *ma3) {
   415ac:	defff204 	addi	sp,sp,-56
   415b0:	dfc00d15 	stw	ra,52(sp)
   415b4:	df000c15 	stw	fp,48(sp)
   415b8:	dc400b15 	stw	r17,44(sp)
   415bc:	dc000a15 	stw	r16,40(sp)
   415c0:	df000c04 	addi	fp,sp,48
   415c4:	e13ffa15 	stw	r4,-24(fp)
   415c8:	e17ffb15 	stw	r5,-20(fp)
   415cc:	e1bffc15 	stw	r6,-16(fp)
   415d0:	e1fffd15 	stw	r7,-12(fp)
	if (yk> recon->max_in){
   415d4:	e0bffa17 	ldw	r2,-24(fp)
   415d8:	10c00417 	ldw	r3,16(r2)
   415dc:	e17ffb17 	ldw	r5,-20(fp)
   415e0:	1809883a 	mov	r4,r3
   415e4:	00439880 	call	43988 <__lesf2>
   415e8:	10002f0e 	bge	r2,zero,416a8 <update+0xfc>
		recon->max_in=(2*recon->lam)*round(yk/(2*recon->lam));
   415ec:	e0fffa17 	ldw	r3,-24(fp)
   415f0:	18800017 	ldw	r2,0(r3)
   415f4:	100b883a 	mov	r5,r2
   415f8:	1009883a 	mov	r4,r2
   415fc:	0042fc40 	call	42fc4 <__addsf3>
   41600:	1007883a 	mov	r3,r2
   41604:	1805883a 	mov	r2,r3
   41608:	1009883a 	mov	r4,r2
   4160c:	004692c0 	call	4692c <__extendsfdf2>
   41610:	1021883a 	mov	r16,r2
   41614:	1823883a 	mov	r17,r3
   41618:	e0fffa17 	ldw	r3,-24(fp)
   4161c:	18800017 	ldw	r2,0(r3)
   41620:	100b883a 	mov	r5,r2
   41624:	1009883a 	mov	r4,r2
   41628:	0042fc40 	call	42fc4 <__addsf3>
   4162c:	1007883a 	mov	r3,r2
   41630:	1805883a 	mov	r2,r3
   41634:	100b883a 	mov	r5,r2
   41638:	e13ffb17 	ldw	r4,-20(fp)
   4163c:	004348c0 	call	4348c <__divsf3>
   41640:	1007883a 	mov	r3,r2
   41644:	1805883a 	mov	r2,r3
   41648:	1009883a 	mov	r4,r2
   4164c:	004692c0 	call	4692c <__extendsfdf2>
   41650:	100b883a 	mov	r5,r2
   41654:	180d883a 	mov	r6,r3
   41658:	2809883a 	mov	r4,r5
   4165c:	300b883a 	mov	r5,r6
   41660:	0041e540 	call	41e54 <round>
   41664:	1009883a 	mov	r4,r2
   41668:	180b883a 	mov	r5,r3
   4166c:	200d883a 	mov	r6,r4
   41670:	280f883a 	mov	r7,r5
   41674:	8009883a 	mov	r4,r16
   41678:	880b883a 	mov	r5,r17
   4167c:	00457bc0 	call	457bc <__muldf3>
   41680:	1009883a 	mov	r4,r2
   41684:	180b883a 	mov	r5,r3
   41688:	2005883a 	mov	r2,r4
   4168c:	2807883a 	mov	r3,r5
   41690:	1009883a 	mov	r4,r2
   41694:	180b883a 	mov	r5,r3
   41698:	0046a3c0 	call	46a3c <__truncdfsf2>
   4169c:	1007883a 	mov	r3,r2
   416a0:	e0bffa17 	ldw	r2,-24(fp)
   416a4:	10c00415 	stw	r3,16(r2)


	}
	recon->order =2;
   416a8:	e0bffa17 	ldw	r2,-24(fp)
   416ac:	00c00084 	movi	r3,2
   416b0:	10c00515 	stw	r3,20(r2)


    float dy= nth_order_difference(yk,recon);
   416b4:	e17ffa17 	ldw	r5,-24(fp)
   416b8:	e13ffb17 	ldw	r4,-20(fp)
   416bc:	00405140 	call	40514 <nth_order_difference>
   416c0:	e0bff515 	stw	r2,-44(fp)

    // Step 2: Apply modulo to Δy[k]
    float mod_dy = modulo(dy, recon->lam);
   416c4:	e0bffa17 	ldw	r2,-24(fp)
   416c8:	10c00017 	ldw	r3,0(r2)
   416cc:	180b883a 	mov	r5,r3
   416d0:	e13ff517 	ldw	r4,-44(fp)
   416d4:	004141c0 	call	4141c <modulo>
   416d8:	e0bff615 	stw	r2,-40(fp)

    // Step 3: Compute Δε[k]
    float delta_eps = mod_dy - dy;
   416dc:	e17ff517 	ldw	r5,-44(fp)
   416e0:	e13ff617 	ldw	r4,-40(fp)
   416e4:	0043e4c0 	call	43e4c <__subsf3>
   416e8:	1007883a 	mov	r3,r2
   416ec:	e0fff715 	stw	r3,-36(fp)
//    recon->prev_eps += delta_eps;

//    delta_eps=delta_eps-avg;

//    recon->prev_eps =anti_diff_nth(delta_eps,recon);
    if (recon->order ==2){
   416f0:	e0bffa17 	ldw	r2,-24(fp)
   416f4:	10800517 	ldw	r2,20(r2)
   416f8:	10800098 	cmpnei	r2,r2,2
   416fc:	10000b1e 	bne	r2,zero,4172c <update+0x180>
    	recon->prev_eps =anti_diff_2nd(delta_eps,recon,ma1,ma2,ma3);
   41700:	e0800217 	ldw	r2,8(fp)
   41704:	d8800015 	stw	r2,0(sp)
   41708:	e1fffd17 	ldw	r7,-12(fp)
   4170c:	e1bffc17 	ldw	r6,-16(fp)
   41710:	e17ffa17 	ldw	r5,-24(fp)
   41714:	e13ff717 	ldw	r4,-36(fp)
   41718:	0040cdc0 	call	40cdc <anti_diff_2nd>
   4171c:	1007883a 	mov	r3,r2
   41720:	e0bffa17 	ldw	r2,-24(fp)
   41724:	10c00215 	stw	r3,8(r2)
   41728:	00002106 	br	417b0 <update+0x204>
    }
    else if (recon->order ==1){
   4172c:	e0bffa17 	ldw	r2,-24(fp)
   41730:	10800517 	ldw	r2,20(r2)
   41734:	10800058 	cmpnei	r2,r2,1
   41738:	10000b1e 	bne	r2,zero,41768 <update+0x1bc>
    	recon->prev_eps =anti_diff_1st(delta_eps,recon,ma1,ma2,ma3);
   4173c:	e0800217 	ldw	r2,8(fp)
   41740:	d8800015 	stw	r2,0(sp)
   41744:	e1fffd17 	ldw	r7,-12(fp)
   41748:	e1bffc17 	ldw	r6,-16(fp)
   4174c:	e17ffa17 	ldw	r5,-24(fp)
   41750:	e13ff717 	ldw	r4,-36(fp)
   41754:	00410040 	call	41004 <anti_diff_1st>
   41758:	1007883a 	mov	r3,r2
   4175c:	e0bffa17 	ldw	r2,-24(fp)
   41760:	10c00215 	stw	r3,8(r2)
   41764:	00001206 	br	417b0 <update+0x204>
    }
    else if (recon->order ==3){
   41768:	e0bffa17 	ldw	r2,-24(fp)
   4176c:	10800517 	ldw	r2,20(r2)
   41770:	108000d8 	cmpnei	r2,r2,3
   41774:	10000b1e 	bne	r2,zero,417a4 <update+0x1f8>
    	recon->prev_eps =anti_diff_3rd(delta_eps,recon,ma1,ma2,ma3);
   41778:	e0800217 	ldw	r2,8(fp)
   4177c:	d8800015 	stw	r2,0(sp)
   41780:	e1fffd17 	ldw	r7,-12(fp)
   41784:	e1bffc17 	ldw	r6,-16(fp)
   41788:	e17ffa17 	ldw	r5,-24(fp)
   4178c:	e13ff717 	ldw	r4,-36(fp)
   41790:	00408700 	call	40870 <anti_diff_3rd>
   41794:	1007883a 	mov	r3,r2
   41798:	e0bffa17 	ldw	r2,-24(fp)
   4179c:	10c00215 	stw	r3,8(r2)
   417a0:	00000306 	br	417b0 <update+0x204>
    }
    else {
    	printf("order not implemented");
   417a4:	01000174 	movhi	r4,5
   417a8:	212de804 	addi	r4,r4,-18528
   417ac:	0046c940 	call	46c94 <printf>
//   printf("calculated kn_VAL %d.\n", kn);
//  printf("calculated prev_eps_VAL %f.\n", recon->prev_eps);
//    recon->prev_eps += 2.0 * kn ;
//    printf("calculated prev_eps_VAL %f.\n", recon->prev_eps);
//    float eps_k = 2.0 * recon->lam * round(recon->prev_eps / (2.0 * recon->lam));
    float eps_k=recon->prev_eps;
   417b0:	e0bffa17 	ldw	r2,-24(fp)
   417b4:	10800217 	ldw	r2,8(r2)
   417b8:	e0bff815 	stw	r2,-32(fp)

    // Step 5: Recover g[k]
    float gk = yk + eps_k;
   417bc:	e17ff817 	ldw	r5,-32(fp)
   417c0:	e13ffb17 	ldw	r4,-20(fp)
   417c4:	0042fc40 	call	42fc4 <__addsf3>
   417c8:	1007883a 	mov	r3,r2
   417cc:	e0fff915 	stw	r3,-28(fp)
//    printf("reconstructed val%f.\n", gk);

    // Update state
    recon->prev_y = yk;
   417d0:	e0bffa17 	ldw	r2,-24(fp)
   417d4:	e0fffb17 	ldw	r3,-20(fp)
   417d8:	10c00115 	stw	r3,4(r2)

    return gk;
   417dc:	e0bff917 	ldw	r2,-28(fp)
   417e0:	1007883a 	mov	r3,r2
}
   417e4:	1805883a 	mov	r2,r3
   417e8:	e6fffe04 	addi	sp,fp,-8
   417ec:	dfc00317 	ldw	ra,12(sp)
   417f0:	df000217 	ldw	fp,8(sp)
   417f4:	dc400117 	ldw	r17,4(sp)
   417f8:	dc000017 	ldw	r16,0(sp)
   417fc:	dec00404 	addi	sp,sp,16
   41800:	f800283a 	ret

00041804 <float_to_dac>:
/* Initialize the moving average filter */




uint8_t float_to_dac(float signal_value, int DAC_MAX_VALUE, float V_REF, float OFFSET) {
   41804:	defff704 	addi	sp,sp,-36
   41808:	dfc00815 	stw	ra,32(sp)
   4180c:	df000715 	stw	fp,28(sp)
   41810:	dc000615 	stw	r16,24(sp)
   41814:	df000704 	addi	fp,sp,28
   41818:	e13ffb15 	stw	r4,-20(fp)
   4181c:	e17ffc15 	stw	r5,-16(fp)
   41820:	e1bffd15 	stw	r6,-12(fp)
   41824:	e1fffe15 	stw	r7,-8(fp)
    float dac_voltage;
    uint8_t dac_value;

    // Apply offset
    dac_voltage = signal_value + OFFSET;
   41828:	e17ffe17 	ldw	r5,-8(fp)
   4182c:	e13ffb17 	ldw	r4,-20(fp)
   41830:	0042fc40 	call	42fc4 <__addsf3>
   41834:	1007883a 	mov	r3,r2
   41838:	e0fff915 	stw	r3,-28(fp)

    // Clamp to DAC range (0V to 5V)
    if (dac_voltage < 0.0f) {
   4183c:	000b883a 	mov	r5,zero
   41840:	e13ff917 	ldw	r4,-28(fp)
   41844:	00439880 	call	43988 <__lesf2>
   41848:	1000020e 	bge	r2,zero,41854 <float_to_dac+0x50>
        dac_voltage = 0.0f;
   4184c:	e03ff915 	stw	zero,-28(fp)
   41850:	00000606 	br	4186c <float_to_dac+0x68>
    } else if (dac_voltage > V_REF) {
   41854:	e17ffd17 	ldw	r5,-12(fp)
   41858:	e13ff917 	ldw	r4,-28(fp)
   4185c:	00438cc0 	call	438cc <__gesf2>
   41860:	0080020e 	bge	zero,r2,4186c <float_to_dac+0x68>
        dac_voltage = V_REF;
   41864:	e0bffd17 	ldw	r2,-12(fp)
   41868:	e0bff915 	stw	r2,-28(fp)
    }

    // Convert to DAC value
    dac_value = (uint8_t)((dac_voltage / V_REF) * DAC_MAX_VALUE);
   4186c:	e17ffd17 	ldw	r5,-12(fp)
   41870:	e13ff917 	ldw	r4,-28(fp)
   41874:	004348c0 	call	4348c <__divsf3>
   41878:	1007883a 	mov	r3,r2
   4187c:	1821883a 	mov	r16,r3
   41880:	e13ffc17 	ldw	r4,-16(fp)
   41884:	00443a00 	call	443a0 <__floatsisf>
   41888:	1007883a 	mov	r3,r2
   4188c:	180b883a 	mov	r5,r3
   41890:	8009883a 	mov	r4,r16
   41894:	0043a500 	call	43a50 <__mulsf3>
   41898:	1007883a 	mov	r3,r2
   4189c:	1805883a 	mov	r2,r3
   418a0:	1009883a 	mov	r4,r2
   418a4:	0042db00 	call	42db0 <__fixunssfsi>
   418a8:	e0bffa05 	stb	r2,-24(fp)

    return dac_value;
   418ac:	e0bffa03 	ldbu	r2,-24(fp)
}
   418b0:	e6ffff04 	addi	sp,fp,-4
   418b4:	dfc00217 	ldw	ra,8(sp)
   418b8:	df000117 	ldw	fp,4(sp)
   418bc:	dc000017 	ldw	r16,0(sp)
   418c0:	dec00304 	addi	sp,sp,12
   418c4:	f800283a 	ret

000418c8 <convert_adc_to_signal>:

float convert_adc_to_signal(int adc_value, int ADC_MAX_VALUE, float V_REF, float OFFSET_VOLTAGE) {
   418c8:	defff704 	addi	sp,sp,-36
   418cc:	dfc00815 	stw	ra,32(sp)
   418d0:	df000715 	stw	fp,28(sp)
   418d4:	dc000615 	stw	r16,24(sp)
   418d8:	df000704 	addi	fp,sp,28
   418dc:	e13ffb15 	stw	r4,-20(fp)
   418e0:	e17ffc15 	stw	r5,-16(fp)
   418e4:	e1bffd15 	stw	r6,-12(fp)
   418e8:	e1fffe15 	stw	r7,-8(fp)
    // Calculate the input voltage
    float input_voltage = (adc_value / (float)ADC_MAX_VALUE) * V_REF;
   418ec:	e13ffb17 	ldw	r4,-20(fp)
   418f0:	00443a00 	call	443a0 <__floatsisf>
   418f4:	1021883a 	mov	r16,r2
   418f8:	e13ffc17 	ldw	r4,-16(fp)
   418fc:	00443a00 	call	443a0 <__floatsisf>
   41900:	1007883a 	mov	r3,r2
   41904:	180b883a 	mov	r5,r3
   41908:	8009883a 	mov	r4,r16
   4190c:	004348c0 	call	4348c <__divsf3>
   41910:	1007883a 	mov	r3,r2
   41914:	1805883a 	mov	r2,r3
   41918:	e17ffd17 	ldw	r5,-12(fp)
   4191c:	1009883a 	mov	r4,r2
   41920:	0043a500 	call	43a50 <__mulsf3>
   41924:	1007883a 	mov	r3,r2
   41928:	e0fff915 	stw	r3,-28(fp)

    // Subtract the offset to get the original signal value
    float signal_value = input_voltage - OFFSET_VOLTAGE;
   4192c:	e17ffe17 	ldw	r5,-8(fp)
   41930:	e13ff917 	ldw	r4,-28(fp)
   41934:	0043e4c0 	call	43e4c <__subsf3>
   41938:	1007883a 	mov	r3,r2
   4193c:	e0fffa15 	stw	r3,-24(fp)

    return signal_value;
   41940:	e0bffa17 	ldw	r2,-24(fp)
   41944:	1007883a 	mov	r3,r2
}
   41948:	1805883a 	mov	r2,r3
   4194c:	e6ffff04 	addi	sp,fp,-4
   41950:	dfc00217 	ldw	ra,8(sp)
   41954:	df000117 	ldw	fp,4(sp)
   41958:	dc000017 	ldw	r16,0(sp)
   4195c:	dec00304 	addi	sp,sp,12
   41960:	f800283a 	ret

00041964 <top>:




int top(int adc_value,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2,MovingAverage *ma3  ){
   41964:	defff604 	addi	sp,sp,-40
   41968:	dfc00915 	stw	ra,36(sp)
   4196c:	df000815 	stw	fp,32(sp)
   41970:	df000804 	addi	fp,sp,32
   41974:	e13ffc15 	stw	r4,-16(fp)
   41978:	e17ffd15 	stw	r5,-12(fp)
   4197c:	e1bffe15 	stw	r6,-8(fp)
   41980:	e1ffff15 	stw	r7,-4(fp)

	float signal_in=convert_adc_to_signal(adc_value,4095,4.096,0);
   41984:	000f883a 	mov	r7,zero
   41988:	019020f4 	movhi	r6,16515
   4198c:	31849bc4 	addi	r6,r6,4719
   41990:	0143ffc4 	movi	r5,4095
   41994:	e13ffc17 	ldw	r4,-16(fp)
   41998:	00418c80 	call	418c8 <convert_adc_to_signal>
   4199c:	e0bff915 	stw	r2,-28(fp)
	float reconstructed_val=update(recon, signal_in,ma1,ma2,ma3);
   419a0:	e0800217 	ldw	r2,8(fp)
   419a4:	d8800015 	stw	r2,0(sp)
   419a8:	e1ffff17 	ldw	r7,-4(fp)
   419ac:	e1bffe17 	ldw	r6,-8(fp)
   419b0:	e17ff917 	ldw	r5,-28(fp)
   419b4:	e13ffd17 	ldw	r4,-12(fp)
   419b8:	00415ac0 	call	415ac <update>
   419bc:	e0bffa15 	stw	r2,-24(fp)
//	avg = updateMovingAverage(ma2, reconstructed_val);
//	int dac_out=float_to_dac(reconstructed_val-avg,255,5,1.5);
//	float hpf_filtered = hpf_update(hpf, subtracted_avg);
//	float hpf2_filtered = second_order_hpf_update(hpf2, subtracted_avg);
//	int dac_out=float_to_dac(signal_in,255,5,1.5);
	int dac_out=float_to_dac(reconstructed_val,255,5,2);
   419c0:	01d00034 	movhi	r7,16384
   419c4:	01902834 	movhi	r6,16544
   419c8:	01403fc4 	movi	r5,255
   419cc:	e13ffa17 	ldw	r4,-24(fp)
   419d0:	00418040 	call	41804 <float_to_dac>
   419d4:	10803fcc 	andi	r2,r2,255
   419d8:	e0bffb15 	stw	r2,-20(fp)

	return dac_out;
   419dc:	e0bffb17 	ldw	r2,-20(fp)
}
   419e0:	e037883a 	mov	sp,fp
   419e4:	dfc00117 	ldw	ra,4(sp)
   419e8:	df000017 	ldw	fp,0(sp)
   419ec:	dec00204 	addi	sp,sp,8
   419f0:	f800283a 	ret

000419f4 <generate_test_data>:


//#define total_num 100000
#define num_times_ran 1
#define dataset_size 10000
void generate_test_data(int data[dataset_size] , int min, int max) {
   419f4:	defff904 	addi	sp,sp,-28
   419f8:	dfc00615 	stw	ra,24(sp)
   419fc:	df000515 	stw	fp,20(sp)
   41a00:	dc000415 	stw	r16,16(sp)
   41a04:	df000504 	addi	fp,sp,20
   41a08:	e13ffc15 	stw	r4,-16(fp)
   41a0c:	e17ffd15 	stw	r5,-12(fp)
   41a10:	e1bffe15 	stw	r6,-8(fp)
    for (int i = 0; i < dataset_size; i++) {
   41a14:	e03ffb15 	stw	zero,-20(fp)
   41a18:	00000e06 	br	41a54 <generate_test_data+0x60>
        data[i] = i%max;
   41a1c:	e0bffb17 	ldw	r2,-20(fp)
   41a20:	1085883a 	add	r2,r2,r2
   41a24:	1085883a 	add	r2,r2,r2
   41a28:	1007883a 	mov	r3,r2
   41a2c:	e0bffc17 	ldw	r2,-16(fp)
   41a30:	10e1883a 	add	r16,r2,r3
   41a34:	e0bffb17 	ldw	r2,-20(fp)
   41a38:	e17ffe17 	ldw	r5,-8(fp)
   41a3c:	1009883a 	mov	r4,r2
   41a40:	0042e940 	call	42e94 <__modsi3>
   41a44:	80800015 	stw	r2,0(r16)

//#define total_num 100000
#define num_times_ran 1
#define dataset_size 10000
void generate_test_data(int data[dataset_size] , int min, int max) {
    for (int i = 0; i < dataset_size; i++) {
   41a48:	e0bffb17 	ldw	r2,-20(fp)
   41a4c:	10800044 	addi	r2,r2,1
   41a50:	e0bffb15 	stw	r2,-20(fp)
   41a54:	e0bffb17 	ldw	r2,-20(fp)
   41a58:	1089c410 	cmplti	r2,r2,10000
   41a5c:	103fef1e 	bne	r2,zero,41a1c <__alt_data_end+0xfffda91c>
        data[i] = i%max;
    }
}
   41a60:	0001883a 	nop
   41a64:	e6ffff04 	addi	sp,fp,-4
   41a68:	dfc00217 	ldw	ra,8(sp)
   41a6c:	df000117 	ldw	fp,4(sp)
   41a70:	dc000017 	ldw	r16,0(sp)
   41a74:	dec00304 	addi	sp,sp,12
   41a78:	f800283a 	ret

00041a7c <initialize_pipeline>:


void initialize_pipeline(){
   41a7c:	defffe04 	addi	sp,sp,-8
   41a80:	df000115 	stw	fp,4(sp)
   41a84:	df000104 	addi	fp,sp,4

	for (int i = 0; i < 100; i++){
   41a88:	e03fff15 	stw	zero,-4(fp)
   41a8c:	00000606 	br	41aa8 <initialize_pipeline+0x2c>
		ALT_CI_RECON_PIPE_N_0(0,1);
   41a90:	0007883a 	mov	r3,zero
   41a94:	00800044 	movi	r2,1
   41a98:	1885c032 	custom	0,r2,r3,r2
}


void initialize_pipeline(){

	for (int i = 0; i < 100; i++){
   41a9c:	e0bfff17 	ldw	r2,-4(fp)
   41aa0:	10800044 	addi	r2,r2,1
   41aa4:	e0bfff15 	stw	r2,-4(fp)
   41aa8:	e0bfff17 	ldw	r2,-4(fp)
   41aac:	10801910 	cmplti	r2,r2,100
   41ab0:	103ff71e 	bne	r2,zero,41a90 <__alt_data_end+0xfffda990>
		ALT_CI_RECON_PIPE_N_0(0,1);
	}
}
   41ab4:	0001883a 	nop
   41ab8:	e037883a 	mov	sp,fp
   41abc:	df000017 	ldw	fp,0(sp)
   41ac0:	dec00104 	addi	sp,sp,4
   41ac4:	f800283a 	ret

00041ac8 <main>:


int main() {
   41ac8:	defde604 	addi	sp,sp,-2152
   41acc:	dfc21915 	stw	ra,2148(sp)
   41ad0:	df021815 	stw	fp,2144(sp)
   41ad4:	df021804 	addi	fp,sp,2144
	float lam=0.75;
   41ad8:	008fd034 	movhi	r2,16192
   41adc:	e0bdeb15 	stw	r2,-2132(fp)
    UnlimitedSamplerReconstructor recon;
    initReconstructor(&recon, lam);
   41ae0:	e0bdee04 	addi	r2,fp,-2120
   41ae4:	e17deb17 	ldw	r5,-2132(fp)
   41ae8:	1009883a 	mov	r4,r2
   41aec:	00404340 	call	40434 <initReconstructor>
//    unsigned int time_spent;
//    if (alt_timestamp_start() < 0) {
//        printf("Timestamp not available\n");

//    }
    printf("running \n");
   41af0:	01000174 	movhi	r4,5
   41af4:	212dee04 	addi	r4,r4,-18504
   41af8:	0046d840 	call	46d84 <puts>
    initialize_pipeline();
   41afc:	0041a7c0 	call	41a7c <initialize_pipeline>
    MovingAverage ma;
    initMovingAverage(&ma);
   41b00:	e0bec104 	addi	r2,fp,-1276
   41b04:	1009883a 	mov	r4,r2
   41b08:	00402900 	call	40290 <initMovingAverage>
    MovingAverage ma2;
    initMovingAverage(&ma2);
   41b0c:	e0bf2804 	addi	r2,fp,-864
   41b10:	1009883a 	mov	r4,r2
   41b14:	00402900 	call	40290 <initMovingAverage>
    MovingAverage ma3;
    initMovingAverage(&ma3);
   41b18:	e0bf8f04 	addi	r2,fp,-452
   41b1c:	1009883a 	mov	r4,r2
   41b20:	00402900 	call	40290 <initMovingAverage>


    // Example float32 data (converted from your file)
//	float data[] = {0.0f, 0.0f,1.0f,0.0f,1.0f, 1.0f,  0.0f,0.0f, 0.0f,0.0f,0.0f,0.0f, 0.0f,  0.0f};
    int data[] = {0, 0,1000,0, 1000,  1000,0, 0,0,0};  // <- Replace with your actual values
   41b24:	e03ff615 	stw	zero,-40(fp)
   41b28:	e03ff715 	stw	zero,-36(fp)
   41b2c:	0080fa04 	movi	r2,1000
   41b30:	e0bff815 	stw	r2,-32(fp)
   41b34:	e03ff915 	stw	zero,-28(fp)
   41b38:	0080fa04 	movi	r2,1000
   41b3c:	e0bffa15 	stw	r2,-24(fp)
   41b40:	0080fa04 	movi	r2,1000
   41b44:	e0bffb15 	stw	r2,-20(fp)
   41b48:	e03ffc15 	stw	zero,-16(fp)
   41b4c:	e03ffd15 	stw	zero,-12(fp)
   41b50:	e03ffe15 	stw	zero,-8(fp)
   41b54:	e03fff15 	stw	zero,-4(fp)
//    float data[] = {-0.0175935030f, -0.0175935030ff,-0.0175935030f,-0.0175935030f,-0.0175935030f, 0.0f};  // <- Replace with your actual values
//	int =10000;
//	int datatest[dataset_size];
//	generate_test_data(datatest,1,400);
	printf("data test set generation done \n");
   41b58:	01000174 	movhi	r4,5
   41b5c:	212df104 	addi	r4,r4,-18492
   41b60:	0046d840 	call	46d84 <puts>
//		printf("initialize hardware_ip %d res = %d  \n", i,temp);
////		int ref=top(data[i],&recon,&ma);
////		printf(" ref res = %d  \n", ref);
//
//	}
	for (int i = 0; i < 10; i++){
   41b64:	e03de915 	stw	zero,-2140(fp)
   41b68:	00002406 	br	41bfc <main+0x134>
//		int temp=ALT_CI_RECON_TOP_PIPELINE_0(data[i]);
//		printf(" hardware_ip res = %d  \n", temp);
		int ref=top(data[i],&recon,&ma,&ma2,&ma3);
   41b6c:	e0bde917 	ldw	r2,-2140(fp)
   41b70:	1085883a 	add	r2,r2,r2
   41b74:	1085883a 	add	r2,r2,r2
   41b78:	e0fde904 	addi	r3,fp,-2140
   41b7c:	1885883a 	add	r2,r3,r2
   41b80:	10820d04 	addi	r2,r2,2100
   41b84:	10c00017 	ldw	r3,0(r2)
   41b88:	e1bf2804 	addi	r6,fp,-864
   41b8c:	e17ec104 	addi	r5,fp,-1276
   41b90:	e13dee04 	addi	r4,fp,-2120
   41b94:	e0bf8f04 	addi	r2,fp,-452
   41b98:	d8800015 	stw	r2,0(sp)
   41b9c:	300f883a 	mov	r7,r6
   41ba0:	280d883a 	mov	r6,r5
   41ba4:	200b883a 	mov	r5,r4
   41ba8:	1809883a 	mov	r4,r3
   41bac:	00419640 	call	41964 <top>
   41bb0:	e0bdec15 	stw	r2,-2128(fp)
		printf(" ref res = %d  \n", ref);
   41bb4:	e17dec17 	ldw	r5,-2128(fp)
   41bb8:	01000174 	movhi	r4,5
   41bbc:	212df904 	addi	r4,r4,-18460
   41bc0:	0046c940 	call	46c94 <printf>
		ALT_CI_RECON_PIPE_N_0(data[i],2);
   41bc4:	e0bde917 	ldw	r2,-2140(fp)
   41bc8:	1085883a 	add	r2,r2,r2
   41bcc:	1085883a 	add	r2,r2,r2
   41bd0:	e0fde904 	addi	r3,fp,-2140
   41bd4:	1885883a 	add	r2,r3,r2
   41bd8:	10820d04 	addi	r2,r2,2100
   41bdc:	10800017 	ldw	r2,0(r2)
   41be0:	00c00084 	movi	r3,2
   41be4:	10c5c032 	custom	0,r2,r2,r3
//		int href=ALT_CI_RECONSTRUCTION_TOP_1(data[i]);

//		printf(" hardware ref res = %d  \n", href);
		printf("\n");
   41be8:	01000284 	movi	r4,10
   41bec:	0046ce80 	call	46ce8 <putchar>
//		printf("initialize hardware_ip %d res = %d  \n", i,temp);
////		int ref=top(data[i],&recon,&ma);
////		printf(" ref res = %d  \n", ref);
//
//	}
	for (int i = 0; i < 10; i++){
   41bf0:	e0bde917 	ldw	r2,-2140(fp)
   41bf4:	10800044 	addi	r2,r2,1
   41bf8:	e0bde915 	stw	r2,-2140(fp)
   41bfc:	e0bde917 	ldw	r2,-2140(fp)
   41c00:	10800290 	cmplti	r2,r2,10
   41c04:	103fd91e 	bne	r2,zero,41b6c <__alt_data_end+0xfffdaa6c>

//		printf(" hardware ref res = %d  \n", href);
		printf("\n");

	}
	for (int i = 0; i < 200; i++){
   41c08:	e03dea15 	stw	zero,-2136(fp)
   41c0c:	00001006 	br	41c50 <main+0x188>



//		int href=data[i](0,2);
		int temp=ALT_CI_RECON_PIPE_N_0(1000,1);
   41c10:	0080fa04 	movi	r2,1000
   41c14:	00c00044 	movi	r3,1
   41c18:	10c5c032 	custom	0,r2,r2,r3
   41c1c:	e0bded15 	stw	r2,-2124(fp)
		printf(" hardware_ip %d res = %d  \n", i+10,temp);
   41c20:	e0bdea17 	ldw	r2,-2136(fp)
   41c24:	10800284 	addi	r2,r2,10
   41c28:	e1bded17 	ldw	r6,-2124(fp)
   41c2c:	100b883a 	mov	r5,r2
   41c30:	01000174 	movhi	r4,5
   41c34:	212dfe04 	addi	r4,r4,-18440
   41c38:	0046c940 	call	46c94 <printf>
//		top(data[i],&recon,&ma);
//		printf(" hardware res = %d  \n", href);
		printf("\n");
   41c3c:	01000284 	movi	r4,10
   41c40:	0046ce80 	call	46ce8 <putchar>

//		printf(" hardware ref res = %d  \n", href);
		printf("\n");

	}
	for (int i = 0; i < 200; i++){
   41c44:	e0bdea17 	ldw	r2,-2136(fp)
   41c48:	10800044 	addi	r2,r2,1
   41c4c:	e0bdea15 	stw	r2,-2136(fp)
   41c50:	e0bdea17 	ldw	r2,-2136(fp)
   41c54:	10803210 	cmplti	r2,r2,200
   41c58:	103fed1e 	bne	r2,zero,41c10 <__alt_data_end+0xfffdab10>
////		printf("diff on %d samples: %d\n", i, diff);
//
//	}
//

    return 0;
   41c5c:	0005883a 	mov	r2,zero
}
   41c60:	e037883a 	mov	sp,fp
   41c64:	dfc00117 	ldw	ra,4(sp)
   41c68:	df000017 	ldw	fp,0(sp)
   41c6c:	dec00204 	addi	sp,sp,8
   41c70:	f800283a 	ret

00041c74 <ceil>:
   41c74:	2811d53a 	srai	r8,r5,20
   41c78:	defffa04 	addi	sp,sp,-24
   41c7c:	dcc00315 	stw	r19,12(sp)
   41c80:	4201ffcc 	andi	r8,r8,2047
   41c84:	dc800215 	stw	r18,8(sp)
   41c88:	dc400115 	stw	r17,4(sp)
   41c8c:	dc000015 	stw	r16,0(sp)
   41c90:	dfc00515 	stw	ra,20(sp)
   41c94:	dd000415 	stw	r20,16(sp)
   41c98:	44bf0044 	addi	r18,r8,-1023
   41c9c:	018004c4 	movi	r6,19
   41ca0:	2821883a 	mov	r16,r5
   41ca4:	2005883a 	mov	r2,r4
   41ca8:	280f883a 	mov	r7,r5
   41cac:	2827883a 	mov	r19,r5
   41cb0:	2023883a 	mov	r17,r4
   41cb4:	34801c16 	blt	r6,r18,41d28 <ceil+0xb4>
   41cb8:	90004916 	blt	r18,zero,41de0 <ceil+0x16c>
   41cbc:	05000434 	movhi	r20,16
   41cc0:	a53fffc4 	addi	r20,r20,-1
   41cc4:	a4a9d83a 	sra	r20,r20,r18
   41cc8:	2d0c703a 	and	r6,r5,r20
   41ccc:	310cb03a 	or	r6,r6,r4
   41cd0:	30001926 	beq	r6,zero,41d38 <ceil+0xc4>
   41cd4:	01a20034 	movhi	r6,34816
   41cd8:	01df8e34 	movhi	r7,32312
   41cdc:	319d6704 	addi	r6,r6,30108
   41ce0:	39f90f04 	addi	r7,r7,-7108
   41ce4:	00444c40 	call	444c4 <__adddf3>
   41ce8:	000d883a 	mov	r6,zero
   41cec:	000f883a 	mov	r7,zero
   41cf0:	1009883a 	mov	r4,r2
   41cf4:	180b883a 	mov	r5,r3
   41cf8:	00456e00 	call	456e0 <__gedf2>
   41cfc:	0080070e 	bge	zero,r2,41d1c <ceil+0xa8>
   41d00:	0400030e 	bge	zero,r16,41d10 <ceil+0x9c>
   41d04:	00800434 	movhi	r2,16
   41d08:	14a5d83a 	sra	r18,r2,r18
   41d0c:	84a7883a 	add	r19,r16,r18
   41d10:	0520303a 	nor	r16,zero,r20
   41d14:	84e0703a 	and	r16,r16,r19
   41d18:	0023883a 	mov	r17,zero
   41d1c:	8805883a 	mov	r2,r17
   41d20:	8007883a 	mov	r3,r16
   41d24:	00000506 	br	41d3c <ceil+0xc8>
   41d28:	01800cc4 	movi	r6,51
   41d2c:	34800b0e 	bge	r6,r18,41d5c <ceil+0xe8>
   41d30:	01810004 	movi	r6,1024
   41d34:	91803b26 	beq	r18,r6,41e24 <ceil+0x1b0>
   41d38:	3807883a 	mov	r3,r7
   41d3c:	dfc00517 	ldw	ra,20(sp)
   41d40:	dd000417 	ldw	r20,16(sp)
   41d44:	dcc00317 	ldw	r19,12(sp)
   41d48:	dc800217 	ldw	r18,8(sp)
   41d4c:	dc400117 	ldw	r17,4(sp)
   41d50:	dc000017 	ldw	r16,0(sp)
   41d54:	dec00604 	addi	sp,sp,24
   41d58:	f800283a 	ret
   41d5c:	423efb44 	addi	r8,r8,-1043
   41d60:	053fffc4 	movi	r20,-1
   41d64:	a228d83a 	srl	r20,r20,r8
   41d68:	250c703a 	and	r6,r4,r20
   41d6c:	303ff226 	beq	r6,zero,41d38 <__alt_data_end+0xfffdac38>
   41d70:	01a20034 	movhi	r6,34816
   41d74:	01df8e34 	movhi	r7,32312
   41d78:	319d6704 	addi	r6,r6,30108
   41d7c:	39f90f04 	addi	r7,r7,-7108
   41d80:	00444c40 	call	444c4 <__adddf3>
   41d84:	000d883a 	mov	r6,zero
   41d88:	000f883a 	mov	r7,zero
   41d8c:	1009883a 	mov	r4,r2
   41d90:	180b883a 	mov	r5,r3
   41d94:	00456e00 	call	456e0 <__gedf2>
   41d98:	00bfe00e 	bge	zero,r2,41d1c <__alt_data_end+0xfffdac1c>
   41d9c:	04000a0e 	bge	zero,r16,41dc8 <ceil+0x154>
   41da0:	00800504 	movi	r2,20
   41da4:	90802926 	beq	r18,r2,41e4c <ceil+0x1d8>
   41da8:	00800d04 	movi	r2,52
   41dac:	14a5c83a 	sub	r18,r2,r18
   41db0:	00800044 	movi	r2,1
   41db4:	1484983a 	sll	r2,r2,r18
   41db8:	1445883a 	add	r2,r2,r17
   41dbc:	14401e2e 	bgeu	r2,r17,41e38 <ceil+0x1c4>
   41dc0:	84c00044 	addi	r19,r16,1
   41dc4:	1023883a 	mov	r17,r2
   41dc8:	0510303a 	nor	r8,zero,r20
   41dcc:	9821883a 	mov	r16,r19
   41dd0:	8a22703a 	and	r17,r17,r8
   41dd4:	8805883a 	mov	r2,r17
   41dd8:	8007883a 	mov	r3,r16
   41ddc:	003fd706 	br	41d3c <__alt_data_end+0xfffdac3c>
   41de0:	01a20034 	movhi	r6,34816
   41de4:	01df8e34 	movhi	r7,32312
   41de8:	319d6704 	addi	r6,r6,30108
   41dec:	39f90f04 	addi	r7,r7,-7108
   41df0:	00444c40 	call	444c4 <__adddf3>
   41df4:	000d883a 	mov	r6,zero
   41df8:	000f883a 	mov	r7,zero
   41dfc:	1009883a 	mov	r4,r2
   41e00:	180b883a 	mov	r5,r3
   41e04:	00456e00 	call	456e0 <__gedf2>
   41e08:	00bfc40e 	bge	zero,r2,41d1c <__alt_data_end+0xfffdac1c>
   41e0c:	80000c16 	blt	r16,zero,41e40 <ceil+0x1cc>
   41e10:	8460b03a 	or	r16,r16,r17
   41e14:	0023883a 	mov	r17,zero
   41e18:	80000526 	beq	r16,zero,41e30 <ceil+0x1bc>
   41e1c:	040ffc34 	movhi	r16,16368
   41e20:	003fbe06 	br	41d1c <__alt_data_end+0xfffdac1c>
   41e24:	200d883a 	mov	r6,r4
   41e28:	00444c40 	call	444c4 <__adddf3>
   41e2c:	003fc306 	br	41d3c <__alt_data_end+0xfffdac3c>
   41e30:	0021883a 	mov	r16,zero
   41e34:	003fb906 	br	41d1c <__alt_data_end+0xfffdac1c>
   41e38:	1023883a 	mov	r17,r2
   41e3c:	003fe206 	br	41dc8 <__alt_data_end+0xfffdacc8>
   41e40:	0023883a 	mov	r17,zero
   41e44:	04200034 	movhi	r16,32768
   41e48:	003fb406 	br	41d1c <__alt_data_end+0xfffdac1c>
   41e4c:	84c00044 	addi	r19,r16,1
   41e50:	003fdd06 	br	41dc8 <__alt_data_end+0xfffdacc8>

00041e54 <round>:
   41e54:	289ffc2c 	andhi	r2,r5,32752
   41e58:	1005d53a 	srai	r2,r2,20
   41e5c:	024004c4 	movi	r9,19
   41e60:	2807883a 	mov	r3,r5
   41e64:	123f0044 	addi	r8,r2,-1023
   41e68:	200d883a 	mov	r6,r4
   41e6c:	280f883a 	mov	r7,r5
   41e70:	4a000916 	blt	r9,r8,41e98 <round+0x44>
   41e74:	40002516 	blt	r8,zero,41f0c <round+0xb8>
   41e78:	00800434 	movhi	r2,16
   41e7c:	10bfffc4 	addi	r2,r2,-1
   41e80:	1205d83a 	sra	r2,r2,r8
   41e84:	2888703a 	and	r4,r5,r2
   41e88:	2000181e 	bne	r4,zero,41eec <round+0x98>
   41e8c:	3000171e 	bne	r6,zero,41eec <round+0x98>
   41e90:	0005883a 	mov	r2,zero
   41e94:	f800283a 	ret
   41e98:	02400cc4 	movi	r9,51
   41e9c:	4a00040e 	bge	r9,r8,41eb0 <round+0x5c>
   41ea0:	00810004 	movi	r2,1024
   41ea4:	40802126 	beq	r8,r2,41f2c <round+0xd8>
   41ea8:	3005883a 	mov	r2,r6
   41eac:	f800283a 	ret
   41eb0:	013fffc4 	movi	r4,-1
   41eb4:	10befb44 	addi	r2,r2,-1043
   41eb8:	2084d83a 	srl	r2,r4,r2
   41ebc:	3088703a 	and	r4,r6,r2
   41ec0:	20001726 	beq	r4,zero,41f20 <round+0xcc>
   41ec4:	4a11c83a 	sub	r8,r9,r8
   41ec8:	02400044 	movi	r9,1
   41ecc:	4a10983a 	sll	r8,r9,r8
   41ed0:	4191883a 	add	r8,r8,r6
   41ed4:	4180012e 	bgeu	r8,r6,41edc <round+0x88>
   41ed8:	2a47883a 	add	r3,r5,r9
   41edc:	0084303a 	nor	r2,zero,r2
   41ee0:	120c703a 	and	r6,r2,r8
   41ee4:	3005883a 	mov	r2,r6
   41ee8:	f800283a 	ret
   41eec:	00c00234 	movhi	r3,8
   41ef0:	1a07d83a 	sra	r3,r3,r8
   41ef4:	0084303a 	nor	r2,zero,r2
   41ef8:	000d883a 	mov	r6,zero
   41efc:	19c7883a 	add	r3,r3,r7
   41f00:	1886703a 	and	r3,r3,r2
   41f04:	3005883a 	mov	r2,r6
   41f08:	f800283a 	ret
   41f0c:	00bfffc4 	movi	r2,-1
   41f10:	28e0002c 	andhi	r3,r5,32768
   41f14:	40800c26 	beq	r8,r2,41f48 <round+0xf4>
   41f18:	000d883a 	mov	r6,zero
   41f1c:	003fe206 	br	41ea8 <__alt_data_end+0xfffdada8>
   41f20:	3005883a 	mov	r2,r6
   41f24:	2807883a 	mov	r3,r5
   41f28:	f800283a 	ret
   41f2c:	deffff04 	addi	sp,sp,-4
   41f30:	280f883a 	mov	r7,r5
   41f34:	dfc00015 	stw	ra,0(sp)
   41f38:	00444c40 	call	444c4 <__adddf3>
   41f3c:	dfc00017 	ldw	ra,0(sp)
   41f40:	dec00104 	addi	sp,sp,4
   41f44:	f800283a 	ret
   41f48:	18cffc34 	orhi	r3,r3,16368
   41f4c:	000d883a 	mov	r6,zero
   41f50:	003fd506 	br	41ea8 <__alt_data_end+0xfffdada8>

00041f54 <roundf>:
   41f54:	20dfe02c 	andhi	r3,r4,32640
   41f58:	1806d5fa 	srli	r3,r3,23
   41f5c:	01400584 	movi	r5,22
   41f60:	2005883a 	mov	r2,r4
   41f64:	18ffe044 	addi	r3,r3,-127
   41f68:	28c00c16 	blt	r5,r3,41f9c <roundf+0x48>
   41f6c:	18001516 	blt	r3,zero,41fc4 <roundf+0x70>
   41f70:	01002034 	movhi	r4,128
   41f74:	213fffc4 	addi	r4,r4,-1
   41f78:	20c9d83a 	sra	r4,r4,r3
   41f7c:	208a703a 	and	r5,r4,r2
   41f80:	28000826 	beq	r5,zero,41fa4 <roundf+0x50>
   41f84:	01401034 	movhi	r5,64
   41f88:	28c7d83a 	sra	r3,r5,r3
   41f8c:	0108303a 	nor	r4,zero,r4
   41f90:	1885883a 	add	r2,r3,r2
   41f94:	2084703a 	and	r2,r4,r2
   41f98:	f800283a 	ret
   41f9c:	01402004 	movi	r5,128
   41fa0:	19400126 	beq	r3,r5,41fa8 <roundf+0x54>
   41fa4:	f800283a 	ret
   41fa8:	deffff04 	addi	sp,sp,-4
   41fac:	200b883a 	mov	r5,r4
   41fb0:	dfc00015 	stw	ra,0(sp)
   41fb4:	0042fc40 	call	42fc4 <__addsf3>
   41fb8:	dfc00017 	ldw	ra,0(sp)
   41fbc:	dec00104 	addi	sp,sp,4
   41fc0:	f800283a 	ret
   41fc4:	20a0002c 	andhi	r2,r4,32768
   41fc8:	013fffc4 	movi	r4,-1
   41fcc:	193ff51e 	bne	r3,r4,41fa4 <__alt_data_end+0xfffdaea4>
   41fd0:	108fe034 	orhi	r2,r2,16256
   41fd4:	f800283a 	ret

00041fd8 <fmod>:
   41fd8:	deffef04 	addi	sp,sp,-68
   41fdc:	dc400a15 	stw	r17,40(sp)
   41fe0:	04400174 	movhi	r17,5
   41fe4:	dd800f15 	stw	r22,60(sp)
   41fe8:	dd400e15 	stw	r21,56(sp)
   41fec:	dd000d15 	stw	r20,52(sp)
   41ff0:	dcc00c15 	stw	r19,48(sp)
   41ff4:	dc800b15 	stw	r18,44(sp)
   41ff8:	dc000915 	stw	r16,36(sp)
   41ffc:	202b883a 	mov	r21,r4
   42000:	dfc01015 	stw	ra,64(sp)
   42004:	8c732c04 	addi	r17,r17,-13136
   42008:	2829883a 	mov	r20,r5
   4200c:	3027883a 	mov	r19,r6
   42010:	3825883a 	mov	r18,r7
   42014:	00422cc0 	call	422cc <__ieee754_fmod>
   42018:	89000017 	ldw	r4,0(r17)
   4201c:	1021883a 	mov	r16,r2
   42020:	00bfffc4 	movi	r2,-1
   42024:	182d883a 	mov	r22,r3
   42028:	20800426 	beq	r4,r2,4203c <fmod+0x64>
   4202c:	9809883a 	mov	r4,r19
   42030:	900b883a 	mov	r5,r18
   42034:	0042d280 	call	42d28 <__fpclassifyd>
   42038:	10000c1e 	bne	r2,zero,4206c <fmod+0x94>
   4203c:	8005883a 	mov	r2,r16
   42040:	b007883a 	mov	r3,r22
   42044:	dfc01017 	ldw	ra,64(sp)
   42048:	dd800f17 	ldw	r22,60(sp)
   4204c:	dd400e17 	ldw	r21,56(sp)
   42050:	dd000d17 	ldw	r20,52(sp)
   42054:	dcc00c17 	ldw	r19,48(sp)
   42058:	dc800b17 	ldw	r18,44(sp)
   4205c:	dc400a17 	ldw	r17,40(sp)
   42060:	dc000917 	ldw	r16,36(sp)
   42064:	dec01104 	addi	sp,sp,68
   42068:	f800283a 	ret
   4206c:	a809883a 	mov	r4,r21
   42070:	a00b883a 	mov	r5,r20
   42074:	0042d280 	call	42d28 <__fpclassifyd>
   42078:	103ff026 	beq	r2,zero,4203c <__alt_data_end+0xfffdaf3c>
   4207c:	000d883a 	mov	r6,zero
   42080:	000f883a 	mov	r7,zero
   42084:	9809883a 	mov	r4,r19
   42088:	900b883a 	mov	r5,r18
   4208c:	00456580 	call	45658 <__eqdf2>
   42090:	103fea1e 	bne	r2,zero,4203c <__alt_data_end+0xfffdaf3c>
   42094:	00800044 	movi	r2,1
   42098:	d8800015 	stw	r2,0(sp)
   4209c:	8c000017 	ldw	r16,0(r17)
   420a0:	00800174 	movhi	r2,5
   420a4:	10ae0504 	addi	r2,r2,-18412
   420a8:	d8800115 	stw	r2,4(sp)
   420ac:	dd400215 	stw	r21,8(sp)
   420b0:	dd000315 	stw	r20,12(sp)
   420b4:	dcc00415 	stw	r19,16(sp)
   420b8:	dc800515 	stw	r18,20(sp)
   420bc:	d8000815 	stw	zero,32(sp)
   420c0:	80001126 	beq	r16,zero,42108 <fmod+0x130>
   420c4:	000d883a 	mov	r6,zero
   420c8:	000f883a 	mov	r7,zero
   420cc:	0009883a 	mov	r4,zero
   420d0:	000b883a 	mov	r5,zero
   420d4:	0044d700 	call	44d70 <__divdf3>
   420d8:	d8800615 	stw	r2,24(sp)
   420dc:	d8c00715 	stw	r3,28(sp)
   420e0:	00800084 	movi	r2,2
   420e4:	80800a1e 	bne	r16,r2,42110 <fmod+0x138>
   420e8:	0046c480 	call	46c48 <__errno>
   420ec:	00c00844 	movi	r3,33
   420f0:	10c00015 	stw	r3,0(r2)
   420f4:	d8800817 	ldw	r2,32(sp)
   420f8:	1000091e 	bne	r2,zero,42120 <fmod+0x148>
   420fc:	d8800617 	ldw	r2,24(sp)
   42100:	d8c00717 	ldw	r3,28(sp)
   42104:	003fcf06 	br	42044 <__alt_data_end+0xfffdaf44>
   42108:	dd400615 	stw	r21,24(sp)
   4210c:	dd000715 	stw	r20,28(sp)
   42110:	d809883a 	mov	r4,sp
   42114:	0042d9c0 	call	42d9c <matherr>
   42118:	103ff61e 	bne	r2,zero,420f4 <__alt_data_end+0xfffdaff4>
   4211c:	003ff206 	br	420e8 <__alt_data_end+0xfffdafe8>
   42120:	0046c480 	call	46c48 <__errno>
   42124:	d8c00817 	ldw	r3,32(sp)
   42128:	10c00015 	stw	r3,0(r2)
   4212c:	003ff306 	br	420fc <__alt_data_end+0xfffdaffc>

00042130 <log>:
   42130:	defff104 	addi	sp,sp,-60
   42134:	dd000d15 	stw	r20,52(sp)
   42138:	05000174 	movhi	r20,5
   4213c:	dcc00c15 	stw	r19,48(sp)
   42140:	dc800b15 	stw	r18,44(sp)
   42144:	dc400a15 	stw	r17,40(sp)
   42148:	dc000915 	stw	r16,36(sp)
   4214c:	dfc00e15 	stw	ra,56(sp)
   42150:	a5332c04 	addi	r20,r20,-13136
   42154:	2027883a 	mov	r19,r4
   42158:	2825883a 	mov	r18,r5
   4215c:	004260c0 	call	4260c <__ieee754_log>
   42160:	1821883a 	mov	r16,r3
   42164:	a0c00017 	ldw	r3,0(r20)
   42168:	1023883a 	mov	r17,r2
   4216c:	00bfffc4 	movi	r2,-1
   42170:	18800a26 	beq	r3,r2,4219c <log+0x6c>
   42174:	9809883a 	mov	r4,r19
   42178:	900b883a 	mov	r5,r18
   4217c:	0042d280 	call	42d28 <__fpclassifyd>
   42180:	10000626 	beq	r2,zero,4219c <log+0x6c>
   42184:	000d883a 	mov	r6,zero
   42188:	000f883a 	mov	r7,zero
   4218c:	9809883a 	mov	r4,r19
   42190:	900b883a 	mov	r5,r18
   42194:	00456e00 	call	456e0 <__gedf2>
   42198:	00800a0e 	bge	zero,r2,421c4 <log+0x94>
   4219c:	8805883a 	mov	r2,r17
   421a0:	8007883a 	mov	r3,r16
   421a4:	dfc00e17 	ldw	ra,56(sp)
   421a8:	dd000d17 	ldw	r20,52(sp)
   421ac:	dcc00c17 	ldw	r19,48(sp)
   421b0:	dc800b17 	ldw	r18,44(sp)
   421b4:	dc400a17 	ldw	r17,40(sp)
   421b8:	dc000917 	ldw	r16,36(sp)
   421bc:	dec00f04 	addi	sp,sp,60
   421c0:	f800283a 	ret
   421c4:	00800174 	movhi	r2,5
   421c8:	a4000017 	ldw	r16,0(r20)
   421cc:	10ae0704 	addi	r2,r2,-18404
   421d0:	d8000815 	stw	zero,32(sp)
   421d4:	d8800115 	stw	r2,4(sp)
   421d8:	dcc00215 	stw	r19,8(sp)
   421dc:	dc800315 	stw	r18,12(sp)
   421e0:	dcc00415 	stw	r19,16(sp)
   421e4:	dc800515 	stw	r18,20(sp)
   421e8:	000d883a 	mov	r6,zero
   421ec:	000f883a 	mov	r7,zero
   421f0:	9809883a 	mov	r4,r19
   421f4:	900b883a 	mov	r5,r18
   421f8:	8000101e 	bne	r16,zero,4223c <log+0x10c>
   421fc:	00b80034 	movhi	r2,57344
   42200:	d8800615 	stw	r2,24(sp)
   42204:	00b1fc34 	movhi	r2,51184
   42208:	10bfffc4 	addi	r2,r2,-1
   4220c:	d8800715 	stw	r2,28(sp)
   42210:	00456580 	call	45658 <__eqdf2>
   42214:	10001f1e 	bne	r2,zero,42294 <log+0x164>
   42218:	00800084 	movi	r2,2
   4221c:	d8800015 	stw	r2,0(sp)
   42220:	d809883a 	mov	r4,sp
   42224:	0042d9c0 	call	42d9c <matherr>
   42228:	1000151e 	bne	r2,zero,42280 <log+0x150>
   4222c:	0046c480 	call	46c48 <__errno>
   42230:	00c00884 	movi	r3,34
   42234:	10c00015 	stw	r3,0(r2)
   42238:	00001106 	br	42280 <log+0x150>
   4223c:	00bffc34 	movhi	r2,65520
   42240:	d8000615 	stw	zero,24(sp)
   42244:	d8800715 	stw	r2,28(sp)
   42248:	00456580 	call	45658 <__eqdf2>
   4224c:	10001726 	beq	r2,zero,422ac <log+0x17c>
   42250:	00800044 	movi	r2,1
   42254:	d8800015 	stw	r2,0(sp)
   42258:	00800084 	movi	r2,2
   4225c:	80800f1e 	bne	r16,r2,4229c <log+0x16c>
   42260:	0046c480 	call	46c48 <__errno>
   42264:	00c00844 	movi	r3,33
   42268:	10c00015 	stw	r3,0(r2)
   4226c:	01000174 	movhi	r4,5
   42270:	212e0604 	addi	r4,r4,-18408
   42274:	0042da40 	call	42da4 <nan>
   42278:	d8800615 	stw	r2,24(sp)
   4227c:	d8c00715 	stw	r3,28(sp)
   42280:	d8800817 	ldw	r2,32(sp)
   42284:	10000d1e 	bne	r2,zero,422bc <log+0x18c>
   42288:	d8800617 	ldw	r2,24(sp)
   4228c:	d8c00717 	ldw	r3,28(sp)
   42290:	003fc406 	br	421a4 <__alt_data_end+0xfffdb0a4>
   42294:	00800044 	movi	r2,1
   42298:	d8800015 	stw	r2,0(sp)
   4229c:	d809883a 	mov	r4,sp
   422a0:	0042d9c0 	call	42d9c <matherr>
   422a4:	103ff11e 	bne	r2,zero,4226c <__alt_data_end+0xfffdb16c>
   422a8:	003fed06 	br	42260 <__alt_data_end+0xfffdb160>
   422ac:	00800084 	movi	r2,2
   422b0:	d8800015 	stw	r2,0(sp)
   422b4:	80bfdd26 	beq	r16,r2,4222c <__alt_data_end+0xfffdb12c>
   422b8:	003fd906 	br	42220 <__alt_data_end+0xfffdb120>
   422bc:	0046c480 	call	46c48 <__errno>
   422c0:	d8c00817 	ldw	r3,32(sp)
   422c4:	10c00015 	stw	r3,0(r2)
   422c8:	003fef06 	br	42288 <__alt_data_end+0xfffdb188>

000422cc <__ieee754_fmod>:
   422cc:	00a00034 	movhi	r2,32768
   422d0:	10bfffc4 	addi	r2,r2,-1
   422d4:	deffff04 	addi	sp,sp,-4
   422d8:	3896703a 	and	r11,r7,r2
   422dc:	dfc00015 	stw	ra,0(sp)
   422e0:	32c4b03a 	or	r2,r6,r11
   422e4:	10001926 	beq	r2,zero,4234c <__ieee754_fmod+0x80>
   422e8:	28e0002c 	andhi	r3,r5,32768
   422ec:	025ffc34 	movhi	r9,32752
   422f0:	28d8f03a 	xor	r12,r5,r3
   422f4:	4a7fffc4 	addi	r9,r9,-1
   422f8:	4b001416 	blt	r9,r12,4234c <__ieee754_fmod+0x80>
   422fc:	0185c83a 	sub	r2,zero,r6
   42300:	1184b03a 	or	r2,r2,r6
   42304:	1004d7fa 	srli	r2,r2,31
   42308:	025ffc34 	movhi	r9,32752
   4230c:	12c4b03a 	or	r2,r2,r11
   42310:	48800e36 	bltu	r9,r2,4234c <__ieee754_fmod+0x80>
   42314:	2011883a 	mov	r8,r4
   42318:	301d883a 	mov	r14,r6
   4231c:	5b001416 	blt	r11,r12,42370 <__ieee754_fmod+0xa4>
   42320:	62c01e16 	blt	r12,r11,4239c <__ieee754_fmod+0xd0>
   42324:	21801d36 	bltu	r4,r6,4239c <__ieee754_fmod+0xd0>
   42328:	2180111e 	bne	r4,r6,42370 <__ieee754_fmod+0xa4>
   4232c:	1806d7fa 	srli	r3,r3,31
   42330:	180490fa 	slli	r2,r3,3
   42334:	00c00174 	movhi	r3,5
   42338:	18ee0804 	addi	r3,r3,-18400
   4233c:	1887883a 	add	r3,r3,r2
   42340:	18800017 	ldw	r2,0(r3)
   42344:	18c00117 	ldw	r3,4(r3)
   42348:	00000606 	br	42364 <__ieee754_fmod+0x98>
   4234c:	00457bc0 	call	457bc <__muldf3>
   42350:	100d883a 	mov	r6,r2
   42354:	180f883a 	mov	r7,r3
   42358:	1009883a 	mov	r4,r2
   4235c:	180b883a 	mov	r5,r3
   42360:	0044d700 	call	44d70 <__divdf3>
   42364:	dfc00017 	ldw	ra,0(sp)
   42368:	dec00104 	addi	sp,sp,4
   4236c:	f800283a 	ret
   42370:	00800434 	movhi	r2,16
   42374:	10bfffc4 	addi	r2,r2,-1
   42378:	13000b16 	blt	r2,r12,423a8 <__ieee754_fmod+0xdc>
   4237c:	6000741e 	bne	r12,zero,42550 <__ieee754_fmod+0x284>
   42380:	2013883a 	mov	r9,r4
   42384:	02befb44 	movi	r10,-1043
   42388:	0100090e 	bge	zero,r4,423b0 <__ieee754_fmod+0xe4>
   4238c:	4a53883a 	add	r9,r9,r9
   42390:	52bfffc4 	addi	r10,r10,-1
   42394:	027ffd16 	blt	zero,r9,4238c <__alt_data_end+0xfffdb28c>
   42398:	00000506 	br	423b0 <__ieee754_fmod+0xe4>
   4239c:	2005883a 	mov	r2,r4
   423a0:	2807883a 	mov	r3,r5
   423a4:	003fef06 	br	42364 <__alt_data_end+0xfffdb264>
   423a8:	6015d53a 	srai	r10,r12,20
   423ac:	52bf0044 	addi	r10,r10,-1023
   423b0:	00800434 	movhi	r2,16
   423b4:	10bfffc4 	addi	r2,r2,-1
   423b8:	12c00816 	blt	r2,r11,423dc <__ieee754_fmod+0x110>
   423bc:	58006b1e 	bne	r11,zero,4256c <__ieee754_fmod+0x2a0>
   423c0:	3013883a 	mov	r9,r6
   423c4:	03fefb44 	movi	r15,-1043
   423c8:	0180060e 	bge	zero,r6,423e4 <__ieee754_fmod+0x118>
   423cc:	4a53883a 	add	r9,r9,r9
   423d0:	7bffffc4 	addi	r15,r15,-1
   423d4:	027ffd16 	blt	zero,r9,423cc <__alt_data_end+0xfffdb2cc>
   423d8:	00000206 	br	423e4 <__ieee754_fmod+0x118>
   423dc:	581fd53a 	srai	r15,r11,20
   423e0:	7bff0044 	addi	r15,r15,-1023
   423e4:	00bf0084 	movi	r2,-1022
   423e8:	50804d16 	blt	r10,r2,42520 <__ieee754_fmod+0x254>
   423ec:	00800434 	movhi	r2,16
   423f0:	10bfffc4 	addi	r2,r2,-1
   423f4:	6088703a 	and	r4,r12,r2
   423f8:	21000434 	orhi	r4,r4,16
   423fc:	00bf0084 	movi	r2,-1022
   42400:	78803d16 	blt	r15,r2,424f8 <__ieee754_fmod+0x22c>
   42404:	02400434 	movhi	r9,16
   42408:	4a7fffc4 	addi	r9,r9,-1
   4240c:	3a4e703a 	and	r7,r7,r9
   42410:	39800434 	orhi	r6,r7,16
   42414:	53d5c83a 	sub	r10,r10,r15
   42418:	00000406 	br	4242c <__ieee754_fmod+0x160>
   4241c:	60001126 	beq	r12,zero,42464 <__ieee754_fmod+0x198>
   42420:	4a51883a 	add	r8,r9,r9
   42424:	6ac9883a 	add	r4,r13,r11
   42428:	52bfffc4 	addi	r10,r10,-1
   4242c:	4393c83a 	sub	r9,r8,r14
   42430:	4816d7fa 	srli	r11,r9,31
   42434:	50001326 	beq	r10,zero,42484 <__ieee754_fmod+0x1b8>
   42438:	218fc83a 	sub	r7,r4,r6
   4243c:	4380012e 	bgeu	r8,r14,42444 <__ieee754_fmod+0x178>
   42440:	39ffffc4 	addi	r7,r7,-1
   42444:	3a58b03a 	or	r12,r7,r9
   42448:	39db883a 	add	r13,r7,r7
   4244c:	383ff30e 	bge	r7,zero,4241c <__alt_data_end+0xfffdb31c>
   42450:	4004d7fa 	srli	r2,r8,31
   42454:	2109883a 	add	r4,r4,r4
   42458:	4211883a 	add	r8,r8,r8
   4245c:	2089883a 	add	r4,r4,r2
   42460:	003ff106 	br	42428 <__alt_data_end+0xfffdb328>
   42464:	1806d7fa 	srli	r3,r3,31
   42468:	00800174 	movhi	r2,5
   4246c:	10ae0804 	addi	r2,r2,-18400
   42470:	180690fa 	slli	r3,r3,3
   42474:	10c7883a 	add	r3,r2,r3
   42478:	18800017 	ldw	r2,0(r3)
   4247c:	18c00117 	ldw	r3,4(r3)
   42480:	003fb806 	br	42364 <__alt_data_end+0xfffdb264>
   42484:	218dc83a 	sub	r6,r4,r6
   42488:	43802f36 	bltu	r8,r14,42548 <__ieee754_fmod+0x27c>
   4248c:	30004f16 	blt	r6,zero,425cc <__ieee754_fmod+0x300>
   42490:	4391c83a 	sub	r8,r8,r14
   42494:	3204b03a 	or	r2,r6,r8
   42498:	103ff226 	beq	r2,zero,42464 <__alt_data_end+0xfffdb364>
   4249c:	01000434 	movhi	r4,16
   424a0:	213fffc4 	addi	r4,r4,-1
   424a4:	21800616 	blt	r4,r6,424c0 <__ieee754_fmod+0x1f4>
   424a8:	4004d7fa 	srli	r2,r8,31
   424ac:	318d883a 	add	r6,r6,r6
   424b0:	4211883a 	add	r8,r8,r8
   424b4:	308d883a 	add	r6,r6,r2
   424b8:	7bffffc4 	addi	r15,r15,-1
   424bc:	21bffa0e 	bge	r4,r6,424a8 <__alt_data_end+0xfffdb3a8>
   424c0:	01ff0084 	movi	r7,-1022
   424c4:	79c0390e 	bge	r15,r7,425ac <__ieee754_fmod+0x2e0>
   424c8:	3bcfc83a 	sub	r7,r7,r15
   424cc:	00800504 	movi	r2,20
   424d0:	11c04016 	blt	r2,r7,425d4 <__ieee754_fmod+0x308>
   424d4:	00800804 	movi	r2,32
   424d8:	11c5c83a 	sub	r2,r2,r7
   424dc:	41d0d83a 	srl	r8,r8,r7
   424e0:	3084983a 	sll	r2,r6,r2
   424e4:	31cfd83a 	sra	r7,r6,r7
   424e8:	1208b03a 	or	r4,r2,r8
   424ec:	2005883a 	mov	r2,r4
   424f0:	38c6b03a 	or	r3,r7,r3
   424f4:	003f9b06 	br	42364 <__alt_data_end+0xfffdb264>
   424f8:	13c5c83a 	sub	r2,r2,r15
   424fc:	014007c4 	movi	r5,31
   42500:	28802516 	blt	r5,r2,42598 <__ieee754_fmod+0x2cc>
   42504:	01400804 	movi	r5,32
   42508:	288bc83a 	sub	r5,r5,r2
   4250c:	314ad83a 	srl	r5,r6,r5
   42510:	588e983a 	sll	r7,r11,r2
   42514:	309c983a 	sll	r14,r6,r2
   42518:	29ccb03a 	or	r6,r5,r7
   4251c:	003fbd06 	br	42414 <__alt_data_end+0xfffdb314>
   42520:	1285c83a 	sub	r2,r2,r10
   42524:	014007c4 	movi	r5,31
   42528:	28801616 	blt	r5,r2,42584 <__ieee754_fmod+0x2b8>
   4252c:	02400804 	movi	r9,32
   42530:	4893c83a 	sub	r9,r9,r2
   42534:	2252d83a 	srl	r9,r4,r9
   42538:	608a983a 	sll	r5,r12,r2
   4253c:	2090983a 	sll	r8,r4,r2
   42540:	4948b03a 	or	r4,r9,r5
   42544:	003fad06 	br	423fc <__alt_data_end+0xfffdb2fc>
   42548:	31bfffc4 	addi	r6,r6,-1
   4254c:	003fcf06 	br	4248c <__alt_data_end+0xfffdb38c>
   42550:	601292fa 	slli	r9,r12,11
   42554:	02bf0084 	movi	r10,-1022
   42558:	027f950e 	bge	zero,r9,423b0 <__alt_data_end+0xfffdb2b0>
   4255c:	4a53883a 	add	r9,r9,r9
   42560:	52bfffc4 	addi	r10,r10,-1
   42564:	027ffd16 	blt	zero,r9,4255c <__alt_data_end+0xfffdb45c>
   42568:	003f9106 	br	423b0 <__alt_data_end+0xfffdb2b0>
   4256c:	581292fa 	slli	r9,r11,11
   42570:	03ff0084 	movi	r15,-1022
   42574:	4a53883a 	add	r9,r9,r9
   42578:	7bffffc4 	addi	r15,r15,-1
   4257c:	027ffd16 	blt	zero,r9,42574 <__alt_data_end+0xfffdb474>
   42580:	003f9806 	br	423e4 <__alt_data_end+0xfffdb2e4>
   42584:	017ef884 	movi	r5,-1054
   42588:	2a8bc83a 	sub	r5,r5,r10
   4258c:	2148983a 	sll	r4,r4,r5
   42590:	0011883a 	mov	r8,zero
   42594:	003f9906 	br	423fc <__alt_data_end+0xfffdb2fc>
   42598:	00bef884 	movi	r2,-1054
   4259c:	13c5c83a 	sub	r2,r2,r15
   425a0:	308c983a 	sll	r6,r6,r2
   425a4:	001d883a 	mov	r14,zero
   425a8:	003f9a06 	br	42414 <__alt_data_end+0xfffdb314>
   425ac:	7900ffc4 	addi	r4,r15,1023
   425b0:	00bffc34 	movhi	r2,65520
   425b4:	2008953a 	slli	r4,r4,20
   425b8:	308d883a 	add	r6,r6,r2
   425bc:	30c6b03a 	or	r3,r6,r3
   425c0:	4005883a 	mov	r2,r8
   425c4:	1906b03a 	or	r3,r3,r4
   425c8:	003f6606 	br	42364 <__alt_data_end+0xfffdb264>
   425cc:	200d883a 	mov	r6,r4
   425d0:	003fb006 	br	42494 <__alt_data_end+0xfffdb394>
   425d4:	008007c4 	movi	r2,31
   425d8:	11c00716 	blt	r2,r7,425f8 <__ieee754_fmod+0x32c>
   425dc:	01000804 	movi	r4,32
   425e0:	21c9c83a 	sub	r4,r4,r7
   425e4:	41d0d83a 	srl	r8,r8,r7
   425e8:	310c983a 	sll	r6,r6,r4
   425ec:	180f883a 	mov	r7,r3
   425f0:	3208b03a 	or	r4,r6,r8
   425f4:	003fbd06 	br	424ec <__alt_data_end+0xfffdb3ec>
   425f8:	013ef884 	movi	r4,-1054
   425fc:	23c9c83a 	sub	r4,r4,r15
   42600:	3109d83a 	sra	r4,r6,r4
   42604:	180f883a 	mov	r7,r3
   42608:	003fb806 	br	424ec <__alt_data_end+0xfffdb3ec>

0004260c <__ieee754_log>:
   4260c:	defff204 	addi	sp,sp,-56
   42610:	01800434 	movhi	r6,16
   42614:	dfc00d15 	stw	ra,52(sp)
   42618:	df000c15 	stw	fp,48(sp)
   4261c:	ddc00b15 	stw	r23,44(sp)
   42620:	dd800a15 	stw	r22,40(sp)
   42624:	dd400915 	stw	r21,36(sp)
   42628:	dd000815 	stw	r20,32(sp)
   4262c:	dcc00715 	stw	r19,28(sp)
   42630:	dc800615 	stw	r18,24(sp)
   42634:	dc400515 	stw	r17,20(sp)
   42638:	dc000415 	stw	r16,16(sp)
   4263c:	31bfffc4 	addi	r6,r6,-1
   42640:	280f883a 	mov	r7,r5
   42644:	2005883a 	mov	r2,r4
   42648:	31404616 	blt	r6,r5,42764 <__ieee754_log+0x158>
   4264c:	00e00034 	movhi	r3,32768
   42650:	18ffffc4 	addi	r3,r3,-1
   42654:	28c6703a 	and	r3,r5,r3
   42658:	1906b03a 	or	r3,r3,r4
   4265c:	1800f426 	beq	r3,zero,42a30 <__ieee754_log+0x424>
   42660:	28017816 	blt	r5,zero,42c44 <__ieee754_log+0x638>
   42664:	01d0d434 	movhi	r7,17232
   42668:	000d883a 	mov	r6,zero
   4266c:	00457bc0 	call	457bc <__muldf3>
   42670:	015ffc34 	movhi	r5,32752
   42674:	297fffc4 	addi	r5,r5,-1
   42678:	180f883a 	mov	r7,r3
   4267c:	013ff284 	movi	r4,-54
   42680:	28c03d16 	blt	r5,r3,42778 <__ieee754_log+0x16c>
   42684:	04c00434 	movhi	r19,16
   42688:	9cffffc4 	addi	r19,r19,-1
   4268c:	01400274 	movhi	r5,9
   42690:	1cf8703a 	and	fp,r3,r19
   42694:	2957d904 	addi	r5,r5,24420
   42698:	1821d53a 	srai	r16,r3,20
   4269c:	e14b883a 	add	r5,fp,r5
   426a0:	2940042c 	andhi	r5,r5,16
   426a4:	2807d53a 	srai	r3,r5,20
   426a8:	843f0044 	addi	r16,r16,-1023
   426ac:	294ffc3c 	xorhi	r5,r5,16368
   426b0:	8121883a 	add	r16,r16,r4
   426b4:	000d883a 	mov	r6,zero
   426b8:	01cffc34 	movhi	r7,16368
   426bc:	1009883a 	mov	r4,r2
   426c0:	2f0ab03a 	or	r5,r5,fp
   426c4:	1c21883a 	add	r16,r3,r16
   426c8:	0045ed40 	call	45ed4 <__subdf3>
   426cc:	1025883a 	mov	r18,r2
   426d0:	e0800084 	addi	r2,fp,2
   426d4:	14e6703a 	and	r19,r2,r19
   426d8:	00800084 	movi	r2,2
   426dc:	1823883a 	mov	r17,r3
   426e0:	000d883a 	mov	r6,zero
   426e4:	14c03416 	blt	r2,r19,427b8 <__ieee754_log+0x1ac>
   426e8:	000f883a 	mov	r7,zero
   426ec:	9009883a 	mov	r4,r18
   426f0:	180b883a 	mov	r5,r3
   426f4:	00456580 	call	45658 <__eqdf2>
   426f8:	1000d31e 	bne	r2,zero,42a48 <__ieee754_log+0x43c>
   426fc:	80015926 	beq	r16,zero,42c64 <__ieee754_log+0x658>
   42700:	8009883a 	mov	r4,r16
   42704:	00468500 	call	46850 <__floatsidf>
   42708:	01cff9b4 	movhi	r7,16358
   4270c:	39cb9084 	addi	r7,r7,11842
   42710:	01bfb834 	movhi	r6,65248
   42714:	1009883a 	mov	r4,r2
   42718:	180b883a 	mov	r5,r3
   4271c:	1023883a 	mov	r17,r2
   42720:	1821883a 	mov	r16,r3
   42724:	00457bc0 	call	457bc <__muldf3>
   42728:	018d5e74 	movhi	r6,13689
   4272c:	01cf7ab4 	movhi	r7,15850
   42730:	8809883a 	mov	r4,r17
   42734:	800b883a 	mov	r5,r16
   42738:	318f1d84 	addi	r6,r6,15478
   4273c:	39ce7bc4 	addi	r7,r7,14831
   42740:	1027883a 	mov	r19,r2
   42744:	1825883a 	mov	r18,r3
   42748:	00457bc0 	call	457bc <__muldf3>
   4274c:	100d883a 	mov	r6,r2
   42750:	180f883a 	mov	r7,r3
   42754:	9809883a 	mov	r4,r19
   42758:	900b883a 	mov	r5,r18
   4275c:	00444c40 	call	444c4 <__adddf3>
   42760:	00000906 	br	42788 <__ieee754_log+0x17c>
   42764:	2807883a 	mov	r3,r5
   42768:	015ffc34 	movhi	r5,32752
   4276c:	297fffc4 	addi	r5,r5,-1
   42770:	0009883a 	mov	r4,zero
   42774:	28ffc30e 	bge	r5,r3,42684 <__alt_data_end+0xfffdb584>
   42778:	100d883a 	mov	r6,r2
   4277c:	1009883a 	mov	r4,r2
   42780:	380b883a 	mov	r5,r7
   42784:	00444c40 	call	444c4 <__adddf3>
   42788:	dfc00d17 	ldw	ra,52(sp)
   4278c:	df000c17 	ldw	fp,48(sp)
   42790:	ddc00b17 	ldw	r23,44(sp)
   42794:	dd800a17 	ldw	r22,40(sp)
   42798:	dd400917 	ldw	r21,36(sp)
   4279c:	dd000817 	ldw	r20,32(sp)
   427a0:	dcc00717 	ldw	r19,28(sp)
   427a4:	dc800617 	ldw	r18,24(sp)
   427a8:	dc400517 	ldw	r17,20(sp)
   427ac:	dc000417 	ldw	r16,16(sp)
   427b0:	dec00e04 	addi	sp,sp,56
   427b4:	f800283a 	ret
   427b8:	01d00034 	movhi	r7,16384
   427bc:	9009883a 	mov	r4,r18
   427c0:	180b883a 	mov	r5,r3
   427c4:	00444c40 	call	444c4 <__adddf3>
   427c8:	100d883a 	mov	r6,r2
   427cc:	180f883a 	mov	r7,r3
   427d0:	880b883a 	mov	r5,r17
   427d4:	9009883a 	mov	r4,r18
   427d8:	0044d700 	call	44d70 <__divdf3>
   427dc:	8009883a 	mov	r4,r16
   427e0:	102d883a 	mov	r22,r2
   427e4:	182b883a 	mov	r21,r3
   427e8:	00468500 	call	46850 <__floatsidf>
   427ec:	b00d883a 	mov	r6,r22
   427f0:	a80f883a 	mov	r7,r21
   427f4:	b009883a 	mov	r4,r22
   427f8:	a80b883a 	mov	r5,r21
   427fc:	d8800015 	stw	r2,0(sp)
   42800:	d8c00115 	stw	r3,4(sp)
   42804:	00457bc0 	call	457bc <__muldf3>
   42808:	027ffeb4 	movhi	r9,65530
   4280c:	4a7ae184 	addi	r9,r9,-5242
   42810:	100d883a 	mov	r6,r2
   42814:	180f883a 	mov	r7,r3
   42818:	1009883a 	mov	r4,r2
   4281c:	180b883a 	mov	r5,r3
   42820:	e26f883a 	add	r23,fp,r9
   42824:	d8c00315 	stw	r3,12(sp)
   42828:	d8800215 	stw	r2,8(sp)
   4282c:	00457bc0 	call	457bc <__muldf3>
   42830:	01b7cfb4 	movhi	r6,57150
   42834:	01cff0f4 	movhi	r7,16323
   42838:	31949104 	addi	r6,r6,21060
   4283c:	39fc4484 	addi	r7,r7,-3822
   42840:	1009883a 	mov	r4,r2
   42844:	180b883a 	mov	r5,r3
   42848:	1029883a 	mov	r20,r2
   4284c:	1827883a 	mov	r19,r3
   42850:	00457bc0 	call	457bc <__muldf3>
   42854:	01a5b2f4 	movhi	r6,38603
   42858:	01cff1f4 	movhi	r7,16327
   4285c:	3180f784 	addi	r6,r6,990
   42860:	39d19904 	addi	r7,r7,18020
   42864:	1009883a 	mov	r4,r2
   42868:	180b883a 	mov	r5,r3
   4286c:	00444c40 	call	444c4 <__adddf3>
   42870:	a00d883a 	mov	r6,r20
   42874:	980f883a 	mov	r7,r19
   42878:	1009883a 	mov	r4,r2
   4287c:	180b883a 	mov	r5,r3
   42880:	00457bc0 	call	457bc <__muldf3>
   42884:	01a508f4 	movhi	r6,37923
   42888:	01cff4b4 	movhi	r7,16338
   4288c:	31a4d644 	addi	r6,r6,-27815
   42890:	39d24904 	addi	r7,r7,18724
   42894:	1009883a 	mov	r4,r2
   42898:	180b883a 	mov	r5,r3
   4289c:	00444c40 	call	444c4 <__adddf3>
   428a0:	a00d883a 	mov	r6,r20
   428a4:	980f883a 	mov	r7,r19
   428a8:	1009883a 	mov	r4,r2
   428ac:	180b883a 	mov	r5,r3
   428b0:	00457bc0 	call	457bc <__muldf3>
   428b4:	01955574 	movhi	r6,21845
   428b8:	01cff974 	movhi	r7,16357
   428bc:	319564c4 	addi	r6,r6,21907
   428c0:	39d55544 	addi	r7,r7,21845
   428c4:	1009883a 	mov	r4,r2
   428c8:	180b883a 	mov	r5,r3
   428cc:	00444c40 	call	444c4 <__adddf3>
   428d0:	dac00217 	ldw	r11,8(sp)
   428d4:	da800317 	ldw	r10,12(sp)
   428d8:	1009883a 	mov	r4,r2
   428dc:	580d883a 	mov	r6,r11
   428e0:	500f883a 	mov	r7,r10
   428e4:	180b883a 	mov	r5,r3
   428e8:	00457bc0 	call	457bc <__muldf3>
   428ec:	01b41e74 	movhi	r6,53369
   428f0:	01cff134 	movhi	r7,16324
   428f4:	a009883a 	mov	r4,r20
   428f8:	980b883a 	mov	r5,r19
   428fc:	31b1a7c4 	addi	r6,r6,-14689
   42900:	39e68244 	addi	r7,r7,-26103
   42904:	d8c00315 	stw	r3,12(sp)
   42908:	d8800215 	stw	r2,8(sp)
   4290c:	00457bc0 	call	457bc <__muldf3>
   42910:	018763b4 	movhi	r6,7566
   42914:	01cff334 	movhi	r7,16332
   42918:	319e2bc4 	addi	r6,r6,30895
   4291c:	39dc7144 	addi	r7,r7,29125
   42920:	1009883a 	mov	r4,r2
   42924:	180b883a 	mov	r5,r3
   42928:	00444c40 	call	444c4 <__adddf3>
   4292c:	a00d883a 	mov	r6,r20
   42930:	980f883a 	mov	r7,r19
   42934:	1009883a 	mov	r4,r2
   42938:	180b883a 	mov	r5,r3
   4293c:	00457bc0 	call	457bc <__muldf3>
   42940:	01a66634 	movhi	r6,39320
   42944:	01cff6b4 	movhi	r7,16346
   42948:	31be8104 	addi	r6,r6,-1532
   4294c:	39e66644 	addi	r7,r7,-26215
   42950:	1009883a 	mov	r4,r2
   42954:	180b883a 	mov	r5,r3
   42958:	00444c40 	call	444c4 <__adddf3>
   4295c:	a00d883a 	mov	r6,r20
   42960:	980f883a 	mov	r7,r19
   42964:	1009883a 	mov	r4,r2
   42968:	180b883a 	mov	r5,r3
   4296c:	00457bc0 	call	457bc <__muldf3>
   42970:	dac00217 	ldw	r11,8(sp)
   42974:	da800317 	ldw	r10,12(sp)
   42978:	100d883a 	mov	r6,r2
   4297c:	180f883a 	mov	r7,r3
   42980:	5809883a 	mov	r4,r11
   42984:	500b883a 	mov	r5,r10
   42988:	00444c40 	call	444c4 <__adddf3>
   4298c:	1827883a 	mov	r19,r3
   42990:	00c001f4 	movhi	r3,7
   42994:	18ee1444 	addi	r3,r3,-18351
   42998:	1f07c83a 	sub	r3,r3,fp
   4299c:	1dd2b03a 	or	r9,r3,r23
   429a0:	1029883a 	mov	r20,r2
   429a4:	0240490e 	bge	zero,r9,42acc <__ieee754_log+0x4c0>
   429a8:	000d883a 	mov	r6,zero
   429ac:	01cff834 	movhi	r7,16352
   429b0:	9009883a 	mov	r4,r18
   429b4:	880b883a 	mov	r5,r17
   429b8:	00457bc0 	call	457bc <__muldf3>
   429bc:	900d883a 	mov	r6,r18
   429c0:	880f883a 	mov	r7,r17
   429c4:	1009883a 	mov	r4,r2
   429c8:	180b883a 	mov	r5,r3
   429cc:	00457bc0 	call	457bc <__muldf3>
   429d0:	1039883a 	mov	fp,r2
   429d4:	182f883a 	mov	r23,r3
   429d8:	8000691e 	bne	r16,zero,42b80 <__ieee754_log+0x574>
   429dc:	100d883a 	mov	r6,r2
   429e0:	180f883a 	mov	r7,r3
   429e4:	a009883a 	mov	r4,r20
   429e8:	980b883a 	mov	r5,r19
   429ec:	00444c40 	call	444c4 <__adddf3>
   429f0:	b00d883a 	mov	r6,r22
   429f4:	a80f883a 	mov	r7,r21
   429f8:	1009883a 	mov	r4,r2
   429fc:	180b883a 	mov	r5,r3
   42a00:	00457bc0 	call	457bc <__muldf3>
   42a04:	100d883a 	mov	r6,r2
   42a08:	180f883a 	mov	r7,r3
   42a0c:	e009883a 	mov	r4,fp
   42a10:	b80b883a 	mov	r5,r23
   42a14:	0045ed40 	call	45ed4 <__subdf3>
   42a18:	100d883a 	mov	r6,r2
   42a1c:	180f883a 	mov	r7,r3
   42a20:	9009883a 	mov	r4,r18
   42a24:	880b883a 	mov	r5,r17
   42a28:	0045ed40 	call	45ed4 <__subdf3>
   42a2c:	003f5606 	br	42788 <__alt_data_end+0xfffdb688>
   42a30:	000d883a 	mov	r6,zero
   42a34:	000f883a 	mov	r7,zero
   42a38:	0009883a 	mov	r4,zero
   42a3c:	0170d434 	movhi	r5,50000
   42a40:	0044d700 	call	44d70 <__divdf3>
   42a44:	003f5006 	br	42788 <__alt_data_end+0xfffdb688>
   42a48:	01955574 	movhi	r6,21845
   42a4c:	01cff574 	movhi	r7,16341
   42a50:	31955544 	addi	r6,r6,21845
   42a54:	39d55544 	addi	r7,r7,21845
   42a58:	9009883a 	mov	r4,r18
   42a5c:	880b883a 	mov	r5,r17
   42a60:	00457bc0 	call	457bc <__muldf3>
   42a64:	100d883a 	mov	r6,r2
   42a68:	180f883a 	mov	r7,r3
   42a6c:	0009883a 	mov	r4,zero
   42a70:	014ff834 	movhi	r5,16352
   42a74:	0045ed40 	call	45ed4 <__subdf3>
   42a78:	900d883a 	mov	r6,r18
   42a7c:	880f883a 	mov	r7,r17
   42a80:	9009883a 	mov	r4,r18
   42a84:	880b883a 	mov	r5,r17
   42a88:	1029883a 	mov	r20,r2
   42a8c:	1827883a 	mov	r19,r3
   42a90:	00457bc0 	call	457bc <__muldf3>
   42a94:	a009883a 	mov	r4,r20
   42a98:	980b883a 	mov	r5,r19
   42a9c:	100d883a 	mov	r6,r2
   42aa0:	180f883a 	mov	r7,r3
   42aa4:	00457bc0 	call	457bc <__muldf3>
   42aa8:	1029883a 	mov	r20,r2
   42aac:	1827883a 	mov	r19,r3
   42ab0:	80006f1e 	bne	r16,zero,42c70 <__ieee754_log+0x664>
   42ab4:	100d883a 	mov	r6,r2
   42ab8:	180f883a 	mov	r7,r3
   42abc:	9009883a 	mov	r4,r18
   42ac0:	880b883a 	mov	r5,r17
   42ac4:	0045ed40 	call	45ed4 <__subdf3>
   42ac8:	003f2f06 	br	42788 <__alt_data_end+0xfffdb688>
   42acc:	80008b26 	beq	r16,zero,42cfc <__ieee754_log+0x6f0>
   42ad0:	d9000017 	ldw	r4,0(sp)
   42ad4:	d9400117 	ldw	r5,4(sp)
   42ad8:	01cff9b4 	movhi	r7,16358
   42adc:	39cb9084 	addi	r7,r7,11842
   42ae0:	01bfb834 	movhi	r6,65248
   42ae4:	00457bc0 	call	457bc <__muldf3>
   42ae8:	a00d883a 	mov	r6,r20
   42aec:	980f883a 	mov	r7,r19
   42af0:	9009883a 	mov	r4,r18
   42af4:	880b883a 	mov	r5,r17
   42af8:	1821883a 	mov	r16,r3
   42afc:	d8800215 	stw	r2,8(sp)
   42b00:	0045ed40 	call	45ed4 <__subdf3>
   42b04:	b00d883a 	mov	r6,r22
   42b08:	a80f883a 	mov	r7,r21
   42b0c:	1009883a 	mov	r4,r2
   42b10:	180b883a 	mov	r5,r3
   42b14:	00457bc0 	call	457bc <__muldf3>
   42b18:	d9000017 	ldw	r4,0(sp)
   42b1c:	d9400117 	ldw	r5,4(sp)
   42b20:	018d5e74 	movhi	r6,13689
   42b24:	01cf7ab4 	movhi	r7,15850
   42b28:	318f1d84 	addi	r6,r6,15478
   42b2c:	39ce7bc4 	addi	r7,r7,14831
   42b30:	1029883a 	mov	r20,r2
   42b34:	1827883a 	mov	r19,r3
   42b38:	00457bc0 	call	457bc <__muldf3>
   42b3c:	a009883a 	mov	r4,r20
   42b40:	980b883a 	mov	r5,r19
   42b44:	100d883a 	mov	r6,r2
   42b48:	180f883a 	mov	r7,r3
   42b4c:	0045ed40 	call	45ed4 <__subdf3>
   42b50:	900d883a 	mov	r6,r18
   42b54:	880f883a 	mov	r7,r17
   42b58:	1009883a 	mov	r4,r2
   42b5c:	180b883a 	mov	r5,r3
   42b60:	0045ed40 	call	45ed4 <__subdf3>
   42b64:	da000217 	ldw	r8,8(sp)
   42b68:	100d883a 	mov	r6,r2
   42b6c:	180f883a 	mov	r7,r3
   42b70:	4009883a 	mov	r4,r8
   42b74:	800b883a 	mov	r5,r16
   42b78:	0045ed40 	call	45ed4 <__subdf3>
   42b7c:	003f0206 	br	42788 <__alt_data_end+0xfffdb688>
   42b80:	d9000017 	ldw	r4,0(sp)
   42b84:	d9400117 	ldw	r5,4(sp)
   42b88:	01cff9b4 	movhi	r7,16358
   42b8c:	39cb9084 	addi	r7,r7,11842
   42b90:	01bfb834 	movhi	r6,65248
   42b94:	00457bc0 	call	457bc <__muldf3>
   42b98:	e00d883a 	mov	r6,fp
   42b9c:	b80f883a 	mov	r7,r23
   42ba0:	a009883a 	mov	r4,r20
   42ba4:	980b883a 	mov	r5,r19
   42ba8:	1821883a 	mov	r16,r3
   42bac:	d8800315 	stw	r2,12(sp)
   42bb0:	00444c40 	call	444c4 <__adddf3>
   42bb4:	b00d883a 	mov	r6,r22
   42bb8:	a80f883a 	mov	r7,r21
   42bbc:	1009883a 	mov	r4,r2
   42bc0:	180b883a 	mov	r5,r3
   42bc4:	00457bc0 	call	457bc <__muldf3>
   42bc8:	d9000017 	ldw	r4,0(sp)
   42bcc:	d9400117 	ldw	r5,4(sp)
   42bd0:	018d5e74 	movhi	r6,13689
   42bd4:	01cf7ab4 	movhi	r7,15850
   42bd8:	318f1d84 	addi	r6,r6,15478
   42bdc:	39ce7bc4 	addi	r7,r7,14831
   42be0:	1029883a 	mov	r20,r2
   42be4:	1827883a 	mov	r19,r3
   42be8:	00457bc0 	call	457bc <__muldf3>
   42bec:	a009883a 	mov	r4,r20
   42bf0:	980b883a 	mov	r5,r19
   42bf4:	100d883a 	mov	r6,r2
   42bf8:	180f883a 	mov	r7,r3
   42bfc:	00444c40 	call	444c4 <__adddf3>
   42c00:	e009883a 	mov	r4,fp
   42c04:	b80b883a 	mov	r5,r23
   42c08:	100d883a 	mov	r6,r2
   42c0c:	180f883a 	mov	r7,r3
   42c10:	0045ed40 	call	45ed4 <__subdf3>
   42c14:	900d883a 	mov	r6,r18
   42c18:	880f883a 	mov	r7,r17
   42c1c:	1009883a 	mov	r4,r2
   42c20:	180b883a 	mov	r5,r3
   42c24:	0045ed40 	call	45ed4 <__subdf3>
   42c28:	da800317 	ldw	r10,12(sp)
   42c2c:	100d883a 	mov	r6,r2
   42c30:	180f883a 	mov	r7,r3
   42c34:	5009883a 	mov	r4,r10
   42c38:	800b883a 	mov	r5,r16
   42c3c:	0045ed40 	call	45ed4 <__subdf3>
   42c40:	003ed106 	br	42788 <__alt_data_end+0xfffdb688>
   42c44:	200d883a 	mov	r6,r4
   42c48:	0045ed40 	call	45ed4 <__subdf3>
   42c4c:	000d883a 	mov	r6,zero
   42c50:	000f883a 	mov	r7,zero
   42c54:	1009883a 	mov	r4,r2
   42c58:	180b883a 	mov	r5,r3
   42c5c:	0044d700 	call	44d70 <__divdf3>
   42c60:	003ec906 	br	42788 <__alt_data_end+0xfffdb688>
   42c64:	0005883a 	mov	r2,zero
   42c68:	0007883a 	mov	r3,zero
   42c6c:	003ec606 	br	42788 <__alt_data_end+0xfffdb688>
   42c70:	8009883a 	mov	r4,r16
   42c74:	00468500 	call	46850 <__floatsidf>
   42c78:	01cff9b4 	movhi	r7,16358
   42c7c:	39cb9084 	addi	r7,r7,11842
   42c80:	01bfb834 	movhi	r6,65248
   42c84:	1009883a 	mov	r4,r2
   42c88:	180b883a 	mov	r5,r3
   42c8c:	102b883a 	mov	r21,r2
   42c90:	1821883a 	mov	r16,r3
   42c94:	00457bc0 	call	457bc <__muldf3>
   42c98:	018d5e74 	movhi	r6,13689
   42c9c:	01cf7ab4 	movhi	r7,15850
   42ca0:	a809883a 	mov	r4,r21
   42ca4:	800b883a 	mov	r5,r16
   42ca8:	318f1d84 	addi	r6,r6,15478
   42cac:	39ce7bc4 	addi	r7,r7,14831
   42cb0:	102f883a 	mov	r23,r2
   42cb4:	182d883a 	mov	r22,r3
   42cb8:	00457bc0 	call	457bc <__muldf3>
   42cbc:	a009883a 	mov	r4,r20
   42cc0:	980b883a 	mov	r5,r19
   42cc4:	100d883a 	mov	r6,r2
   42cc8:	180f883a 	mov	r7,r3
   42ccc:	0045ed40 	call	45ed4 <__subdf3>
   42cd0:	900d883a 	mov	r6,r18
   42cd4:	880f883a 	mov	r7,r17
   42cd8:	1009883a 	mov	r4,r2
   42cdc:	180b883a 	mov	r5,r3
   42ce0:	0045ed40 	call	45ed4 <__subdf3>
   42ce4:	100d883a 	mov	r6,r2
   42ce8:	180f883a 	mov	r7,r3
   42cec:	b809883a 	mov	r4,r23
   42cf0:	b00b883a 	mov	r5,r22
   42cf4:	0045ed40 	call	45ed4 <__subdf3>
   42cf8:	003ea306 	br	42788 <__alt_data_end+0xfffdb688>
   42cfc:	a00d883a 	mov	r6,r20
   42d00:	980f883a 	mov	r7,r19
   42d04:	9009883a 	mov	r4,r18
   42d08:	880b883a 	mov	r5,r17
   42d0c:	0045ed40 	call	45ed4 <__subdf3>
   42d10:	b00d883a 	mov	r6,r22
   42d14:	a80f883a 	mov	r7,r21
   42d18:	1009883a 	mov	r4,r2
   42d1c:	180b883a 	mov	r5,r3
   42d20:	00457bc0 	call	457bc <__muldf3>
   42d24:	003f3c06 	br	42a18 <__alt_data_end+0xfffdb918>

00042d28 <__fpclassifyd>:
   42d28:	00a00034 	movhi	r2,32768
   42d2c:	10bfffc4 	addi	r2,r2,-1
   42d30:	2884703a 	and	r2,r5,r2
   42d34:	10000726 	beq	r2,zero,42d54 <__fpclassifyd+0x2c>
   42d38:	00fffc34 	movhi	r3,65520
   42d3c:	019ff834 	movhi	r6,32736
   42d40:	28c7883a 	add	r3,r5,r3
   42d44:	31bfffc4 	addi	r6,r6,-1
   42d48:	30c00536 	bltu	r6,r3,42d60 <__fpclassifyd+0x38>
   42d4c:	00800104 	movi	r2,4
   42d50:	f800283a 	ret
   42d54:	2000021e 	bne	r4,zero,42d60 <__fpclassifyd+0x38>
   42d58:	00800084 	movi	r2,2
   42d5c:	f800283a 	ret
   42d60:	00dffc34 	movhi	r3,32752
   42d64:	019ff834 	movhi	r6,32736
   42d68:	28cb883a 	add	r5,r5,r3
   42d6c:	31bfffc4 	addi	r6,r6,-1
   42d70:	317ff62e 	bgeu	r6,r5,42d4c <__alt_data_end+0xfffdbc4c>
   42d74:	01400434 	movhi	r5,16
   42d78:	297fffc4 	addi	r5,r5,-1
   42d7c:	28800236 	bltu	r5,r2,42d88 <__fpclassifyd+0x60>
   42d80:	008000c4 	movi	r2,3
   42d84:	f800283a 	ret
   42d88:	10c00226 	beq	r2,r3,42d94 <__fpclassifyd+0x6c>
   42d8c:	0005883a 	mov	r2,zero
   42d90:	f800283a 	ret
   42d94:	2005003a 	cmpeq	r2,r4,zero
   42d98:	f800283a 	ret

00042d9c <matherr>:
   42d9c:	0005883a 	mov	r2,zero
   42da0:	f800283a 	ret

00042da4 <nan>:
   42da4:	0005883a 	mov	r2,zero
   42da8:	00dffe34 	movhi	r3,32760
   42dac:	f800283a 	ret

00042db0 <__fixunssfsi>:
   42db0:	defffd04 	addi	sp,sp,-12
   42db4:	dc000015 	stw	r16,0(sp)
   42db8:	0413c034 	movhi	r16,20224
   42dbc:	800b883a 	mov	r5,r16
   42dc0:	dc400115 	stw	r17,4(sp)
   42dc4:	dfc00215 	stw	ra,8(sp)
   42dc8:	2023883a 	mov	r17,r4
   42dcc:	00438cc0 	call	438cc <__gesf2>
   42dd0:	1000070e 	bge	r2,zero,42df0 <__fixunssfsi+0x40>
   42dd4:	8809883a 	mov	r4,r17
   42dd8:	00443300 	call	44330 <__fixsfsi>
   42ddc:	dfc00217 	ldw	ra,8(sp)
   42de0:	dc400117 	ldw	r17,4(sp)
   42de4:	dc000017 	ldw	r16,0(sp)
   42de8:	dec00304 	addi	sp,sp,12
   42dec:	f800283a 	ret
   42df0:	800b883a 	mov	r5,r16
   42df4:	8809883a 	mov	r4,r17
   42df8:	0043e4c0 	call	43e4c <__subsf3>
   42dfc:	1009883a 	mov	r4,r2
   42e00:	00443300 	call	44330 <__fixsfsi>
   42e04:	00e00034 	movhi	r3,32768
   42e08:	10c5883a 	add	r2,r2,r3
   42e0c:	003ff306 	br	42ddc <__alt_data_end+0xfffdbcdc>

00042e10 <__divsi3>:
   42e10:	20001b16 	blt	r4,zero,42e80 <__divsi3+0x70>
   42e14:	000f883a 	mov	r7,zero
   42e18:	28001616 	blt	r5,zero,42e74 <__divsi3+0x64>
   42e1c:	200d883a 	mov	r6,r4
   42e20:	29001a2e 	bgeu	r5,r4,42e8c <__divsi3+0x7c>
   42e24:	00800804 	movi	r2,32
   42e28:	00c00044 	movi	r3,1
   42e2c:	00000106 	br	42e34 <__divsi3+0x24>
   42e30:	10000d26 	beq	r2,zero,42e68 <__divsi3+0x58>
   42e34:	294b883a 	add	r5,r5,r5
   42e38:	10bfffc4 	addi	r2,r2,-1
   42e3c:	18c7883a 	add	r3,r3,r3
   42e40:	293ffb36 	bltu	r5,r4,42e30 <__alt_data_end+0xfffdbd30>
   42e44:	0005883a 	mov	r2,zero
   42e48:	18000726 	beq	r3,zero,42e68 <__divsi3+0x58>
   42e4c:	0005883a 	mov	r2,zero
   42e50:	31400236 	bltu	r6,r5,42e5c <__divsi3+0x4c>
   42e54:	314dc83a 	sub	r6,r6,r5
   42e58:	10c4b03a 	or	r2,r2,r3
   42e5c:	1806d07a 	srli	r3,r3,1
   42e60:	280ad07a 	srli	r5,r5,1
   42e64:	183ffa1e 	bne	r3,zero,42e50 <__alt_data_end+0xfffdbd50>
   42e68:	38000126 	beq	r7,zero,42e70 <__divsi3+0x60>
   42e6c:	0085c83a 	sub	r2,zero,r2
   42e70:	f800283a 	ret
   42e74:	014bc83a 	sub	r5,zero,r5
   42e78:	39c0005c 	xori	r7,r7,1
   42e7c:	003fe706 	br	42e1c <__alt_data_end+0xfffdbd1c>
   42e80:	0109c83a 	sub	r4,zero,r4
   42e84:	01c00044 	movi	r7,1
   42e88:	003fe306 	br	42e18 <__alt_data_end+0xfffdbd18>
   42e8c:	00c00044 	movi	r3,1
   42e90:	003fee06 	br	42e4c <__alt_data_end+0xfffdbd4c>

00042e94 <__modsi3>:
   42e94:	20001716 	blt	r4,zero,42ef4 <__modsi3+0x60>
   42e98:	000f883a 	mov	r7,zero
   42e9c:	2005883a 	mov	r2,r4
   42ea0:	28001216 	blt	r5,zero,42eec <__modsi3+0x58>
   42ea4:	2900162e 	bgeu	r5,r4,42f00 <__modsi3+0x6c>
   42ea8:	01800804 	movi	r6,32
   42eac:	00c00044 	movi	r3,1
   42eb0:	00000106 	br	42eb8 <__modsi3+0x24>
   42eb4:	30000a26 	beq	r6,zero,42ee0 <__modsi3+0x4c>
   42eb8:	294b883a 	add	r5,r5,r5
   42ebc:	31bfffc4 	addi	r6,r6,-1
   42ec0:	18c7883a 	add	r3,r3,r3
   42ec4:	293ffb36 	bltu	r5,r4,42eb4 <__alt_data_end+0xfffdbdb4>
   42ec8:	18000526 	beq	r3,zero,42ee0 <__modsi3+0x4c>
   42ecc:	1806d07a 	srli	r3,r3,1
   42ed0:	11400136 	bltu	r2,r5,42ed8 <__modsi3+0x44>
   42ed4:	1145c83a 	sub	r2,r2,r5
   42ed8:	280ad07a 	srli	r5,r5,1
   42edc:	183ffb1e 	bne	r3,zero,42ecc <__alt_data_end+0xfffdbdcc>
   42ee0:	38000126 	beq	r7,zero,42ee8 <__modsi3+0x54>
   42ee4:	0085c83a 	sub	r2,zero,r2
   42ee8:	f800283a 	ret
   42eec:	014bc83a 	sub	r5,zero,r5
   42ef0:	003fec06 	br	42ea4 <__alt_data_end+0xfffdbda4>
   42ef4:	0109c83a 	sub	r4,zero,r4
   42ef8:	01c00044 	movi	r7,1
   42efc:	003fe706 	br	42e9c <__alt_data_end+0xfffdbd9c>
   42f00:	00c00044 	movi	r3,1
   42f04:	003ff106 	br	42ecc <__alt_data_end+0xfffdbdcc>

00042f08 <__udivsi3>:
   42f08:	200d883a 	mov	r6,r4
   42f0c:	2900152e 	bgeu	r5,r4,42f64 <__udivsi3+0x5c>
   42f10:	28001416 	blt	r5,zero,42f64 <__udivsi3+0x5c>
   42f14:	00800804 	movi	r2,32
   42f18:	00c00044 	movi	r3,1
   42f1c:	00000206 	br	42f28 <__udivsi3+0x20>
   42f20:	10000e26 	beq	r2,zero,42f5c <__udivsi3+0x54>
   42f24:	28000516 	blt	r5,zero,42f3c <__udivsi3+0x34>
   42f28:	294b883a 	add	r5,r5,r5
   42f2c:	10bfffc4 	addi	r2,r2,-1
   42f30:	18c7883a 	add	r3,r3,r3
   42f34:	293ffa36 	bltu	r5,r4,42f20 <__alt_data_end+0xfffdbe20>
   42f38:	18000826 	beq	r3,zero,42f5c <__udivsi3+0x54>
   42f3c:	0005883a 	mov	r2,zero
   42f40:	31400236 	bltu	r6,r5,42f4c <__udivsi3+0x44>
   42f44:	314dc83a 	sub	r6,r6,r5
   42f48:	10c4b03a 	or	r2,r2,r3
   42f4c:	1806d07a 	srli	r3,r3,1
   42f50:	280ad07a 	srli	r5,r5,1
   42f54:	183ffa1e 	bne	r3,zero,42f40 <__alt_data_end+0xfffdbe40>
   42f58:	f800283a 	ret
   42f5c:	0005883a 	mov	r2,zero
   42f60:	f800283a 	ret
   42f64:	00c00044 	movi	r3,1
   42f68:	003ff406 	br	42f3c <__alt_data_end+0xfffdbe3c>

00042f6c <__umodsi3>:
   42f6c:	2005883a 	mov	r2,r4
   42f70:	2900122e 	bgeu	r5,r4,42fbc <__umodsi3+0x50>
   42f74:	28001116 	blt	r5,zero,42fbc <__umodsi3+0x50>
   42f78:	01800804 	movi	r6,32
   42f7c:	00c00044 	movi	r3,1
   42f80:	00000206 	br	42f8c <__umodsi3+0x20>
   42f84:	30000c26 	beq	r6,zero,42fb8 <__umodsi3+0x4c>
   42f88:	28000516 	blt	r5,zero,42fa0 <__umodsi3+0x34>
   42f8c:	294b883a 	add	r5,r5,r5
   42f90:	31bfffc4 	addi	r6,r6,-1
   42f94:	18c7883a 	add	r3,r3,r3
   42f98:	293ffa36 	bltu	r5,r4,42f84 <__alt_data_end+0xfffdbe84>
   42f9c:	18000626 	beq	r3,zero,42fb8 <__umodsi3+0x4c>
   42fa0:	1806d07a 	srli	r3,r3,1
   42fa4:	11400136 	bltu	r2,r5,42fac <__umodsi3+0x40>
   42fa8:	1145c83a 	sub	r2,r2,r5
   42fac:	280ad07a 	srli	r5,r5,1
   42fb0:	183ffb1e 	bne	r3,zero,42fa0 <__alt_data_end+0xfffdbea0>
   42fb4:	f800283a 	ret
   42fb8:	f800283a 	ret
   42fbc:	00c00044 	movi	r3,1
   42fc0:	003ff706 	br	42fa0 <__alt_data_end+0xfffdbea0>

00042fc4 <__addsf3>:
   42fc4:	defffc04 	addi	sp,sp,-16
   42fc8:	2004d7fa 	srli	r2,r4,31
   42fcc:	280cd5fa 	srli	r6,r5,23
   42fd0:	dc000015 	stw	r16,0(sp)
   42fd4:	00c02034 	movhi	r3,128
   42fd8:	2020d5fa 	srli	r16,r4,23
   42fdc:	280ed7fa 	srli	r7,r5,31
   42fe0:	18ffffc4 	addi	r3,r3,-1
   42fe4:	dc400115 	stw	r17,4(sp)
   42fe8:	1908703a 	and	r4,r3,r4
   42fec:	194a703a 	and	r5,r3,r5
   42ff0:	dfc00315 	stw	ra,12(sp)
   42ff4:	dc800215 	stw	r18,8(sp)
   42ff8:	14403fcc 	andi	r17,r2,255
   42ffc:	84003fcc 	andi	r16,r16,255
   43000:	200890fa 	slli	r4,r4,3
   43004:	31803fcc 	andi	r6,r6,255
   43008:	280a90fa 	slli	r5,r5,3
   4300c:	89c05026 	beq	r17,r7,43150 <__addsf3+0x18c>
   43010:	8185c83a 	sub	r2,r16,r6
   43014:	00807a0e 	bge	zero,r2,43200 <__addsf3+0x23c>
   43018:	30001e1e 	bne	r6,zero,43094 <__addsf3+0xd0>
   4301c:	28006d1e 	bne	r5,zero,431d4 <__addsf3+0x210>
   43020:	208001cc 	andi	r2,r4,7
   43024:	10000426 	beq	r2,zero,43038 <__addsf3+0x74>
   43028:	208003cc 	andi	r2,r4,15
   4302c:	00c00104 	movi	r3,4
   43030:	10c00126 	beq	r2,r3,43038 <__addsf3+0x74>
   43034:	20c9883a 	add	r4,r4,r3
   43038:	2081002c 	andhi	r2,r4,1024
   4303c:	10003926 	beq	r2,zero,43124 <__addsf3+0x160>
   43040:	84000044 	addi	r16,r16,1
   43044:	00803fc4 	movi	r2,255
   43048:	80807826 	beq	r16,r2,4322c <__addsf3+0x268>
   4304c:	200891ba 	slli	r4,r4,6
   43050:	8805883a 	mov	r2,r17
   43054:	2008d27a 	srli	r4,r4,9
   43058:	84003fcc 	andi	r16,r16,255
   4305c:	800695fa 	slli	r3,r16,23
   43060:	10803fcc 	andi	r2,r2,255
   43064:	04002034 	movhi	r16,128
   43068:	843fffc4 	addi	r16,r16,-1
   4306c:	100497fa 	slli	r2,r2,31
   43070:	2408703a 	and	r4,r4,r16
   43074:	20e0b03a 	or	r16,r4,r3
   43078:	8084b03a 	or	r2,r16,r2
   4307c:	dfc00317 	ldw	ra,12(sp)
   43080:	dc800217 	ldw	r18,8(sp)
   43084:	dc400117 	ldw	r17,4(sp)
   43088:	dc000017 	ldw	r16,0(sp)
   4308c:	dec00404 	addi	sp,sp,16
   43090:	f800283a 	ret
   43094:	00c03fc4 	movi	r3,255
   43098:	80ffe126 	beq	r16,r3,43020 <__alt_data_end+0xfffdbf20>
   4309c:	29410034 	orhi	r5,r5,1024
   430a0:	00c006c4 	movi	r3,27
   430a4:	18807516 	blt	r3,r2,4327c <__addsf3+0x2b8>
   430a8:	00c00804 	movi	r3,32
   430ac:	1887c83a 	sub	r3,r3,r2
   430b0:	28c6983a 	sll	r3,r5,r3
   430b4:	288ad83a 	srl	r5,r5,r2
   430b8:	1804c03a 	cmpne	r2,r3,zero
   430bc:	288ab03a 	or	r5,r5,r2
   430c0:	2149c83a 	sub	r4,r4,r5
   430c4:	2081002c 	andhi	r2,r4,1024
   430c8:	10001426 	beq	r2,zero,4311c <__addsf3+0x158>
   430cc:	04810034 	movhi	r18,1024
   430d0:	94bfffc4 	addi	r18,r18,-1
   430d4:	24a4703a 	and	r18,r4,r18
   430d8:	9009883a 	mov	r4,r18
   430dc:	0046be40 	call	46be4 <__clzsi2>
   430e0:	10bffec4 	addi	r2,r2,-5
   430e4:	90a4983a 	sll	r18,r18,r2
   430e8:	14005416 	blt	r2,r16,4323c <__addsf3+0x278>
   430ec:	1405c83a 	sub	r2,r2,r16
   430f0:	11000044 	addi	r4,r2,1
   430f4:	00800804 	movi	r2,32
   430f8:	1105c83a 	sub	r2,r2,r4
   430fc:	9084983a 	sll	r2,r18,r2
   43100:	9124d83a 	srl	r18,r18,r4
   43104:	0021883a 	mov	r16,zero
   43108:	1008c03a 	cmpne	r4,r2,zero
   4310c:	9108b03a 	or	r4,r18,r4
   43110:	003fc306 	br	43020 <__alt_data_end+0xfffdbf20>
   43114:	1000db26 	beq	r2,zero,43484 <__addsf3+0x4c0>
   43118:	1009883a 	mov	r4,r2
   4311c:	208001cc 	andi	r2,r4,7
   43120:	103fc11e 	bne	r2,zero,43028 <__alt_data_end+0xfffdbf28>
   43124:	2006d0fa 	srli	r3,r4,3
   43128:	01003fc4 	movi	r4,255
   4312c:	8805883a 	mov	r2,r17
   43130:	8100241e 	bne	r16,r4,431c4 <__addsf3+0x200>
   43134:	18006e26 	beq	r3,zero,432f0 <__addsf3+0x32c>
   43138:	19001034 	orhi	r4,r3,64
   4313c:	00c02034 	movhi	r3,128
   43140:	18ffffc4 	addi	r3,r3,-1
   43144:	043fffc4 	movi	r16,-1
   43148:	20c8703a 	and	r4,r4,r3
   4314c:	003fc206 	br	43058 <__alt_data_end+0xfffdbf58>
   43150:	8187c83a 	sub	r3,r16,r6
   43154:	00c03e0e 	bge	zero,r3,43250 <__addsf3+0x28c>
   43158:	30002326 	beq	r6,zero,431e8 <__addsf3+0x224>
   4315c:	01803fc4 	movi	r6,255
   43160:	81bfaf26 	beq	r16,r6,43020 <__alt_data_end+0xfffdbf20>
   43164:	29410034 	orhi	r5,r5,1024
   43168:	018006c4 	movi	r6,27
   4316c:	30c07416 	blt	r6,r3,43340 <__addsf3+0x37c>
   43170:	01800804 	movi	r6,32
   43174:	30cdc83a 	sub	r6,r6,r3
   43178:	298c983a 	sll	r6,r5,r6
   4317c:	28cad83a 	srl	r5,r5,r3
   43180:	3006c03a 	cmpne	r3,r6,zero
   43184:	28cab03a 	or	r5,r5,r3
   43188:	2149883a 	add	r4,r4,r5
   4318c:	20c1002c 	andhi	r3,r4,1024
   43190:	183fe226 	beq	r3,zero,4311c <__alt_data_end+0xfffdc01c>
   43194:	84000044 	addi	r16,r16,1
   43198:	00c03fc4 	movi	r3,255
   4319c:	80c05426 	beq	r16,r3,432f0 <__addsf3+0x32c>
   431a0:	00bf0034 	movhi	r2,64512
   431a4:	10bfffc4 	addi	r2,r2,-1
   431a8:	20c0004c 	andi	r3,r4,1
   431ac:	2088703a 	and	r4,r4,r2
   431b0:	2008d07a 	srli	r4,r4,1
   431b4:	20c8b03a 	or	r4,r4,r3
   431b8:	003f9906 	br	43020 <__alt_data_end+0xfffdbf20>
   431bc:	0007883a 	mov	r3,zero
   431c0:	0005883a 	mov	r2,zero
   431c4:	01002034 	movhi	r4,128
   431c8:	213fffc4 	addi	r4,r4,-1
   431cc:	1908703a 	and	r4,r3,r4
   431d0:	003fa106 	br	43058 <__alt_data_end+0xfffdbf58>
   431d4:	10bfffc4 	addi	r2,r2,-1
   431d8:	103fb926 	beq	r2,zero,430c0 <__alt_data_end+0xfffdbfc0>
   431dc:	00c03fc4 	movi	r3,255
   431e0:	80ffaf1e 	bne	r16,r3,430a0 <__alt_data_end+0xfffdbfa0>
   431e4:	003f8e06 	br	43020 <__alt_data_end+0xfffdbf20>
   431e8:	283f8d26 	beq	r5,zero,43020 <__alt_data_end+0xfffdbf20>
   431ec:	18ffffc4 	addi	r3,r3,-1
   431f0:	183fe526 	beq	r3,zero,43188 <__alt_data_end+0xfffdc088>
   431f4:	01803fc4 	movi	r6,255
   431f8:	81bfdb1e 	bne	r16,r6,43168 <__alt_data_end+0xfffdc068>
   431fc:	003f8806 	br	43020 <__alt_data_end+0xfffdbf20>
   43200:	1000201e 	bne	r2,zero,43284 <__addsf3+0x2c0>
   43204:	80800044 	addi	r2,r16,1
   43208:	10803fcc 	andi	r2,r2,255
   4320c:	01800044 	movi	r6,1
   43210:	3080450e 	bge	r6,r2,43328 <__addsf3+0x364>
   43214:	2165c83a 	sub	r18,r4,r5
   43218:	90c1002c 	andhi	r3,r18,1024
   4321c:	18002b26 	beq	r3,zero,432cc <__addsf3+0x308>
   43220:	2925c83a 	sub	r18,r5,r4
   43224:	3823883a 	mov	r17,r7
   43228:	003fab06 	br	430d8 <__alt_data_end+0xfffdbfd8>
   4322c:	8805883a 	mov	r2,r17
   43230:	043fffc4 	movi	r16,-1
   43234:	0009883a 	mov	r4,zero
   43238:	003f8706 	br	43058 <__alt_data_end+0xfffdbf58>
   4323c:	013f0034 	movhi	r4,64512
   43240:	213fffc4 	addi	r4,r4,-1
   43244:	80a1c83a 	sub	r16,r16,r2
   43248:	9108703a 	and	r4,r18,r4
   4324c:	003f7406 	br	43020 <__alt_data_end+0xfffdbf20>
   43250:	1800411e 	bne	r3,zero,43358 <__addsf3+0x394>
   43254:	80c00044 	addi	r3,r16,1
   43258:	19c03fcc 	andi	r7,r3,255
   4325c:	01800044 	movi	r6,1
   43260:	31c0260e 	bge	r6,r7,432fc <__addsf3+0x338>
   43264:	01803fc4 	movi	r6,255
   43268:	19802126 	beq	r3,r6,432f0 <__addsf3+0x32c>
   4326c:	2149883a 	add	r4,r4,r5
   43270:	2008d07a 	srli	r4,r4,1
   43274:	1821883a 	mov	r16,r3
   43278:	003f6906 	br	43020 <__alt_data_end+0xfffdbf20>
   4327c:	01400044 	movi	r5,1
   43280:	003f8f06 	br	430c0 <__alt_data_end+0xfffdbfc0>
   43284:	8000151e 	bne	r16,zero,432dc <__addsf3+0x318>
   43288:	20002f26 	beq	r4,zero,43348 <__addsf3+0x384>
   4328c:	0084303a 	nor	r2,zero,r2
   43290:	10000a26 	beq	r2,zero,432bc <__addsf3+0x2f8>
   43294:	00c03fc4 	movi	r3,255
   43298:	30c02b26 	beq	r6,r3,43348 <__addsf3+0x384>
   4329c:	00c006c4 	movi	r3,27
   432a0:	18806d16 	blt	r3,r2,43458 <__addsf3+0x494>
   432a4:	00c00804 	movi	r3,32
   432a8:	1887c83a 	sub	r3,r3,r2
   432ac:	20c6983a 	sll	r3,r4,r3
   432b0:	2084d83a 	srl	r2,r4,r2
   432b4:	1808c03a 	cmpne	r4,r3,zero
   432b8:	1108b03a 	or	r4,r2,r4
   432bc:	2909c83a 	sub	r4,r5,r4
   432c0:	3021883a 	mov	r16,r6
   432c4:	3823883a 	mov	r17,r7
   432c8:	003f7e06 	br	430c4 <__alt_data_end+0xfffdbfc4>
   432cc:	903f821e 	bne	r18,zero,430d8 <__alt_data_end+0xfffdbfd8>
   432d0:	0005883a 	mov	r2,zero
   432d4:	0021883a 	mov	r16,zero
   432d8:	003fba06 	br	431c4 <__alt_data_end+0xfffdc0c4>
   432dc:	00c03fc4 	movi	r3,255
   432e0:	30c01926 	beq	r6,r3,43348 <__addsf3+0x384>
   432e4:	0085c83a 	sub	r2,zero,r2
   432e8:	21010034 	orhi	r4,r4,1024
   432ec:	003feb06 	br	4329c <__alt_data_end+0xfffdc19c>
   432f0:	043fffc4 	movi	r16,-1
   432f4:	0009883a 	mov	r4,zero
   432f8:	003f5706 	br	43058 <__alt_data_end+0xfffdbf58>
   432fc:	80004a1e 	bne	r16,zero,43428 <__addsf3+0x464>
   43300:	20005926 	beq	r4,zero,43468 <__addsf3+0x4a4>
   43304:	283f4626 	beq	r5,zero,43020 <__alt_data_end+0xfffdbf20>
   43308:	2149883a 	add	r4,r4,r5
   4330c:	2081002c 	andhi	r2,r4,1024
   43310:	103f8226 	beq	r2,zero,4311c <__alt_data_end+0xfffdc01c>
   43314:	00bf0034 	movhi	r2,64512
   43318:	10bfffc4 	addi	r2,r2,-1
   4331c:	3021883a 	mov	r16,r6
   43320:	2088703a 	and	r4,r4,r2
   43324:	003f3e06 	br	43020 <__alt_data_end+0xfffdbf20>
   43328:	8000121e 	bne	r16,zero,43374 <__addsf3+0x3b0>
   4332c:	2000261e 	bne	r4,zero,433c8 <__addsf3+0x404>
   43330:	283fa226 	beq	r5,zero,431bc <__alt_data_end+0xfffdc0bc>
   43334:	2809883a 	mov	r4,r5
   43338:	3823883a 	mov	r17,r7
   4333c:	003f3806 	br	43020 <__alt_data_end+0xfffdbf20>
   43340:	01400044 	movi	r5,1
   43344:	003f9006 	br	43188 <__alt_data_end+0xfffdc088>
   43348:	2809883a 	mov	r4,r5
   4334c:	3021883a 	mov	r16,r6
   43350:	3823883a 	mov	r17,r7
   43354:	003f3206 	br	43020 <__alt_data_end+0xfffdbf20>
   43358:	80000c1e 	bne	r16,zero,4338c <__addsf3+0x3c8>
   4335c:	20002f26 	beq	r4,zero,4341c <__addsf3+0x458>
   43360:	00c6303a 	nor	r3,zero,r3
   43364:	18002b1e 	bne	r3,zero,43414 <__addsf3+0x450>
   43368:	2149883a 	add	r4,r4,r5
   4336c:	3021883a 	mov	r16,r6
   43370:	003f8606 	br	4318c <__alt_data_end+0xfffdc08c>
   43374:	20001b1e 	bne	r4,zero,433e4 <__addsf3+0x420>
   43378:	28003926 	beq	r5,zero,43460 <__addsf3+0x49c>
   4337c:	2809883a 	mov	r4,r5
   43380:	3823883a 	mov	r17,r7
   43384:	04003fc4 	movi	r16,255
   43388:	003f2506 	br	43020 <__alt_data_end+0xfffdbf20>
   4338c:	01c03fc4 	movi	r7,255
   43390:	31c02226 	beq	r6,r7,4341c <__addsf3+0x458>
   43394:	00c7c83a 	sub	r3,zero,r3
   43398:	21010034 	orhi	r4,r4,1024
   4339c:	01c006c4 	movi	r7,27
   433a0:	38c03616 	blt	r7,r3,4347c <__addsf3+0x4b8>
   433a4:	01c00804 	movi	r7,32
   433a8:	38cfc83a 	sub	r7,r7,r3
   433ac:	21ce983a 	sll	r7,r4,r7
   433b0:	20c6d83a 	srl	r3,r4,r3
   433b4:	3808c03a 	cmpne	r4,r7,zero
   433b8:	1906b03a 	or	r3,r3,r4
   433bc:	1949883a 	add	r4,r3,r5
   433c0:	3021883a 	mov	r16,r6
   433c4:	003f7106 	br	4318c <__alt_data_end+0xfffdc08c>
   433c8:	283f1526 	beq	r5,zero,43020 <__alt_data_end+0xfffdbf20>
   433cc:	2145c83a 	sub	r2,r4,r5
   433d0:	10c1002c 	andhi	r3,r2,1024
   433d4:	183f4f26 	beq	r3,zero,43114 <__alt_data_end+0xfffdc014>
   433d8:	2909c83a 	sub	r4,r5,r4
   433dc:	3823883a 	mov	r17,r7
   433e0:	003f0f06 	br	43020 <__alt_data_end+0xfffdbf20>
   433e4:	28001a26 	beq	r5,zero,43450 <__addsf3+0x48c>
   433e8:	2008d0fa 	srli	r4,r4,3
   433ec:	2080102c 	andhi	r2,r4,64
   433f0:	10000526 	beq	r2,zero,43408 <__addsf3+0x444>
   433f4:	280ad0fa 	srli	r5,r5,3
   433f8:	2880102c 	andhi	r2,r5,64
   433fc:	1000021e 	bne	r2,zero,43408 <__addsf3+0x444>
   43400:	2809883a 	mov	r4,r5
   43404:	3823883a 	mov	r17,r7
   43408:	200890fa 	slli	r4,r4,3
   4340c:	04003fc4 	movi	r16,255
   43410:	003f0306 	br	43020 <__alt_data_end+0xfffdbf20>
   43414:	01c03fc4 	movi	r7,255
   43418:	31ffe01e 	bne	r6,r7,4339c <__alt_data_end+0xfffdc29c>
   4341c:	2809883a 	mov	r4,r5
   43420:	3021883a 	mov	r16,r6
   43424:	003efe06 	br	43020 <__alt_data_end+0xfffdbf20>
   43428:	20001126 	beq	r4,zero,43470 <__addsf3+0x4ac>
   4342c:	28000826 	beq	r5,zero,43450 <__addsf3+0x48c>
   43430:	2008d0fa 	srli	r4,r4,3
   43434:	2080102c 	andhi	r2,r4,64
   43438:	103ff326 	beq	r2,zero,43408 <__alt_data_end+0xfffdc308>
   4343c:	280ad0fa 	srli	r5,r5,3
   43440:	2880102c 	andhi	r2,r5,64
   43444:	103ff01e 	bne	r2,zero,43408 <__alt_data_end+0xfffdc308>
   43448:	2809883a 	mov	r4,r5
   4344c:	003fee06 	br	43408 <__alt_data_end+0xfffdc308>
   43450:	04003fc4 	movi	r16,255
   43454:	003ef206 	br	43020 <__alt_data_end+0xfffdbf20>
   43458:	01000044 	movi	r4,1
   4345c:	003f9706 	br	432bc <__alt_data_end+0xfffdc1bc>
   43460:	0005883a 	mov	r2,zero
   43464:	003f3406 	br	43138 <__alt_data_end+0xfffdc038>
   43468:	2809883a 	mov	r4,r5
   4346c:	003eec06 	br	43020 <__alt_data_end+0xfffdbf20>
   43470:	2809883a 	mov	r4,r5
   43474:	04003fc4 	movi	r16,255
   43478:	003ee906 	br	43020 <__alt_data_end+0xfffdbf20>
   4347c:	00c00044 	movi	r3,1
   43480:	003fce06 	br	433bc <__alt_data_end+0xfffdc2bc>
   43484:	0005883a 	mov	r2,zero
   43488:	003f4e06 	br	431c4 <__alt_data_end+0xfffdc0c4>

0004348c <__divsf3>:
   4348c:	defff504 	addi	sp,sp,-44
   43490:	200cd5fa 	srli	r6,r4,23
   43494:	dcc00415 	stw	r19,16(sp)
   43498:	2026d7fa 	srli	r19,r4,31
   4349c:	00c02034 	movhi	r3,128
   434a0:	dd800715 	stw	r22,28(sp)
   434a4:	dd000515 	stw	r20,20(sp)
   434a8:	dc800315 	stw	r18,12(sp)
   434ac:	18ffffc4 	addi	r3,r3,-1
   434b0:	dfc00a15 	stw	ra,40(sp)
   434b4:	df000915 	stw	fp,36(sp)
   434b8:	ddc00815 	stw	r23,32(sp)
   434bc:	dd400615 	stw	r21,24(sp)
   434c0:	dc400215 	stw	r17,8(sp)
   434c4:	dc000115 	stw	r16,4(sp)
   434c8:	35003fcc 	andi	r20,r6,255
   434cc:	1924703a 	and	r18,r3,r4
   434d0:	9d803fcc 	andi	r22,r19,255
   434d4:	a0005226 	beq	r20,zero,43620 <__divsf3+0x194>
   434d8:	00803fc4 	movi	r2,255
   434dc:	a0802e26 	beq	r20,r2,43598 <__divsf3+0x10c>
   434e0:	91002034 	orhi	r4,r18,128
   434e4:	202490fa 	slli	r18,r4,3
   434e8:	a53fe044 	addi	r20,r20,-127
   434ec:	0021883a 	mov	r16,zero
   434f0:	002f883a 	mov	r23,zero
   434f4:	280cd5fa 	srli	r6,r5,23
   434f8:	282ad7fa 	srli	r21,r5,31
   434fc:	00c02034 	movhi	r3,128
   43500:	18ffffc4 	addi	r3,r3,-1
   43504:	31803fcc 	andi	r6,r6,255
   43508:	1962703a 	and	r17,r3,r5
   4350c:	af003fcc 	andi	fp,r21,255
   43510:	30004a26 	beq	r6,zero,4363c <__divsf3+0x1b0>
   43514:	00803fc4 	movi	r2,255
   43518:	30804526 	beq	r6,r2,43630 <__divsf3+0x1a4>
   4351c:	89402034 	orhi	r5,r17,128
   43520:	282290fa 	slli	r17,r5,3
   43524:	31bfe044 	addi	r6,r6,-127
   43528:	000b883a 	mov	r5,zero
   4352c:	2c20b03a 	or	r16,r5,r16
   43530:	802090ba 	slli	r16,r16,2
   43534:	00800134 	movhi	r2,4
   43538:	108d5604 	addi	r2,r2,13656
   4353c:	80a1883a 	add	r16,r16,r2
   43540:	81000017 	ldw	r4,0(r16)
   43544:	9d46f03a 	xor	r3,r19,r21
   43548:	180f883a 	mov	r7,r3
   4354c:	18803fcc 	andi	r2,r3,255
   43550:	a18dc83a 	sub	r6,r20,r6
   43554:	2000683a 	jmp	r4
   43558:	0004373c 	xorhi	zero,zero,4316
   4355c:	000435c0 	call	435c <__alt_mem_onchip_memory2-0x3bca4>
   43560:	00043730 	cmpltui	zero,zero,4316
   43564:	000435ac 	andhi	zero,zero,4310
   43568:	00043730 	cmpltui	zero,zero,4316
   4356c:	00043708 	cmpgei	zero,zero,4316
   43570:	00043730 	cmpltui	zero,zero,4316
   43574:	000435ac 	andhi	zero,zero,4310
   43578:	000435c0 	call	435c <__alt_mem_onchip_memory2-0x3bca4>
   4357c:	000435c0 	call	435c <__alt_mem_onchip_memory2-0x3bca4>
   43580:	00043708 	cmpgei	zero,zero,4316
   43584:	000435ac 	andhi	zero,zero,4310
   43588:	0004381c 	xori	zero,zero,4320
   4358c:	0004381c 	xori	zero,zero,4320
   43590:	0004381c 	xori	zero,zero,4320
   43594:	000437d0 	cmplti	zero,zero,4319
   43598:	9000581e 	bne	r18,zero,436fc <__divsf3+0x270>
   4359c:	04000204 	movi	r16,8
   435a0:	05c00084 	movi	r23,2
   435a4:	003fd306 	br	434f4 <__alt_data_end+0xfffdc3f4>
   435a8:	0023883a 	mov	r17,zero
   435ac:	e02d883a 	mov	r22,fp
   435b0:	282f883a 	mov	r23,r5
   435b4:	00800084 	movi	r2,2
   435b8:	b8808f1e 	bne	r23,r2,437f8 <__divsf3+0x36c>
   435bc:	b005883a 	mov	r2,r22
   435c0:	11c0004c 	andi	r7,r2,1
   435c4:	013fffc4 	movi	r4,-1
   435c8:	000d883a 	mov	r6,zero
   435cc:	21003fcc 	andi	r4,r4,255
   435d0:	200895fa 	slli	r4,r4,23
   435d4:	38803fcc 	andi	r2,r7,255
   435d8:	00c02034 	movhi	r3,128
   435dc:	100497fa 	slli	r2,r2,31
   435e0:	18ffffc4 	addi	r3,r3,-1
   435e4:	30c6703a 	and	r3,r6,r3
   435e8:	1906b03a 	or	r3,r3,r4
   435ec:	1884b03a 	or	r2,r3,r2
   435f0:	dfc00a17 	ldw	ra,40(sp)
   435f4:	df000917 	ldw	fp,36(sp)
   435f8:	ddc00817 	ldw	r23,32(sp)
   435fc:	dd800717 	ldw	r22,28(sp)
   43600:	dd400617 	ldw	r21,24(sp)
   43604:	dd000517 	ldw	r20,20(sp)
   43608:	dcc00417 	ldw	r19,16(sp)
   4360c:	dc800317 	ldw	r18,12(sp)
   43610:	dc400217 	ldw	r17,8(sp)
   43614:	dc000117 	ldw	r16,4(sp)
   43618:	dec00b04 	addi	sp,sp,44
   4361c:	f800283a 	ret
   43620:	90002b1e 	bne	r18,zero,436d0 <__divsf3+0x244>
   43624:	04000104 	movi	r16,4
   43628:	05c00044 	movi	r23,1
   4362c:	003fb106 	br	434f4 <__alt_data_end+0xfffdc3f4>
   43630:	8800251e 	bne	r17,zero,436c8 <__divsf3+0x23c>
   43634:	01400084 	movi	r5,2
   43638:	00000206 	br	43644 <__divsf3+0x1b8>
   4363c:	88001a1e 	bne	r17,zero,436a8 <__divsf3+0x21c>
   43640:	01400044 	movi	r5,1
   43644:	8160b03a 	or	r16,r16,r5
   43648:	802090ba 	slli	r16,r16,2
   4364c:	00c00134 	movhi	r3,4
   43650:	18cd9a04 	addi	r3,r3,13928
   43654:	80e1883a 	add	r16,r16,r3
   43658:	80c00017 	ldw	r3,0(r16)
   4365c:	9d44f03a 	xor	r2,r19,r21
   43660:	a18dc83a 	sub	r6,r20,r6
   43664:	1800683a 	jmp	r3
   43668:	000435c0 	call	435c <__alt_mem_onchip_memory2-0x3bca4>
   4366c:	000435c0 	call	435c <__alt_mem_onchip_memory2-0x3bca4>
   43670:	0004380c 	andi	zero,zero,4320
   43674:	000435a8 	cmpgeui	zero,zero,4310
   43678:	0004380c 	andi	zero,zero,4320
   4367c:	00043708 	cmpgei	zero,zero,4316
   43680:	0004380c 	andi	zero,zero,4320
   43684:	000435a8 	cmpgeui	zero,zero,4310
   43688:	000435c0 	call	435c <__alt_mem_onchip_memory2-0x3bca4>
   4368c:	000435c0 	call	435c <__alt_mem_onchip_memory2-0x3bca4>
   43690:	00043708 	cmpgei	zero,zero,4316
   43694:	000435a8 	cmpgeui	zero,zero,4310
   43698:	0004381c 	xori	zero,zero,4320
   4369c:	0004381c 	xori	zero,zero,4320
   436a0:	0004381c 	xori	zero,zero,4320
   436a4:	00043834 	movhi	zero,4320
   436a8:	8809883a 	mov	r4,r17
   436ac:	0046be40 	call	46be4 <__clzsi2>
   436b0:	10fffec4 	addi	r3,r2,-5
   436b4:	10801d84 	addi	r2,r2,118
   436b8:	88e2983a 	sll	r17,r17,r3
   436bc:	008dc83a 	sub	r6,zero,r2
   436c0:	000b883a 	mov	r5,zero
   436c4:	003f9906 	br	4352c <__alt_data_end+0xfffdc42c>
   436c8:	014000c4 	movi	r5,3
   436cc:	003f9706 	br	4352c <__alt_data_end+0xfffdc42c>
   436d0:	9009883a 	mov	r4,r18
   436d4:	d9400015 	stw	r5,0(sp)
   436d8:	0046be40 	call	46be4 <__clzsi2>
   436dc:	10fffec4 	addi	r3,r2,-5
   436e0:	11801d84 	addi	r6,r2,118
   436e4:	90e4983a 	sll	r18,r18,r3
   436e8:	01a9c83a 	sub	r20,zero,r6
   436ec:	0021883a 	mov	r16,zero
   436f0:	002f883a 	mov	r23,zero
   436f4:	d9400017 	ldw	r5,0(sp)
   436f8:	003f7e06 	br	434f4 <__alt_data_end+0xfffdc3f4>
   436fc:	04000304 	movi	r16,12
   43700:	05c000c4 	movi	r23,3
   43704:	003f7b06 	br	434f4 <__alt_data_end+0xfffdc3f4>
   43708:	01802034 	movhi	r6,128
   4370c:	000f883a 	mov	r7,zero
   43710:	31bfffc4 	addi	r6,r6,-1
   43714:	013fffc4 	movi	r4,-1
   43718:	003fac06 	br	435cc <__alt_data_end+0xfffdc4cc>
   4371c:	01400044 	movi	r5,1
   43720:	2909c83a 	sub	r4,r5,r4
   43724:	00c006c4 	movi	r3,27
   43728:	19004b0e 	bge	r3,r4,43858 <__divsf3+0x3cc>
   4372c:	114e703a 	and	r7,r2,r5
   43730:	0009883a 	mov	r4,zero
   43734:	000d883a 	mov	r6,zero
   43738:	003fa406 	br	435cc <__alt_data_end+0xfffdc4cc>
   4373c:	9006917a 	slli	r3,r18,5
   43740:	8822917a 	slli	r17,r17,5
   43744:	1c40372e 	bgeu	r3,r17,43824 <__divsf3+0x398>
   43748:	31bfffc4 	addi	r6,r6,-1
   4374c:	010006c4 	movi	r4,27
   43750:	000b883a 	mov	r5,zero
   43754:	180f883a 	mov	r7,r3
   43758:	294b883a 	add	r5,r5,r5
   4375c:	18c7883a 	add	r3,r3,r3
   43760:	38000116 	blt	r7,zero,43768 <__divsf3+0x2dc>
   43764:	1c400236 	bltu	r3,r17,43770 <__divsf3+0x2e4>
   43768:	1c47c83a 	sub	r3,r3,r17
   4376c:	29400054 	ori	r5,r5,1
   43770:	213fffc4 	addi	r4,r4,-1
   43774:	203ff71e 	bne	r4,zero,43754 <__alt_data_end+0xfffdc654>
   43778:	1806c03a 	cmpne	r3,r3,zero
   4377c:	1962b03a 	or	r17,r3,r5
   43780:	31001fc4 	addi	r4,r6,127
   43784:	013fe50e 	bge	zero,r4,4371c <__alt_data_end+0xfffdc61c>
   43788:	88c001cc 	andi	r3,r17,7
   4378c:	18000426 	beq	r3,zero,437a0 <__divsf3+0x314>
   43790:	88c003cc 	andi	r3,r17,15
   43794:	01400104 	movi	r5,4
   43798:	19400126 	beq	r3,r5,437a0 <__divsf3+0x314>
   4379c:	8963883a 	add	r17,r17,r5
   437a0:	88c2002c 	andhi	r3,r17,2048
   437a4:	18000426 	beq	r3,zero,437b8 <__divsf3+0x32c>
   437a8:	00fe0034 	movhi	r3,63488
   437ac:	18ffffc4 	addi	r3,r3,-1
   437b0:	31002004 	addi	r4,r6,128
   437b4:	88e2703a 	and	r17,r17,r3
   437b8:	00c03f84 	movi	r3,254
   437bc:	193f8016 	blt	r3,r4,435c0 <__alt_data_end+0xfffdc4c0>
   437c0:	880c91ba 	slli	r6,r17,6
   437c4:	11c0004c 	andi	r7,r2,1
   437c8:	300cd27a 	srli	r6,r6,9
   437cc:	003f7f06 	br	435cc <__alt_data_end+0xfffdc4cc>
   437d0:	9080102c 	andhi	r2,r18,64
   437d4:	10000226 	beq	r2,zero,437e0 <__divsf3+0x354>
   437d8:	8880102c 	andhi	r2,r17,64
   437dc:	10001826 	beq	r2,zero,43840 <__divsf3+0x3b4>
   437e0:	00802034 	movhi	r2,128
   437e4:	91801034 	orhi	r6,r18,64
   437e8:	10bfffc4 	addi	r2,r2,-1
   437ec:	980f883a 	mov	r7,r19
   437f0:	308c703a 	and	r6,r6,r2
   437f4:	003fc706 	br	43714 <__alt_data_end+0xfffdc614>
   437f8:	008000c4 	movi	r2,3
   437fc:	b8802d26 	beq	r23,r2,438b4 <__divsf3+0x428>
   43800:	00c00044 	movi	r3,1
   43804:	b005883a 	mov	r2,r22
   43808:	b8ffdd1e 	bne	r23,r3,43780 <__alt_data_end+0xfffdc680>
   4380c:	11c0004c 	andi	r7,r2,1
   43810:	0009883a 	mov	r4,zero
   43814:	000d883a 	mov	r6,zero
   43818:	003f6c06 	br	435cc <__alt_data_end+0xfffdc4cc>
   4381c:	9023883a 	mov	r17,r18
   43820:	003f6406 	br	435b4 <__alt_data_end+0xfffdc4b4>
   43824:	1c47c83a 	sub	r3,r3,r17
   43828:	01000684 	movi	r4,26
   4382c:	01400044 	movi	r5,1
   43830:	003fc806 	br	43754 <__alt_data_end+0xfffdc654>
   43834:	9080102c 	andhi	r2,r18,64
   43838:	103fe926 	beq	r2,zero,437e0 <__alt_data_end+0xfffdc6e0>
   4383c:	0023883a 	mov	r17,zero
   43840:	00802034 	movhi	r2,128
   43844:	89801034 	orhi	r6,r17,64
   43848:	10bfffc4 	addi	r2,r2,-1
   4384c:	a80f883a 	mov	r7,r21
   43850:	308c703a 	and	r6,r6,r2
   43854:	003faf06 	br	43714 <__alt_data_end+0xfffdc614>
   43858:	01c00804 	movi	r7,32
   4385c:	390fc83a 	sub	r7,r7,r4
   43860:	89ce983a 	sll	r7,r17,r7
   43864:	890ad83a 	srl	r5,r17,r4
   43868:	380ec03a 	cmpne	r7,r7,zero
   4386c:	29cab03a 	or	r5,r5,r7
   43870:	28c001cc 	andi	r3,r5,7
   43874:	18000426 	beq	r3,zero,43888 <__divsf3+0x3fc>
   43878:	28c003cc 	andi	r3,r5,15
   4387c:	01000104 	movi	r4,4
   43880:	19000126 	beq	r3,r4,43888 <__divsf3+0x3fc>
   43884:	290b883a 	add	r5,r5,r4
   43888:	28c1002c 	andhi	r3,r5,1024
   4388c:	18000426 	beq	r3,zero,438a0 <__divsf3+0x414>
   43890:	11c0004c 	andi	r7,r2,1
   43894:	01000044 	movi	r4,1
   43898:	000d883a 	mov	r6,zero
   4389c:	003f4b06 	br	435cc <__alt_data_end+0xfffdc4cc>
   438a0:	280a91ba 	slli	r5,r5,6
   438a4:	11c0004c 	andi	r7,r2,1
   438a8:	0009883a 	mov	r4,zero
   438ac:	280cd27a 	srli	r6,r5,9
   438b0:	003f4606 	br	435cc <__alt_data_end+0xfffdc4cc>
   438b4:	00802034 	movhi	r2,128
   438b8:	89801034 	orhi	r6,r17,64
   438bc:	10bfffc4 	addi	r2,r2,-1
   438c0:	b00f883a 	mov	r7,r22
   438c4:	308c703a 	and	r6,r6,r2
   438c8:	003f9206 	br	43714 <__alt_data_end+0xfffdc614>

000438cc <__gesf2>:
   438cc:	2004d5fa 	srli	r2,r4,23
   438d0:	2806d5fa 	srli	r3,r5,23
   438d4:	01802034 	movhi	r6,128
   438d8:	31bfffc4 	addi	r6,r6,-1
   438dc:	10803fcc 	andi	r2,r2,255
   438e0:	01c03fc4 	movi	r7,255
   438e4:	3110703a 	and	r8,r6,r4
   438e8:	18c03fcc 	andi	r3,r3,255
   438ec:	314c703a 	and	r6,r6,r5
   438f0:	2008d7fa 	srli	r4,r4,31
   438f4:	280ad7fa 	srli	r5,r5,31
   438f8:	11c01926 	beq	r2,r7,43960 <__gesf2+0x94>
   438fc:	01c03fc4 	movi	r7,255
   43900:	19c00f26 	beq	r3,r7,43940 <__gesf2+0x74>
   43904:	1000061e 	bne	r2,zero,43920 <__gesf2+0x54>
   43908:	400f003a 	cmpeq	r7,r8,zero
   4390c:	1800071e 	bne	r3,zero,4392c <__gesf2+0x60>
   43910:	3000061e 	bne	r6,zero,4392c <__gesf2+0x60>
   43914:	0005883a 	mov	r2,zero
   43918:	40000e1e 	bne	r8,zero,43954 <__gesf2+0x88>
   4391c:	f800283a 	ret
   43920:	18000a1e 	bne	r3,zero,4394c <__gesf2+0x80>
   43924:	30000b26 	beq	r6,zero,43954 <__gesf2+0x88>
   43928:	000f883a 	mov	r7,zero
   4392c:	29403fcc 	andi	r5,r5,255
   43930:	38000726 	beq	r7,zero,43950 <__gesf2+0x84>
   43934:	28000826 	beq	r5,zero,43958 <__gesf2+0x8c>
   43938:	00800044 	movi	r2,1
   4393c:	f800283a 	ret
   43940:	303ff026 	beq	r6,zero,43904 <__alt_data_end+0xfffdc804>
   43944:	00bfff84 	movi	r2,-2
   43948:	f800283a 	ret
   4394c:	29403fcc 	andi	r5,r5,255
   43950:	21400526 	beq	r4,r5,43968 <__gesf2+0x9c>
   43954:	203ff826 	beq	r4,zero,43938 <__alt_data_end+0xfffdc838>
   43958:	00bfffc4 	movi	r2,-1
   4395c:	f800283a 	ret
   43960:	403fe626 	beq	r8,zero,438fc <__alt_data_end+0xfffdc7fc>
   43964:	003ff706 	br	43944 <__alt_data_end+0xfffdc844>
   43968:	18bffa16 	blt	r3,r2,43954 <__alt_data_end+0xfffdc854>
   4396c:	10c00216 	blt	r2,r3,43978 <__gesf2+0xac>
   43970:	323ff836 	bltu	r6,r8,43954 <__alt_data_end+0xfffdc854>
   43974:	4180022e 	bgeu	r8,r6,43980 <__gesf2+0xb4>
   43978:	203fef1e 	bne	r4,zero,43938 <__alt_data_end+0xfffdc838>
   4397c:	003ff606 	br	43958 <__alt_data_end+0xfffdc858>
   43980:	0005883a 	mov	r2,zero
   43984:	f800283a 	ret

00043988 <__lesf2>:
   43988:	2004d5fa 	srli	r2,r4,23
   4398c:	280cd5fa 	srli	r6,r5,23
   43990:	00c02034 	movhi	r3,128
   43994:	18ffffc4 	addi	r3,r3,-1
   43998:	10803fcc 	andi	r2,r2,255
   4399c:	01c03fc4 	movi	r7,255
   439a0:	1910703a 	and	r8,r3,r4
   439a4:	31803fcc 	andi	r6,r6,255
   439a8:	1946703a 	and	r3,r3,r5
   439ac:	2008d7fa 	srli	r4,r4,31
   439b0:	280ad7fa 	srli	r5,r5,31
   439b4:	11c01b26 	beq	r2,r7,43a24 <__lesf2+0x9c>
   439b8:	01c03fc4 	movi	r7,255
   439bc:	31c01126 	beq	r6,r7,43a04 <__lesf2+0x7c>
   439c0:	1000071e 	bne	r2,zero,439e0 <__lesf2+0x58>
   439c4:	400f003a 	cmpeq	r7,r8,zero
   439c8:	21003fcc 	andi	r4,r4,255
   439cc:	3000081e 	bne	r6,zero,439f0 <__lesf2+0x68>
   439d0:	1800071e 	bne	r3,zero,439f0 <__lesf2+0x68>
   439d4:	0005883a 	mov	r2,zero
   439d8:	40000f1e 	bne	r8,zero,43a18 <__lesf2+0x90>
   439dc:	f800283a 	ret
   439e0:	21003fcc 	andi	r4,r4,255
   439e4:	30000a1e 	bne	r6,zero,43a10 <__lesf2+0x88>
   439e8:	18000b26 	beq	r3,zero,43a18 <__lesf2+0x90>
   439ec:	000f883a 	mov	r7,zero
   439f0:	29403fcc 	andi	r5,r5,255
   439f4:	38000726 	beq	r7,zero,43a14 <__lesf2+0x8c>
   439f8:	28000826 	beq	r5,zero,43a1c <__lesf2+0x94>
   439fc:	00800044 	movi	r2,1
   43a00:	f800283a 	ret
   43a04:	183fee26 	beq	r3,zero,439c0 <__alt_data_end+0xfffdc8c0>
   43a08:	00800084 	movi	r2,2
   43a0c:	f800283a 	ret
   43a10:	29403fcc 	andi	r5,r5,255
   43a14:	21400626 	beq	r4,r5,43a30 <__lesf2+0xa8>
   43a18:	203ff826 	beq	r4,zero,439fc <__alt_data_end+0xfffdc8fc>
   43a1c:	00bfffc4 	movi	r2,-1
   43a20:	f800283a 	ret
   43a24:	403fe426 	beq	r8,zero,439b8 <__alt_data_end+0xfffdc8b8>
   43a28:	00800084 	movi	r2,2
   43a2c:	f800283a 	ret
   43a30:	30bff916 	blt	r6,r2,43a18 <__alt_data_end+0xfffdc918>
   43a34:	11800216 	blt	r2,r6,43a40 <__lesf2+0xb8>
   43a38:	1a3ff736 	bltu	r3,r8,43a18 <__alt_data_end+0xfffdc918>
   43a3c:	40c0022e 	bgeu	r8,r3,43a48 <__lesf2+0xc0>
   43a40:	203fee1e 	bne	r4,zero,439fc <__alt_data_end+0xfffdc8fc>
   43a44:	003ff506 	br	43a1c <__alt_data_end+0xfffdc91c>
   43a48:	0005883a 	mov	r2,zero
   43a4c:	f800283a 	ret

00043a50 <__mulsf3>:
   43a50:	defff504 	addi	sp,sp,-44
   43a54:	dc000115 	stw	r16,4(sp)
   43a58:	2020d5fa 	srli	r16,r4,23
   43a5c:	dd400615 	stw	r21,24(sp)
   43a60:	202ad7fa 	srli	r21,r4,31
   43a64:	dc800315 	stw	r18,12(sp)
   43a68:	04802034 	movhi	r18,128
   43a6c:	df000915 	stw	fp,36(sp)
   43a70:	dd000515 	stw	r20,20(sp)
   43a74:	94bfffc4 	addi	r18,r18,-1
   43a78:	dfc00a15 	stw	ra,40(sp)
   43a7c:	ddc00815 	stw	r23,32(sp)
   43a80:	dd800715 	stw	r22,28(sp)
   43a84:	dcc00415 	stw	r19,16(sp)
   43a88:	dc400215 	stw	r17,8(sp)
   43a8c:	84003fcc 	andi	r16,r16,255
   43a90:	9124703a 	and	r18,r18,r4
   43a94:	a829883a 	mov	r20,r21
   43a98:	af003fcc 	andi	fp,r21,255
   43a9c:	80005426 	beq	r16,zero,43bf0 <__mulsf3+0x1a0>
   43aa0:	00803fc4 	movi	r2,255
   43aa4:	80802f26 	beq	r16,r2,43b64 <__mulsf3+0x114>
   43aa8:	91002034 	orhi	r4,r18,128
   43aac:	202490fa 	slli	r18,r4,3
   43ab0:	843fe044 	addi	r16,r16,-127
   43ab4:	0023883a 	mov	r17,zero
   43ab8:	002f883a 	mov	r23,zero
   43abc:	2804d5fa 	srli	r2,r5,23
   43ac0:	282cd7fa 	srli	r22,r5,31
   43ac4:	01002034 	movhi	r4,128
   43ac8:	213fffc4 	addi	r4,r4,-1
   43acc:	10803fcc 	andi	r2,r2,255
   43ad0:	2166703a 	and	r19,r4,r5
   43ad4:	b1803fcc 	andi	r6,r22,255
   43ad8:	10004c26 	beq	r2,zero,43c0c <__mulsf3+0x1bc>
   43adc:	00c03fc4 	movi	r3,255
   43ae0:	10c04726 	beq	r2,r3,43c00 <__mulsf3+0x1b0>
   43ae4:	99002034 	orhi	r4,r19,128
   43ae8:	202690fa 	slli	r19,r4,3
   43aec:	10bfe044 	addi	r2,r2,-127
   43af0:	0007883a 	mov	r3,zero
   43af4:	80a1883a 	add	r16,r16,r2
   43af8:	010003c4 	movi	r4,15
   43afc:	1c44b03a 	or	r2,r3,r17
   43b00:	b56af03a 	xor	r21,r22,r21
   43b04:	81c00044 	addi	r7,r16,1
   43b08:	20806b36 	bltu	r4,r2,43cb8 <__mulsf3+0x268>
   43b0c:	100490ba 	slli	r2,r2,2
   43b10:	01000134 	movhi	r4,4
   43b14:	210ec904 	addi	r4,r4,15140
   43b18:	1105883a 	add	r2,r2,r4
   43b1c:	10800017 	ldw	r2,0(r2)
   43b20:	1000683a 	jmp	r2
   43b24:	00043cb8 	rdprs	zero,zero,4338
   43b28:	00043b78 	rdprs	zero,zero,4333
   43b2c:	00043b78 	rdprs	zero,zero,4333
   43b30:	00043b74 	movhi	zero,4333
   43b34:	00043c9c 	xori	zero,zero,4338
   43b38:	00043c9c 	xori	zero,zero,4338
   43b3c:	00043c88 	cmpgei	zero,zero,4338
   43b40:	00043b74 	movhi	zero,4333
   43b44:	00043c9c 	xori	zero,zero,4338
   43b48:	00043c88 	cmpgei	zero,zero,4338
   43b4c:	00043c9c 	xori	zero,zero,4338
   43b50:	00043b74 	movhi	zero,4333
   43b54:	00043ca8 	cmpgeui	zero,zero,4338
   43b58:	00043ca8 	cmpgeui	zero,zero,4338
   43b5c:	00043ca8 	cmpgeui	zero,zero,4338
   43b60:	00043d84 	movi	zero,4342
   43b64:	90003b1e 	bne	r18,zero,43c54 <__mulsf3+0x204>
   43b68:	04400204 	movi	r17,8
   43b6c:	05c00084 	movi	r23,2
   43b70:	003fd206 	br	43abc <__alt_data_end+0xfffdc9bc>
   43b74:	302b883a 	mov	r21,r6
   43b78:	00800084 	movi	r2,2
   43b7c:	18802626 	beq	r3,r2,43c18 <__mulsf3+0x1c8>
   43b80:	008000c4 	movi	r2,3
   43b84:	1880ab26 	beq	r3,r2,43e34 <__mulsf3+0x3e4>
   43b88:	00800044 	movi	r2,1
   43b8c:	1880a21e 	bne	r3,r2,43e18 <__mulsf3+0x3c8>
   43b90:	a829883a 	mov	r20,r21
   43b94:	0007883a 	mov	r3,zero
   43b98:	0009883a 	mov	r4,zero
   43b9c:	18803fcc 	andi	r2,r3,255
   43ba0:	100695fa 	slli	r3,r2,23
   43ba4:	a0803fcc 	andi	r2,r20,255
   43ba8:	100a97fa 	slli	r5,r2,31
   43bac:	00802034 	movhi	r2,128
   43bb0:	10bfffc4 	addi	r2,r2,-1
   43bb4:	2084703a 	and	r2,r4,r2
   43bb8:	10c4b03a 	or	r2,r2,r3
   43bbc:	1144b03a 	or	r2,r2,r5
   43bc0:	dfc00a17 	ldw	ra,40(sp)
   43bc4:	df000917 	ldw	fp,36(sp)
   43bc8:	ddc00817 	ldw	r23,32(sp)
   43bcc:	dd800717 	ldw	r22,28(sp)
   43bd0:	dd400617 	ldw	r21,24(sp)
   43bd4:	dd000517 	ldw	r20,20(sp)
   43bd8:	dcc00417 	ldw	r19,16(sp)
   43bdc:	dc800317 	ldw	r18,12(sp)
   43be0:	dc400217 	ldw	r17,8(sp)
   43be4:	dc000117 	ldw	r16,4(sp)
   43be8:	dec00b04 	addi	sp,sp,44
   43bec:	f800283a 	ret
   43bf0:	90000d1e 	bne	r18,zero,43c28 <__mulsf3+0x1d8>
   43bf4:	04400104 	movi	r17,4
   43bf8:	05c00044 	movi	r23,1
   43bfc:	003faf06 	br	43abc <__alt_data_end+0xfffdc9bc>
   43c00:	9806c03a 	cmpne	r3,r19,zero
   43c04:	18c00084 	addi	r3,r3,2
   43c08:	003fba06 	br	43af4 <__alt_data_end+0xfffdc9f4>
   43c0c:	9800141e 	bne	r19,zero,43c60 <__mulsf3+0x210>
   43c10:	00c00044 	movi	r3,1
   43c14:	003fb706 	br	43af4 <__alt_data_end+0xfffdc9f4>
   43c18:	a829883a 	mov	r20,r21
   43c1c:	00ffffc4 	movi	r3,-1
   43c20:	0009883a 	mov	r4,zero
   43c24:	003fdd06 	br	43b9c <__alt_data_end+0xfffdca9c>
   43c28:	9009883a 	mov	r4,r18
   43c2c:	d9400015 	stw	r5,0(sp)
   43c30:	0046be40 	call	46be4 <__clzsi2>
   43c34:	10fffec4 	addi	r3,r2,-5
   43c38:	10801d84 	addi	r2,r2,118
   43c3c:	90e4983a 	sll	r18,r18,r3
   43c40:	00a1c83a 	sub	r16,zero,r2
   43c44:	0023883a 	mov	r17,zero
   43c48:	002f883a 	mov	r23,zero
   43c4c:	d9400017 	ldw	r5,0(sp)
   43c50:	003f9a06 	br	43abc <__alt_data_end+0xfffdc9bc>
   43c54:	04400304 	movi	r17,12
   43c58:	05c000c4 	movi	r23,3
   43c5c:	003f9706 	br	43abc <__alt_data_end+0xfffdc9bc>
   43c60:	9809883a 	mov	r4,r19
   43c64:	d9800015 	stw	r6,0(sp)
   43c68:	0046be40 	call	46be4 <__clzsi2>
   43c6c:	10fffec4 	addi	r3,r2,-5
   43c70:	10801d84 	addi	r2,r2,118
   43c74:	98e6983a 	sll	r19,r19,r3
   43c78:	0085c83a 	sub	r2,zero,r2
   43c7c:	0007883a 	mov	r3,zero
   43c80:	d9800017 	ldw	r6,0(sp)
   43c84:	003f9b06 	br	43af4 <__alt_data_end+0xfffdc9f4>
   43c88:	01002034 	movhi	r4,128
   43c8c:	0029883a 	mov	r20,zero
   43c90:	213fffc4 	addi	r4,r4,-1
   43c94:	00ffffc4 	movi	r3,-1
   43c98:	003fc006 	br	43b9c <__alt_data_end+0xfffdca9c>
   43c9c:	9027883a 	mov	r19,r18
   43ca0:	b807883a 	mov	r3,r23
   43ca4:	003fb406 	br	43b78 <__alt_data_end+0xfffdca78>
   43ca8:	9027883a 	mov	r19,r18
   43cac:	e02b883a 	mov	r21,fp
   43cb0:	b807883a 	mov	r3,r23
   43cb4:	003fb006 	br	43b78 <__alt_data_end+0xfffdca78>
   43cb8:	9004d43a 	srli	r2,r18,16
   43cbc:	9810d43a 	srli	r8,r19,16
   43cc0:	94bfffcc 	andi	r18,r18,65535
   43cc4:	993fffcc 	andi	r4,r19,65535
   43cc8:	910d383a 	mul	r6,r18,r4
   43ccc:	20a7383a 	mul	r19,r4,r2
   43cd0:	9225383a 	mul	r18,r18,r8
   43cd4:	3006d43a 	srli	r3,r6,16
   43cd8:	1211383a 	mul	r8,r2,r8
   43cdc:	94e5883a 	add	r18,r18,r19
   43ce0:	1c87883a 	add	r3,r3,r18
   43ce4:	1cc0022e 	bgeu	r3,r19,43cf0 <__mulsf3+0x2a0>
   43ce8:	00800074 	movhi	r2,1
   43cec:	4091883a 	add	r8,r8,r2
   43cf0:	1804943a 	slli	r2,r3,16
   43cf4:	31bfffcc 	andi	r6,r6,65535
   43cf8:	1806d43a 	srli	r3,r3,16
   43cfc:	1185883a 	add	r2,r2,r6
   43d00:	102691ba 	slli	r19,r2,6
   43d04:	1a07883a 	add	r3,r3,r8
   43d08:	1004d6ba 	srli	r2,r2,26
   43d0c:	180891ba 	slli	r4,r3,6
   43d10:	9826c03a 	cmpne	r19,r19,zero
   43d14:	9884b03a 	or	r2,r19,r2
   43d18:	1126b03a 	or	r19,r2,r4
   43d1c:	9882002c 	andhi	r2,r19,2048
   43d20:	10000426 	beq	r2,zero,43d34 <__mulsf3+0x2e4>
   43d24:	9804d07a 	srli	r2,r19,1
   43d28:	9900004c 	andi	r4,r19,1
   43d2c:	3821883a 	mov	r16,r7
   43d30:	1126b03a 	or	r19,r2,r4
   43d34:	80c01fc4 	addi	r3,r16,127
   43d38:	00c0210e 	bge	zero,r3,43dc0 <__mulsf3+0x370>
   43d3c:	988001cc 	andi	r2,r19,7
   43d40:	10000426 	beq	r2,zero,43d54 <__mulsf3+0x304>
   43d44:	988003cc 	andi	r2,r19,15
   43d48:	01000104 	movi	r4,4
   43d4c:	11000126 	beq	r2,r4,43d54 <__mulsf3+0x304>
   43d50:	9927883a 	add	r19,r19,r4
   43d54:	9882002c 	andhi	r2,r19,2048
   43d58:	10000426 	beq	r2,zero,43d6c <__mulsf3+0x31c>
   43d5c:	00be0034 	movhi	r2,63488
   43d60:	10bfffc4 	addi	r2,r2,-1
   43d64:	80c02004 	addi	r3,r16,128
   43d68:	98a6703a 	and	r19,r19,r2
   43d6c:	00803f84 	movi	r2,254
   43d70:	10ffa916 	blt	r2,r3,43c18 <__alt_data_end+0xfffdcb18>
   43d74:	980891ba 	slli	r4,r19,6
   43d78:	a829883a 	mov	r20,r21
   43d7c:	2008d27a 	srli	r4,r4,9
   43d80:	003f8606 	br	43b9c <__alt_data_end+0xfffdca9c>
   43d84:	9080102c 	andhi	r2,r18,64
   43d88:	10000826 	beq	r2,zero,43dac <__mulsf3+0x35c>
   43d8c:	9880102c 	andhi	r2,r19,64
   43d90:	1000061e 	bne	r2,zero,43dac <__mulsf3+0x35c>
   43d94:	00802034 	movhi	r2,128
   43d98:	99001034 	orhi	r4,r19,64
   43d9c:	10bfffc4 	addi	r2,r2,-1
   43da0:	b029883a 	mov	r20,r22
   43da4:	2088703a 	and	r4,r4,r2
   43da8:	003fba06 	br	43c94 <__alt_data_end+0xfffdcb94>
   43dac:	00802034 	movhi	r2,128
   43db0:	91001034 	orhi	r4,r18,64
   43db4:	10bfffc4 	addi	r2,r2,-1
   43db8:	2088703a 	and	r4,r4,r2
   43dbc:	003fb506 	br	43c94 <__alt_data_end+0xfffdcb94>
   43dc0:	00800044 	movi	r2,1
   43dc4:	10c7c83a 	sub	r3,r2,r3
   43dc8:	008006c4 	movi	r2,27
   43dcc:	10ff7016 	blt	r2,r3,43b90 <__alt_data_end+0xfffdca90>
   43dd0:	00800804 	movi	r2,32
   43dd4:	10c5c83a 	sub	r2,r2,r3
   43dd8:	9884983a 	sll	r2,r19,r2
   43ddc:	98c6d83a 	srl	r3,r19,r3
   43de0:	1004c03a 	cmpne	r2,r2,zero
   43de4:	1884b03a 	or	r2,r3,r2
   43de8:	10c001cc 	andi	r3,r2,7
   43dec:	18000426 	beq	r3,zero,43e00 <__mulsf3+0x3b0>
   43df0:	10c003cc 	andi	r3,r2,15
   43df4:	01000104 	movi	r4,4
   43df8:	19000126 	beq	r3,r4,43e00 <__mulsf3+0x3b0>
   43dfc:	1105883a 	add	r2,r2,r4
   43e00:	10c1002c 	andhi	r3,r2,1024
   43e04:	18000626 	beq	r3,zero,43e20 <__mulsf3+0x3d0>
   43e08:	a829883a 	mov	r20,r21
   43e0c:	00c00044 	movi	r3,1
   43e10:	0009883a 	mov	r4,zero
   43e14:	003f6106 	br	43b9c <__alt_data_end+0xfffdca9c>
   43e18:	3821883a 	mov	r16,r7
   43e1c:	003fc506 	br	43d34 <__alt_data_end+0xfffdcc34>
   43e20:	100491ba 	slli	r2,r2,6
   43e24:	a829883a 	mov	r20,r21
   43e28:	0007883a 	mov	r3,zero
   43e2c:	1008d27a 	srli	r4,r2,9
   43e30:	003f5a06 	br	43b9c <__alt_data_end+0xfffdca9c>
   43e34:	00802034 	movhi	r2,128
   43e38:	99001034 	orhi	r4,r19,64
   43e3c:	10bfffc4 	addi	r2,r2,-1
   43e40:	a829883a 	mov	r20,r21
   43e44:	2088703a 	and	r4,r4,r2
   43e48:	003f9206 	br	43c94 <__alt_data_end+0xfffdcb94>

00043e4c <__subsf3>:
   43e4c:	defffc04 	addi	sp,sp,-16
   43e50:	280cd5fa 	srli	r6,r5,23
   43e54:	dc000015 	stw	r16,0(sp)
   43e58:	01c02034 	movhi	r7,128
   43e5c:	2020d5fa 	srli	r16,r4,23
   43e60:	39ffffc4 	addi	r7,r7,-1
   43e64:	3906703a 	and	r3,r7,r4
   43e68:	dc400115 	stw	r17,4(sp)
   43e6c:	394e703a 	and	r7,r7,r5
   43e70:	2022d7fa 	srli	r17,r4,31
   43e74:	dfc00315 	stw	ra,12(sp)
   43e78:	dc800215 	stw	r18,8(sp)
   43e7c:	31803fcc 	andi	r6,r6,255
   43e80:	01003fc4 	movi	r4,255
   43e84:	84003fcc 	andi	r16,r16,255
   43e88:	180690fa 	slli	r3,r3,3
   43e8c:	2804d7fa 	srli	r2,r5,31
   43e90:	380e90fa 	slli	r7,r7,3
   43e94:	31006d26 	beq	r6,r4,4404c <__subsf3+0x200>
   43e98:	1080005c 	xori	r2,r2,1
   43e9c:	8189c83a 	sub	r4,r16,r6
   43ea0:	14404f26 	beq	r2,r17,43fe0 <__subsf3+0x194>
   43ea4:	0100770e 	bge	zero,r4,44084 <__subsf3+0x238>
   43ea8:	30001e1e 	bne	r6,zero,43f24 <__subsf3+0xd8>
   43eac:	38006a1e 	bne	r7,zero,44058 <__subsf3+0x20c>
   43eb0:	188001cc 	andi	r2,r3,7
   43eb4:	10000426 	beq	r2,zero,43ec8 <__subsf3+0x7c>
   43eb8:	188003cc 	andi	r2,r3,15
   43ebc:	01000104 	movi	r4,4
   43ec0:	11000126 	beq	r2,r4,43ec8 <__subsf3+0x7c>
   43ec4:	1907883a 	add	r3,r3,r4
   43ec8:	1881002c 	andhi	r2,r3,1024
   43ecc:	10003926 	beq	r2,zero,43fb4 <__subsf3+0x168>
   43ed0:	84000044 	addi	r16,r16,1
   43ed4:	00803fc4 	movi	r2,255
   43ed8:	80807526 	beq	r16,r2,440b0 <__subsf3+0x264>
   43edc:	180691ba 	slli	r3,r3,6
   43ee0:	8880004c 	andi	r2,r17,1
   43ee4:	180ad27a 	srli	r5,r3,9
   43ee8:	84003fcc 	andi	r16,r16,255
   43eec:	800695fa 	slli	r3,r16,23
   43ef0:	10803fcc 	andi	r2,r2,255
   43ef4:	01002034 	movhi	r4,128
   43ef8:	213fffc4 	addi	r4,r4,-1
   43efc:	100497fa 	slli	r2,r2,31
   43f00:	2920703a 	and	r16,r5,r4
   43f04:	80e0b03a 	or	r16,r16,r3
   43f08:	8084b03a 	or	r2,r16,r2
   43f0c:	dfc00317 	ldw	ra,12(sp)
   43f10:	dc800217 	ldw	r18,8(sp)
   43f14:	dc400117 	ldw	r17,4(sp)
   43f18:	dc000017 	ldw	r16,0(sp)
   43f1c:	dec00404 	addi	sp,sp,16
   43f20:	f800283a 	ret
   43f24:	00803fc4 	movi	r2,255
   43f28:	80bfe126 	beq	r16,r2,43eb0 <__alt_data_end+0xfffdcdb0>
   43f2c:	39c10034 	orhi	r7,r7,1024
   43f30:	008006c4 	movi	r2,27
   43f34:	11007416 	blt	r2,r4,44108 <__subsf3+0x2bc>
   43f38:	00800804 	movi	r2,32
   43f3c:	1105c83a 	sub	r2,r2,r4
   43f40:	3884983a 	sll	r2,r7,r2
   43f44:	390ed83a 	srl	r7,r7,r4
   43f48:	1008c03a 	cmpne	r4,r2,zero
   43f4c:	390eb03a 	or	r7,r7,r4
   43f50:	19c7c83a 	sub	r3,r3,r7
   43f54:	1881002c 	andhi	r2,r3,1024
   43f58:	10001426 	beq	r2,zero,43fac <__subsf3+0x160>
   43f5c:	04810034 	movhi	r18,1024
   43f60:	94bfffc4 	addi	r18,r18,-1
   43f64:	1ca4703a 	and	r18,r3,r18
   43f68:	9009883a 	mov	r4,r18
   43f6c:	0046be40 	call	46be4 <__clzsi2>
   43f70:	10bffec4 	addi	r2,r2,-5
   43f74:	90a4983a 	sll	r18,r18,r2
   43f78:	14005116 	blt	r2,r16,440c0 <__subsf3+0x274>
   43f7c:	1405c83a 	sub	r2,r2,r16
   43f80:	10c00044 	addi	r3,r2,1
   43f84:	00800804 	movi	r2,32
   43f88:	10c5c83a 	sub	r2,r2,r3
   43f8c:	9084983a 	sll	r2,r18,r2
   43f90:	90e4d83a 	srl	r18,r18,r3
   43f94:	0021883a 	mov	r16,zero
   43f98:	1006c03a 	cmpne	r3,r2,zero
   43f9c:	90c6b03a 	or	r3,r18,r3
   43fa0:	003fc306 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   43fa4:	2000e026 	beq	r4,zero,44328 <__subsf3+0x4dc>
   43fa8:	2007883a 	mov	r3,r4
   43fac:	188001cc 	andi	r2,r3,7
   43fb0:	103fc11e 	bne	r2,zero,43eb8 <__alt_data_end+0xfffdcdb8>
   43fb4:	180ad0fa 	srli	r5,r3,3
   43fb8:	00c03fc4 	movi	r3,255
   43fbc:	8880004c 	andi	r2,r17,1
   43fc0:	80c0031e 	bne	r16,r3,43fd0 <__subsf3+0x184>
   43fc4:	28006d26 	beq	r5,zero,4417c <__subsf3+0x330>
   43fc8:	29401034 	orhi	r5,r5,64
   43fcc:	043fffc4 	movi	r16,-1
   43fd0:	00c02034 	movhi	r3,128
   43fd4:	18ffffc4 	addi	r3,r3,-1
   43fd8:	28ca703a 	and	r5,r5,r3
   43fdc:	003fc206 	br	43ee8 <__alt_data_end+0xfffdcde8>
   43fe0:	01003c0e 	bge	zero,r4,440d4 <__subsf3+0x288>
   43fe4:	30002126 	beq	r6,zero,4406c <__subsf3+0x220>
   43fe8:	01403fc4 	movi	r5,255
   43fec:	817fb026 	beq	r16,r5,43eb0 <__alt_data_end+0xfffdcdb0>
   43ff0:	39c10034 	orhi	r7,r7,1024
   43ff4:	014006c4 	movi	r5,27
   43ff8:	29007416 	blt	r5,r4,441cc <__subsf3+0x380>
   43ffc:	01400804 	movi	r5,32
   44000:	290bc83a 	sub	r5,r5,r4
   44004:	394a983a 	sll	r5,r7,r5
   44008:	390ed83a 	srl	r7,r7,r4
   4400c:	2808c03a 	cmpne	r4,r5,zero
   44010:	390eb03a 	or	r7,r7,r4
   44014:	19c7883a 	add	r3,r3,r7
   44018:	1901002c 	andhi	r4,r3,1024
   4401c:	20003826 	beq	r4,zero,44100 <__subsf3+0x2b4>
   44020:	84000044 	addi	r16,r16,1
   44024:	01003fc4 	movi	r4,255
   44028:	81005426 	beq	r16,r4,4417c <__subsf3+0x330>
   4402c:	1023883a 	mov	r17,r2
   44030:	00bf0034 	movhi	r2,64512
   44034:	10bfffc4 	addi	r2,r2,-1
   44038:	1900004c 	andi	r4,r3,1
   4403c:	1886703a 	and	r3,r3,r2
   44040:	1806d07a 	srli	r3,r3,1
   44044:	1906b03a 	or	r3,r3,r4
   44048:	003f9906 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   4404c:	383f9226 	beq	r7,zero,43e98 <__alt_data_end+0xfffdcd98>
   44050:	10803fcc 	andi	r2,r2,255
   44054:	003f9106 	br	43e9c <__alt_data_end+0xfffdcd9c>
   44058:	213fffc4 	addi	r4,r4,-1
   4405c:	203fbc26 	beq	r4,zero,43f50 <__alt_data_end+0xfffdce50>
   44060:	00803fc4 	movi	r2,255
   44064:	80bfb21e 	bne	r16,r2,43f30 <__alt_data_end+0xfffdce30>
   44068:	003f9106 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   4406c:	383f9026 	beq	r7,zero,43eb0 <__alt_data_end+0xfffdcdb0>
   44070:	213fffc4 	addi	r4,r4,-1
   44074:	203fe726 	beq	r4,zero,44014 <__alt_data_end+0xfffdcf14>
   44078:	01403fc4 	movi	r5,255
   4407c:	817fdd1e 	bne	r16,r5,43ff4 <__alt_data_end+0xfffdcef4>
   44080:	003f8b06 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   44084:	2000221e 	bne	r4,zero,44110 <__subsf3+0x2c4>
   44088:	81000044 	addi	r4,r16,1
   4408c:	21003fcc 	andi	r4,r4,255
   44090:	01400044 	movi	r5,1
   44094:	2900470e 	bge	r5,r4,441b4 <__subsf3+0x368>
   44098:	19e5c83a 	sub	r18,r3,r7
   4409c:	9141002c 	andhi	r5,r18,1024
   440a0:	28002d26 	beq	r5,zero,44158 <__subsf3+0x30c>
   440a4:	38e5c83a 	sub	r18,r7,r3
   440a8:	1023883a 	mov	r17,r2
   440ac:	003fae06 	br	43f68 <__alt_data_end+0xfffdce68>
   440b0:	8880004c 	andi	r2,r17,1
   440b4:	043fffc4 	movi	r16,-1
   440b8:	000b883a 	mov	r5,zero
   440bc:	003f8a06 	br	43ee8 <__alt_data_end+0xfffdcde8>
   440c0:	00ff0034 	movhi	r3,64512
   440c4:	18ffffc4 	addi	r3,r3,-1
   440c8:	80a1c83a 	sub	r16,r16,r2
   440cc:	90c6703a 	and	r3,r18,r3
   440d0:	003f7706 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   440d4:	2000431e 	bne	r4,zero,441e4 <__subsf3+0x398>
   440d8:	81000044 	addi	r4,r16,1
   440dc:	21803fcc 	andi	r6,r4,255
   440e0:	01400044 	movi	r5,1
   440e4:	2980280e 	bge	r5,r6,44188 <__subsf3+0x33c>
   440e8:	01403fc4 	movi	r5,255
   440ec:	21402326 	beq	r4,r5,4417c <__subsf3+0x330>
   440f0:	19c7883a 	add	r3,r3,r7
   440f4:	1806d07a 	srli	r3,r3,1
   440f8:	2021883a 	mov	r16,r4
   440fc:	003f6c06 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   44100:	1023883a 	mov	r17,r2
   44104:	003fa906 	br	43fac <__alt_data_end+0xfffdceac>
   44108:	01c00044 	movi	r7,1
   4410c:	003f9006 	br	43f50 <__alt_data_end+0xfffdce50>
   44110:	8000151e 	bne	r16,zero,44168 <__subsf3+0x31c>
   44114:	18002f26 	beq	r3,zero,441d4 <__subsf3+0x388>
   44118:	0108303a 	nor	r4,zero,r4
   4411c:	20000a26 	beq	r4,zero,44148 <__subsf3+0x2fc>
   44120:	01403fc4 	movi	r5,255
   44124:	31402b26 	beq	r6,r5,441d4 <__subsf3+0x388>
   44128:	014006c4 	movi	r5,27
   4412c:	29006e16 	blt	r5,r4,442e8 <__subsf3+0x49c>
   44130:	01400804 	movi	r5,32
   44134:	290bc83a 	sub	r5,r5,r4
   44138:	194a983a 	sll	r5,r3,r5
   4413c:	1908d83a 	srl	r4,r3,r4
   44140:	2806c03a 	cmpne	r3,r5,zero
   44144:	20c6b03a 	or	r3,r4,r3
   44148:	38c7c83a 	sub	r3,r7,r3
   4414c:	3021883a 	mov	r16,r6
   44150:	1023883a 	mov	r17,r2
   44154:	003f7f06 	br	43f54 <__alt_data_end+0xfffdce54>
   44158:	903f831e 	bne	r18,zero,43f68 <__alt_data_end+0xfffdce68>
   4415c:	0005883a 	mov	r2,zero
   44160:	0021883a 	mov	r16,zero
   44164:	003f9a06 	br	43fd0 <__alt_data_end+0xfffdced0>
   44168:	01403fc4 	movi	r5,255
   4416c:	31401926 	beq	r6,r5,441d4 <__subsf3+0x388>
   44170:	0109c83a 	sub	r4,zero,r4
   44174:	18c10034 	orhi	r3,r3,1024
   44178:	003feb06 	br	44128 <__alt_data_end+0xfffdd028>
   4417c:	043fffc4 	movi	r16,-1
   44180:	000b883a 	mov	r5,zero
   44184:	003f5806 	br	43ee8 <__alt_data_end+0xfffdcde8>
   44188:	8000481e 	bne	r16,zero,442ac <__subsf3+0x460>
   4418c:	18006226 	beq	r3,zero,44318 <__subsf3+0x4cc>
   44190:	383f4726 	beq	r7,zero,43eb0 <__alt_data_end+0xfffdcdb0>
   44194:	19c7883a 	add	r3,r3,r7
   44198:	1881002c 	andhi	r2,r3,1024
   4419c:	103f8326 	beq	r2,zero,43fac <__alt_data_end+0xfffdceac>
   441a0:	00bf0034 	movhi	r2,64512
   441a4:	10bfffc4 	addi	r2,r2,-1
   441a8:	2821883a 	mov	r16,r5
   441ac:	1886703a 	and	r3,r3,r2
   441b0:	003f3f06 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   441b4:	80001c1e 	bne	r16,zero,44228 <__subsf3+0x3dc>
   441b8:	1800261e 	bne	r3,zero,44254 <__subsf3+0x408>
   441bc:	38004c26 	beq	r7,zero,442f0 <__subsf3+0x4a4>
   441c0:	3807883a 	mov	r3,r7
   441c4:	1023883a 	mov	r17,r2
   441c8:	003f3906 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   441cc:	01c00044 	movi	r7,1
   441d0:	003f9006 	br	44014 <__alt_data_end+0xfffdcf14>
   441d4:	3807883a 	mov	r3,r7
   441d8:	3021883a 	mov	r16,r6
   441dc:	1023883a 	mov	r17,r2
   441e0:	003f3306 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   441e4:	8000161e 	bne	r16,zero,44240 <__subsf3+0x3f4>
   441e8:	18002d26 	beq	r3,zero,442a0 <__subsf3+0x454>
   441ec:	0108303a 	nor	r4,zero,r4
   441f0:	20000a26 	beq	r4,zero,4421c <__subsf3+0x3d0>
   441f4:	01403fc4 	movi	r5,255
   441f8:	31402926 	beq	r6,r5,442a0 <__subsf3+0x454>
   441fc:	014006c4 	movi	r5,27
   44200:	29004716 	blt	r5,r4,44320 <__subsf3+0x4d4>
   44204:	01400804 	movi	r5,32
   44208:	290bc83a 	sub	r5,r5,r4
   4420c:	194a983a 	sll	r5,r3,r5
   44210:	1908d83a 	srl	r4,r3,r4
   44214:	2806c03a 	cmpne	r3,r5,zero
   44218:	20c6b03a 	or	r3,r4,r3
   4421c:	19c7883a 	add	r3,r3,r7
   44220:	3021883a 	mov	r16,r6
   44224:	003f7c06 	br	44018 <__alt_data_end+0xfffdcf18>
   44228:	1800111e 	bne	r3,zero,44270 <__subsf3+0x424>
   4422c:	38003326 	beq	r7,zero,442fc <__subsf3+0x4b0>
   44230:	3807883a 	mov	r3,r7
   44234:	1023883a 	mov	r17,r2
   44238:	04003fc4 	movi	r16,255
   4423c:	003f1c06 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   44240:	01403fc4 	movi	r5,255
   44244:	31401626 	beq	r6,r5,442a0 <__subsf3+0x454>
   44248:	0109c83a 	sub	r4,zero,r4
   4424c:	18c10034 	orhi	r3,r3,1024
   44250:	003fea06 	br	441fc <__alt_data_end+0xfffdd0fc>
   44254:	383f1626 	beq	r7,zero,43eb0 <__alt_data_end+0xfffdcdb0>
   44258:	19c9c83a 	sub	r4,r3,r7
   4425c:	2141002c 	andhi	r5,r4,1024
   44260:	283f5026 	beq	r5,zero,43fa4 <__alt_data_end+0xfffdcea4>
   44264:	38c7c83a 	sub	r3,r7,r3
   44268:	1023883a 	mov	r17,r2
   4426c:	003f1006 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   44270:	38001b26 	beq	r7,zero,442e0 <__subsf3+0x494>
   44274:	1806d0fa 	srli	r3,r3,3
   44278:	1900102c 	andhi	r4,r3,64
   4427c:	20000526 	beq	r4,zero,44294 <__subsf3+0x448>
   44280:	380ed0fa 	srli	r7,r7,3
   44284:	3900102c 	andhi	r4,r7,64
   44288:	2000021e 	bne	r4,zero,44294 <__subsf3+0x448>
   4428c:	3807883a 	mov	r3,r7
   44290:	1023883a 	mov	r17,r2
   44294:	180690fa 	slli	r3,r3,3
   44298:	04003fc4 	movi	r16,255
   4429c:	003f0406 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   442a0:	3807883a 	mov	r3,r7
   442a4:	3021883a 	mov	r16,r6
   442a8:	003f0106 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   442ac:	18001726 	beq	r3,zero,4430c <__subsf3+0x4c0>
   442b0:	38000b26 	beq	r7,zero,442e0 <__subsf3+0x494>
   442b4:	1806d0fa 	srli	r3,r3,3
   442b8:	1900102c 	andhi	r4,r3,64
   442bc:	20000426 	beq	r4,zero,442d0 <__subsf3+0x484>
   442c0:	380ed0fa 	srli	r7,r7,3
   442c4:	3900102c 	andhi	r4,r7,64
   442c8:	2000011e 	bne	r4,zero,442d0 <__subsf3+0x484>
   442cc:	3807883a 	mov	r3,r7
   442d0:	180690fa 	slli	r3,r3,3
   442d4:	1023883a 	mov	r17,r2
   442d8:	04003fc4 	movi	r16,255
   442dc:	003ef406 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   442e0:	04003fc4 	movi	r16,255
   442e4:	003ef206 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   442e8:	00c00044 	movi	r3,1
   442ec:	003f9606 	br	44148 <__alt_data_end+0xfffdd048>
   442f0:	000b883a 	mov	r5,zero
   442f4:	0005883a 	mov	r2,zero
   442f8:	003f3506 	br	43fd0 <__alt_data_end+0xfffdced0>
   442fc:	01402034 	movhi	r5,128
   44300:	297fffc4 	addi	r5,r5,-1
   44304:	0005883a 	mov	r2,zero
   44308:	003f2f06 	br	43fc8 <__alt_data_end+0xfffdcec8>
   4430c:	3807883a 	mov	r3,r7
   44310:	04003fc4 	movi	r16,255
   44314:	003ee606 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   44318:	3807883a 	mov	r3,r7
   4431c:	003ee406 	br	43eb0 <__alt_data_end+0xfffdcdb0>
   44320:	00c00044 	movi	r3,1
   44324:	003fbd06 	br	4421c <__alt_data_end+0xfffdd11c>
   44328:	0005883a 	mov	r2,zero
   4432c:	003f2806 	br	43fd0 <__alt_data_end+0xfffdced0>

00044330 <__fixsfsi>:
   44330:	200ad5fa 	srli	r5,r4,23
   44334:	00c02034 	movhi	r3,128
   44338:	18ffffc4 	addi	r3,r3,-1
   4433c:	29403fcc 	andi	r5,r5,255
   44340:	00801f84 	movi	r2,126
   44344:	1906703a 	and	r3,r3,r4
   44348:	2008d7fa 	srli	r4,r4,31
   4434c:	11400e0e 	bge	r2,r5,44388 <__fixsfsi+0x58>
   44350:	00802744 	movi	r2,157
   44354:	11400816 	blt	r2,r5,44378 <__fixsfsi+0x48>
   44358:	00802544 	movi	r2,149
   4435c:	18c02034 	orhi	r3,r3,128
   44360:	11400b0e 	bge	r2,r5,44390 <__fixsfsi+0x60>
   44364:	28bfda84 	addi	r2,r5,-150
   44368:	1884983a 	sll	r2,r3,r2
   4436c:	20000726 	beq	r4,zero,4438c <__fixsfsi+0x5c>
   44370:	0085c83a 	sub	r2,zero,r2
   44374:	f800283a 	ret
   44378:	00a00034 	movhi	r2,32768
   4437c:	10bfffc4 	addi	r2,r2,-1
   44380:	2085883a 	add	r2,r4,r2
   44384:	f800283a 	ret
   44388:	0005883a 	mov	r2,zero
   4438c:	f800283a 	ret
   44390:	00802584 	movi	r2,150
   44394:	1145c83a 	sub	r2,r2,r5
   44398:	1884d83a 	srl	r2,r3,r2
   4439c:	003ff306 	br	4436c <__alt_data_end+0xfffdd26c>

000443a0 <__floatsisf>:
   443a0:	defffd04 	addi	sp,sp,-12
   443a4:	dfc00215 	stw	ra,8(sp)
   443a8:	dc400115 	stw	r17,4(sp)
   443ac:	dc000015 	stw	r16,0(sp)
   443b0:	20003526 	beq	r4,zero,44488 <__floatsisf+0xe8>
   443b4:	2021883a 	mov	r16,r4
   443b8:	2022d7fa 	srli	r17,r4,31
   443bc:	20003616 	blt	r4,zero,44498 <__floatsisf+0xf8>
   443c0:	8009883a 	mov	r4,r16
   443c4:	0046be40 	call	46be4 <__clzsi2>
   443c8:	00c02784 	movi	r3,158
   443cc:	1887c83a 	sub	r3,r3,r2
   443d0:	01002584 	movi	r4,150
   443d4:	20c01416 	blt	r4,r3,44428 <__floatsisf+0x88>
   443d8:	20c9c83a 	sub	r4,r4,r3
   443dc:	8120983a 	sll	r16,r16,r4
   443e0:	00802034 	movhi	r2,128
   443e4:	10bfffc4 	addi	r2,r2,-1
   443e8:	8809883a 	mov	r4,r17
   443ec:	80a0703a 	and	r16,r16,r2
   443f0:	18803fcc 	andi	r2,r3,255
   443f4:	100695fa 	slli	r3,r2,23
   443f8:	20803fcc 	andi	r2,r4,255
   443fc:	100897fa 	slli	r4,r2,31
   44400:	00802034 	movhi	r2,128
   44404:	10bfffc4 	addi	r2,r2,-1
   44408:	8084703a 	and	r2,r16,r2
   4440c:	10c4b03a 	or	r2,r2,r3
   44410:	1104b03a 	or	r2,r2,r4
   44414:	dfc00217 	ldw	ra,8(sp)
   44418:	dc400117 	ldw	r17,4(sp)
   4441c:	dc000017 	ldw	r16,0(sp)
   44420:	dec00304 	addi	sp,sp,12
   44424:	f800283a 	ret
   44428:	01002644 	movi	r4,153
   4442c:	20c01c16 	blt	r4,r3,444a0 <__floatsisf+0x100>
   44430:	20c9c83a 	sub	r4,r4,r3
   44434:	8120983a 	sll	r16,r16,r4
   44438:	013f0034 	movhi	r4,64512
   4443c:	213fffc4 	addi	r4,r4,-1
   44440:	814001cc 	andi	r5,r16,7
   44444:	8108703a 	and	r4,r16,r4
   44448:	28000426 	beq	r5,zero,4445c <__floatsisf+0xbc>
   4444c:	840003cc 	andi	r16,r16,15
   44450:	01400104 	movi	r5,4
   44454:	81400126 	beq	r16,r5,4445c <__floatsisf+0xbc>
   44458:	2149883a 	add	r4,r4,r5
   4445c:	2141002c 	andhi	r5,r4,1024
   44460:	28000526 	beq	r5,zero,44478 <__floatsisf+0xd8>
   44464:	00c027c4 	movi	r3,159
   44468:	1887c83a 	sub	r3,r3,r2
   4446c:	00bf0034 	movhi	r2,64512
   44470:	10bfffc4 	addi	r2,r2,-1
   44474:	2088703a 	and	r4,r4,r2
   44478:	202091ba 	slli	r16,r4,6
   4447c:	8809883a 	mov	r4,r17
   44480:	8020d27a 	srli	r16,r16,9
   44484:	003fda06 	br	443f0 <__alt_data_end+0xfffdd2f0>
   44488:	0009883a 	mov	r4,zero
   4448c:	0007883a 	mov	r3,zero
   44490:	0021883a 	mov	r16,zero
   44494:	003fd606 	br	443f0 <__alt_data_end+0xfffdd2f0>
   44498:	0121c83a 	sub	r16,zero,r4
   4449c:	003fc806 	br	443c0 <__alt_data_end+0xfffdd2c0>
   444a0:	01002e44 	movi	r4,185
   444a4:	20c9c83a 	sub	r4,r4,r3
   444a8:	01400144 	movi	r5,5
   444ac:	8108983a 	sll	r4,r16,r4
   444b0:	288bc83a 	sub	r5,r5,r2
   444b4:	8160d83a 	srl	r16,r16,r5
   444b8:	2008c03a 	cmpne	r4,r4,zero
   444bc:	8120b03a 	or	r16,r16,r4
   444c0:	003fdd06 	br	44438 <__alt_data_end+0xfffdd338>

000444c4 <__adddf3>:
   444c4:	02c00434 	movhi	r11,16
   444c8:	5affffc4 	addi	r11,r11,-1
   444cc:	2806d7fa 	srli	r3,r5,31
   444d0:	2ad4703a 	and	r10,r5,r11
   444d4:	3ad2703a 	and	r9,r7,r11
   444d8:	3804d53a 	srli	r2,r7,20
   444dc:	3018d77a 	srli	r12,r6,29
   444e0:	280ad53a 	srli	r5,r5,20
   444e4:	501490fa 	slli	r10,r10,3
   444e8:	2010d77a 	srli	r8,r4,29
   444ec:	481290fa 	slli	r9,r9,3
   444f0:	380ed7fa 	srli	r7,r7,31
   444f4:	defffb04 	addi	sp,sp,-20
   444f8:	dc800215 	stw	r18,8(sp)
   444fc:	dc400115 	stw	r17,4(sp)
   44500:	dc000015 	stw	r16,0(sp)
   44504:	dfc00415 	stw	ra,16(sp)
   44508:	dcc00315 	stw	r19,12(sp)
   4450c:	1c803fcc 	andi	r18,r3,255
   44510:	2c01ffcc 	andi	r16,r5,2047
   44514:	5210b03a 	or	r8,r10,r8
   44518:	202290fa 	slli	r17,r4,3
   4451c:	1081ffcc 	andi	r2,r2,2047
   44520:	4b12b03a 	or	r9,r9,r12
   44524:	300c90fa 	slli	r6,r6,3
   44528:	91c07526 	beq	r18,r7,44700 <__adddf3+0x23c>
   4452c:	8087c83a 	sub	r3,r16,r2
   44530:	00c0ab0e 	bge	zero,r3,447e0 <__adddf3+0x31c>
   44534:	10002a1e 	bne	r2,zero,445e0 <__adddf3+0x11c>
   44538:	4984b03a 	or	r2,r9,r6
   4453c:	1000961e 	bne	r2,zero,44798 <__adddf3+0x2d4>
   44540:	888001cc 	andi	r2,r17,7
   44544:	10000726 	beq	r2,zero,44564 <__adddf3+0xa0>
   44548:	888003cc 	andi	r2,r17,15
   4454c:	00c00104 	movi	r3,4
   44550:	10c00426 	beq	r2,r3,44564 <__adddf3+0xa0>
   44554:	88c7883a 	add	r3,r17,r3
   44558:	1c63803a 	cmpltu	r17,r3,r17
   4455c:	4451883a 	add	r8,r8,r17
   44560:	1823883a 	mov	r17,r3
   44564:	4080202c 	andhi	r2,r8,128
   44568:	10005926 	beq	r2,zero,446d0 <__adddf3+0x20c>
   4456c:	84000044 	addi	r16,r16,1
   44570:	0081ffc4 	movi	r2,2047
   44574:	8080ba26 	beq	r16,r2,44860 <__adddf3+0x39c>
   44578:	00bfe034 	movhi	r2,65408
   4457c:	10bfffc4 	addi	r2,r2,-1
   44580:	4090703a 	and	r8,r8,r2
   44584:	4004977a 	slli	r2,r8,29
   44588:	4010927a 	slli	r8,r8,9
   4458c:	8822d0fa 	srli	r17,r17,3
   44590:	8401ffcc 	andi	r16,r16,2047
   44594:	4010d33a 	srli	r8,r8,12
   44598:	9007883a 	mov	r3,r18
   4459c:	1444b03a 	or	r2,r2,r17
   445a0:	8401ffcc 	andi	r16,r16,2047
   445a4:	8020953a 	slli	r16,r16,20
   445a8:	18c03fcc 	andi	r3,r3,255
   445ac:	01000434 	movhi	r4,16
   445b0:	213fffc4 	addi	r4,r4,-1
   445b4:	180697fa 	slli	r3,r3,31
   445b8:	4110703a 	and	r8,r8,r4
   445bc:	4410b03a 	or	r8,r8,r16
   445c0:	40c6b03a 	or	r3,r8,r3
   445c4:	dfc00417 	ldw	ra,16(sp)
   445c8:	dcc00317 	ldw	r19,12(sp)
   445cc:	dc800217 	ldw	r18,8(sp)
   445d0:	dc400117 	ldw	r17,4(sp)
   445d4:	dc000017 	ldw	r16,0(sp)
   445d8:	dec00504 	addi	sp,sp,20
   445dc:	f800283a 	ret
   445e0:	0081ffc4 	movi	r2,2047
   445e4:	80bfd626 	beq	r16,r2,44540 <__alt_data_end+0xfffdd440>
   445e8:	4a402034 	orhi	r9,r9,128
   445ec:	00800e04 	movi	r2,56
   445f0:	10c09f16 	blt	r2,r3,44870 <__adddf3+0x3ac>
   445f4:	008007c4 	movi	r2,31
   445f8:	10c0c216 	blt	r2,r3,44904 <__adddf3+0x440>
   445fc:	00800804 	movi	r2,32
   44600:	10c5c83a 	sub	r2,r2,r3
   44604:	488a983a 	sll	r5,r9,r2
   44608:	30c8d83a 	srl	r4,r6,r3
   4460c:	3084983a 	sll	r2,r6,r2
   44610:	48c6d83a 	srl	r3,r9,r3
   44614:	290cb03a 	or	r6,r5,r4
   44618:	1004c03a 	cmpne	r2,r2,zero
   4461c:	308cb03a 	or	r6,r6,r2
   44620:	898dc83a 	sub	r6,r17,r6
   44624:	89a3803a 	cmpltu	r17,r17,r6
   44628:	40d1c83a 	sub	r8,r8,r3
   4462c:	4451c83a 	sub	r8,r8,r17
   44630:	3023883a 	mov	r17,r6
   44634:	4080202c 	andhi	r2,r8,128
   44638:	10002326 	beq	r2,zero,446c8 <__adddf3+0x204>
   4463c:	04c02034 	movhi	r19,128
   44640:	9cffffc4 	addi	r19,r19,-1
   44644:	44e6703a 	and	r19,r8,r19
   44648:	98007626 	beq	r19,zero,44824 <__adddf3+0x360>
   4464c:	9809883a 	mov	r4,r19
   44650:	0046be40 	call	46be4 <__clzsi2>
   44654:	10fffe04 	addi	r3,r2,-8
   44658:	010007c4 	movi	r4,31
   4465c:	20c07716 	blt	r4,r3,4483c <__adddf3+0x378>
   44660:	00800804 	movi	r2,32
   44664:	10c5c83a 	sub	r2,r2,r3
   44668:	8884d83a 	srl	r2,r17,r2
   4466c:	98d0983a 	sll	r8,r19,r3
   44670:	88e2983a 	sll	r17,r17,r3
   44674:	1204b03a 	or	r2,r2,r8
   44678:	1c007416 	blt	r3,r16,4484c <__adddf3+0x388>
   4467c:	1c21c83a 	sub	r16,r3,r16
   44680:	82000044 	addi	r8,r16,1
   44684:	00c007c4 	movi	r3,31
   44688:	1a009116 	blt	r3,r8,448d0 <__adddf3+0x40c>
   4468c:	00c00804 	movi	r3,32
   44690:	1a07c83a 	sub	r3,r3,r8
   44694:	8a08d83a 	srl	r4,r17,r8
   44698:	88e2983a 	sll	r17,r17,r3
   4469c:	10c6983a 	sll	r3,r2,r3
   446a0:	1210d83a 	srl	r8,r2,r8
   446a4:	8804c03a 	cmpne	r2,r17,zero
   446a8:	1906b03a 	or	r3,r3,r4
   446ac:	18a2b03a 	or	r17,r3,r2
   446b0:	0021883a 	mov	r16,zero
   446b4:	003fa206 	br	44540 <__alt_data_end+0xfffdd440>
   446b8:	1890b03a 	or	r8,r3,r2
   446bc:	40017d26 	beq	r8,zero,44cb4 <__adddf3+0x7f0>
   446c0:	1011883a 	mov	r8,r2
   446c4:	1823883a 	mov	r17,r3
   446c8:	888001cc 	andi	r2,r17,7
   446cc:	103f9e1e 	bne	r2,zero,44548 <__alt_data_end+0xfffdd448>
   446d0:	4004977a 	slli	r2,r8,29
   446d4:	8822d0fa 	srli	r17,r17,3
   446d8:	4010d0fa 	srli	r8,r8,3
   446dc:	9007883a 	mov	r3,r18
   446e0:	1444b03a 	or	r2,r2,r17
   446e4:	0101ffc4 	movi	r4,2047
   446e8:	81002426 	beq	r16,r4,4477c <__adddf3+0x2b8>
   446ec:	8120703a 	and	r16,r16,r4
   446f0:	01000434 	movhi	r4,16
   446f4:	213fffc4 	addi	r4,r4,-1
   446f8:	4110703a 	and	r8,r8,r4
   446fc:	003fa806 	br	445a0 <__alt_data_end+0xfffdd4a0>
   44700:	8089c83a 	sub	r4,r16,r2
   44704:	01005e0e 	bge	zero,r4,44880 <__adddf3+0x3bc>
   44708:	10002b26 	beq	r2,zero,447b8 <__adddf3+0x2f4>
   4470c:	0081ffc4 	movi	r2,2047
   44710:	80bf8b26 	beq	r16,r2,44540 <__alt_data_end+0xfffdd440>
   44714:	4a402034 	orhi	r9,r9,128
   44718:	00800e04 	movi	r2,56
   4471c:	1100a40e 	bge	r2,r4,449b0 <__adddf3+0x4ec>
   44720:	498cb03a 	or	r6,r9,r6
   44724:	300ac03a 	cmpne	r5,r6,zero
   44728:	0013883a 	mov	r9,zero
   4472c:	2c4b883a 	add	r5,r5,r17
   44730:	2c63803a 	cmpltu	r17,r5,r17
   44734:	4a11883a 	add	r8,r9,r8
   44738:	8a11883a 	add	r8,r17,r8
   4473c:	2823883a 	mov	r17,r5
   44740:	4080202c 	andhi	r2,r8,128
   44744:	103fe026 	beq	r2,zero,446c8 <__alt_data_end+0xfffdd5c8>
   44748:	84000044 	addi	r16,r16,1
   4474c:	0081ffc4 	movi	r2,2047
   44750:	8080d226 	beq	r16,r2,44a9c <__adddf3+0x5d8>
   44754:	00bfe034 	movhi	r2,65408
   44758:	10bfffc4 	addi	r2,r2,-1
   4475c:	4090703a 	and	r8,r8,r2
   44760:	880ad07a 	srli	r5,r17,1
   44764:	400897fa 	slli	r4,r8,31
   44768:	88c0004c 	andi	r3,r17,1
   4476c:	28e2b03a 	or	r17,r5,r3
   44770:	4010d07a 	srli	r8,r8,1
   44774:	2462b03a 	or	r17,r4,r17
   44778:	003f7106 	br	44540 <__alt_data_end+0xfffdd440>
   4477c:	4088b03a 	or	r4,r8,r2
   44780:	20014526 	beq	r4,zero,44c98 <__adddf3+0x7d4>
   44784:	01000434 	movhi	r4,16
   44788:	42000234 	orhi	r8,r8,8
   4478c:	213fffc4 	addi	r4,r4,-1
   44790:	4110703a 	and	r8,r8,r4
   44794:	003f8206 	br	445a0 <__alt_data_end+0xfffdd4a0>
   44798:	18ffffc4 	addi	r3,r3,-1
   4479c:	1800491e 	bne	r3,zero,448c4 <__adddf3+0x400>
   447a0:	898bc83a 	sub	r5,r17,r6
   447a4:	8963803a 	cmpltu	r17,r17,r5
   447a8:	4251c83a 	sub	r8,r8,r9
   447ac:	4451c83a 	sub	r8,r8,r17
   447b0:	2823883a 	mov	r17,r5
   447b4:	003f9f06 	br	44634 <__alt_data_end+0xfffdd534>
   447b8:	4984b03a 	or	r2,r9,r6
   447bc:	103f6026 	beq	r2,zero,44540 <__alt_data_end+0xfffdd440>
   447c0:	213fffc4 	addi	r4,r4,-1
   447c4:	2000931e 	bne	r4,zero,44a14 <__adddf3+0x550>
   447c8:	898d883a 	add	r6,r17,r6
   447cc:	3463803a 	cmpltu	r17,r6,r17
   447d0:	4251883a 	add	r8,r8,r9
   447d4:	8a11883a 	add	r8,r17,r8
   447d8:	3023883a 	mov	r17,r6
   447dc:	003fd806 	br	44740 <__alt_data_end+0xfffdd640>
   447e0:	1800541e 	bne	r3,zero,44934 <__adddf3+0x470>
   447e4:	80800044 	addi	r2,r16,1
   447e8:	1081ffcc 	andi	r2,r2,2047
   447ec:	00c00044 	movi	r3,1
   447f0:	1880a00e 	bge	r3,r2,44a74 <__adddf3+0x5b0>
   447f4:	8989c83a 	sub	r4,r17,r6
   447f8:	8905803a 	cmpltu	r2,r17,r4
   447fc:	4267c83a 	sub	r19,r8,r9
   44800:	98a7c83a 	sub	r19,r19,r2
   44804:	9880202c 	andhi	r2,r19,128
   44808:	10006326 	beq	r2,zero,44998 <__adddf3+0x4d4>
   4480c:	3463c83a 	sub	r17,r6,r17
   44810:	4a07c83a 	sub	r3,r9,r8
   44814:	344d803a 	cmpltu	r6,r6,r17
   44818:	19a7c83a 	sub	r19,r3,r6
   4481c:	3825883a 	mov	r18,r7
   44820:	983f8a1e 	bne	r19,zero,4464c <__alt_data_end+0xfffdd54c>
   44824:	8809883a 	mov	r4,r17
   44828:	0046be40 	call	46be4 <__clzsi2>
   4482c:	10800804 	addi	r2,r2,32
   44830:	10fffe04 	addi	r3,r2,-8
   44834:	010007c4 	movi	r4,31
   44838:	20ff890e 	bge	r4,r3,44660 <__alt_data_end+0xfffdd560>
   4483c:	10bff604 	addi	r2,r2,-40
   44840:	8884983a 	sll	r2,r17,r2
   44844:	0023883a 	mov	r17,zero
   44848:	1c3f8c0e 	bge	r3,r16,4467c <__alt_data_end+0xfffdd57c>
   4484c:	023fe034 	movhi	r8,65408
   44850:	423fffc4 	addi	r8,r8,-1
   44854:	80e1c83a 	sub	r16,r16,r3
   44858:	1210703a 	and	r8,r2,r8
   4485c:	003f3806 	br	44540 <__alt_data_end+0xfffdd440>
   44860:	9007883a 	mov	r3,r18
   44864:	0011883a 	mov	r8,zero
   44868:	0005883a 	mov	r2,zero
   4486c:	003f4c06 	br	445a0 <__alt_data_end+0xfffdd4a0>
   44870:	498cb03a 	or	r6,r9,r6
   44874:	300cc03a 	cmpne	r6,r6,zero
   44878:	0007883a 	mov	r3,zero
   4487c:	003f6806 	br	44620 <__alt_data_end+0xfffdd520>
   44880:	20009c1e 	bne	r4,zero,44af4 <__adddf3+0x630>
   44884:	80800044 	addi	r2,r16,1
   44888:	1141ffcc 	andi	r5,r2,2047
   4488c:	01000044 	movi	r4,1
   44890:	2140670e 	bge	r4,r5,44a30 <__adddf3+0x56c>
   44894:	0101ffc4 	movi	r4,2047
   44898:	11007f26 	beq	r2,r4,44a98 <__adddf3+0x5d4>
   4489c:	898d883a 	add	r6,r17,r6
   448a0:	4247883a 	add	r3,r8,r9
   448a4:	3451803a 	cmpltu	r8,r6,r17
   448a8:	40d1883a 	add	r8,r8,r3
   448ac:	402297fa 	slli	r17,r8,31
   448b0:	300cd07a 	srli	r6,r6,1
   448b4:	4010d07a 	srli	r8,r8,1
   448b8:	1021883a 	mov	r16,r2
   448bc:	89a2b03a 	or	r17,r17,r6
   448c0:	003f1f06 	br	44540 <__alt_data_end+0xfffdd440>
   448c4:	0081ffc4 	movi	r2,2047
   448c8:	80bf481e 	bne	r16,r2,445ec <__alt_data_end+0xfffdd4ec>
   448cc:	003f1c06 	br	44540 <__alt_data_end+0xfffdd440>
   448d0:	843ff844 	addi	r16,r16,-31
   448d4:	01000804 	movi	r4,32
   448d8:	1406d83a 	srl	r3,r2,r16
   448dc:	41005026 	beq	r8,r4,44a20 <__adddf3+0x55c>
   448e0:	01001004 	movi	r4,64
   448e4:	2211c83a 	sub	r8,r4,r8
   448e8:	1204983a 	sll	r2,r2,r8
   448ec:	88a2b03a 	or	r17,r17,r2
   448f0:	8822c03a 	cmpne	r17,r17,zero
   448f4:	1c62b03a 	or	r17,r3,r17
   448f8:	0011883a 	mov	r8,zero
   448fc:	0021883a 	mov	r16,zero
   44900:	003f7106 	br	446c8 <__alt_data_end+0xfffdd5c8>
   44904:	193ff804 	addi	r4,r3,-32
   44908:	00800804 	movi	r2,32
   4490c:	4908d83a 	srl	r4,r9,r4
   44910:	18804526 	beq	r3,r2,44a28 <__adddf3+0x564>
   44914:	00801004 	movi	r2,64
   44918:	10c5c83a 	sub	r2,r2,r3
   4491c:	4886983a 	sll	r3,r9,r2
   44920:	198cb03a 	or	r6,r3,r6
   44924:	300cc03a 	cmpne	r6,r6,zero
   44928:	218cb03a 	or	r6,r4,r6
   4492c:	0007883a 	mov	r3,zero
   44930:	003f3b06 	br	44620 <__alt_data_end+0xfffdd520>
   44934:	80002a26 	beq	r16,zero,449e0 <__adddf3+0x51c>
   44938:	0101ffc4 	movi	r4,2047
   4493c:	11006826 	beq	r2,r4,44ae0 <__adddf3+0x61c>
   44940:	00c7c83a 	sub	r3,zero,r3
   44944:	42002034 	orhi	r8,r8,128
   44948:	01000e04 	movi	r4,56
   4494c:	20c07c16 	blt	r4,r3,44b40 <__adddf3+0x67c>
   44950:	010007c4 	movi	r4,31
   44954:	20c0da16 	blt	r4,r3,44cc0 <__adddf3+0x7fc>
   44958:	01000804 	movi	r4,32
   4495c:	20c9c83a 	sub	r4,r4,r3
   44960:	4114983a 	sll	r10,r8,r4
   44964:	88cad83a 	srl	r5,r17,r3
   44968:	8908983a 	sll	r4,r17,r4
   4496c:	40c6d83a 	srl	r3,r8,r3
   44970:	5162b03a 	or	r17,r10,r5
   44974:	2008c03a 	cmpne	r4,r4,zero
   44978:	8922b03a 	or	r17,r17,r4
   4497c:	3463c83a 	sub	r17,r6,r17
   44980:	48c7c83a 	sub	r3,r9,r3
   44984:	344d803a 	cmpltu	r6,r6,r17
   44988:	1991c83a 	sub	r8,r3,r6
   4498c:	1021883a 	mov	r16,r2
   44990:	3825883a 	mov	r18,r7
   44994:	003f2706 	br	44634 <__alt_data_end+0xfffdd534>
   44998:	24d0b03a 	or	r8,r4,r19
   4499c:	40001b1e 	bne	r8,zero,44a0c <__adddf3+0x548>
   449a0:	0005883a 	mov	r2,zero
   449a4:	0007883a 	mov	r3,zero
   449a8:	0021883a 	mov	r16,zero
   449ac:	003f4d06 	br	446e4 <__alt_data_end+0xfffdd5e4>
   449b0:	008007c4 	movi	r2,31
   449b4:	11003c16 	blt	r2,r4,44aa8 <__adddf3+0x5e4>
   449b8:	00800804 	movi	r2,32
   449bc:	1105c83a 	sub	r2,r2,r4
   449c0:	488e983a 	sll	r7,r9,r2
   449c4:	310ad83a 	srl	r5,r6,r4
   449c8:	3084983a 	sll	r2,r6,r2
   449cc:	4912d83a 	srl	r9,r9,r4
   449d0:	394ab03a 	or	r5,r7,r5
   449d4:	1004c03a 	cmpne	r2,r2,zero
   449d8:	288ab03a 	or	r5,r5,r2
   449dc:	003f5306 	br	4472c <__alt_data_end+0xfffdd62c>
   449e0:	4448b03a 	or	r4,r8,r17
   449e4:	20003e26 	beq	r4,zero,44ae0 <__adddf3+0x61c>
   449e8:	00c6303a 	nor	r3,zero,r3
   449ec:	18003a1e 	bne	r3,zero,44ad8 <__adddf3+0x614>
   449f0:	3463c83a 	sub	r17,r6,r17
   449f4:	4a07c83a 	sub	r3,r9,r8
   449f8:	344d803a 	cmpltu	r6,r6,r17
   449fc:	1991c83a 	sub	r8,r3,r6
   44a00:	1021883a 	mov	r16,r2
   44a04:	3825883a 	mov	r18,r7
   44a08:	003f0a06 	br	44634 <__alt_data_end+0xfffdd534>
   44a0c:	2023883a 	mov	r17,r4
   44a10:	003f0d06 	br	44648 <__alt_data_end+0xfffdd548>
   44a14:	0081ffc4 	movi	r2,2047
   44a18:	80bf3f1e 	bne	r16,r2,44718 <__alt_data_end+0xfffdd618>
   44a1c:	003ec806 	br	44540 <__alt_data_end+0xfffdd440>
   44a20:	0005883a 	mov	r2,zero
   44a24:	003fb106 	br	448ec <__alt_data_end+0xfffdd7ec>
   44a28:	0007883a 	mov	r3,zero
   44a2c:	003fbc06 	br	44920 <__alt_data_end+0xfffdd820>
   44a30:	4444b03a 	or	r2,r8,r17
   44a34:	8000871e 	bne	r16,zero,44c54 <__adddf3+0x790>
   44a38:	1000ba26 	beq	r2,zero,44d24 <__adddf3+0x860>
   44a3c:	4984b03a 	or	r2,r9,r6
   44a40:	103ebf26 	beq	r2,zero,44540 <__alt_data_end+0xfffdd440>
   44a44:	8985883a 	add	r2,r17,r6
   44a48:	4247883a 	add	r3,r8,r9
   44a4c:	1451803a 	cmpltu	r8,r2,r17
   44a50:	40d1883a 	add	r8,r8,r3
   44a54:	40c0202c 	andhi	r3,r8,128
   44a58:	1023883a 	mov	r17,r2
   44a5c:	183f1a26 	beq	r3,zero,446c8 <__alt_data_end+0xfffdd5c8>
   44a60:	00bfe034 	movhi	r2,65408
   44a64:	10bfffc4 	addi	r2,r2,-1
   44a68:	2021883a 	mov	r16,r4
   44a6c:	4090703a 	and	r8,r8,r2
   44a70:	003eb306 	br	44540 <__alt_data_end+0xfffdd440>
   44a74:	4444b03a 	or	r2,r8,r17
   44a78:	8000291e 	bne	r16,zero,44b20 <__adddf3+0x65c>
   44a7c:	10004b1e 	bne	r2,zero,44bac <__adddf3+0x6e8>
   44a80:	4990b03a 	or	r8,r9,r6
   44a84:	40008b26 	beq	r8,zero,44cb4 <__adddf3+0x7f0>
   44a88:	4811883a 	mov	r8,r9
   44a8c:	3023883a 	mov	r17,r6
   44a90:	3825883a 	mov	r18,r7
   44a94:	003eaa06 	br	44540 <__alt_data_end+0xfffdd440>
   44a98:	1021883a 	mov	r16,r2
   44a9c:	0011883a 	mov	r8,zero
   44aa0:	0005883a 	mov	r2,zero
   44aa4:	003f0f06 	br	446e4 <__alt_data_end+0xfffdd5e4>
   44aa8:	217ff804 	addi	r5,r4,-32
   44aac:	00800804 	movi	r2,32
   44ab0:	494ad83a 	srl	r5,r9,r5
   44ab4:	20807d26 	beq	r4,r2,44cac <__adddf3+0x7e8>
   44ab8:	00801004 	movi	r2,64
   44abc:	1109c83a 	sub	r4,r2,r4
   44ac0:	4912983a 	sll	r9,r9,r4
   44ac4:	498cb03a 	or	r6,r9,r6
   44ac8:	300cc03a 	cmpne	r6,r6,zero
   44acc:	298ab03a 	or	r5,r5,r6
   44ad0:	0013883a 	mov	r9,zero
   44ad4:	003f1506 	br	4472c <__alt_data_end+0xfffdd62c>
   44ad8:	0101ffc4 	movi	r4,2047
   44adc:	113f9a1e 	bne	r2,r4,44948 <__alt_data_end+0xfffdd848>
   44ae0:	4811883a 	mov	r8,r9
   44ae4:	3023883a 	mov	r17,r6
   44ae8:	1021883a 	mov	r16,r2
   44aec:	3825883a 	mov	r18,r7
   44af0:	003e9306 	br	44540 <__alt_data_end+0xfffdd440>
   44af4:	8000161e 	bne	r16,zero,44b50 <__adddf3+0x68c>
   44af8:	444ab03a 	or	r5,r8,r17
   44afc:	28005126 	beq	r5,zero,44c44 <__adddf3+0x780>
   44b00:	0108303a 	nor	r4,zero,r4
   44b04:	20004d1e 	bne	r4,zero,44c3c <__adddf3+0x778>
   44b08:	89a3883a 	add	r17,r17,r6
   44b0c:	4253883a 	add	r9,r8,r9
   44b10:	898d803a 	cmpltu	r6,r17,r6
   44b14:	3251883a 	add	r8,r6,r9
   44b18:	1021883a 	mov	r16,r2
   44b1c:	003f0806 	br	44740 <__alt_data_end+0xfffdd640>
   44b20:	1000301e 	bne	r2,zero,44be4 <__adddf3+0x720>
   44b24:	4984b03a 	or	r2,r9,r6
   44b28:	10007126 	beq	r2,zero,44cf0 <__adddf3+0x82c>
   44b2c:	4811883a 	mov	r8,r9
   44b30:	3023883a 	mov	r17,r6
   44b34:	3825883a 	mov	r18,r7
   44b38:	0401ffc4 	movi	r16,2047
   44b3c:	003e8006 	br	44540 <__alt_data_end+0xfffdd440>
   44b40:	4462b03a 	or	r17,r8,r17
   44b44:	8822c03a 	cmpne	r17,r17,zero
   44b48:	0007883a 	mov	r3,zero
   44b4c:	003f8b06 	br	4497c <__alt_data_end+0xfffdd87c>
   44b50:	0141ffc4 	movi	r5,2047
   44b54:	11403b26 	beq	r2,r5,44c44 <__adddf3+0x780>
   44b58:	0109c83a 	sub	r4,zero,r4
   44b5c:	42002034 	orhi	r8,r8,128
   44b60:	01400e04 	movi	r5,56
   44b64:	29006716 	blt	r5,r4,44d04 <__adddf3+0x840>
   44b68:	014007c4 	movi	r5,31
   44b6c:	29007016 	blt	r5,r4,44d30 <__adddf3+0x86c>
   44b70:	01400804 	movi	r5,32
   44b74:	290bc83a 	sub	r5,r5,r4
   44b78:	4154983a 	sll	r10,r8,r5
   44b7c:	890ed83a 	srl	r7,r17,r4
   44b80:	894a983a 	sll	r5,r17,r5
   44b84:	4108d83a 	srl	r4,r8,r4
   44b88:	51e2b03a 	or	r17,r10,r7
   44b8c:	280ac03a 	cmpne	r5,r5,zero
   44b90:	8962b03a 	or	r17,r17,r5
   44b94:	89a3883a 	add	r17,r17,r6
   44b98:	2253883a 	add	r9,r4,r9
   44b9c:	898d803a 	cmpltu	r6,r17,r6
   44ba0:	3251883a 	add	r8,r6,r9
   44ba4:	1021883a 	mov	r16,r2
   44ba8:	003ee506 	br	44740 <__alt_data_end+0xfffdd640>
   44bac:	4984b03a 	or	r2,r9,r6
   44bb0:	103e6326 	beq	r2,zero,44540 <__alt_data_end+0xfffdd440>
   44bb4:	8987c83a 	sub	r3,r17,r6
   44bb8:	88c9803a 	cmpltu	r4,r17,r3
   44bbc:	4245c83a 	sub	r2,r8,r9
   44bc0:	1105c83a 	sub	r2,r2,r4
   44bc4:	1100202c 	andhi	r4,r2,128
   44bc8:	203ebb26 	beq	r4,zero,446b8 <__alt_data_end+0xfffdd5b8>
   44bcc:	3463c83a 	sub	r17,r6,r17
   44bd0:	4a07c83a 	sub	r3,r9,r8
   44bd4:	344d803a 	cmpltu	r6,r6,r17
   44bd8:	1991c83a 	sub	r8,r3,r6
   44bdc:	3825883a 	mov	r18,r7
   44be0:	003e5706 	br	44540 <__alt_data_end+0xfffdd440>
   44be4:	4984b03a 	or	r2,r9,r6
   44be8:	10002e26 	beq	r2,zero,44ca4 <__adddf3+0x7e0>
   44bec:	4004d0fa 	srli	r2,r8,3
   44bf0:	8822d0fa 	srli	r17,r17,3
   44bf4:	4010977a 	slli	r8,r8,29
   44bf8:	10c0022c 	andhi	r3,r2,8
   44bfc:	4462b03a 	or	r17,r8,r17
   44c00:	18000826 	beq	r3,zero,44c24 <__adddf3+0x760>
   44c04:	4808d0fa 	srli	r4,r9,3
   44c08:	20c0022c 	andhi	r3,r4,8
   44c0c:	1800051e 	bne	r3,zero,44c24 <__adddf3+0x760>
   44c10:	300cd0fa 	srli	r6,r6,3
   44c14:	4806977a 	slli	r3,r9,29
   44c18:	2005883a 	mov	r2,r4
   44c1c:	3825883a 	mov	r18,r7
   44c20:	19a2b03a 	or	r17,r3,r6
   44c24:	8810d77a 	srli	r8,r17,29
   44c28:	100490fa 	slli	r2,r2,3
   44c2c:	882290fa 	slli	r17,r17,3
   44c30:	0401ffc4 	movi	r16,2047
   44c34:	4090b03a 	or	r8,r8,r2
   44c38:	003e4106 	br	44540 <__alt_data_end+0xfffdd440>
   44c3c:	0141ffc4 	movi	r5,2047
   44c40:	117fc71e 	bne	r2,r5,44b60 <__alt_data_end+0xfffdda60>
   44c44:	4811883a 	mov	r8,r9
   44c48:	3023883a 	mov	r17,r6
   44c4c:	1021883a 	mov	r16,r2
   44c50:	003e3b06 	br	44540 <__alt_data_end+0xfffdd440>
   44c54:	10002f26 	beq	r2,zero,44d14 <__adddf3+0x850>
   44c58:	4984b03a 	or	r2,r9,r6
   44c5c:	10001126 	beq	r2,zero,44ca4 <__adddf3+0x7e0>
   44c60:	4004d0fa 	srli	r2,r8,3
   44c64:	8822d0fa 	srli	r17,r17,3
   44c68:	4010977a 	slli	r8,r8,29
   44c6c:	10c0022c 	andhi	r3,r2,8
   44c70:	4462b03a 	or	r17,r8,r17
   44c74:	183feb26 	beq	r3,zero,44c24 <__alt_data_end+0xfffddb24>
   44c78:	4808d0fa 	srli	r4,r9,3
   44c7c:	20c0022c 	andhi	r3,r4,8
   44c80:	183fe81e 	bne	r3,zero,44c24 <__alt_data_end+0xfffddb24>
   44c84:	300cd0fa 	srli	r6,r6,3
   44c88:	4806977a 	slli	r3,r9,29
   44c8c:	2005883a 	mov	r2,r4
   44c90:	19a2b03a 	or	r17,r3,r6
   44c94:	003fe306 	br	44c24 <__alt_data_end+0xfffddb24>
   44c98:	0011883a 	mov	r8,zero
   44c9c:	0005883a 	mov	r2,zero
   44ca0:	003e3f06 	br	445a0 <__alt_data_end+0xfffdd4a0>
   44ca4:	0401ffc4 	movi	r16,2047
   44ca8:	003e2506 	br	44540 <__alt_data_end+0xfffdd440>
   44cac:	0013883a 	mov	r9,zero
   44cb0:	003f8406 	br	44ac4 <__alt_data_end+0xfffdd9c4>
   44cb4:	0005883a 	mov	r2,zero
   44cb8:	0007883a 	mov	r3,zero
   44cbc:	003e8906 	br	446e4 <__alt_data_end+0xfffdd5e4>
   44cc0:	197ff804 	addi	r5,r3,-32
   44cc4:	01000804 	movi	r4,32
   44cc8:	414ad83a 	srl	r5,r8,r5
   44ccc:	19002426 	beq	r3,r4,44d60 <__adddf3+0x89c>
   44cd0:	01001004 	movi	r4,64
   44cd4:	20c7c83a 	sub	r3,r4,r3
   44cd8:	40c6983a 	sll	r3,r8,r3
   44cdc:	1c46b03a 	or	r3,r3,r17
   44ce0:	1806c03a 	cmpne	r3,r3,zero
   44ce4:	28e2b03a 	or	r17,r5,r3
   44ce8:	0007883a 	mov	r3,zero
   44cec:	003f2306 	br	4497c <__alt_data_end+0xfffdd87c>
   44cf0:	0007883a 	mov	r3,zero
   44cf4:	5811883a 	mov	r8,r11
   44cf8:	00bfffc4 	movi	r2,-1
   44cfc:	0401ffc4 	movi	r16,2047
   44d00:	003e7806 	br	446e4 <__alt_data_end+0xfffdd5e4>
   44d04:	4462b03a 	or	r17,r8,r17
   44d08:	8822c03a 	cmpne	r17,r17,zero
   44d0c:	0009883a 	mov	r4,zero
   44d10:	003fa006 	br	44b94 <__alt_data_end+0xfffdda94>
   44d14:	4811883a 	mov	r8,r9
   44d18:	3023883a 	mov	r17,r6
   44d1c:	0401ffc4 	movi	r16,2047
   44d20:	003e0706 	br	44540 <__alt_data_end+0xfffdd440>
   44d24:	4811883a 	mov	r8,r9
   44d28:	3023883a 	mov	r17,r6
   44d2c:	003e0406 	br	44540 <__alt_data_end+0xfffdd440>
   44d30:	21fff804 	addi	r7,r4,-32
   44d34:	01400804 	movi	r5,32
   44d38:	41ced83a 	srl	r7,r8,r7
   44d3c:	21400a26 	beq	r4,r5,44d68 <__adddf3+0x8a4>
   44d40:	01401004 	movi	r5,64
   44d44:	2909c83a 	sub	r4,r5,r4
   44d48:	4108983a 	sll	r4,r8,r4
   44d4c:	2448b03a 	or	r4,r4,r17
   44d50:	2008c03a 	cmpne	r4,r4,zero
   44d54:	3922b03a 	or	r17,r7,r4
   44d58:	0009883a 	mov	r4,zero
   44d5c:	003f8d06 	br	44b94 <__alt_data_end+0xfffdda94>
   44d60:	0007883a 	mov	r3,zero
   44d64:	003fdd06 	br	44cdc <__alt_data_end+0xfffddbdc>
   44d68:	0009883a 	mov	r4,zero
   44d6c:	003ff706 	br	44d4c <__alt_data_end+0xfffddc4c>

00044d70 <__divdf3>:
   44d70:	defff204 	addi	sp,sp,-56
   44d74:	dd400915 	stw	r21,36(sp)
   44d78:	282ad53a 	srli	r21,r5,20
   44d7c:	dd000815 	stw	r20,32(sp)
   44d80:	2828d7fa 	srli	r20,r5,31
   44d84:	dc000415 	stw	r16,16(sp)
   44d88:	04000434 	movhi	r16,16
   44d8c:	df000c15 	stw	fp,48(sp)
   44d90:	843fffc4 	addi	r16,r16,-1
   44d94:	dfc00d15 	stw	ra,52(sp)
   44d98:	ddc00b15 	stw	r23,44(sp)
   44d9c:	dd800a15 	stw	r22,40(sp)
   44da0:	dcc00715 	stw	r19,28(sp)
   44da4:	dc800615 	stw	r18,24(sp)
   44da8:	dc400515 	stw	r17,20(sp)
   44dac:	ad41ffcc 	andi	r21,r21,2047
   44db0:	2c20703a 	and	r16,r5,r16
   44db4:	a7003fcc 	andi	fp,r20,255
   44db8:	a8006126 	beq	r21,zero,44f40 <__divdf3+0x1d0>
   44dbc:	0081ffc4 	movi	r2,2047
   44dc0:	2025883a 	mov	r18,r4
   44dc4:	a8803726 	beq	r21,r2,44ea4 <__divdf3+0x134>
   44dc8:	80800434 	orhi	r2,r16,16
   44dcc:	100490fa 	slli	r2,r2,3
   44dd0:	2020d77a 	srli	r16,r4,29
   44dd4:	202490fa 	slli	r18,r4,3
   44dd8:	ad7f0044 	addi	r21,r21,-1023
   44ddc:	80a0b03a 	or	r16,r16,r2
   44de0:	0027883a 	mov	r19,zero
   44de4:	0013883a 	mov	r9,zero
   44de8:	3804d53a 	srli	r2,r7,20
   44dec:	382cd7fa 	srli	r22,r7,31
   44df0:	04400434 	movhi	r17,16
   44df4:	8c7fffc4 	addi	r17,r17,-1
   44df8:	1081ffcc 	andi	r2,r2,2047
   44dfc:	3011883a 	mov	r8,r6
   44e00:	3c62703a 	and	r17,r7,r17
   44e04:	b5c03fcc 	andi	r23,r22,255
   44e08:	10006c26 	beq	r2,zero,44fbc <__divdf3+0x24c>
   44e0c:	00c1ffc4 	movi	r3,2047
   44e10:	10c06426 	beq	r2,r3,44fa4 <__divdf3+0x234>
   44e14:	88c00434 	orhi	r3,r17,16
   44e18:	180690fa 	slli	r3,r3,3
   44e1c:	3022d77a 	srli	r17,r6,29
   44e20:	301090fa 	slli	r8,r6,3
   44e24:	10bf0044 	addi	r2,r2,-1023
   44e28:	88e2b03a 	or	r17,r17,r3
   44e2c:	000f883a 	mov	r7,zero
   44e30:	a58cf03a 	xor	r6,r20,r22
   44e34:	3cc8b03a 	or	r4,r7,r19
   44e38:	a8abc83a 	sub	r21,r21,r2
   44e3c:	008003c4 	movi	r2,15
   44e40:	3007883a 	mov	r3,r6
   44e44:	34c03fcc 	andi	r19,r6,255
   44e48:	11009036 	bltu	r2,r4,4508c <__divdf3+0x31c>
   44e4c:	200890ba 	slli	r4,r4,2
   44e50:	00800134 	movhi	r2,4
   44e54:	10939904 	addi	r2,r2,20068
   44e58:	2089883a 	add	r4,r4,r2
   44e5c:	20800017 	ldw	r2,0(r4)
   44e60:	1000683a 	jmp	r2
   44e64:	0004508c 	andi	zero,zero,4418
   44e68:	00044edc 	xori	zero,zero,4411
   44e6c:	0004507c 	xorhi	zero,zero,4417
   44e70:	00044ed0 	cmplti	zero,zero,4411
   44e74:	0004507c 	xorhi	zero,zero,4417
   44e78:	00045050 	cmplti	zero,zero,4417
   44e7c:	0004507c 	xorhi	zero,zero,4417
   44e80:	00044ed0 	cmplti	zero,zero,4411
   44e84:	00044edc 	xori	zero,zero,4411
   44e88:	00044edc 	xori	zero,zero,4411
   44e8c:	00045050 	cmplti	zero,zero,4417
   44e90:	00044ed0 	cmplti	zero,zero,4411
   44e94:	00044ec0 	call	44ec <__alt_mem_onchip_memory2-0x3bb14>
   44e98:	00044ec0 	call	44ec <__alt_mem_onchip_memory2-0x3bb14>
   44e9c:	00044ec0 	call	44ec <__alt_mem_onchip_memory2-0x3bb14>
   44ea0:	00045370 	cmpltui	zero,zero,4429
   44ea4:	2404b03a 	or	r2,r4,r16
   44ea8:	1000661e 	bne	r2,zero,45044 <__divdf3+0x2d4>
   44eac:	04c00204 	movi	r19,8
   44eb0:	0021883a 	mov	r16,zero
   44eb4:	0025883a 	mov	r18,zero
   44eb8:	02400084 	movi	r9,2
   44ebc:	003fca06 	br	44de8 <__alt_data_end+0xfffddce8>
   44ec0:	8023883a 	mov	r17,r16
   44ec4:	9011883a 	mov	r8,r18
   44ec8:	e02f883a 	mov	r23,fp
   44ecc:	480f883a 	mov	r7,r9
   44ed0:	00800084 	movi	r2,2
   44ed4:	3881311e 	bne	r7,r2,4539c <__divdf3+0x62c>
   44ed8:	b827883a 	mov	r19,r23
   44edc:	98c0004c 	andi	r3,r19,1
   44ee0:	0081ffc4 	movi	r2,2047
   44ee4:	000b883a 	mov	r5,zero
   44ee8:	0025883a 	mov	r18,zero
   44eec:	1004953a 	slli	r2,r2,20
   44ef0:	18c03fcc 	andi	r3,r3,255
   44ef4:	04400434 	movhi	r17,16
   44ef8:	8c7fffc4 	addi	r17,r17,-1
   44efc:	180697fa 	slli	r3,r3,31
   44f00:	2c4a703a 	and	r5,r5,r17
   44f04:	288ab03a 	or	r5,r5,r2
   44f08:	28c6b03a 	or	r3,r5,r3
   44f0c:	9005883a 	mov	r2,r18
   44f10:	dfc00d17 	ldw	ra,52(sp)
   44f14:	df000c17 	ldw	fp,48(sp)
   44f18:	ddc00b17 	ldw	r23,44(sp)
   44f1c:	dd800a17 	ldw	r22,40(sp)
   44f20:	dd400917 	ldw	r21,36(sp)
   44f24:	dd000817 	ldw	r20,32(sp)
   44f28:	dcc00717 	ldw	r19,28(sp)
   44f2c:	dc800617 	ldw	r18,24(sp)
   44f30:	dc400517 	ldw	r17,20(sp)
   44f34:	dc000417 	ldw	r16,16(sp)
   44f38:	dec00e04 	addi	sp,sp,56
   44f3c:	f800283a 	ret
   44f40:	2404b03a 	or	r2,r4,r16
   44f44:	2027883a 	mov	r19,r4
   44f48:	10003926 	beq	r2,zero,45030 <__divdf3+0x2c0>
   44f4c:	80012e26 	beq	r16,zero,45408 <__divdf3+0x698>
   44f50:	8009883a 	mov	r4,r16
   44f54:	d9800315 	stw	r6,12(sp)
   44f58:	d9c00215 	stw	r7,8(sp)
   44f5c:	0046be40 	call	46be4 <__clzsi2>
   44f60:	d9800317 	ldw	r6,12(sp)
   44f64:	d9c00217 	ldw	r7,8(sp)
   44f68:	113ffd44 	addi	r4,r2,-11
   44f6c:	00c00704 	movi	r3,28
   44f70:	19012116 	blt	r3,r4,453f8 <__divdf3+0x688>
   44f74:	00c00744 	movi	r3,29
   44f78:	147ffe04 	addi	r17,r2,-8
   44f7c:	1907c83a 	sub	r3,r3,r4
   44f80:	8460983a 	sll	r16,r16,r17
   44f84:	98c6d83a 	srl	r3,r19,r3
   44f88:	9c64983a 	sll	r18,r19,r17
   44f8c:	1c20b03a 	or	r16,r3,r16
   44f90:	1080fcc4 	addi	r2,r2,1011
   44f94:	00abc83a 	sub	r21,zero,r2
   44f98:	0027883a 	mov	r19,zero
   44f9c:	0013883a 	mov	r9,zero
   44fa0:	003f9106 	br	44de8 <__alt_data_end+0xfffddce8>
   44fa4:	3446b03a 	or	r3,r6,r17
   44fa8:	18001f1e 	bne	r3,zero,45028 <__divdf3+0x2b8>
   44fac:	0023883a 	mov	r17,zero
   44fb0:	0011883a 	mov	r8,zero
   44fb4:	01c00084 	movi	r7,2
   44fb8:	003f9d06 	br	44e30 <__alt_data_end+0xfffddd30>
   44fbc:	3446b03a 	or	r3,r6,r17
   44fc0:	18001526 	beq	r3,zero,45018 <__divdf3+0x2a8>
   44fc4:	88011b26 	beq	r17,zero,45434 <__divdf3+0x6c4>
   44fc8:	8809883a 	mov	r4,r17
   44fcc:	d9800315 	stw	r6,12(sp)
   44fd0:	da400115 	stw	r9,4(sp)
   44fd4:	0046be40 	call	46be4 <__clzsi2>
   44fd8:	d9800317 	ldw	r6,12(sp)
   44fdc:	da400117 	ldw	r9,4(sp)
   44fe0:	113ffd44 	addi	r4,r2,-11
   44fe4:	00c00704 	movi	r3,28
   44fe8:	19010e16 	blt	r3,r4,45424 <__divdf3+0x6b4>
   44fec:	00c00744 	movi	r3,29
   44ff0:	123ffe04 	addi	r8,r2,-8
   44ff4:	1907c83a 	sub	r3,r3,r4
   44ff8:	8a22983a 	sll	r17,r17,r8
   44ffc:	30c6d83a 	srl	r3,r6,r3
   45000:	3210983a 	sll	r8,r6,r8
   45004:	1c62b03a 	or	r17,r3,r17
   45008:	1080fcc4 	addi	r2,r2,1011
   4500c:	0085c83a 	sub	r2,zero,r2
   45010:	000f883a 	mov	r7,zero
   45014:	003f8606 	br	44e30 <__alt_data_end+0xfffddd30>
   45018:	0023883a 	mov	r17,zero
   4501c:	0011883a 	mov	r8,zero
   45020:	01c00044 	movi	r7,1
   45024:	003f8206 	br	44e30 <__alt_data_end+0xfffddd30>
   45028:	01c000c4 	movi	r7,3
   4502c:	003f8006 	br	44e30 <__alt_data_end+0xfffddd30>
   45030:	04c00104 	movi	r19,4
   45034:	0021883a 	mov	r16,zero
   45038:	0025883a 	mov	r18,zero
   4503c:	02400044 	movi	r9,1
   45040:	003f6906 	br	44de8 <__alt_data_end+0xfffddce8>
   45044:	04c00304 	movi	r19,12
   45048:	024000c4 	movi	r9,3
   4504c:	003f6606 	br	44de8 <__alt_data_end+0xfffddce8>
   45050:	01400434 	movhi	r5,16
   45054:	0007883a 	mov	r3,zero
   45058:	297fffc4 	addi	r5,r5,-1
   4505c:	04bfffc4 	movi	r18,-1
   45060:	0081ffc4 	movi	r2,2047
   45064:	003fa106 	br	44eec <__alt_data_end+0xfffdddec>
   45068:	00c00044 	movi	r3,1
   4506c:	1887c83a 	sub	r3,r3,r2
   45070:	01000e04 	movi	r4,56
   45074:	20c1210e 	bge	r4,r3,454fc <__divdf3+0x78c>
   45078:	98c0004c 	andi	r3,r19,1
   4507c:	0005883a 	mov	r2,zero
   45080:	000b883a 	mov	r5,zero
   45084:	0025883a 	mov	r18,zero
   45088:	003f9806 	br	44eec <__alt_data_end+0xfffdddec>
   4508c:	8c00fd36 	bltu	r17,r16,45484 <__divdf3+0x714>
   45090:	8440fb26 	beq	r16,r17,45480 <__divdf3+0x710>
   45094:	8007883a 	mov	r3,r16
   45098:	ad7fffc4 	addi	r21,r21,-1
   4509c:	0021883a 	mov	r16,zero
   450a0:	4004d63a 	srli	r2,r8,24
   450a4:	8822923a 	slli	r17,r17,8
   450a8:	1809883a 	mov	r4,r3
   450ac:	402c923a 	slli	r22,r8,8
   450b0:	88b8b03a 	or	fp,r17,r2
   450b4:	e028d43a 	srli	r20,fp,16
   450b8:	d8c00015 	stw	r3,0(sp)
   450bc:	e5ffffcc 	andi	r23,fp,65535
   450c0:	a00b883a 	mov	r5,r20
   450c4:	0042f080 	call	42f08 <__udivsi3>
   450c8:	d8c00017 	ldw	r3,0(sp)
   450cc:	a00b883a 	mov	r5,r20
   450d0:	d8800315 	stw	r2,12(sp)
   450d4:	1809883a 	mov	r4,r3
   450d8:	0042f6c0 	call	42f6c <__umodsi3>
   450dc:	d9800317 	ldw	r6,12(sp)
   450e0:	1006943a 	slli	r3,r2,16
   450e4:	9004d43a 	srli	r2,r18,16
   450e8:	b9a3383a 	mul	r17,r23,r6
   450ec:	10c4b03a 	or	r2,r2,r3
   450f0:	1440062e 	bgeu	r2,r17,4510c <__divdf3+0x39c>
   450f4:	1705883a 	add	r2,r2,fp
   450f8:	30ffffc4 	addi	r3,r6,-1
   450fc:	1700ee36 	bltu	r2,fp,454b8 <__divdf3+0x748>
   45100:	1440ed2e 	bgeu	r2,r17,454b8 <__divdf3+0x748>
   45104:	31bfff84 	addi	r6,r6,-2
   45108:	1705883a 	add	r2,r2,fp
   4510c:	1463c83a 	sub	r17,r2,r17
   45110:	a00b883a 	mov	r5,r20
   45114:	8809883a 	mov	r4,r17
   45118:	d9800315 	stw	r6,12(sp)
   4511c:	0042f080 	call	42f08 <__udivsi3>
   45120:	a00b883a 	mov	r5,r20
   45124:	8809883a 	mov	r4,r17
   45128:	d8800215 	stw	r2,8(sp)
   4512c:	0042f6c0 	call	42f6c <__umodsi3>
   45130:	d9c00217 	ldw	r7,8(sp)
   45134:	1004943a 	slli	r2,r2,16
   45138:	94bfffcc 	andi	r18,r18,65535
   4513c:	b9d1383a 	mul	r8,r23,r7
   45140:	90a4b03a 	or	r18,r18,r2
   45144:	d9800317 	ldw	r6,12(sp)
   45148:	9200062e 	bgeu	r18,r8,45164 <__divdf3+0x3f4>
   4514c:	9725883a 	add	r18,r18,fp
   45150:	38bfffc4 	addi	r2,r7,-1
   45154:	9700d636 	bltu	r18,fp,454b0 <__divdf3+0x740>
   45158:	9200d52e 	bgeu	r18,r8,454b0 <__divdf3+0x740>
   4515c:	39ffff84 	addi	r7,r7,-2
   45160:	9725883a 	add	r18,r18,fp
   45164:	3004943a 	slli	r2,r6,16
   45168:	b012d43a 	srli	r9,r22,16
   4516c:	b1bfffcc 	andi	r6,r22,65535
   45170:	11e2b03a 	or	r17,r2,r7
   45174:	8806d43a 	srli	r3,r17,16
   45178:	893fffcc 	andi	r4,r17,65535
   4517c:	218b383a 	mul	r5,r4,r6
   45180:	30c5383a 	mul	r2,r6,r3
   45184:	2249383a 	mul	r4,r4,r9
   45188:	280ed43a 	srli	r7,r5,16
   4518c:	9225c83a 	sub	r18,r18,r8
   45190:	2089883a 	add	r4,r4,r2
   45194:	3909883a 	add	r4,r7,r4
   45198:	1a47383a 	mul	r3,r3,r9
   4519c:	2080022e 	bgeu	r4,r2,451a8 <__divdf3+0x438>
   451a0:	00800074 	movhi	r2,1
   451a4:	1887883a 	add	r3,r3,r2
   451a8:	2004d43a 	srli	r2,r4,16
   451ac:	2008943a 	slli	r4,r4,16
   451b0:	297fffcc 	andi	r5,r5,65535
   451b4:	10c7883a 	add	r3,r2,r3
   451b8:	2149883a 	add	r4,r4,r5
   451bc:	90c0a536 	bltu	r18,r3,45454 <__divdf3+0x6e4>
   451c0:	90c0bf26 	beq	r18,r3,454c0 <__divdf3+0x750>
   451c4:	90c7c83a 	sub	r3,r18,r3
   451c8:	810fc83a 	sub	r7,r16,r4
   451cc:	81e5803a 	cmpltu	r18,r16,r7
   451d0:	1ca5c83a 	sub	r18,r3,r18
   451d4:	e480c126 	beq	fp,r18,454dc <__divdf3+0x76c>
   451d8:	a00b883a 	mov	r5,r20
   451dc:	9009883a 	mov	r4,r18
   451e0:	d9800315 	stw	r6,12(sp)
   451e4:	d9c00215 	stw	r7,8(sp)
   451e8:	da400115 	stw	r9,4(sp)
   451ec:	0042f080 	call	42f08 <__udivsi3>
   451f0:	a00b883a 	mov	r5,r20
   451f4:	9009883a 	mov	r4,r18
   451f8:	d8800015 	stw	r2,0(sp)
   451fc:	0042f6c0 	call	42f6c <__umodsi3>
   45200:	d9c00217 	ldw	r7,8(sp)
   45204:	da000017 	ldw	r8,0(sp)
   45208:	1006943a 	slli	r3,r2,16
   4520c:	3804d43a 	srli	r2,r7,16
   45210:	ba21383a 	mul	r16,r23,r8
   45214:	d9800317 	ldw	r6,12(sp)
   45218:	10c4b03a 	or	r2,r2,r3
   4521c:	da400117 	ldw	r9,4(sp)
   45220:	1400062e 	bgeu	r2,r16,4523c <__divdf3+0x4cc>
   45224:	1705883a 	add	r2,r2,fp
   45228:	40ffffc4 	addi	r3,r8,-1
   4522c:	1700ad36 	bltu	r2,fp,454e4 <__divdf3+0x774>
   45230:	1400ac2e 	bgeu	r2,r16,454e4 <__divdf3+0x774>
   45234:	423fff84 	addi	r8,r8,-2
   45238:	1705883a 	add	r2,r2,fp
   4523c:	1421c83a 	sub	r16,r2,r16
   45240:	a00b883a 	mov	r5,r20
   45244:	8009883a 	mov	r4,r16
   45248:	d9800315 	stw	r6,12(sp)
   4524c:	d9c00215 	stw	r7,8(sp)
   45250:	da000015 	stw	r8,0(sp)
   45254:	da400115 	stw	r9,4(sp)
   45258:	0042f080 	call	42f08 <__udivsi3>
   4525c:	8009883a 	mov	r4,r16
   45260:	a00b883a 	mov	r5,r20
   45264:	1025883a 	mov	r18,r2
   45268:	0042f6c0 	call	42f6c <__umodsi3>
   4526c:	d9c00217 	ldw	r7,8(sp)
   45270:	1004943a 	slli	r2,r2,16
   45274:	bcaf383a 	mul	r23,r23,r18
   45278:	393fffcc 	andi	r4,r7,65535
   4527c:	2088b03a 	or	r4,r4,r2
   45280:	d9800317 	ldw	r6,12(sp)
   45284:	da000017 	ldw	r8,0(sp)
   45288:	da400117 	ldw	r9,4(sp)
   4528c:	25c0062e 	bgeu	r4,r23,452a8 <__divdf3+0x538>
   45290:	2709883a 	add	r4,r4,fp
   45294:	90bfffc4 	addi	r2,r18,-1
   45298:	27009436 	bltu	r4,fp,454ec <__divdf3+0x77c>
   4529c:	25c0932e 	bgeu	r4,r23,454ec <__divdf3+0x77c>
   452a0:	94bfff84 	addi	r18,r18,-2
   452a4:	2709883a 	add	r4,r4,fp
   452a8:	4004943a 	slli	r2,r8,16
   452ac:	25efc83a 	sub	r23,r4,r23
   452b0:	1490b03a 	or	r8,r2,r18
   452b4:	4008d43a 	srli	r4,r8,16
   452b8:	40ffffcc 	andi	r3,r8,65535
   452bc:	30c5383a 	mul	r2,r6,r3
   452c0:	1a47383a 	mul	r3,r3,r9
   452c4:	310d383a 	mul	r6,r6,r4
   452c8:	100ad43a 	srli	r5,r2,16
   452cc:	4913383a 	mul	r9,r9,r4
   452d0:	1987883a 	add	r3,r3,r6
   452d4:	28c7883a 	add	r3,r5,r3
   452d8:	1980022e 	bgeu	r3,r6,452e4 <__divdf3+0x574>
   452dc:	01000074 	movhi	r4,1
   452e0:	4913883a 	add	r9,r9,r4
   452e4:	1808d43a 	srli	r4,r3,16
   452e8:	1806943a 	slli	r3,r3,16
   452ec:	10bfffcc 	andi	r2,r2,65535
   452f0:	2253883a 	add	r9,r4,r9
   452f4:	1887883a 	add	r3,r3,r2
   452f8:	ba403836 	bltu	r23,r9,453dc <__divdf3+0x66c>
   452fc:	ba403626 	beq	r23,r9,453d8 <__divdf3+0x668>
   45300:	42000054 	ori	r8,r8,1
   45304:	a880ffc4 	addi	r2,r21,1023
   45308:	00bf570e 	bge	zero,r2,45068 <__alt_data_end+0xfffddf68>
   4530c:	40c001cc 	andi	r3,r8,7
   45310:	18000726 	beq	r3,zero,45330 <__divdf3+0x5c0>
   45314:	40c003cc 	andi	r3,r8,15
   45318:	01000104 	movi	r4,4
   4531c:	19000426 	beq	r3,r4,45330 <__divdf3+0x5c0>
   45320:	4107883a 	add	r3,r8,r4
   45324:	1a11803a 	cmpltu	r8,r3,r8
   45328:	8a23883a 	add	r17,r17,r8
   4532c:	1811883a 	mov	r8,r3
   45330:	88c0402c 	andhi	r3,r17,256
   45334:	18000426 	beq	r3,zero,45348 <__divdf3+0x5d8>
   45338:	00ffc034 	movhi	r3,65280
   4533c:	18ffffc4 	addi	r3,r3,-1
   45340:	a8810004 	addi	r2,r21,1024
   45344:	88e2703a 	and	r17,r17,r3
   45348:	00c1ff84 	movi	r3,2046
   4534c:	18bee316 	blt	r3,r2,44edc <__alt_data_end+0xfffddddc>
   45350:	8824977a 	slli	r18,r17,29
   45354:	4010d0fa 	srli	r8,r8,3
   45358:	8822927a 	slli	r17,r17,9
   4535c:	1081ffcc 	andi	r2,r2,2047
   45360:	9224b03a 	or	r18,r18,r8
   45364:	880ad33a 	srli	r5,r17,12
   45368:	98c0004c 	andi	r3,r19,1
   4536c:	003edf06 	br	44eec <__alt_data_end+0xfffdddec>
   45370:	8080022c 	andhi	r2,r16,8
   45374:	10001226 	beq	r2,zero,453c0 <__divdf3+0x650>
   45378:	8880022c 	andhi	r2,r17,8
   4537c:	1000101e 	bne	r2,zero,453c0 <__divdf3+0x650>
   45380:	00800434 	movhi	r2,16
   45384:	89400234 	orhi	r5,r17,8
   45388:	10bfffc4 	addi	r2,r2,-1
   4538c:	b007883a 	mov	r3,r22
   45390:	288a703a 	and	r5,r5,r2
   45394:	4025883a 	mov	r18,r8
   45398:	003f3106 	br	45060 <__alt_data_end+0xfffddf60>
   4539c:	008000c4 	movi	r2,3
   453a0:	3880a626 	beq	r7,r2,4563c <__divdf3+0x8cc>
   453a4:	00800044 	movi	r2,1
   453a8:	3880521e 	bne	r7,r2,454f4 <__divdf3+0x784>
   453ac:	b807883a 	mov	r3,r23
   453b0:	0005883a 	mov	r2,zero
   453b4:	000b883a 	mov	r5,zero
   453b8:	0025883a 	mov	r18,zero
   453bc:	003ecb06 	br	44eec <__alt_data_end+0xfffdddec>
   453c0:	00800434 	movhi	r2,16
   453c4:	81400234 	orhi	r5,r16,8
   453c8:	10bfffc4 	addi	r2,r2,-1
   453cc:	a007883a 	mov	r3,r20
   453d0:	288a703a 	and	r5,r5,r2
   453d4:	003f2206 	br	45060 <__alt_data_end+0xfffddf60>
   453d8:	183fca26 	beq	r3,zero,45304 <__alt_data_end+0xfffde204>
   453dc:	e5ef883a 	add	r23,fp,r23
   453e0:	40bfffc4 	addi	r2,r8,-1
   453e4:	bf00392e 	bgeu	r23,fp,454cc <__divdf3+0x75c>
   453e8:	1011883a 	mov	r8,r2
   453ec:	ba7fc41e 	bne	r23,r9,45300 <__alt_data_end+0xfffde200>
   453f0:	b0ffc31e 	bne	r22,r3,45300 <__alt_data_end+0xfffde200>
   453f4:	003fc306 	br	45304 <__alt_data_end+0xfffde204>
   453f8:	143ff604 	addi	r16,r2,-40
   453fc:	9c20983a 	sll	r16,r19,r16
   45400:	0025883a 	mov	r18,zero
   45404:	003ee206 	br	44f90 <__alt_data_end+0xfffdde90>
   45408:	d9800315 	stw	r6,12(sp)
   4540c:	d9c00215 	stw	r7,8(sp)
   45410:	0046be40 	call	46be4 <__clzsi2>
   45414:	10800804 	addi	r2,r2,32
   45418:	d9c00217 	ldw	r7,8(sp)
   4541c:	d9800317 	ldw	r6,12(sp)
   45420:	003ed106 	br	44f68 <__alt_data_end+0xfffdde68>
   45424:	147ff604 	addi	r17,r2,-40
   45428:	3462983a 	sll	r17,r6,r17
   4542c:	0011883a 	mov	r8,zero
   45430:	003ef506 	br	45008 <__alt_data_end+0xfffddf08>
   45434:	3009883a 	mov	r4,r6
   45438:	d9800315 	stw	r6,12(sp)
   4543c:	da400115 	stw	r9,4(sp)
   45440:	0046be40 	call	46be4 <__clzsi2>
   45444:	10800804 	addi	r2,r2,32
   45448:	da400117 	ldw	r9,4(sp)
   4544c:	d9800317 	ldw	r6,12(sp)
   45450:	003ee306 	br	44fe0 <__alt_data_end+0xfffddee0>
   45454:	85a1883a 	add	r16,r16,r22
   45458:	8585803a 	cmpltu	r2,r16,r22
   4545c:	1705883a 	add	r2,r2,fp
   45460:	14a5883a 	add	r18,r2,r18
   45464:	88bfffc4 	addi	r2,r17,-1
   45468:	e4800c2e 	bgeu	fp,r18,4549c <__divdf3+0x72c>
   4546c:	90c03e36 	bltu	r18,r3,45568 <__divdf3+0x7f8>
   45470:	1c806926 	beq	r3,r18,45618 <__divdf3+0x8a8>
   45474:	90c7c83a 	sub	r3,r18,r3
   45478:	1023883a 	mov	r17,r2
   4547c:	003f5206 	br	451c8 <__alt_data_end+0xfffde0c8>
   45480:	923f0436 	bltu	r18,r8,45094 <__alt_data_end+0xfffddf94>
   45484:	800897fa 	slli	r4,r16,31
   45488:	9004d07a 	srli	r2,r18,1
   4548c:	8006d07a 	srli	r3,r16,1
   45490:	902097fa 	slli	r16,r18,31
   45494:	20a4b03a 	or	r18,r4,r2
   45498:	003f0106 	br	450a0 <__alt_data_end+0xfffddfa0>
   4549c:	e4bff51e 	bne	fp,r18,45474 <__alt_data_end+0xfffde374>
   454a0:	85bff22e 	bgeu	r16,r22,4546c <__alt_data_end+0xfffde36c>
   454a4:	e0c7c83a 	sub	r3,fp,r3
   454a8:	1023883a 	mov	r17,r2
   454ac:	003f4606 	br	451c8 <__alt_data_end+0xfffde0c8>
   454b0:	100f883a 	mov	r7,r2
   454b4:	003f2b06 	br	45164 <__alt_data_end+0xfffde064>
   454b8:	180d883a 	mov	r6,r3
   454bc:	003f1306 	br	4510c <__alt_data_end+0xfffde00c>
   454c0:	813fe436 	bltu	r16,r4,45454 <__alt_data_end+0xfffde354>
   454c4:	0007883a 	mov	r3,zero
   454c8:	003f3f06 	br	451c8 <__alt_data_end+0xfffde0c8>
   454cc:	ba402c36 	bltu	r23,r9,45580 <__divdf3+0x810>
   454d0:	4dc05426 	beq	r9,r23,45624 <__divdf3+0x8b4>
   454d4:	1011883a 	mov	r8,r2
   454d8:	003f8906 	br	45300 <__alt_data_end+0xfffde200>
   454dc:	023fffc4 	movi	r8,-1
   454e0:	003f8806 	br	45304 <__alt_data_end+0xfffde204>
   454e4:	1811883a 	mov	r8,r3
   454e8:	003f5406 	br	4523c <__alt_data_end+0xfffde13c>
   454ec:	1025883a 	mov	r18,r2
   454f0:	003f6d06 	br	452a8 <__alt_data_end+0xfffde1a8>
   454f4:	b827883a 	mov	r19,r23
   454f8:	003f8206 	br	45304 <__alt_data_end+0xfffde204>
   454fc:	010007c4 	movi	r4,31
   45500:	20c02616 	blt	r4,r3,4559c <__divdf3+0x82c>
   45504:	00800804 	movi	r2,32
   45508:	10c5c83a 	sub	r2,r2,r3
   4550c:	888a983a 	sll	r5,r17,r2
   45510:	40c8d83a 	srl	r4,r8,r3
   45514:	4084983a 	sll	r2,r8,r2
   45518:	88e2d83a 	srl	r17,r17,r3
   4551c:	2906b03a 	or	r3,r5,r4
   45520:	1004c03a 	cmpne	r2,r2,zero
   45524:	1886b03a 	or	r3,r3,r2
   45528:	188001cc 	andi	r2,r3,7
   4552c:	10000726 	beq	r2,zero,4554c <__divdf3+0x7dc>
   45530:	188003cc 	andi	r2,r3,15
   45534:	01000104 	movi	r4,4
   45538:	11000426 	beq	r2,r4,4554c <__divdf3+0x7dc>
   4553c:	1805883a 	mov	r2,r3
   45540:	10c00104 	addi	r3,r2,4
   45544:	1885803a 	cmpltu	r2,r3,r2
   45548:	88a3883a 	add	r17,r17,r2
   4554c:	8880202c 	andhi	r2,r17,128
   45550:	10002726 	beq	r2,zero,455f0 <__divdf3+0x880>
   45554:	98c0004c 	andi	r3,r19,1
   45558:	00800044 	movi	r2,1
   4555c:	000b883a 	mov	r5,zero
   45560:	0025883a 	mov	r18,zero
   45564:	003e6106 	br	44eec <__alt_data_end+0xfffdddec>
   45568:	85a1883a 	add	r16,r16,r22
   4556c:	8585803a 	cmpltu	r2,r16,r22
   45570:	1705883a 	add	r2,r2,fp
   45574:	14a5883a 	add	r18,r2,r18
   45578:	8c7fff84 	addi	r17,r17,-2
   4557c:	003f1106 	br	451c4 <__alt_data_end+0xfffde0c4>
   45580:	b589883a 	add	r4,r22,r22
   45584:	25ad803a 	cmpltu	r22,r4,r22
   45588:	b739883a 	add	fp,r22,fp
   4558c:	40bfff84 	addi	r2,r8,-2
   45590:	bf2f883a 	add	r23,r23,fp
   45594:	202d883a 	mov	r22,r4
   45598:	003f9306 	br	453e8 <__alt_data_end+0xfffde2e8>
   4559c:	013ff844 	movi	r4,-31
   455a0:	2085c83a 	sub	r2,r4,r2
   455a4:	8888d83a 	srl	r4,r17,r2
   455a8:	00800804 	movi	r2,32
   455ac:	18802126 	beq	r3,r2,45634 <__divdf3+0x8c4>
   455b0:	00801004 	movi	r2,64
   455b4:	10c5c83a 	sub	r2,r2,r3
   455b8:	8884983a 	sll	r2,r17,r2
   455bc:	1204b03a 	or	r2,r2,r8
   455c0:	1004c03a 	cmpne	r2,r2,zero
   455c4:	2084b03a 	or	r2,r4,r2
   455c8:	144001cc 	andi	r17,r2,7
   455cc:	88000d1e 	bne	r17,zero,45604 <__divdf3+0x894>
   455d0:	000b883a 	mov	r5,zero
   455d4:	1024d0fa 	srli	r18,r2,3
   455d8:	98c0004c 	andi	r3,r19,1
   455dc:	0005883a 	mov	r2,zero
   455e0:	9464b03a 	or	r18,r18,r17
   455e4:	003e4106 	br	44eec <__alt_data_end+0xfffdddec>
   455e8:	1007883a 	mov	r3,r2
   455ec:	0023883a 	mov	r17,zero
   455f0:	880a927a 	slli	r5,r17,9
   455f4:	1805883a 	mov	r2,r3
   455f8:	8822977a 	slli	r17,r17,29
   455fc:	280ad33a 	srli	r5,r5,12
   45600:	003ff406 	br	455d4 <__alt_data_end+0xfffde4d4>
   45604:	10c003cc 	andi	r3,r2,15
   45608:	01000104 	movi	r4,4
   4560c:	193ff626 	beq	r3,r4,455e8 <__alt_data_end+0xfffde4e8>
   45610:	0023883a 	mov	r17,zero
   45614:	003fca06 	br	45540 <__alt_data_end+0xfffde440>
   45618:	813fd336 	bltu	r16,r4,45568 <__alt_data_end+0xfffde468>
   4561c:	1023883a 	mov	r17,r2
   45620:	003fa806 	br	454c4 <__alt_data_end+0xfffde3c4>
   45624:	b0ffd636 	bltu	r22,r3,45580 <__alt_data_end+0xfffde480>
   45628:	1011883a 	mov	r8,r2
   4562c:	b0ff341e 	bne	r22,r3,45300 <__alt_data_end+0xfffde200>
   45630:	003f3406 	br	45304 <__alt_data_end+0xfffde204>
   45634:	0005883a 	mov	r2,zero
   45638:	003fe006 	br	455bc <__alt_data_end+0xfffde4bc>
   4563c:	00800434 	movhi	r2,16
   45640:	89400234 	orhi	r5,r17,8
   45644:	10bfffc4 	addi	r2,r2,-1
   45648:	b807883a 	mov	r3,r23
   4564c:	288a703a 	and	r5,r5,r2
   45650:	4025883a 	mov	r18,r8
   45654:	003e8206 	br	45060 <__alt_data_end+0xfffddf60>

00045658 <__eqdf2>:
   45658:	2804d53a 	srli	r2,r5,20
   4565c:	3806d53a 	srli	r3,r7,20
   45660:	02000434 	movhi	r8,16
   45664:	423fffc4 	addi	r8,r8,-1
   45668:	1081ffcc 	andi	r2,r2,2047
   4566c:	0281ffc4 	movi	r10,2047
   45670:	2a12703a 	and	r9,r5,r8
   45674:	18c1ffcc 	andi	r3,r3,2047
   45678:	3a10703a 	and	r8,r7,r8
   4567c:	280ad7fa 	srli	r5,r5,31
   45680:	380ed7fa 	srli	r7,r7,31
   45684:	12801026 	beq	r2,r10,456c8 <__eqdf2+0x70>
   45688:	0281ffc4 	movi	r10,2047
   4568c:	1a800a26 	beq	r3,r10,456b8 <__eqdf2+0x60>
   45690:	10c00226 	beq	r2,r3,4569c <__eqdf2+0x44>
   45694:	00800044 	movi	r2,1
   45698:	f800283a 	ret
   4569c:	4a3ffd1e 	bne	r9,r8,45694 <__alt_data_end+0xfffde594>
   456a0:	21bffc1e 	bne	r4,r6,45694 <__alt_data_end+0xfffde594>
   456a4:	29c00c26 	beq	r5,r7,456d8 <__eqdf2+0x80>
   456a8:	103ffa1e 	bne	r2,zero,45694 <__alt_data_end+0xfffde594>
   456ac:	2244b03a 	or	r2,r4,r9
   456b0:	1004c03a 	cmpne	r2,r2,zero
   456b4:	f800283a 	ret
   456b8:	3214b03a 	or	r10,r6,r8
   456bc:	503ff426 	beq	r10,zero,45690 <__alt_data_end+0xfffde590>
   456c0:	00800044 	movi	r2,1
   456c4:	f800283a 	ret
   456c8:	2254b03a 	or	r10,r4,r9
   456cc:	503fee26 	beq	r10,zero,45688 <__alt_data_end+0xfffde588>
   456d0:	00800044 	movi	r2,1
   456d4:	f800283a 	ret
   456d8:	0005883a 	mov	r2,zero
   456dc:	f800283a 	ret

000456e0 <__gedf2>:
   456e0:	2804d53a 	srli	r2,r5,20
   456e4:	3806d53a 	srli	r3,r7,20
   456e8:	02000434 	movhi	r8,16
   456ec:	423fffc4 	addi	r8,r8,-1
   456f0:	1081ffcc 	andi	r2,r2,2047
   456f4:	0241ffc4 	movi	r9,2047
   456f8:	2a14703a 	and	r10,r5,r8
   456fc:	18c1ffcc 	andi	r3,r3,2047
   45700:	3a10703a 	and	r8,r7,r8
   45704:	280ad7fa 	srli	r5,r5,31
   45708:	380ed7fa 	srli	r7,r7,31
   4570c:	12401d26 	beq	r2,r9,45784 <__gedf2+0xa4>
   45710:	0241ffc4 	movi	r9,2047
   45714:	1a401226 	beq	r3,r9,45760 <__gedf2+0x80>
   45718:	1000081e 	bne	r2,zero,4573c <__gedf2+0x5c>
   4571c:	2296b03a 	or	r11,r4,r10
   45720:	5813003a 	cmpeq	r9,r11,zero
   45724:	1800091e 	bne	r3,zero,4574c <__gedf2+0x6c>
   45728:	3218b03a 	or	r12,r6,r8
   4572c:	6000071e 	bne	r12,zero,4574c <__gedf2+0x6c>
   45730:	0005883a 	mov	r2,zero
   45734:	5800101e 	bne	r11,zero,45778 <__gedf2+0x98>
   45738:	f800283a 	ret
   4573c:	18000c1e 	bne	r3,zero,45770 <__gedf2+0x90>
   45740:	3212b03a 	or	r9,r6,r8
   45744:	48000c26 	beq	r9,zero,45778 <__gedf2+0x98>
   45748:	0013883a 	mov	r9,zero
   4574c:	39c03fcc 	andi	r7,r7,255
   45750:	48000826 	beq	r9,zero,45774 <__gedf2+0x94>
   45754:	38000926 	beq	r7,zero,4577c <__gedf2+0x9c>
   45758:	00800044 	movi	r2,1
   4575c:	f800283a 	ret
   45760:	3212b03a 	or	r9,r6,r8
   45764:	483fec26 	beq	r9,zero,45718 <__alt_data_end+0xfffde618>
   45768:	00bfff84 	movi	r2,-2
   4576c:	f800283a 	ret
   45770:	39c03fcc 	andi	r7,r7,255
   45774:	29c00626 	beq	r5,r7,45790 <__gedf2+0xb0>
   45778:	283ff726 	beq	r5,zero,45758 <__alt_data_end+0xfffde658>
   4577c:	00bfffc4 	movi	r2,-1
   45780:	f800283a 	ret
   45784:	2292b03a 	or	r9,r4,r10
   45788:	483fe126 	beq	r9,zero,45710 <__alt_data_end+0xfffde610>
   4578c:	003ff606 	br	45768 <__alt_data_end+0xfffde668>
   45790:	18bff916 	blt	r3,r2,45778 <__alt_data_end+0xfffde678>
   45794:	10c00316 	blt	r2,r3,457a4 <__gedf2+0xc4>
   45798:	42bff736 	bltu	r8,r10,45778 <__alt_data_end+0xfffde678>
   4579c:	52000326 	beq	r10,r8,457ac <__gedf2+0xcc>
   457a0:	5200042e 	bgeu	r10,r8,457b4 <__gedf2+0xd4>
   457a4:	283fec1e 	bne	r5,zero,45758 <__alt_data_end+0xfffde658>
   457a8:	003ff406 	br	4577c <__alt_data_end+0xfffde67c>
   457ac:	313ff236 	bltu	r6,r4,45778 <__alt_data_end+0xfffde678>
   457b0:	21bffc36 	bltu	r4,r6,457a4 <__alt_data_end+0xfffde6a4>
   457b4:	0005883a 	mov	r2,zero
   457b8:	f800283a 	ret

000457bc <__muldf3>:
   457bc:	defff304 	addi	sp,sp,-52
   457c0:	2804d53a 	srli	r2,r5,20
   457c4:	dd800915 	stw	r22,36(sp)
   457c8:	282cd7fa 	srli	r22,r5,31
   457cc:	dc000315 	stw	r16,12(sp)
   457d0:	04000434 	movhi	r16,16
   457d4:	dd400815 	stw	r21,32(sp)
   457d8:	dc800515 	stw	r18,20(sp)
   457dc:	843fffc4 	addi	r16,r16,-1
   457e0:	dfc00c15 	stw	ra,48(sp)
   457e4:	df000b15 	stw	fp,44(sp)
   457e8:	ddc00a15 	stw	r23,40(sp)
   457ec:	dd000715 	stw	r20,28(sp)
   457f0:	dcc00615 	stw	r19,24(sp)
   457f4:	dc400415 	stw	r17,16(sp)
   457f8:	1481ffcc 	andi	r18,r2,2047
   457fc:	2c20703a 	and	r16,r5,r16
   45800:	b02b883a 	mov	r21,r22
   45804:	b2403fcc 	andi	r9,r22,255
   45808:	90006026 	beq	r18,zero,4598c <__muldf3+0x1d0>
   4580c:	0081ffc4 	movi	r2,2047
   45810:	2029883a 	mov	r20,r4
   45814:	90803626 	beq	r18,r2,458f0 <__muldf3+0x134>
   45818:	80800434 	orhi	r2,r16,16
   4581c:	100490fa 	slli	r2,r2,3
   45820:	2020d77a 	srli	r16,r4,29
   45824:	202890fa 	slli	r20,r4,3
   45828:	94bf0044 	addi	r18,r18,-1023
   4582c:	80a0b03a 	or	r16,r16,r2
   45830:	0027883a 	mov	r19,zero
   45834:	0039883a 	mov	fp,zero
   45838:	3804d53a 	srli	r2,r7,20
   4583c:	382ed7fa 	srli	r23,r7,31
   45840:	04400434 	movhi	r17,16
   45844:	8c7fffc4 	addi	r17,r17,-1
   45848:	1081ffcc 	andi	r2,r2,2047
   4584c:	3011883a 	mov	r8,r6
   45850:	3c62703a 	and	r17,r7,r17
   45854:	ba803fcc 	andi	r10,r23,255
   45858:	10006d26 	beq	r2,zero,45a10 <__muldf3+0x254>
   4585c:	00c1ffc4 	movi	r3,2047
   45860:	10c06526 	beq	r2,r3,459f8 <__muldf3+0x23c>
   45864:	88c00434 	orhi	r3,r17,16
   45868:	180690fa 	slli	r3,r3,3
   4586c:	3022d77a 	srli	r17,r6,29
   45870:	301090fa 	slli	r8,r6,3
   45874:	10bf0044 	addi	r2,r2,-1023
   45878:	88e2b03a 	or	r17,r17,r3
   4587c:	000b883a 	mov	r5,zero
   45880:	9085883a 	add	r2,r18,r2
   45884:	2cc8b03a 	or	r4,r5,r19
   45888:	00c003c4 	movi	r3,15
   4588c:	bdacf03a 	xor	r22,r23,r22
   45890:	12c00044 	addi	r11,r2,1
   45894:	19009936 	bltu	r3,r4,45afc <__muldf3+0x340>
   45898:	200890ba 	slli	r4,r4,2
   4589c:	00c00134 	movhi	r3,4
   458a0:	18d62c04 	addi	r3,r3,22704
   458a4:	20c9883a 	add	r4,r4,r3
   458a8:	20c00017 	ldw	r3,0(r4)
   458ac:	1800683a 	jmp	r3
   458b0:	00045afc 	xorhi	zero,zero,4459
   458b4:	00045910 	cmplti	zero,zero,4452
   458b8:	00045910 	cmplti	zero,zero,4452
   458bc:	0004590c 	andi	zero,zero,4452
   458c0:	00045ad8 	cmpnei	zero,zero,4459
   458c4:	00045ad8 	cmpnei	zero,zero,4459
   458c8:	00045ac0 	call	45ac <__alt_mem_onchip_memory2-0x3ba54>
   458cc:	0004590c 	andi	zero,zero,4452
   458d0:	00045ad8 	cmpnei	zero,zero,4459
   458d4:	00045ac0 	call	45ac <__alt_mem_onchip_memory2-0x3ba54>
   458d8:	00045ad8 	cmpnei	zero,zero,4459
   458dc:	0004590c 	andi	zero,zero,4452
   458e0:	00045ae8 	cmpgeui	zero,zero,4459
   458e4:	00045ae8 	cmpgeui	zero,zero,4459
   458e8:	00045ae8 	cmpgeui	zero,zero,4459
   458ec:	00045d04 	movi	zero,4468
   458f0:	2404b03a 	or	r2,r4,r16
   458f4:	10006f1e 	bne	r2,zero,45ab4 <__muldf3+0x2f8>
   458f8:	04c00204 	movi	r19,8
   458fc:	0021883a 	mov	r16,zero
   45900:	0029883a 	mov	r20,zero
   45904:	07000084 	movi	fp,2
   45908:	003fcb06 	br	45838 <__alt_data_end+0xfffde738>
   4590c:	502d883a 	mov	r22,r10
   45910:	00800084 	movi	r2,2
   45914:	28805726 	beq	r5,r2,45a74 <__muldf3+0x2b8>
   45918:	008000c4 	movi	r2,3
   4591c:	28816626 	beq	r5,r2,45eb8 <__muldf3+0x6fc>
   45920:	00800044 	movi	r2,1
   45924:	2881411e 	bne	r5,r2,45e2c <__muldf3+0x670>
   45928:	b02b883a 	mov	r21,r22
   4592c:	0005883a 	mov	r2,zero
   45930:	000b883a 	mov	r5,zero
   45934:	0029883a 	mov	r20,zero
   45938:	1004953a 	slli	r2,r2,20
   4593c:	a8c03fcc 	andi	r3,r21,255
   45940:	04400434 	movhi	r17,16
   45944:	8c7fffc4 	addi	r17,r17,-1
   45948:	180697fa 	slli	r3,r3,31
   4594c:	2c4a703a 	and	r5,r5,r17
   45950:	288ab03a 	or	r5,r5,r2
   45954:	28c6b03a 	or	r3,r5,r3
   45958:	a005883a 	mov	r2,r20
   4595c:	dfc00c17 	ldw	ra,48(sp)
   45960:	df000b17 	ldw	fp,44(sp)
   45964:	ddc00a17 	ldw	r23,40(sp)
   45968:	dd800917 	ldw	r22,36(sp)
   4596c:	dd400817 	ldw	r21,32(sp)
   45970:	dd000717 	ldw	r20,28(sp)
   45974:	dcc00617 	ldw	r19,24(sp)
   45978:	dc800517 	ldw	r18,20(sp)
   4597c:	dc400417 	ldw	r17,16(sp)
   45980:	dc000317 	ldw	r16,12(sp)
   45984:	dec00d04 	addi	sp,sp,52
   45988:	f800283a 	ret
   4598c:	2404b03a 	or	r2,r4,r16
   45990:	2027883a 	mov	r19,r4
   45994:	10004226 	beq	r2,zero,45aa0 <__muldf3+0x2e4>
   45998:	8000fc26 	beq	r16,zero,45d8c <__muldf3+0x5d0>
   4599c:	8009883a 	mov	r4,r16
   459a0:	d9800215 	stw	r6,8(sp)
   459a4:	d9c00015 	stw	r7,0(sp)
   459a8:	da400115 	stw	r9,4(sp)
   459ac:	0046be40 	call	46be4 <__clzsi2>
   459b0:	d9800217 	ldw	r6,8(sp)
   459b4:	d9c00017 	ldw	r7,0(sp)
   459b8:	da400117 	ldw	r9,4(sp)
   459bc:	113ffd44 	addi	r4,r2,-11
   459c0:	00c00704 	movi	r3,28
   459c4:	1900ed16 	blt	r3,r4,45d7c <__muldf3+0x5c0>
   459c8:	00c00744 	movi	r3,29
   459cc:	147ffe04 	addi	r17,r2,-8
   459d0:	1907c83a 	sub	r3,r3,r4
   459d4:	8460983a 	sll	r16,r16,r17
   459d8:	98c6d83a 	srl	r3,r19,r3
   459dc:	9c68983a 	sll	r20,r19,r17
   459e0:	1c20b03a 	or	r16,r3,r16
   459e4:	1080fcc4 	addi	r2,r2,1011
   459e8:	00a5c83a 	sub	r18,zero,r2
   459ec:	0027883a 	mov	r19,zero
   459f0:	0039883a 	mov	fp,zero
   459f4:	003f9006 	br	45838 <__alt_data_end+0xfffde738>
   459f8:	3446b03a 	or	r3,r6,r17
   459fc:	1800261e 	bne	r3,zero,45a98 <__muldf3+0x2dc>
   45a00:	0023883a 	mov	r17,zero
   45a04:	0011883a 	mov	r8,zero
   45a08:	01400084 	movi	r5,2
   45a0c:	003f9c06 	br	45880 <__alt_data_end+0xfffde780>
   45a10:	3446b03a 	or	r3,r6,r17
   45a14:	18001c26 	beq	r3,zero,45a88 <__muldf3+0x2cc>
   45a18:	8800ce26 	beq	r17,zero,45d54 <__muldf3+0x598>
   45a1c:	8809883a 	mov	r4,r17
   45a20:	d9800215 	stw	r6,8(sp)
   45a24:	da400115 	stw	r9,4(sp)
   45a28:	da800015 	stw	r10,0(sp)
   45a2c:	0046be40 	call	46be4 <__clzsi2>
   45a30:	d9800217 	ldw	r6,8(sp)
   45a34:	da400117 	ldw	r9,4(sp)
   45a38:	da800017 	ldw	r10,0(sp)
   45a3c:	113ffd44 	addi	r4,r2,-11
   45a40:	00c00704 	movi	r3,28
   45a44:	1900bf16 	blt	r3,r4,45d44 <__muldf3+0x588>
   45a48:	00c00744 	movi	r3,29
   45a4c:	123ffe04 	addi	r8,r2,-8
   45a50:	1907c83a 	sub	r3,r3,r4
   45a54:	8a22983a 	sll	r17,r17,r8
   45a58:	30c6d83a 	srl	r3,r6,r3
   45a5c:	3210983a 	sll	r8,r6,r8
   45a60:	1c62b03a 	or	r17,r3,r17
   45a64:	1080fcc4 	addi	r2,r2,1011
   45a68:	0085c83a 	sub	r2,zero,r2
   45a6c:	000b883a 	mov	r5,zero
   45a70:	003f8306 	br	45880 <__alt_data_end+0xfffde780>
   45a74:	b02b883a 	mov	r21,r22
   45a78:	0081ffc4 	movi	r2,2047
   45a7c:	000b883a 	mov	r5,zero
   45a80:	0029883a 	mov	r20,zero
   45a84:	003fac06 	br	45938 <__alt_data_end+0xfffde838>
   45a88:	0023883a 	mov	r17,zero
   45a8c:	0011883a 	mov	r8,zero
   45a90:	01400044 	movi	r5,1
   45a94:	003f7a06 	br	45880 <__alt_data_end+0xfffde780>
   45a98:	014000c4 	movi	r5,3
   45a9c:	003f7806 	br	45880 <__alt_data_end+0xfffde780>
   45aa0:	04c00104 	movi	r19,4
   45aa4:	0021883a 	mov	r16,zero
   45aa8:	0029883a 	mov	r20,zero
   45aac:	07000044 	movi	fp,1
   45ab0:	003f6106 	br	45838 <__alt_data_end+0xfffde738>
   45ab4:	04c00304 	movi	r19,12
   45ab8:	070000c4 	movi	fp,3
   45abc:	003f5e06 	br	45838 <__alt_data_end+0xfffde738>
   45ac0:	01400434 	movhi	r5,16
   45ac4:	002b883a 	mov	r21,zero
   45ac8:	297fffc4 	addi	r5,r5,-1
   45acc:	053fffc4 	movi	r20,-1
   45ad0:	0081ffc4 	movi	r2,2047
   45ad4:	003f9806 	br	45938 <__alt_data_end+0xfffde838>
   45ad8:	8023883a 	mov	r17,r16
   45adc:	a011883a 	mov	r8,r20
   45ae0:	e00b883a 	mov	r5,fp
   45ae4:	003f8a06 	br	45910 <__alt_data_end+0xfffde810>
   45ae8:	8023883a 	mov	r17,r16
   45aec:	a011883a 	mov	r8,r20
   45af0:	482d883a 	mov	r22,r9
   45af4:	e00b883a 	mov	r5,fp
   45af8:	003f8506 	br	45910 <__alt_data_end+0xfffde810>
   45afc:	a00ad43a 	srli	r5,r20,16
   45b00:	401ad43a 	srli	r13,r8,16
   45b04:	a53fffcc 	andi	r20,r20,65535
   45b08:	423fffcc 	andi	r8,r8,65535
   45b0c:	4519383a 	mul	r12,r8,r20
   45b10:	4147383a 	mul	r3,r8,r5
   45b14:	6d09383a 	mul	r4,r13,r20
   45b18:	600cd43a 	srli	r6,r12,16
   45b1c:	2b5d383a 	mul	r14,r5,r13
   45b20:	20c9883a 	add	r4,r4,r3
   45b24:	310d883a 	add	r6,r6,r4
   45b28:	30c0022e 	bgeu	r6,r3,45b34 <__muldf3+0x378>
   45b2c:	00c00074 	movhi	r3,1
   45b30:	70dd883a 	add	r14,r14,r3
   45b34:	8826d43a 	srli	r19,r17,16
   45b38:	8bffffcc 	andi	r15,r17,65535
   45b3c:	7d23383a 	mul	r17,r15,r20
   45b40:	7949383a 	mul	r4,r15,r5
   45b44:	9d29383a 	mul	r20,r19,r20
   45b48:	8814d43a 	srli	r10,r17,16
   45b4c:	3012943a 	slli	r9,r6,16
   45b50:	a129883a 	add	r20,r20,r4
   45b54:	633fffcc 	andi	r12,r12,65535
   45b58:	5515883a 	add	r10,r10,r20
   45b5c:	3006d43a 	srli	r3,r6,16
   45b60:	4b13883a 	add	r9,r9,r12
   45b64:	2ccb383a 	mul	r5,r5,r19
   45b68:	5100022e 	bgeu	r10,r4,45b74 <__muldf3+0x3b8>
   45b6c:	01000074 	movhi	r4,1
   45b70:	290b883a 	add	r5,r5,r4
   45b74:	802ad43a 	srli	r21,r16,16
   45b78:	843fffcc 	andi	r16,r16,65535
   45b7c:	440d383a 	mul	r6,r8,r16
   45b80:	4565383a 	mul	r18,r8,r21
   45b84:	8349383a 	mul	r4,r16,r13
   45b88:	500e943a 	slli	r7,r10,16
   45b8c:	3010d43a 	srli	r8,r6,16
   45b90:	5028d43a 	srli	r20,r10,16
   45b94:	2489883a 	add	r4,r4,r18
   45b98:	8abfffcc 	andi	r10,r17,65535
   45b9c:	3a95883a 	add	r10,r7,r10
   45ba0:	4119883a 	add	r12,r8,r4
   45ba4:	a169883a 	add	r20,r20,r5
   45ba8:	1a87883a 	add	r3,r3,r10
   45bac:	6d5b383a 	mul	r13,r13,r21
   45bb0:	6480022e 	bgeu	r12,r18,45bbc <__muldf3+0x400>
   45bb4:	01000074 	movhi	r4,1
   45bb8:	691b883a 	add	r13,r13,r4
   45bbc:	7c25383a 	mul	r18,r15,r16
   45bc0:	7d4b383a 	mul	r5,r15,r21
   45bc4:	84cf383a 	mul	r7,r16,r19
   45bc8:	901ed43a 	srli	r15,r18,16
   45bcc:	6008d43a 	srli	r4,r12,16
   45bd0:	6010943a 	slli	r8,r12,16
   45bd4:	394f883a 	add	r7,r7,r5
   45bd8:	333fffcc 	andi	r12,r6,65535
   45bdc:	79df883a 	add	r15,r15,r7
   45be0:	235b883a 	add	r13,r4,r13
   45be4:	9d63383a 	mul	r17,r19,r21
   45be8:	4309883a 	add	r4,r8,r12
   45bec:	7940022e 	bgeu	r15,r5,45bf8 <__muldf3+0x43c>
   45bf0:	01400074 	movhi	r5,1
   45bf4:	8963883a 	add	r17,r17,r5
   45bf8:	780a943a 	slli	r5,r15,16
   45bfc:	91bfffcc 	andi	r6,r18,65535
   45c00:	70c7883a 	add	r3,r14,r3
   45c04:	298d883a 	add	r6,r5,r6
   45c08:	1a8f803a 	cmpltu	r7,r3,r10
   45c0c:	350b883a 	add	r5,r6,r20
   45c10:	20c7883a 	add	r3,r4,r3
   45c14:	3955883a 	add	r10,r7,r5
   45c18:	1909803a 	cmpltu	r4,r3,r4
   45c1c:	6a91883a 	add	r8,r13,r10
   45c20:	780cd43a 	srli	r6,r15,16
   45c24:	2219883a 	add	r12,r4,r8
   45c28:	2d0b803a 	cmpltu	r5,r5,r20
   45c2c:	51cf803a 	cmpltu	r7,r10,r7
   45c30:	29ceb03a 	or	r7,r5,r7
   45c34:	4351803a 	cmpltu	r8,r8,r13
   45c38:	610b803a 	cmpltu	r5,r12,r4
   45c3c:	4148b03a 	or	r4,r8,r5
   45c40:	398f883a 	add	r7,r7,r6
   45c44:	3909883a 	add	r4,r7,r4
   45c48:	1810927a 	slli	r8,r3,9
   45c4c:	2449883a 	add	r4,r4,r17
   45c50:	2008927a 	slli	r4,r4,9
   45c54:	6022d5fa 	srli	r17,r12,23
   45c58:	1806d5fa 	srli	r3,r3,23
   45c5c:	4252b03a 	or	r9,r8,r9
   45c60:	600a927a 	slli	r5,r12,9
   45c64:	4810c03a 	cmpne	r8,r9,zero
   45c68:	2462b03a 	or	r17,r4,r17
   45c6c:	40c6b03a 	or	r3,r8,r3
   45c70:	8900402c 	andhi	r4,r17,256
   45c74:	1950b03a 	or	r8,r3,r5
   45c78:	20000726 	beq	r4,zero,45c98 <__muldf3+0x4dc>
   45c7c:	4006d07a 	srli	r3,r8,1
   45c80:	880497fa 	slli	r2,r17,31
   45c84:	4200004c 	andi	r8,r8,1
   45c88:	8822d07a 	srli	r17,r17,1
   45c8c:	1a10b03a 	or	r8,r3,r8
   45c90:	1210b03a 	or	r8,r2,r8
   45c94:	5805883a 	mov	r2,r11
   45c98:	1140ffc4 	addi	r5,r2,1023
   45c9c:	0140440e 	bge	zero,r5,45db0 <__muldf3+0x5f4>
   45ca0:	40c001cc 	andi	r3,r8,7
   45ca4:	18000726 	beq	r3,zero,45cc4 <__muldf3+0x508>
   45ca8:	40c003cc 	andi	r3,r8,15
   45cac:	01000104 	movi	r4,4
   45cb0:	19000426 	beq	r3,r4,45cc4 <__muldf3+0x508>
   45cb4:	4107883a 	add	r3,r8,r4
   45cb8:	1a11803a 	cmpltu	r8,r3,r8
   45cbc:	8a23883a 	add	r17,r17,r8
   45cc0:	1811883a 	mov	r8,r3
   45cc4:	88c0402c 	andhi	r3,r17,256
   45cc8:	18000426 	beq	r3,zero,45cdc <__muldf3+0x520>
   45ccc:	11410004 	addi	r5,r2,1024
   45cd0:	00bfc034 	movhi	r2,65280
   45cd4:	10bfffc4 	addi	r2,r2,-1
   45cd8:	88a2703a 	and	r17,r17,r2
   45cdc:	0081ff84 	movi	r2,2046
   45ce0:	117f6416 	blt	r2,r5,45a74 <__alt_data_end+0xfffde974>
   45ce4:	8828977a 	slli	r20,r17,29
   45ce8:	4010d0fa 	srli	r8,r8,3
   45cec:	8822927a 	slli	r17,r17,9
   45cf0:	2881ffcc 	andi	r2,r5,2047
   45cf4:	a228b03a 	or	r20,r20,r8
   45cf8:	880ad33a 	srli	r5,r17,12
   45cfc:	b02b883a 	mov	r21,r22
   45d00:	003f0d06 	br	45938 <__alt_data_end+0xfffde838>
   45d04:	8080022c 	andhi	r2,r16,8
   45d08:	10000926 	beq	r2,zero,45d30 <__muldf3+0x574>
   45d0c:	8880022c 	andhi	r2,r17,8
   45d10:	1000071e 	bne	r2,zero,45d30 <__muldf3+0x574>
   45d14:	00800434 	movhi	r2,16
   45d18:	89400234 	orhi	r5,r17,8
   45d1c:	10bfffc4 	addi	r2,r2,-1
   45d20:	b82b883a 	mov	r21,r23
   45d24:	288a703a 	and	r5,r5,r2
   45d28:	4029883a 	mov	r20,r8
   45d2c:	003f6806 	br	45ad0 <__alt_data_end+0xfffde9d0>
   45d30:	00800434 	movhi	r2,16
   45d34:	81400234 	orhi	r5,r16,8
   45d38:	10bfffc4 	addi	r2,r2,-1
   45d3c:	288a703a 	and	r5,r5,r2
   45d40:	003f6306 	br	45ad0 <__alt_data_end+0xfffde9d0>
   45d44:	147ff604 	addi	r17,r2,-40
   45d48:	3462983a 	sll	r17,r6,r17
   45d4c:	0011883a 	mov	r8,zero
   45d50:	003f4406 	br	45a64 <__alt_data_end+0xfffde964>
   45d54:	3009883a 	mov	r4,r6
   45d58:	d9800215 	stw	r6,8(sp)
   45d5c:	da400115 	stw	r9,4(sp)
   45d60:	da800015 	stw	r10,0(sp)
   45d64:	0046be40 	call	46be4 <__clzsi2>
   45d68:	10800804 	addi	r2,r2,32
   45d6c:	da800017 	ldw	r10,0(sp)
   45d70:	da400117 	ldw	r9,4(sp)
   45d74:	d9800217 	ldw	r6,8(sp)
   45d78:	003f3006 	br	45a3c <__alt_data_end+0xfffde93c>
   45d7c:	143ff604 	addi	r16,r2,-40
   45d80:	9c20983a 	sll	r16,r19,r16
   45d84:	0029883a 	mov	r20,zero
   45d88:	003f1606 	br	459e4 <__alt_data_end+0xfffde8e4>
   45d8c:	d9800215 	stw	r6,8(sp)
   45d90:	d9c00015 	stw	r7,0(sp)
   45d94:	da400115 	stw	r9,4(sp)
   45d98:	0046be40 	call	46be4 <__clzsi2>
   45d9c:	10800804 	addi	r2,r2,32
   45da0:	da400117 	ldw	r9,4(sp)
   45da4:	d9c00017 	ldw	r7,0(sp)
   45da8:	d9800217 	ldw	r6,8(sp)
   45dac:	003f0306 	br	459bc <__alt_data_end+0xfffde8bc>
   45db0:	00c00044 	movi	r3,1
   45db4:	1947c83a 	sub	r3,r3,r5
   45db8:	00800e04 	movi	r2,56
   45dbc:	10feda16 	blt	r2,r3,45928 <__alt_data_end+0xfffde828>
   45dc0:	008007c4 	movi	r2,31
   45dc4:	10c01b16 	blt	r2,r3,45e34 <__muldf3+0x678>
   45dc8:	00800804 	movi	r2,32
   45dcc:	10c5c83a 	sub	r2,r2,r3
   45dd0:	888a983a 	sll	r5,r17,r2
   45dd4:	40c8d83a 	srl	r4,r8,r3
   45dd8:	4084983a 	sll	r2,r8,r2
   45ddc:	88e2d83a 	srl	r17,r17,r3
   45de0:	2906b03a 	or	r3,r5,r4
   45de4:	1004c03a 	cmpne	r2,r2,zero
   45de8:	1886b03a 	or	r3,r3,r2
   45dec:	188001cc 	andi	r2,r3,7
   45df0:	10000726 	beq	r2,zero,45e10 <__muldf3+0x654>
   45df4:	188003cc 	andi	r2,r3,15
   45df8:	01000104 	movi	r4,4
   45dfc:	11000426 	beq	r2,r4,45e10 <__muldf3+0x654>
   45e00:	1805883a 	mov	r2,r3
   45e04:	10c00104 	addi	r3,r2,4
   45e08:	1885803a 	cmpltu	r2,r3,r2
   45e0c:	88a3883a 	add	r17,r17,r2
   45e10:	8880202c 	andhi	r2,r17,128
   45e14:	10001c26 	beq	r2,zero,45e88 <__muldf3+0x6cc>
   45e18:	b02b883a 	mov	r21,r22
   45e1c:	00800044 	movi	r2,1
   45e20:	000b883a 	mov	r5,zero
   45e24:	0029883a 	mov	r20,zero
   45e28:	003ec306 	br	45938 <__alt_data_end+0xfffde838>
   45e2c:	5805883a 	mov	r2,r11
   45e30:	003f9906 	br	45c98 <__alt_data_end+0xfffdeb98>
   45e34:	00bff844 	movi	r2,-31
   45e38:	1145c83a 	sub	r2,r2,r5
   45e3c:	8888d83a 	srl	r4,r17,r2
   45e40:	00800804 	movi	r2,32
   45e44:	18801a26 	beq	r3,r2,45eb0 <__muldf3+0x6f4>
   45e48:	00801004 	movi	r2,64
   45e4c:	10c5c83a 	sub	r2,r2,r3
   45e50:	8884983a 	sll	r2,r17,r2
   45e54:	1204b03a 	or	r2,r2,r8
   45e58:	1004c03a 	cmpne	r2,r2,zero
   45e5c:	2084b03a 	or	r2,r4,r2
   45e60:	144001cc 	andi	r17,r2,7
   45e64:	88000d1e 	bne	r17,zero,45e9c <__muldf3+0x6e0>
   45e68:	000b883a 	mov	r5,zero
   45e6c:	1028d0fa 	srli	r20,r2,3
   45e70:	b02b883a 	mov	r21,r22
   45e74:	0005883a 	mov	r2,zero
   45e78:	a468b03a 	or	r20,r20,r17
   45e7c:	003eae06 	br	45938 <__alt_data_end+0xfffde838>
   45e80:	1007883a 	mov	r3,r2
   45e84:	0023883a 	mov	r17,zero
   45e88:	880a927a 	slli	r5,r17,9
   45e8c:	1805883a 	mov	r2,r3
   45e90:	8822977a 	slli	r17,r17,29
   45e94:	280ad33a 	srli	r5,r5,12
   45e98:	003ff406 	br	45e6c <__alt_data_end+0xfffded6c>
   45e9c:	10c003cc 	andi	r3,r2,15
   45ea0:	01000104 	movi	r4,4
   45ea4:	193ff626 	beq	r3,r4,45e80 <__alt_data_end+0xfffded80>
   45ea8:	0023883a 	mov	r17,zero
   45eac:	003fd506 	br	45e04 <__alt_data_end+0xfffded04>
   45eb0:	0005883a 	mov	r2,zero
   45eb4:	003fe706 	br	45e54 <__alt_data_end+0xfffded54>
   45eb8:	00800434 	movhi	r2,16
   45ebc:	89400234 	orhi	r5,r17,8
   45ec0:	10bfffc4 	addi	r2,r2,-1
   45ec4:	b02b883a 	mov	r21,r22
   45ec8:	288a703a 	and	r5,r5,r2
   45ecc:	4029883a 	mov	r20,r8
   45ed0:	003eff06 	br	45ad0 <__alt_data_end+0xfffde9d0>

00045ed4 <__subdf3>:
   45ed4:	02000434 	movhi	r8,16
   45ed8:	423fffc4 	addi	r8,r8,-1
   45edc:	defffb04 	addi	sp,sp,-20
   45ee0:	2a14703a 	and	r10,r5,r8
   45ee4:	3812d53a 	srli	r9,r7,20
   45ee8:	3a10703a 	and	r8,r7,r8
   45eec:	2006d77a 	srli	r3,r4,29
   45ef0:	3004d77a 	srli	r2,r6,29
   45ef4:	dc000015 	stw	r16,0(sp)
   45ef8:	501490fa 	slli	r10,r10,3
   45efc:	2820d53a 	srli	r16,r5,20
   45f00:	401090fa 	slli	r8,r8,3
   45f04:	dc800215 	stw	r18,8(sp)
   45f08:	dc400115 	stw	r17,4(sp)
   45f0c:	dfc00415 	stw	ra,16(sp)
   45f10:	202290fa 	slli	r17,r4,3
   45f14:	dcc00315 	stw	r19,12(sp)
   45f18:	4a41ffcc 	andi	r9,r9,2047
   45f1c:	0101ffc4 	movi	r4,2047
   45f20:	2824d7fa 	srli	r18,r5,31
   45f24:	8401ffcc 	andi	r16,r16,2047
   45f28:	50c6b03a 	or	r3,r10,r3
   45f2c:	380ed7fa 	srli	r7,r7,31
   45f30:	408ab03a 	or	r5,r8,r2
   45f34:	300c90fa 	slli	r6,r6,3
   45f38:	49009626 	beq	r9,r4,46194 <__subdf3+0x2c0>
   45f3c:	39c0005c 	xori	r7,r7,1
   45f40:	8245c83a 	sub	r2,r16,r9
   45f44:	3c807426 	beq	r7,r18,46118 <__subdf3+0x244>
   45f48:	0080af0e 	bge	zero,r2,46208 <__subdf3+0x334>
   45f4c:	48002a1e 	bne	r9,zero,45ff8 <__subdf3+0x124>
   45f50:	2988b03a 	or	r4,r5,r6
   45f54:	20009a1e 	bne	r4,zero,461c0 <__subdf3+0x2ec>
   45f58:	888001cc 	andi	r2,r17,7
   45f5c:	10000726 	beq	r2,zero,45f7c <__subdf3+0xa8>
   45f60:	888003cc 	andi	r2,r17,15
   45f64:	01000104 	movi	r4,4
   45f68:	11000426 	beq	r2,r4,45f7c <__subdf3+0xa8>
   45f6c:	890b883a 	add	r5,r17,r4
   45f70:	2c63803a 	cmpltu	r17,r5,r17
   45f74:	1c47883a 	add	r3,r3,r17
   45f78:	2823883a 	mov	r17,r5
   45f7c:	1880202c 	andhi	r2,r3,128
   45f80:	10005926 	beq	r2,zero,460e8 <__subdf3+0x214>
   45f84:	84000044 	addi	r16,r16,1
   45f88:	0081ffc4 	movi	r2,2047
   45f8c:	8080be26 	beq	r16,r2,46288 <__subdf3+0x3b4>
   45f90:	017fe034 	movhi	r5,65408
   45f94:	297fffc4 	addi	r5,r5,-1
   45f98:	1946703a 	and	r3,r3,r5
   45f9c:	1804977a 	slli	r2,r3,29
   45fa0:	1806927a 	slli	r3,r3,9
   45fa4:	8822d0fa 	srli	r17,r17,3
   45fa8:	8401ffcc 	andi	r16,r16,2047
   45fac:	180ad33a 	srli	r5,r3,12
   45fb0:	9100004c 	andi	r4,r18,1
   45fb4:	1444b03a 	or	r2,r2,r17
   45fb8:	80c1ffcc 	andi	r3,r16,2047
   45fbc:	1820953a 	slli	r16,r3,20
   45fc0:	20c03fcc 	andi	r3,r4,255
   45fc4:	180897fa 	slli	r4,r3,31
   45fc8:	00c00434 	movhi	r3,16
   45fcc:	18ffffc4 	addi	r3,r3,-1
   45fd0:	28c6703a 	and	r3,r5,r3
   45fd4:	1c06b03a 	or	r3,r3,r16
   45fd8:	1906b03a 	or	r3,r3,r4
   45fdc:	dfc00417 	ldw	ra,16(sp)
   45fe0:	dcc00317 	ldw	r19,12(sp)
   45fe4:	dc800217 	ldw	r18,8(sp)
   45fe8:	dc400117 	ldw	r17,4(sp)
   45fec:	dc000017 	ldw	r16,0(sp)
   45ff0:	dec00504 	addi	sp,sp,20
   45ff4:	f800283a 	ret
   45ff8:	0101ffc4 	movi	r4,2047
   45ffc:	813fd626 	beq	r16,r4,45f58 <__alt_data_end+0xfffdee58>
   46000:	29402034 	orhi	r5,r5,128
   46004:	01000e04 	movi	r4,56
   46008:	2080a316 	blt	r4,r2,46298 <__subdf3+0x3c4>
   4600c:	010007c4 	movi	r4,31
   46010:	2080c616 	blt	r4,r2,4632c <__subdf3+0x458>
   46014:	01000804 	movi	r4,32
   46018:	2089c83a 	sub	r4,r4,r2
   4601c:	2910983a 	sll	r8,r5,r4
   46020:	308ed83a 	srl	r7,r6,r2
   46024:	3108983a 	sll	r4,r6,r4
   46028:	2884d83a 	srl	r2,r5,r2
   4602c:	41ccb03a 	or	r6,r8,r7
   46030:	2008c03a 	cmpne	r4,r4,zero
   46034:	310cb03a 	or	r6,r6,r4
   46038:	898dc83a 	sub	r6,r17,r6
   4603c:	89a3803a 	cmpltu	r17,r17,r6
   46040:	1887c83a 	sub	r3,r3,r2
   46044:	1c47c83a 	sub	r3,r3,r17
   46048:	3023883a 	mov	r17,r6
   4604c:	1880202c 	andhi	r2,r3,128
   46050:	10002326 	beq	r2,zero,460e0 <__subdf3+0x20c>
   46054:	04c02034 	movhi	r19,128
   46058:	9cffffc4 	addi	r19,r19,-1
   4605c:	1ce6703a 	and	r19,r3,r19
   46060:	98007a26 	beq	r19,zero,4624c <__subdf3+0x378>
   46064:	9809883a 	mov	r4,r19
   46068:	0046be40 	call	46be4 <__clzsi2>
   4606c:	113ffe04 	addi	r4,r2,-8
   46070:	00c007c4 	movi	r3,31
   46074:	19007b16 	blt	r3,r4,46264 <__subdf3+0x390>
   46078:	00800804 	movi	r2,32
   4607c:	1105c83a 	sub	r2,r2,r4
   46080:	8884d83a 	srl	r2,r17,r2
   46084:	9906983a 	sll	r3,r19,r4
   46088:	8922983a 	sll	r17,r17,r4
   4608c:	10c4b03a 	or	r2,r2,r3
   46090:	24007816 	blt	r4,r16,46274 <__subdf3+0x3a0>
   46094:	2421c83a 	sub	r16,r4,r16
   46098:	80c00044 	addi	r3,r16,1
   4609c:	010007c4 	movi	r4,31
   460a0:	20c09516 	blt	r4,r3,462f8 <__subdf3+0x424>
   460a4:	01400804 	movi	r5,32
   460a8:	28cbc83a 	sub	r5,r5,r3
   460ac:	88c8d83a 	srl	r4,r17,r3
   460b0:	8962983a 	sll	r17,r17,r5
   460b4:	114a983a 	sll	r5,r2,r5
   460b8:	10c6d83a 	srl	r3,r2,r3
   460bc:	8804c03a 	cmpne	r2,r17,zero
   460c0:	290ab03a 	or	r5,r5,r4
   460c4:	28a2b03a 	or	r17,r5,r2
   460c8:	0021883a 	mov	r16,zero
   460cc:	003fa206 	br	45f58 <__alt_data_end+0xfffdee58>
   460d0:	2090b03a 	or	r8,r4,r2
   460d4:	40018e26 	beq	r8,zero,46710 <__subdf3+0x83c>
   460d8:	1007883a 	mov	r3,r2
   460dc:	2023883a 	mov	r17,r4
   460e0:	888001cc 	andi	r2,r17,7
   460e4:	103f9e1e 	bne	r2,zero,45f60 <__alt_data_end+0xfffdee60>
   460e8:	1804977a 	slli	r2,r3,29
   460ec:	8822d0fa 	srli	r17,r17,3
   460f0:	1810d0fa 	srli	r8,r3,3
   460f4:	9100004c 	andi	r4,r18,1
   460f8:	1444b03a 	or	r2,r2,r17
   460fc:	00c1ffc4 	movi	r3,2047
   46100:	80c02826 	beq	r16,r3,461a4 <__subdf3+0x2d0>
   46104:	01400434 	movhi	r5,16
   46108:	297fffc4 	addi	r5,r5,-1
   4610c:	80e0703a 	and	r16,r16,r3
   46110:	414a703a 	and	r5,r8,r5
   46114:	003fa806 	br	45fb8 <__alt_data_end+0xfffdeeb8>
   46118:	0080630e 	bge	zero,r2,462a8 <__subdf3+0x3d4>
   4611c:	48003026 	beq	r9,zero,461e0 <__subdf3+0x30c>
   46120:	0101ffc4 	movi	r4,2047
   46124:	813f8c26 	beq	r16,r4,45f58 <__alt_data_end+0xfffdee58>
   46128:	29402034 	orhi	r5,r5,128
   4612c:	01000e04 	movi	r4,56
   46130:	2080a90e 	bge	r4,r2,463d8 <__subdf3+0x504>
   46134:	298cb03a 	or	r6,r5,r6
   46138:	3012c03a 	cmpne	r9,r6,zero
   4613c:	0005883a 	mov	r2,zero
   46140:	4c53883a 	add	r9,r9,r17
   46144:	4c63803a 	cmpltu	r17,r9,r17
   46148:	10c7883a 	add	r3,r2,r3
   4614c:	88c7883a 	add	r3,r17,r3
   46150:	4823883a 	mov	r17,r9
   46154:	1880202c 	andhi	r2,r3,128
   46158:	1000d026 	beq	r2,zero,4649c <__subdf3+0x5c8>
   4615c:	84000044 	addi	r16,r16,1
   46160:	0081ffc4 	movi	r2,2047
   46164:	8080fe26 	beq	r16,r2,46560 <__subdf3+0x68c>
   46168:	00bfe034 	movhi	r2,65408
   4616c:	10bfffc4 	addi	r2,r2,-1
   46170:	1886703a 	and	r3,r3,r2
   46174:	880ad07a 	srli	r5,r17,1
   46178:	180497fa 	slli	r2,r3,31
   4617c:	8900004c 	andi	r4,r17,1
   46180:	2922b03a 	or	r17,r5,r4
   46184:	1806d07a 	srli	r3,r3,1
   46188:	1462b03a 	or	r17,r2,r17
   4618c:	3825883a 	mov	r18,r7
   46190:	003f7106 	br	45f58 <__alt_data_end+0xfffdee58>
   46194:	2984b03a 	or	r2,r5,r6
   46198:	103f6826 	beq	r2,zero,45f3c <__alt_data_end+0xfffdee3c>
   4619c:	39c03fcc 	andi	r7,r7,255
   461a0:	003f6706 	br	45f40 <__alt_data_end+0xfffdee40>
   461a4:	4086b03a 	or	r3,r8,r2
   461a8:	18015226 	beq	r3,zero,466f4 <__subdf3+0x820>
   461ac:	00c00434 	movhi	r3,16
   461b0:	41400234 	orhi	r5,r8,8
   461b4:	18ffffc4 	addi	r3,r3,-1
   461b8:	28ca703a 	and	r5,r5,r3
   461bc:	003f7e06 	br	45fb8 <__alt_data_end+0xfffdeeb8>
   461c0:	10bfffc4 	addi	r2,r2,-1
   461c4:	1000491e 	bne	r2,zero,462ec <__subdf3+0x418>
   461c8:	898fc83a 	sub	r7,r17,r6
   461cc:	89e3803a 	cmpltu	r17,r17,r7
   461d0:	1947c83a 	sub	r3,r3,r5
   461d4:	1c47c83a 	sub	r3,r3,r17
   461d8:	3823883a 	mov	r17,r7
   461dc:	003f9b06 	br	4604c <__alt_data_end+0xfffdef4c>
   461e0:	2988b03a 	or	r4,r5,r6
   461e4:	203f5c26 	beq	r4,zero,45f58 <__alt_data_end+0xfffdee58>
   461e8:	10bfffc4 	addi	r2,r2,-1
   461ec:	1000931e 	bne	r2,zero,4643c <__subdf3+0x568>
   461f0:	898d883a 	add	r6,r17,r6
   461f4:	3463803a 	cmpltu	r17,r6,r17
   461f8:	1947883a 	add	r3,r3,r5
   461fc:	88c7883a 	add	r3,r17,r3
   46200:	3023883a 	mov	r17,r6
   46204:	003fd306 	br	46154 <__alt_data_end+0xfffdf054>
   46208:	1000541e 	bne	r2,zero,4635c <__subdf3+0x488>
   4620c:	80800044 	addi	r2,r16,1
   46210:	1081ffcc 	andi	r2,r2,2047
   46214:	01000044 	movi	r4,1
   46218:	2080a20e 	bge	r4,r2,464a4 <__subdf3+0x5d0>
   4621c:	8989c83a 	sub	r4,r17,r6
   46220:	8905803a 	cmpltu	r2,r17,r4
   46224:	1967c83a 	sub	r19,r3,r5
   46228:	98a7c83a 	sub	r19,r19,r2
   4622c:	9880202c 	andhi	r2,r19,128
   46230:	10006326 	beq	r2,zero,463c0 <__subdf3+0x4ec>
   46234:	3463c83a 	sub	r17,r6,r17
   46238:	28c7c83a 	sub	r3,r5,r3
   4623c:	344d803a 	cmpltu	r6,r6,r17
   46240:	19a7c83a 	sub	r19,r3,r6
   46244:	3825883a 	mov	r18,r7
   46248:	983f861e 	bne	r19,zero,46064 <__alt_data_end+0xfffdef64>
   4624c:	8809883a 	mov	r4,r17
   46250:	0046be40 	call	46be4 <__clzsi2>
   46254:	10800804 	addi	r2,r2,32
   46258:	113ffe04 	addi	r4,r2,-8
   4625c:	00c007c4 	movi	r3,31
   46260:	193f850e 	bge	r3,r4,46078 <__alt_data_end+0xfffdef78>
   46264:	10bff604 	addi	r2,r2,-40
   46268:	8884983a 	sll	r2,r17,r2
   4626c:	0023883a 	mov	r17,zero
   46270:	243f880e 	bge	r4,r16,46094 <__alt_data_end+0xfffdef94>
   46274:	00ffe034 	movhi	r3,65408
   46278:	18ffffc4 	addi	r3,r3,-1
   4627c:	8121c83a 	sub	r16,r16,r4
   46280:	10c6703a 	and	r3,r2,r3
   46284:	003f3406 	br	45f58 <__alt_data_end+0xfffdee58>
   46288:	9100004c 	andi	r4,r18,1
   4628c:	000b883a 	mov	r5,zero
   46290:	0005883a 	mov	r2,zero
   46294:	003f4806 	br	45fb8 <__alt_data_end+0xfffdeeb8>
   46298:	298cb03a 	or	r6,r5,r6
   4629c:	300cc03a 	cmpne	r6,r6,zero
   462a0:	0005883a 	mov	r2,zero
   462a4:	003f6406 	br	46038 <__alt_data_end+0xfffdef38>
   462a8:	10009a1e 	bne	r2,zero,46514 <__subdf3+0x640>
   462ac:	82400044 	addi	r9,r16,1
   462b0:	4881ffcc 	andi	r2,r9,2047
   462b4:	02800044 	movi	r10,1
   462b8:	5080670e 	bge	r10,r2,46458 <__subdf3+0x584>
   462bc:	0081ffc4 	movi	r2,2047
   462c0:	4880af26 	beq	r9,r2,46580 <__subdf3+0x6ac>
   462c4:	898d883a 	add	r6,r17,r6
   462c8:	1945883a 	add	r2,r3,r5
   462cc:	3447803a 	cmpltu	r3,r6,r17
   462d0:	1887883a 	add	r3,r3,r2
   462d4:	182297fa 	slli	r17,r3,31
   462d8:	300cd07a 	srli	r6,r6,1
   462dc:	1806d07a 	srli	r3,r3,1
   462e0:	4821883a 	mov	r16,r9
   462e4:	89a2b03a 	or	r17,r17,r6
   462e8:	003f1b06 	br	45f58 <__alt_data_end+0xfffdee58>
   462ec:	0101ffc4 	movi	r4,2047
   462f0:	813f441e 	bne	r16,r4,46004 <__alt_data_end+0xfffdef04>
   462f4:	003f1806 	br	45f58 <__alt_data_end+0xfffdee58>
   462f8:	843ff844 	addi	r16,r16,-31
   462fc:	01400804 	movi	r5,32
   46300:	1408d83a 	srl	r4,r2,r16
   46304:	19405026 	beq	r3,r5,46448 <__subdf3+0x574>
   46308:	01401004 	movi	r5,64
   4630c:	28c7c83a 	sub	r3,r5,r3
   46310:	10c4983a 	sll	r2,r2,r3
   46314:	88a2b03a 	or	r17,r17,r2
   46318:	8822c03a 	cmpne	r17,r17,zero
   4631c:	2462b03a 	or	r17,r4,r17
   46320:	0007883a 	mov	r3,zero
   46324:	0021883a 	mov	r16,zero
   46328:	003f6d06 	br	460e0 <__alt_data_end+0xfffdefe0>
   4632c:	11fff804 	addi	r7,r2,-32
   46330:	01000804 	movi	r4,32
   46334:	29ced83a 	srl	r7,r5,r7
   46338:	11004526 	beq	r2,r4,46450 <__subdf3+0x57c>
   4633c:	01001004 	movi	r4,64
   46340:	2089c83a 	sub	r4,r4,r2
   46344:	2904983a 	sll	r2,r5,r4
   46348:	118cb03a 	or	r6,r2,r6
   4634c:	300cc03a 	cmpne	r6,r6,zero
   46350:	398cb03a 	or	r6,r7,r6
   46354:	0005883a 	mov	r2,zero
   46358:	003f3706 	br	46038 <__alt_data_end+0xfffdef38>
   4635c:	80002a26 	beq	r16,zero,46408 <__subdf3+0x534>
   46360:	0101ffc4 	movi	r4,2047
   46364:	49006626 	beq	r9,r4,46500 <__subdf3+0x62c>
   46368:	0085c83a 	sub	r2,zero,r2
   4636c:	18c02034 	orhi	r3,r3,128
   46370:	01000e04 	movi	r4,56
   46374:	20807e16 	blt	r4,r2,46570 <__subdf3+0x69c>
   46378:	010007c4 	movi	r4,31
   4637c:	2080e716 	blt	r4,r2,4671c <__subdf3+0x848>
   46380:	01000804 	movi	r4,32
   46384:	2089c83a 	sub	r4,r4,r2
   46388:	1914983a 	sll	r10,r3,r4
   4638c:	8890d83a 	srl	r8,r17,r2
   46390:	8908983a 	sll	r4,r17,r4
   46394:	1884d83a 	srl	r2,r3,r2
   46398:	5222b03a 	or	r17,r10,r8
   4639c:	2006c03a 	cmpne	r3,r4,zero
   463a0:	88e2b03a 	or	r17,r17,r3
   463a4:	3463c83a 	sub	r17,r6,r17
   463a8:	2885c83a 	sub	r2,r5,r2
   463ac:	344d803a 	cmpltu	r6,r6,r17
   463b0:	1187c83a 	sub	r3,r2,r6
   463b4:	4821883a 	mov	r16,r9
   463b8:	3825883a 	mov	r18,r7
   463bc:	003f2306 	br	4604c <__alt_data_end+0xfffdef4c>
   463c0:	24d0b03a 	or	r8,r4,r19
   463c4:	40001b1e 	bne	r8,zero,46434 <__subdf3+0x560>
   463c8:	0005883a 	mov	r2,zero
   463cc:	0009883a 	mov	r4,zero
   463d0:	0021883a 	mov	r16,zero
   463d4:	003f4906 	br	460fc <__alt_data_end+0xfffdeffc>
   463d8:	010007c4 	movi	r4,31
   463dc:	20803a16 	blt	r4,r2,464c8 <__subdf3+0x5f4>
   463e0:	01000804 	movi	r4,32
   463e4:	2089c83a 	sub	r4,r4,r2
   463e8:	2912983a 	sll	r9,r5,r4
   463ec:	3090d83a 	srl	r8,r6,r2
   463f0:	3108983a 	sll	r4,r6,r4
   463f4:	2884d83a 	srl	r2,r5,r2
   463f8:	4a12b03a 	or	r9,r9,r8
   463fc:	2008c03a 	cmpne	r4,r4,zero
   46400:	4912b03a 	or	r9,r9,r4
   46404:	003f4e06 	br	46140 <__alt_data_end+0xfffdf040>
   46408:	1c48b03a 	or	r4,r3,r17
   4640c:	20003c26 	beq	r4,zero,46500 <__subdf3+0x62c>
   46410:	0084303a 	nor	r2,zero,r2
   46414:	1000381e 	bne	r2,zero,464f8 <__subdf3+0x624>
   46418:	3463c83a 	sub	r17,r6,r17
   4641c:	28c5c83a 	sub	r2,r5,r3
   46420:	344d803a 	cmpltu	r6,r6,r17
   46424:	1187c83a 	sub	r3,r2,r6
   46428:	4821883a 	mov	r16,r9
   4642c:	3825883a 	mov	r18,r7
   46430:	003f0606 	br	4604c <__alt_data_end+0xfffdef4c>
   46434:	2023883a 	mov	r17,r4
   46438:	003f0906 	br	46060 <__alt_data_end+0xfffdef60>
   4643c:	0101ffc4 	movi	r4,2047
   46440:	813f3a1e 	bne	r16,r4,4612c <__alt_data_end+0xfffdf02c>
   46444:	003ec406 	br	45f58 <__alt_data_end+0xfffdee58>
   46448:	0005883a 	mov	r2,zero
   4644c:	003fb106 	br	46314 <__alt_data_end+0xfffdf214>
   46450:	0005883a 	mov	r2,zero
   46454:	003fbc06 	br	46348 <__alt_data_end+0xfffdf248>
   46458:	1c44b03a 	or	r2,r3,r17
   4645c:	80008e1e 	bne	r16,zero,46698 <__subdf3+0x7c4>
   46460:	1000c826 	beq	r2,zero,46784 <__subdf3+0x8b0>
   46464:	2984b03a 	or	r2,r5,r6
   46468:	103ebb26 	beq	r2,zero,45f58 <__alt_data_end+0xfffdee58>
   4646c:	8989883a 	add	r4,r17,r6
   46470:	1945883a 	add	r2,r3,r5
   46474:	2447803a 	cmpltu	r3,r4,r17
   46478:	1887883a 	add	r3,r3,r2
   4647c:	1880202c 	andhi	r2,r3,128
   46480:	2023883a 	mov	r17,r4
   46484:	103f1626 	beq	r2,zero,460e0 <__alt_data_end+0xfffdefe0>
   46488:	00bfe034 	movhi	r2,65408
   4648c:	10bfffc4 	addi	r2,r2,-1
   46490:	5021883a 	mov	r16,r10
   46494:	1886703a 	and	r3,r3,r2
   46498:	003eaf06 	br	45f58 <__alt_data_end+0xfffdee58>
   4649c:	3825883a 	mov	r18,r7
   464a0:	003f0f06 	br	460e0 <__alt_data_end+0xfffdefe0>
   464a4:	1c44b03a 	or	r2,r3,r17
   464a8:	8000251e 	bne	r16,zero,46540 <__subdf3+0x66c>
   464ac:	1000661e 	bne	r2,zero,46648 <__subdf3+0x774>
   464b0:	2990b03a 	or	r8,r5,r6
   464b4:	40009626 	beq	r8,zero,46710 <__subdf3+0x83c>
   464b8:	2807883a 	mov	r3,r5
   464bc:	3023883a 	mov	r17,r6
   464c0:	3825883a 	mov	r18,r7
   464c4:	003ea406 	br	45f58 <__alt_data_end+0xfffdee58>
   464c8:	127ff804 	addi	r9,r2,-32
   464cc:	01000804 	movi	r4,32
   464d0:	2a52d83a 	srl	r9,r5,r9
   464d4:	11008c26 	beq	r2,r4,46708 <__subdf3+0x834>
   464d8:	01001004 	movi	r4,64
   464dc:	2085c83a 	sub	r2,r4,r2
   464e0:	2884983a 	sll	r2,r5,r2
   464e4:	118cb03a 	or	r6,r2,r6
   464e8:	300cc03a 	cmpne	r6,r6,zero
   464ec:	4992b03a 	or	r9,r9,r6
   464f0:	0005883a 	mov	r2,zero
   464f4:	003f1206 	br	46140 <__alt_data_end+0xfffdf040>
   464f8:	0101ffc4 	movi	r4,2047
   464fc:	493f9c1e 	bne	r9,r4,46370 <__alt_data_end+0xfffdf270>
   46500:	2807883a 	mov	r3,r5
   46504:	3023883a 	mov	r17,r6
   46508:	4821883a 	mov	r16,r9
   4650c:	3825883a 	mov	r18,r7
   46510:	003e9106 	br	45f58 <__alt_data_end+0xfffdee58>
   46514:	80001f1e 	bne	r16,zero,46594 <__subdf3+0x6c0>
   46518:	1c48b03a 	or	r4,r3,r17
   4651c:	20005a26 	beq	r4,zero,46688 <__subdf3+0x7b4>
   46520:	0084303a 	nor	r2,zero,r2
   46524:	1000561e 	bne	r2,zero,46680 <__subdf3+0x7ac>
   46528:	89a3883a 	add	r17,r17,r6
   4652c:	1945883a 	add	r2,r3,r5
   46530:	898d803a 	cmpltu	r6,r17,r6
   46534:	3087883a 	add	r3,r6,r2
   46538:	4821883a 	mov	r16,r9
   4653c:	003f0506 	br	46154 <__alt_data_end+0xfffdf054>
   46540:	10002b1e 	bne	r2,zero,465f0 <__subdf3+0x71c>
   46544:	2984b03a 	or	r2,r5,r6
   46548:	10008026 	beq	r2,zero,4674c <__subdf3+0x878>
   4654c:	2807883a 	mov	r3,r5
   46550:	3023883a 	mov	r17,r6
   46554:	3825883a 	mov	r18,r7
   46558:	0401ffc4 	movi	r16,2047
   4655c:	003e7e06 	br	45f58 <__alt_data_end+0xfffdee58>
   46560:	3809883a 	mov	r4,r7
   46564:	0011883a 	mov	r8,zero
   46568:	0005883a 	mov	r2,zero
   4656c:	003ee306 	br	460fc <__alt_data_end+0xfffdeffc>
   46570:	1c62b03a 	or	r17,r3,r17
   46574:	8822c03a 	cmpne	r17,r17,zero
   46578:	0005883a 	mov	r2,zero
   4657c:	003f8906 	br	463a4 <__alt_data_end+0xfffdf2a4>
   46580:	3809883a 	mov	r4,r7
   46584:	4821883a 	mov	r16,r9
   46588:	0011883a 	mov	r8,zero
   4658c:	0005883a 	mov	r2,zero
   46590:	003eda06 	br	460fc <__alt_data_end+0xfffdeffc>
   46594:	0101ffc4 	movi	r4,2047
   46598:	49003b26 	beq	r9,r4,46688 <__subdf3+0x7b4>
   4659c:	0085c83a 	sub	r2,zero,r2
   465a0:	18c02034 	orhi	r3,r3,128
   465a4:	01000e04 	movi	r4,56
   465a8:	20806e16 	blt	r4,r2,46764 <__subdf3+0x890>
   465ac:	010007c4 	movi	r4,31
   465b0:	20807716 	blt	r4,r2,46790 <__subdf3+0x8bc>
   465b4:	01000804 	movi	r4,32
   465b8:	2089c83a 	sub	r4,r4,r2
   465bc:	1914983a 	sll	r10,r3,r4
   465c0:	8890d83a 	srl	r8,r17,r2
   465c4:	8908983a 	sll	r4,r17,r4
   465c8:	1884d83a 	srl	r2,r3,r2
   465cc:	5222b03a 	or	r17,r10,r8
   465d0:	2006c03a 	cmpne	r3,r4,zero
   465d4:	88e2b03a 	or	r17,r17,r3
   465d8:	89a3883a 	add	r17,r17,r6
   465dc:	1145883a 	add	r2,r2,r5
   465e0:	898d803a 	cmpltu	r6,r17,r6
   465e4:	3087883a 	add	r3,r6,r2
   465e8:	4821883a 	mov	r16,r9
   465ec:	003ed906 	br	46154 <__alt_data_end+0xfffdf054>
   465f0:	2984b03a 	or	r2,r5,r6
   465f4:	10004226 	beq	r2,zero,46700 <__subdf3+0x82c>
   465f8:	1808d0fa 	srli	r4,r3,3
   465fc:	8822d0fa 	srli	r17,r17,3
   46600:	1806977a 	slli	r3,r3,29
   46604:	2080022c 	andhi	r2,r4,8
   46608:	1c62b03a 	or	r17,r3,r17
   4660c:	10000826 	beq	r2,zero,46630 <__subdf3+0x75c>
   46610:	2812d0fa 	srli	r9,r5,3
   46614:	4880022c 	andhi	r2,r9,8
   46618:	1000051e 	bne	r2,zero,46630 <__subdf3+0x75c>
   4661c:	300cd0fa 	srli	r6,r6,3
   46620:	2804977a 	slli	r2,r5,29
   46624:	4809883a 	mov	r4,r9
   46628:	3825883a 	mov	r18,r7
   4662c:	11a2b03a 	or	r17,r2,r6
   46630:	8806d77a 	srli	r3,r17,29
   46634:	200890fa 	slli	r4,r4,3
   46638:	882290fa 	slli	r17,r17,3
   4663c:	0401ffc4 	movi	r16,2047
   46640:	1906b03a 	or	r3,r3,r4
   46644:	003e4406 	br	45f58 <__alt_data_end+0xfffdee58>
   46648:	2984b03a 	or	r2,r5,r6
   4664c:	103e4226 	beq	r2,zero,45f58 <__alt_data_end+0xfffdee58>
   46650:	8989c83a 	sub	r4,r17,r6
   46654:	8911803a 	cmpltu	r8,r17,r4
   46658:	1945c83a 	sub	r2,r3,r5
   4665c:	1205c83a 	sub	r2,r2,r8
   46660:	1200202c 	andhi	r8,r2,128
   46664:	403e9a26 	beq	r8,zero,460d0 <__alt_data_end+0xfffdefd0>
   46668:	3463c83a 	sub	r17,r6,r17
   4666c:	28c5c83a 	sub	r2,r5,r3
   46670:	344d803a 	cmpltu	r6,r6,r17
   46674:	1187c83a 	sub	r3,r2,r6
   46678:	3825883a 	mov	r18,r7
   4667c:	003e3606 	br	45f58 <__alt_data_end+0xfffdee58>
   46680:	0101ffc4 	movi	r4,2047
   46684:	493fc71e 	bne	r9,r4,465a4 <__alt_data_end+0xfffdf4a4>
   46688:	2807883a 	mov	r3,r5
   4668c:	3023883a 	mov	r17,r6
   46690:	4821883a 	mov	r16,r9
   46694:	003e3006 	br	45f58 <__alt_data_end+0xfffdee58>
   46698:	10003626 	beq	r2,zero,46774 <__subdf3+0x8a0>
   4669c:	2984b03a 	or	r2,r5,r6
   466a0:	10001726 	beq	r2,zero,46700 <__subdf3+0x82c>
   466a4:	1808d0fa 	srli	r4,r3,3
   466a8:	8822d0fa 	srli	r17,r17,3
   466ac:	1806977a 	slli	r3,r3,29
   466b0:	2080022c 	andhi	r2,r4,8
   466b4:	1c62b03a 	or	r17,r3,r17
   466b8:	10000726 	beq	r2,zero,466d8 <__subdf3+0x804>
   466bc:	2812d0fa 	srli	r9,r5,3
   466c0:	4880022c 	andhi	r2,r9,8
   466c4:	1000041e 	bne	r2,zero,466d8 <__subdf3+0x804>
   466c8:	300cd0fa 	srli	r6,r6,3
   466cc:	2804977a 	slli	r2,r5,29
   466d0:	4809883a 	mov	r4,r9
   466d4:	11a2b03a 	or	r17,r2,r6
   466d8:	8806d77a 	srli	r3,r17,29
   466dc:	200890fa 	slli	r4,r4,3
   466e0:	882290fa 	slli	r17,r17,3
   466e4:	3825883a 	mov	r18,r7
   466e8:	1906b03a 	or	r3,r3,r4
   466ec:	0401ffc4 	movi	r16,2047
   466f0:	003e1906 	br	45f58 <__alt_data_end+0xfffdee58>
   466f4:	000b883a 	mov	r5,zero
   466f8:	0005883a 	mov	r2,zero
   466fc:	003e2e06 	br	45fb8 <__alt_data_end+0xfffdeeb8>
   46700:	0401ffc4 	movi	r16,2047
   46704:	003e1406 	br	45f58 <__alt_data_end+0xfffdee58>
   46708:	0005883a 	mov	r2,zero
   4670c:	003f7506 	br	464e4 <__alt_data_end+0xfffdf3e4>
   46710:	0005883a 	mov	r2,zero
   46714:	0009883a 	mov	r4,zero
   46718:	003e7806 	br	460fc <__alt_data_end+0xfffdeffc>
   4671c:	123ff804 	addi	r8,r2,-32
   46720:	01000804 	movi	r4,32
   46724:	1a10d83a 	srl	r8,r3,r8
   46728:	11002526 	beq	r2,r4,467c0 <__subdf3+0x8ec>
   4672c:	01001004 	movi	r4,64
   46730:	2085c83a 	sub	r2,r4,r2
   46734:	1884983a 	sll	r2,r3,r2
   46738:	1444b03a 	or	r2,r2,r17
   4673c:	1004c03a 	cmpne	r2,r2,zero
   46740:	40a2b03a 	or	r17,r8,r2
   46744:	0005883a 	mov	r2,zero
   46748:	003f1606 	br	463a4 <__alt_data_end+0xfffdf2a4>
   4674c:	02000434 	movhi	r8,16
   46750:	0009883a 	mov	r4,zero
   46754:	423fffc4 	addi	r8,r8,-1
   46758:	00bfffc4 	movi	r2,-1
   4675c:	0401ffc4 	movi	r16,2047
   46760:	003e6606 	br	460fc <__alt_data_end+0xfffdeffc>
   46764:	1c62b03a 	or	r17,r3,r17
   46768:	8822c03a 	cmpne	r17,r17,zero
   4676c:	0005883a 	mov	r2,zero
   46770:	003f9906 	br	465d8 <__alt_data_end+0xfffdf4d8>
   46774:	2807883a 	mov	r3,r5
   46778:	3023883a 	mov	r17,r6
   4677c:	0401ffc4 	movi	r16,2047
   46780:	003df506 	br	45f58 <__alt_data_end+0xfffdee58>
   46784:	2807883a 	mov	r3,r5
   46788:	3023883a 	mov	r17,r6
   4678c:	003df206 	br	45f58 <__alt_data_end+0xfffdee58>
   46790:	123ff804 	addi	r8,r2,-32
   46794:	01000804 	movi	r4,32
   46798:	1a10d83a 	srl	r8,r3,r8
   4679c:	11000a26 	beq	r2,r4,467c8 <__subdf3+0x8f4>
   467a0:	01001004 	movi	r4,64
   467a4:	2085c83a 	sub	r2,r4,r2
   467a8:	1884983a 	sll	r2,r3,r2
   467ac:	1444b03a 	or	r2,r2,r17
   467b0:	1004c03a 	cmpne	r2,r2,zero
   467b4:	40a2b03a 	or	r17,r8,r2
   467b8:	0005883a 	mov	r2,zero
   467bc:	003f8606 	br	465d8 <__alt_data_end+0xfffdf4d8>
   467c0:	0005883a 	mov	r2,zero
   467c4:	003fdc06 	br	46738 <__alt_data_end+0xfffdf638>
   467c8:	0005883a 	mov	r2,zero
   467cc:	003ff706 	br	467ac <__alt_data_end+0xfffdf6ac>

000467d0 <__fixdfsi>:
   467d0:	280cd53a 	srli	r6,r5,20
   467d4:	00c00434 	movhi	r3,16
   467d8:	18ffffc4 	addi	r3,r3,-1
   467dc:	3181ffcc 	andi	r6,r6,2047
   467e0:	01c0ff84 	movi	r7,1022
   467e4:	28c6703a 	and	r3,r5,r3
   467e8:	280ad7fa 	srli	r5,r5,31
   467ec:	3980120e 	bge	r7,r6,46838 <__fixdfsi+0x68>
   467f0:	00810744 	movi	r2,1053
   467f4:	11800c16 	blt	r2,r6,46828 <__fixdfsi+0x58>
   467f8:	00810cc4 	movi	r2,1075
   467fc:	1185c83a 	sub	r2,r2,r6
   46800:	01c007c4 	movi	r7,31
   46804:	18c00434 	orhi	r3,r3,16
   46808:	38800d16 	blt	r7,r2,46840 <__fixdfsi+0x70>
   4680c:	31befb44 	addi	r6,r6,-1043
   46810:	2084d83a 	srl	r2,r4,r2
   46814:	1986983a 	sll	r3,r3,r6
   46818:	1884b03a 	or	r2,r3,r2
   4681c:	28000726 	beq	r5,zero,4683c <__fixdfsi+0x6c>
   46820:	0085c83a 	sub	r2,zero,r2
   46824:	f800283a 	ret
   46828:	00a00034 	movhi	r2,32768
   4682c:	10bfffc4 	addi	r2,r2,-1
   46830:	2885883a 	add	r2,r5,r2
   46834:	f800283a 	ret
   46838:	0005883a 	mov	r2,zero
   4683c:	f800283a 	ret
   46840:	008104c4 	movi	r2,1043
   46844:	1185c83a 	sub	r2,r2,r6
   46848:	1884d83a 	srl	r2,r3,r2
   4684c:	003ff306 	br	4681c <__alt_data_end+0xfffdf71c>

00046850 <__floatsidf>:
   46850:	defffd04 	addi	sp,sp,-12
   46854:	dfc00215 	stw	ra,8(sp)
   46858:	dc400115 	stw	r17,4(sp)
   4685c:	dc000015 	stw	r16,0(sp)
   46860:	20002b26 	beq	r4,zero,46910 <__floatsidf+0xc0>
   46864:	2023883a 	mov	r17,r4
   46868:	2020d7fa 	srli	r16,r4,31
   4686c:	20002d16 	blt	r4,zero,46924 <__floatsidf+0xd4>
   46870:	8809883a 	mov	r4,r17
   46874:	0046be40 	call	46be4 <__clzsi2>
   46878:	01410784 	movi	r5,1054
   4687c:	288bc83a 	sub	r5,r5,r2
   46880:	01010cc4 	movi	r4,1075
   46884:	2149c83a 	sub	r4,r4,r5
   46888:	00c007c4 	movi	r3,31
   4688c:	1900160e 	bge	r3,r4,468e8 <__floatsidf+0x98>
   46890:	00c104c4 	movi	r3,1043
   46894:	1947c83a 	sub	r3,r3,r5
   46898:	88c6983a 	sll	r3,r17,r3
   4689c:	00800434 	movhi	r2,16
   468a0:	10bfffc4 	addi	r2,r2,-1
   468a4:	1886703a 	and	r3,r3,r2
   468a8:	2941ffcc 	andi	r5,r5,2047
   468ac:	800d883a 	mov	r6,r16
   468b0:	0005883a 	mov	r2,zero
   468b4:	280a953a 	slli	r5,r5,20
   468b8:	31803fcc 	andi	r6,r6,255
   468bc:	01000434 	movhi	r4,16
   468c0:	300c97fa 	slli	r6,r6,31
   468c4:	213fffc4 	addi	r4,r4,-1
   468c8:	1906703a 	and	r3,r3,r4
   468cc:	1946b03a 	or	r3,r3,r5
   468d0:	1986b03a 	or	r3,r3,r6
   468d4:	dfc00217 	ldw	ra,8(sp)
   468d8:	dc400117 	ldw	r17,4(sp)
   468dc:	dc000017 	ldw	r16,0(sp)
   468e0:	dec00304 	addi	sp,sp,12
   468e4:	f800283a 	ret
   468e8:	00c002c4 	movi	r3,11
   468ec:	1887c83a 	sub	r3,r3,r2
   468f0:	88c6d83a 	srl	r3,r17,r3
   468f4:	8904983a 	sll	r2,r17,r4
   468f8:	01000434 	movhi	r4,16
   468fc:	213fffc4 	addi	r4,r4,-1
   46900:	2941ffcc 	andi	r5,r5,2047
   46904:	1906703a 	and	r3,r3,r4
   46908:	800d883a 	mov	r6,r16
   4690c:	003fe906 	br	468b4 <__alt_data_end+0xfffdf7b4>
   46910:	000d883a 	mov	r6,zero
   46914:	000b883a 	mov	r5,zero
   46918:	0007883a 	mov	r3,zero
   4691c:	0005883a 	mov	r2,zero
   46920:	003fe406 	br	468b4 <__alt_data_end+0xfffdf7b4>
   46924:	0123c83a 	sub	r17,zero,r4
   46928:	003fd106 	br	46870 <__alt_data_end+0xfffdf770>

0004692c <__extendsfdf2>:
   4692c:	200ad5fa 	srli	r5,r4,23
   46930:	defffd04 	addi	sp,sp,-12
   46934:	dc400115 	stw	r17,4(sp)
   46938:	29403fcc 	andi	r5,r5,255
   4693c:	29800044 	addi	r6,r5,1
   46940:	04402034 	movhi	r17,128
   46944:	dc000015 	stw	r16,0(sp)
   46948:	8c7fffc4 	addi	r17,r17,-1
   4694c:	dfc00215 	stw	ra,8(sp)
   46950:	31803fcc 	andi	r6,r6,255
   46954:	00800044 	movi	r2,1
   46958:	8922703a 	and	r17,r17,r4
   4695c:	2020d7fa 	srli	r16,r4,31
   46960:	1180110e 	bge	r2,r6,469a8 <__extendsfdf2+0x7c>
   46964:	880cd0fa 	srli	r6,r17,3
   46968:	8822977a 	slli	r17,r17,29
   4696c:	2940e004 	addi	r5,r5,896
   46970:	2941ffcc 	andi	r5,r5,2047
   46974:	2804953a 	slli	r2,r5,20
   46978:	01400434 	movhi	r5,16
   4697c:	800697fa 	slli	r3,r16,31
   46980:	297fffc4 	addi	r5,r5,-1
   46984:	314a703a 	and	r5,r6,r5
   46988:	288ab03a 	or	r5,r5,r2
   4698c:	28c6b03a 	or	r3,r5,r3
   46990:	8805883a 	mov	r2,r17
   46994:	dfc00217 	ldw	ra,8(sp)
   46998:	dc400117 	ldw	r17,4(sp)
   4699c:	dc000017 	ldw	r16,0(sp)
   469a0:	dec00304 	addi	sp,sp,12
   469a4:	f800283a 	ret
   469a8:	2800111e 	bne	r5,zero,469f0 <__extendsfdf2+0xc4>
   469ac:	88001c26 	beq	r17,zero,46a20 <__extendsfdf2+0xf4>
   469b0:	8809883a 	mov	r4,r17
   469b4:	0046be40 	call	46be4 <__clzsi2>
   469b8:	00c00284 	movi	r3,10
   469bc:	18801b16 	blt	r3,r2,46a2c <__extendsfdf2+0x100>
   469c0:	018002c4 	movi	r6,11
   469c4:	308dc83a 	sub	r6,r6,r2
   469c8:	11000544 	addi	r4,r2,21
   469cc:	8986d83a 	srl	r3,r17,r6
   469d0:	8922983a 	sll	r17,r17,r4
   469d4:	0180e244 	movi	r6,905
   469d8:	01400434 	movhi	r5,16
   469dc:	3085c83a 	sub	r2,r6,r2
   469e0:	297fffc4 	addi	r5,r5,-1
   469e4:	194c703a 	and	r6,r3,r5
   469e8:	1141ffcc 	andi	r5,r2,2047
   469ec:	003fe006 	br	46970 <__alt_data_end+0xfffdf870>
   469f0:	88000826 	beq	r17,zero,46a14 <__extendsfdf2+0xe8>
   469f4:	880cd0fa 	srli	r6,r17,3
   469f8:	00800434 	movhi	r2,16
   469fc:	10bfffc4 	addi	r2,r2,-1
   46a00:	31800234 	orhi	r6,r6,8
   46a04:	8822977a 	slli	r17,r17,29
   46a08:	308c703a 	and	r6,r6,r2
   46a0c:	0141ffc4 	movi	r5,2047
   46a10:	003fd706 	br	46970 <__alt_data_end+0xfffdf870>
   46a14:	0141ffc4 	movi	r5,2047
   46a18:	000d883a 	mov	r6,zero
   46a1c:	003fd406 	br	46970 <__alt_data_end+0xfffdf870>
   46a20:	000b883a 	mov	r5,zero
   46a24:	000d883a 	mov	r6,zero
   46a28:	003fd106 	br	46970 <__alt_data_end+0xfffdf870>
   46a2c:	11bffd44 	addi	r6,r2,-11
   46a30:	8986983a 	sll	r3,r17,r6
   46a34:	0023883a 	mov	r17,zero
   46a38:	003fe606 	br	469d4 <__alt_data_end+0xfffdf8d4>

00046a3c <__truncdfsf2>:
   46a3c:	2810d53a 	srli	r8,r5,20
   46a40:	01c00434 	movhi	r7,16
   46a44:	39ffffc4 	addi	r7,r7,-1
   46a48:	29ce703a 	and	r7,r5,r7
   46a4c:	4201ffcc 	andi	r8,r8,2047
   46a50:	380e90fa 	slli	r7,r7,3
   46a54:	200cd77a 	srli	r6,r4,29
   46a58:	42400044 	addi	r9,r8,1
   46a5c:	4a41ffcc 	andi	r9,r9,2047
   46a60:	00c00044 	movi	r3,1
   46a64:	280ad7fa 	srli	r5,r5,31
   46a68:	31ceb03a 	or	r7,r6,r7
   46a6c:	200490fa 	slli	r2,r4,3
   46a70:	1a40230e 	bge	r3,r9,46b00 <__truncdfsf2+0xc4>
   46a74:	40ff2004 	addi	r3,r8,-896
   46a78:	01803f84 	movi	r6,254
   46a7c:	30c01516 	blt	r6,r3,46ad4 <__truncdfsf2+0x98>
   46a80:	00c0380e 	bge	zero,r3,46b64 <__truncdfsf2+0x128>
   46a84:	200c91ba 	slli	r6,r4,6
   46a88:	380e90fa 	slli	r7,r7,3
   46a8c:	1004d77a 	srli	r2,r2,29
   46a90:	300cc03a 	cmpne	r6,r6,zero
   46a94:	31ccb03a 	or	r6,r6,r7
   46a98:	308cb03a 	or	r6,r6,r2
   46a9c:	308001cc 	andi	r2,r6,7
   46aa0:	10000426 	beq	r2,zero,46ab4 <__truncdfsf2+0x78>
   46aa4:	308003cc 	andi	r2,r6,15
   46aa8:	01000104 	movi	r4,4
   46aac:	11000126 	beq	r2,r4,46ab4 <__truncdfsf2+0x78>
   46ab0:	31800104 	addi	r6,r6,4
   46ab4:	3081002c 	andhi	r2,r6,1024
   46ab8:	10001626 	beq	r2,zero,46b14 <__truncdfsf2+0xd8>
   46abc:	18c00044 	addi	r3,r3,1
   46ac0:	00803fc4 	movi	r2,255
   46ac4:	18800326 	beq	r3,r2,46ad4 <__truncdfsf2+0x98>
   46ac8:	300c91ba 	slli	r6,r6,6
   46acc:	300cd27a 	srli	r6,r6,9
   46ad0:	00000206 	br	46adc <__truncdfsf2+0xa0>
   46ad4:	00ffffc4 	movi	r3,-1
   46ad8:	000d883a 	mov	r6,zero
   46adc:	18c03fcc 	andi	r3,r3,255
   46ae0:	180895fa 	slli	r4,r3,23
   46ae4:	00c02034 	movhi	r3,128
   46ae8:	280a97fa 	slli	r5,r5,31
   46aec:	18ffffc4 	addi	r3,r3,-1
   46af0:	30c6703a 	and	r3,r6,r3
   46af4:	1906b03a 	or	r3,r3,r4
   46af8:	1944b03a 	or	r2,r3,r5
   46afc:	f800283a 	ret
   46b00:	40000b1e 	bne	r8,zero,46b30 <__truncdfsf2+0xf4>
   46b04:	388cb03a 	or	r6,r7,r2
   46b08:	0007883a 	mov	r3,zero
   46b0c:	30000426 	beq	r6,zero,46b20 <__truncdfsf2+0xe4>
   46b10:	01800144 	movi	r6,5
   46b14:	00803fc4 	movi	r2,255
   46b18:	300cd0fa 	srli	r6,r6,3
   46b1c:	18800a26 	beq	r3,r2,46b48 <__truncdfsf2+0x10c>
   46b20:	00802034 	movhi	r2,128
   46b24:	10bfffc4 	addi	r2,r2,-1
   46b28:	308c703a 	and	r6,r6,r2
   46b2c:	003feb06 	br	46adc <__alt_data_end+0xfffdf9dc>
   46b30:	3888b03a 	or	r4,r7,r2
   46b34:	203fe726 	beq	r4,zero,46ad4 <__alt_data_end+0xfffdf9d4>
   46b38:	380c90fa 	slli	r6,r7,3
   46b3c:	00c03fc4 	movi	r3,255
   46b40:	31808034 	orhi	r6,r6,512
   46b44:	003fd506 	br	46a9c <__alt_data_end+0xfffdf99c>
   46b48:	303fe226 	beq	r6,zero,46ad4 <__alt_data_end+0xfffdf9d4>
   46b4c:	00802034 	movhi	r2,128
   46b50:	31801034 	orhi	r6,r6,64
   46b54:	10bfffc4 	addi	r2,r2,-1
   46b58:	00ffffc4 	movi	r3,-1
   46b5c:	308c703a 	and	r6,r6,r2
   46b60:	003fde06 	br	46adc <__alt_data_end+0xfffdf9dc>
   46b64:	013ffa44 	movi	r4,-23
   46b68:	19000e16 	blt	r3,r4,46ba4 <__truncdfsf2+0x168>
   46b6c:	01000784 	movi	r4,30
   46b70:	20c9c83a 	sub	r4,r4,r3
   46b74:	018007c4 	movi	r6,31
   46b78:	39c02034 	orhi	r7,r7,128
   46b7c:	31000b16 	blt	r6,r4,46bac <__truncdfsf2+0x170>
   46b80:	423f2084 	addi	r8,r8,-894
   46b84:	120c983a 	sll	r6,r2,r8
   46b88:	3a0e983a 	sll	r7,r7,r8
   46b8c:	1104d83a 	srl	r2,r2,r4
   46b90:	300cc03a 	cmpne	r6,r6,zero
   46b94:	31ceb03a 	or	r7,r6,r7
   46b98:	388cb03a 	or	r6,r7,r2
   46b9c:	0007883a 	mov	r3,zero
   46ba0:	003fbe06 	br	46a9c <__alt_data_end+0xfffdf99c>
   46ba4:	0007883a 	mov	r3,zero
   46ba8:	003fd906 	br	46b10 <__alt_data_end+0xfffdfa10>
   46bac:	01bfff84 	movi	r6,-2
   46bb0:	30cdc83a 	sub	r6,r6,r3
   46bb4:	00c00804 	movi	r3,32
   46bb8:	398cd83a 	srl	r6,r7,r6
   46bbc:	20c00726 	beq	r4,r3,46bdc <__truncdfsf2+0x1a0>
   46bc0:	423f2884 	addi	r8,r8,-862
   46bc4:	3a0e983a 	sll	r7,r7,r8
   46bc8:	3884b03a 	or	r2,r7,r2
   46bcc:	1004c03a 	cmpne	r2,r2,zero
   46bd0:	118cb03a 	or	r6,r2,r6
   46bd4:	0007883a 	mov	r3,zero
   46bd8:	003fb006 	br	46a9c <__alt_data_end+0xfffdf99c>
   46bdc:	000f883a 	mov	r7,zero
   46be0:	003ff906 	br	46bc8 <__alt_data_end+0xfffdfac8>

00046be4 <__clzsi2>:
   46be4:	00bfffd4 	movui	r2,65535
   46be8:	11000536 	bltu	r2,r4,46c00 <__clzsi2+0x1c>
   46bec:	00803fc4 	movi	r2,255
   46bf0:	11000f36 	bltu	r2,r4,46c30 <__clzsi2+0x4c>
   46bf4:	00800804 	movi	r2,32
   46bf8:	0007883a 	mov	r3,zero
   46bfc:	00000506 	br	46c14 <__clzsi2+0x30>
   46c00:	00804034 	movhi	r2,256
   46c04:	10bfffc4 	addi	r2,r2,-1
   46c08:	11000c2e 	bgeu	r2,r4,46c3c <__clzsi2+0x58>
   46c0c:	00800204 	movi	r2,8
   46c10:	00c00604 	movi	r3,24
   46c14:	20c8d83a 	srl	r4,r4,r3
   46c18:	00c00174 	movhi	r3,5
   46c1c:	18ee0c04 	addi	r3,r3,-18384
   46c20:	1909883a 	add	r4,r3,r4
   46c24:	20c00003 	ldbu	r3,0(r4)
   46c28:	10c5c83a 	sub	r2,r2,r3
   46c2c:	f800283a 	ret
   46c30:	00800604 	movi	r2,24
   46c34:	00c00204 	movi	r3,8
   46c38:	003ff606 	br	46c14 <__alt_data_end+0xfffdfb14>
   46c3c:	00800404 	movi	r2,16
   46c40:	1007883a 	mov	r3,r2
   46c44:	003ff306 	br	46c14 <__alt_data_end+0xfffdfb14>

00046c48 <__errno>:
   46c48:	00800174 	movhi	r2,5
   46c4c:	10b32e04 	addi	r2,r2,-13128
   46c50:	10800017 	ldw	r2,0(r2)
   46c54:	f800283a 	ret

00046c58 <_printf_r>:
   46c58:	defffd04 	addi	sp,sp,-12
   46c5c:	dfc00015 	stw	ra,0(sp)
   46c60:	d9800115 	stw	r6,4(sp)
   46c64:	d9c00215 	stw	r7,8(sp)
   46c68:	20c00217 	ldw	r3,8(r4)
   46c6c:	01800134 	movhi	r6,4
   46c70:	319cd804 	addi	r6,r6,29536
   46c74:	19800115 	stw	r6,4(r3)
   46c78:	280d883a 	mov	r6,r5
   46c7c:	21400217 	ldw	r5,8(r4)
   46c80:	d9c00104 	addi	r7,sp,4
   46c84:	0046e200 	call	46e20 <___vfprintf_internal_r>
   46c88:	dfc00017 	ldw	ra,0(sp)
   46c8c:	dec00304 	addi	sp,sp,12
   46c90:	f800283a 	ret

00046c94 <printf>:
   46c94:	defffc04 	addi	sp,sp,-16
   46c98:	dfc00015 	stw	ra,0(sp)
   46c9c:	d9400115 	stw	r5,4(sp)
   46ca0:	d9800215 	stw	r6,8(sp)
   46ca4:	d9c00315 	stw	r7,12(sp)
   46ca8:	00800174 	movhi	r2,5
   46cac:	10b32e04 	addi	r2,r2,-13128
   46cb0:	10800017 	ldw	r2,0(r2)
   46cb4:	01400134 	movhi	r5,4
   46cb8:	295cd804 	addi	r5,r5,29536
   46cbc:	10c00217 	ldw	r3,8(r2)
   46cc0:	d9800104 	addi	r6,sp,4
   46cc4:	19400115 	stw	r5,4(r3)
   46cc8:	200b883a 	mov	r5,r4
   46ccc:	11000217 	ldw	r4,8(r2)
   46cd0:	00473440 	call	47344 <__vfprintf_internal>
   46cd4:	dfc00017 	ldw	ra,0(sp)
   46cd8:	dec00404 	addi	sp,sp,16
   46cdc:	f800283a 	ret

00046ce0 <_putchar_r>:
   46ce0:	21800217 	ldw	r6,8(r4)
   46ce4:	004746c1 	jmpi	4746c <_putc_r>

00046ce8 <putchar>:
   46ce8:	00800174 	movhi	r2,5
   46cec:	10b32e04 	addi	r2,r2,-13128
   46cf0:	10800017 	ldw	r2,0(r2)
   46cf4:	200b883a 	mov	r5,r4
   46cf8:	11800217 	ldw	r6,8(r2)
   46cfc:	1009883a 	mov	r4,r2
   46d00:	004746c1 	jmpi	4746c <_putc_r>

00046d04 <_puts_r>:
   46d04:	defffd04 	addi	sp,sp,-12
   46d08:	dc000015 	stw	r16,0(sp)
   46d0c:	2021883a 	mov	r16,r4
   46d10:	2809883a 	mov	r4,r5
   46d14:	dfc00215 	stw	ra,8(sp)
   46d18:	dc400115 	stw	r17,4(sp)
   46d1c:	2823883a 	mov	r17,r5
   46d20:	0046d980 	call	46d98 <strlen>
   46d24:	81400217 	ldw	r5,8(r16)
   46d28:	01000134 	movhi	r4,4
   46d2c:	211cd804 	addi	r4,r4,29536
   46d30:	29000115 	stw	r4,4(r5)
   46d34:	100f883a 	mov	r7,r2
   46d38:	880d883a 	mov	r6,r17
   46d3c:	8009883a 	mov	r4,r16
   46d40:	00473600 	call	47360 <__sfvwrite_small_dev>
   46d44:	00ffffc4 	movi	r3,-1
   46d48:	10c00926 	beq	r2,r3,46d70 <_puts_r+0x6c>
   46d4c:	81400217 	ldw	r5,8(r16)
   46d50:	01800174 	movhi	r6,5
   46d54:	01c00044 	movi	r7,1
   46d58:	28800117 	ldw	r2,4(r5)
   46d5c:	31ae4c04 	addi	r6,r6,-18128
   46d60:	8009883a 	mov	r4,r16
   46d64:	103ee83a 	callr	r2
   46d68:	10bfffe0 	cmpeqi	r2,r2,-1
   46d6c:	0085c83a 	sub	r2,zero,r2
   46d70:	dfc00217 	ldw	ra,8(sp)
   46d74:	dc400117 	ldw	r17,4(sp)
   46d78:	dc000017 	ldw	r16,0(sp)
   46d7c:	dec00304 	addi	sp,sp,12
   46d80:	f800283a 	ret

00046d84 <puts>:
   46d84:	00800174 	movhi	r2,5
   46d88:	10b32e04 	addi	r2,r2,-13128
   46d8c:	200b883a 	mov	r5,r4
   46d90:	11000017 	ldw	r4,0(r2)
   46d94:	0046d041 	jmpi	46d04 <_puts_r>

00046d98 <strlen>:
   46d98:	2005883a 	mov	r2,r4
   46d9c:	10c00007 	ldb	r3,0(r2)
   46da0:	18000226 	beq	r3,zero,46dac <strlen+0x14>
   46da4:	10800044 	addi	r2,r2,1
   46da8:	003ffc06 	br	46d9c <__alt_data_end+0xfffdfc9c>
   46dac:	1105c83a 	sub	r2,r2,r4
   46db0:	f800283a 	ret

00046db4 <print_repeat>:
   46db4:	defffb04 	addi	sp,sp,-20
   46db8:	dc800315 	stw	r18,12(sp)
   46dbc:	dc400215 	stw	r17,8(sp)
   46dc0:	dc000115 	stw	r16,4(sp)
   46dc4:	dfc00415 	stw	ra,16(sp)
   46dc8:	2025883a 	mov	r18,r4
   46dcc:	2823883a 	mov	r17,r5
   46dd0:	d9800005 	stb	r6,0(sp)
   46dd4:	3821883a 	mov	r16,r7
   46dd8:	04000a0e 	bge	zero,r16,46e04 <print_repeat+0x50>
   46ddc:	88800117 	ldw	r2,4(r17)
   46de0:	01c00044 	movi	r7,1
   46de4:	d80d883a 	mov	r6,sp
   46de8:	880b883a 	mov	r5,r17
   46dec:	9009883a 	mov	r4,r18
   46df0:	103ee83a 	callr	r2
   46df4:	843fffc4 	addi	r16,r16,-1
   46df8:	103ff726 	beq	r2,zero,46dd8 <__alt_data_end+0xfffdfcd8>
   46dfc:	00bfffc4 	movi	r2,-1
   46e00:	00000106 	br	46e08 <print_repeat+0x54>
   46e04:	0005883a 	mov	r2,zero
   46e08:	dfc00417 	ldw	ra,16(sp)
   46e0c:	dc800317 	ldw	r18,12(sp)
   46e10:	dc400217 	ldw	r17,8(sp)
   46e14:	dc000117 	ldw	r16,4(sp)
   46e18:	dec00504 	addi	sp,sp,20
   46e1c:	f800283a 	ret

00046e20 <___vfprintf_internal_r>:
   46e20:	deffe504 	addi	sp,sp,-108
   46e24:	d8c00804 	addi	r3,sp,32
   46e28:	df001915 	stw	fp,100(sp)
   46e2c:	ddc01815 	stw	r23,96(sp)
   46e30:	dd801715 	stw	r22,92(sp)
   46e34:	dd401615 	stw	r21,88(sp)
   46e38:	dd001515 	stw	r20,84(sp)
   46e3c:	dcc01415 	stw	r19,80(sp)
   46e40:	dc801315 	stw	r18,76(sp)
   46e44:	dc401215 	stw	r17,72(sp)
   46e48:	dc001115 	stw	r16,68(sp)
   46e4c:	dfc01a15 	stw	ra,104(sp)
   46e50:	2027883a 	mov	r19,r4
   46e54:	2839883a 	mov	fp,r5
   46e58:	382d883a 	mov	r22,r7
   46e5c:	d9800f15 	stw	r6,60(sp)
   46e60:	0021883a 	mov	r16,zero
   46e64:	d8000e15 	stw	zero,56(sp)
   46e68:	002f883a 	mov	r23,zero
   46e6c:	002b883a 	mov	r21,zero
   46e70:	0025883a 	mov	r18,zero
   46e74:	0023883a 	mov	r17,zero
   46e78:	d8000c15 	stw	zero,48(sp)
   46e7c:	d8000b15 	stw	zero,44(sp)
   46e80:	0029883a 	mov	r20,zero
   46e84:	d8c00915 	stw	r3,36(sp)
   46e88:	d8c00f17 	ldw	r3,60(sp)
   46e8c:	19000003 	ldbu	r4,0(r3)
   46e90:	20803fcc 	andi	r2,r4,255
   46e94:	1080201c 	xori	r2,r2,128
   46e98:	10bfe004 	addi	r2,r2,-128
   46e9c:	10011c26 	beq	r2,zero,47310 <___vfprintf_internal_r+0x4f0>
   46ea0:	00c00044 	movi	r3,1
   46ea4:	a0c01426 	beq	r20,r3,46ef8 <___vfprintf_internal_r+0xd8>
   46ea8:	1d000216 	blt	r3,r20,46eb4 <___vfprintf_internal_r+0x94>
   46eac:	a0000626 	beq	r20,zero,46ec8 <___vfprintf_internal_r+0xa8>
   46eb0:	00011306 	br	47300 <___vfprintf_internal_r+0x4e0>
   46eb4:	01400084 	movi	r5,2
   46eb8:	a1401d26 	beq	r20,r5,46f30 <___vfprintf_internal_r+0x110>
   46ebc:	014000c4 	movi	r5,3
   46ec0:	a1402926 	beq	r20,r5,46f68 <___vfprintf_internal_r+0x148>
   46ec4:	00010e06 	br	47300 <___vfprintf_internal_r+0x4e0>
   46ec8:	01400944 	movi	r5,37
   46ecc:	1140fb26 	beq	r2,r5,472bc <___vfprintf_internal_r+0x49c>
   46ed0:	e0800117 	ldw	r2,4(fp)
   46ed4:	d9000005 	stb	r4,0(sp)
   46ed8:	01c00044 	movi	r7,1
   46edc:	d80d883a 	mov	r6,sp
   46ee0:	e00b883a 	mov	r5,fp
   46ee4:	9809883a 	mov	r4,r19
   46ee8:	103ee83a 	callr	r2
   46eec:	1000d61e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   46ef0:	84000044 	addi	r16,r16,1
   46ef4:	00010206 	br	47300 <___vfprintf_internal_r+0x4e0>
   46ef8:	01400c04 	movi	r5,48
   46efc:	1140f826 	beq	r2,r5,472e0 <___vfprintf_internal_r+0x4c0>
   46f00:	01400944 	movi	r5,37
   46f04:	11400a1e 	bne	r2,r5,46f30 <___vfprintf_internal_r+0x110>
   46f08:	d8800005 	stb	r2,0(sp)
   46f0c:	e0800117 	ldw	r2,4(fp)
   46f10:	a00f883a 	mov	r7,r20
   46f14:	d80d883a 	mov	r6,sp
   46f18:	e00b883a 	mov	r5,fp
   46f1c:	9809883a 	mov	r4,r19
   46f20:	103ee83a 	callr	r2
   46f24:	1000c81e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   46f28:	84000044 	addi	r16,r16,1
   46f2c:	0000f306 	br	472fc <___vfprintf_internal_r+0x4dc>
   46f30:	217ff404 	addi	r5,r4,-48
   46f34:	29403fcc 	andi	r5,r5,255
   46f38:	00c00244 	movi	r3,9
   46f3c:	19400736 	bltu	r3,r5,46f5c <___vfprintf_internal_r+0x13c>
   46f40:	00bfffc4 	movi	r2,-1
   46f44:	88800226 	beq	r17,r2,46f50 <___vfprintf_internal_r+0x130>
   46f48:	8c4002a4 	muli	r17,r17,10
   46f4c:	00000106 	br	46f54 <___vfprintf_internal_r+0x134>
   46f50:	0023883a 	mov	r17,zero
   46f54:	2c63883a 	add	r17,r5,r17
   46f58:	0000e206 	br	472e4 <___vfprintf_internal_r+0x4c4>
   46f5c:	01400b84 	movi	r5,46
   46f60:	1140e426 	beq	r2,r5,472f4 <___vfprintf_internal_r+0x4d4>
   46f64:	05000084 	movi	r20,2
   46f68:	213ff404 	addi	r4,r4,-48
   46f6c:	21003fcc 	andi	r4,r4,255
   46f70:	00c00244 	movi	r3,9
   46f74:	19000736 	bltu	r3,r4,46f94 <___vfprintf_internal_r+0x174>
   46f78:	00bfffc4 	movi	r2,-1
   46f7c:	90800226 	beq	r18,r2,46f88 <___vfprintf_internal_r+0x168>
   46f80:	948002a4 	muli	r18,r18,10
   46f84:	00000106 	br	46f8c <___vfprintf_internal_r+0x16c>
   46f88:	0025883a 	mov	r18,zero
   46f8c:	24a5883a 	add	r18,r4,r18
   46f90:	0000db06 	br	47300 <___vfprintf_internal_r+0x4e0>
   46f94:	00c01b04 	movi	r3,108
   46f98:	10c0d426 	beq	r2,r3,472ec <___vfprintf_internal_r+0x4cc>
   46f9c:	013fffc4 	movi	r4,-1
   46fa0:	91000226 	beq	r18,r4,46fac <___vfprintf_internal_r+0x18c>
   46fa4:	d8000b15 	stw	zero,44(sp)
   46fa8:	00000106 	br	46fb0 <___vfprintf_internal_r+0x190>
   46fac:	04800044 	movi	r18,1
   46fb0:	01001a44 	movi	r4,105
   46fb4:	11001626 	beq	r2,r4,47010 <___vfprintf_internal_r+0x1f0>
   46fb8:	20800916 	blt	r4,r2,46fe0 <___vfprintf_internal_r+0x1c0>
   46fbc:	010018c4 	movi	r4,99
   46fc0:	11008a26 	beq	r2,r4,471ec <___vfprintf_internal_r+0x3cc>
   46fc4:	01001904 	movi	r4,100
   46fc8:	11001126 	beq	r2,r4,47010 <___vfprintf_internal_r+0x1f0>
   46fcc:	01001604 	movi	r4,88
   46fd0:	1100ca1e 	bne	r2,r4,472fc <___vfprintf_internal_r+0x4dc>
   46fd4:	00c00044 	movi	r3,1
   46fd8:	d8c00e15 	stw	r3,56(sp)
   46fdc:	00001406 	br	47030 <___vfprintf_internal_r+0x210>
   46fe0:	01001cc4 	movi	r4,115
   46fe4:	11009a26 	beq	r2,r4,47250 <___vfprintf_internal_r+0x430>
   46fe8:	20800416 	blt	r4,r2,46ffc <___vfprintf_internal_r+0x1dc>
   46fec:	01001bc4 	movi	r4,111
   46ff0:	1100c21e 	bne	r2,r4,472fc <___vfprintf_internal_r+0x4dc>
   46ff4:	05400204 	movi	r21,8
   46ff8:	00000e06 	br	47034 <___vfprintf_internal_r+0x214>
   46ffc:	01001d44 	movi	r4,117
   47000:	11000c26 	beq	r2,r4,47034 <___vfprintf_internal_r+0x214>
   47004:	01001e04 	movi	r4,120
   47008:	11000926 	beq	r2,r4,47030 <___vfprintf_internal_r+0x210>
   4700c:	0000bb06 	br	472fc <___vfprintf_internal_r+0x4dc>
   47010:	b5000104 	addi	r20,r22,4
   47014:	b8000726 	beq	r23,zero,47034 <___vfprintf_internal_r+0x214>
   47018:	dd000d15 	stw	r20,52(sp)
   4701c:	b5800017 	ldw	r22,0(r22)
   47020:	b000080e 	bge	r22,zero,47044 <___vfprintf_internal_r+0x224>
   47024:	05adc83a 	sub	r22,zero,r22
   47028:	02800044 	movi	r10,1
   4702c:	00000606 	br	47048 <___vfprintf_internal_r+0x228>
   47030:	05400404 	movi	r21,16
   47034:	b0c00104 	addi	r3,r22,4
   47038:	d8c00d15 	stw	r3,52(sp)
   4703c:	b5800017 	ldw	r22,0(r22)
   47040:	002f883a 	mov	r23,zero
   47044:	0015883a 	mov	r10,zero
   47048:	d829883a 	mov	r20,sp
   4704c:	b0001426 	beq	r22,zero,470a0 <___vfprintf_internal_r+0x280>
   47050:	b009883a 	mov	r4,r22
   47054:	a80b883a 	mov	r5,r21
   47058:	da801015 	stw	r10,64(sp)
   4705c:	0042f080 	call	42f08 <__udivsi3>
   47060:	1549383a 	mul	r4,r2,r21
   47064:	00c00244 	movi	r3,9
   47068:	da801017 	ldw	r10,64(sp)
   4706c:	b12dc83a 	sub	r22,r22,r4
   47070:	1d800216 	blt	r3,r22,4707c <___vfprintf_internal_r+0x25c>
   47074:	b5800c04 	addi	r22,r22,48
   47078:	00000506 	br	47090 <___vfprintf_internal_r+0x270>
   4707c:	d8c00e17 	ldw	r3,56(sp)
   47080:	18000226 	beq	r3,zero,4708c <___vfprintf_internal_r+0x26c>
   47084:	b5800dc4 	addi	r22,r22,55
   47088:	00000106 	br	47090 <___vfprintf_internal_r+0x270>
   4708c:	b58015c4 	addi	r22,r22,87
   47090:	a5800005 	stb	r22,0(r20)
   47094:	a5000044 	addi	r20,r20,1
   47098:	102d883a 	mov	r22,r2
   4709c:	003feb06 	br	4704c <__alt_data_end+0xfffdff4c>
   470a0:	a6c7c83a 	sub	r3,r20,sp
   470a4:	d8c00a15 	stw	r3,40(sp)
   470a8:	90c5c83a 	sub	r2,r18,r3
   470ac:	00800a0e 	bge	zero,r2,470d8 <___vfprintf_internal_r+0x2b8>
   470b0:	a085883a 	add	r2,r20,r2
   470b4:	01400c04 	movi	r5,48
   470b8:	d8c00917 	ldw	r3,36(sp)
   470bc:	a009883a 	mov	r4,r20
   470c0:	a0c0032e 	bgeu	r20,r3,470d0 <___vfprintf_internal_r+0x2b0>
   470c4:	a5000044 	addi	r20,r20,1
   470c8:	21400005 	stb	r5,0(r4)
   470cc:	a0bffa1e 	bne	r20,r2,470b8 <__alt_data_end+0xfffdffb8>
   470d0:	a6c7c83a 	sub	r3,r20,sp
   470d4:	d8c00a15 	stw	r3,40(sp)
   470d8:	d8c00a17 	ldw	r3,40(sp)
   470dc:	50d3883a 	add	r9,r10,r3
   470e0:	d8c00b17 	ldw	r3,44(sp)
   470e4:	8a6dc83a 	sub	r22,r17,r9
   470e8:	18001726 	beq	r3,zero,47148 <___vfprintf_internal_r+0x328>
   470ec:	50000a26 	beq	r10,zero,47118 <___vfprintf_internal_r+0x2f8>
   470f0:	00800b44 	movi	r2,45
   470f4:	d8800805 	stb	r2,32(sp)
   470f8:	e0800117 	ldw	r2,4(fp)
   470fc:	01c00044 	movi	r7,1
   47100:	d9800804 	addi	r6,sp,32
   47104:	e00b883a 	mov	r5,fp
   47108:	9809883a 	mov	r4,r19
   4710c:	103ee83a 	callr	r2
   47110:	10004d1e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   47114:	84000044 	addi	r16,r16,1
   47118:	0580070e 	bge	zero,r22,47138 <___vfprintf_internal_r+0x318>
   4711c:	b00f883a 	mov	r7,r22
   47120:	01800c04 	movi	r6,48
   47124:	e00b883a 	mov	r5,fp
   47128:	9809883a 	mov	r4,r19
   4712c:	0046db40 	call	46db4 <print_repeat>
   47130:	1000451e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   47134:	85a1883a 	add	r16,r16,r22
   47138:	d8c00a17 	ldw	r3,40(sp)
   4713c:	a013883a 	mov	r9,r20
   47140:	1d2dc83a 	sub	r22,r3,r20
   47144:	00002206 	br	471d0 <___vfprintf_internal_r+0x3b0>
   47148:	0580090e 	bge	zero,r22,47170 <___vfprintf_internal_r+0x350>
   4714c:	b00f883a 	mov	r7,r22
   47150:	01800804 	movi	r6,32
   47154:	e00b883a 	mov	r5,fp
   47158:	9809883a 	mov	r4,r19
   4715c:	da801015 	stw	r10,64(sp)
   47160:	0046db40 	call	46db4 <print_repeat>
   47164:	da801017 	ldw	r10,64(sp)
   47168:	1000371e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   4716c:	85a1883a 	add	r16,r16,r22
   47170:	503ff126 	beq	r10,zero,47138 <__alt_data_end+0xfffe0038>
   47174:	00800b44 	movi	r2,45
   47178:	d8800805 	stb	r2,32(sp)
   4717c:	e0800117 	ldw	r2,4(fp)
   47180:	01c00044 	movi	r7,1
   47184:	d9800804 	addi	r6,sp,32
   47188:	e00b883a 	mov	r5,fp
   4718c:	9809883a 	mov	r4,r19
   47190:	103ee83a 	callr	r2
   47194:	10002c1e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   47198:	84000044 	addi	r16,r16,1
   4719c:	003fe606 	br	47138 <__alt_data_end+0xfffe0038>
   471a0:	4a7fffc4 	addi	r9,r9,-1
   471a4:	48800003 	ldbu	r2,0(r9)
   471a8:	01c00044 	movi	r7,1
   471ac:	d9800804 	addi	r6,sp,32
   471b0:	d8800805 	stb	r2,32(sp)
   471b4:	e0800117 	ldw	r2,4(fp)
   471b8:	e00b883a 	mov	r5,fp
   471bc:	da401015 	stw	r9,64(sp)
   471c0:	9809883a 	mov	r4,r19
   471c4:	103ee83a 	callr	r2
   471c8:	da401017 	ldw	r9,64(sp)
   471cc:	10001e1e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   471d0:	8245c83a 	sub	r2,r16,r9
   471d4:	4d89883a 	add	r4,r9,r22
   471d8:	a085883a 	add	r2,r20,r2
   471dc:	013ff016 	blt	zero,r4,471a0 <__alt_data_end+0xfffe00a0>
   471e0:	1021883a 	mov	r16,r2
   471e4:	dd800d17 	ldw	r22,52(sp)
   471e8:	00004406 	br	472fc <___vfprintf_internal_r+0x4dc>
   471ec:	00800044 	movi	r2,1
   471f0:	1440080e 	bge	r2,r17,47214 <___vfprintf_internal_r+0x3f4>
   471f4:	8d3fffc4 	addi	r20,r17,-1
   471f8:	a00f883a 	mov	r7,r20
   471fc:	01800804 	movi	r6,32
   47200:	e00b883a 	mov	r5,fp
   47204:	9809883a 	mov	r4,r19
   47208:	0046db40 	call	46db4 <print_repeat>
   4720c:	10000e1e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   47210:	8521883a 	add	r16,r16,r20
   47214:	b0800017 	ldw	r2,0(r22)
   47218:	01c00044 	movi	r7,1
   4721c:	d80d883a 	mov	r6,sp
   47220:	d8800005 	stb	r2,0(sp)
   47224:	e0800117 	ldw	r2,4(fp)
   47228:	e00b883a 	mov	r5,fp
   4722c:	9809883a 	mov	r4,r19
   47230:	b5000104 	addi	r20,r22,4
   47234:	103ee83a 	callr	r2
   47238:	1000031e 	bne	r2,zero,47248 <___vfprintf_internal_r+0x428>
   4723c:	84000044 	addi	r16,r16,1
   47240:	a02d883a 	mov	r22,r20
   47244:	00002d06 	br	472fc <___vfprintf_internal_r+0x4dc>
   47248:	00bfffc4 	movi	r2,-1
   4724c:	00003106 	br	47314 <___vfprintf_internal_r+0x4f4>
   47250:	b5000017 	ldw	r20,0(r22)
   47254:	b0c00104 	addi	r3,r22,4
   47258:	d8c00a15 	stw	r3,40(sp)
   4725c:	a009883a 	mov	r4,r20
   47260:	0046d980 	call	46d98 <strlen>
   47264:	8893c83a 	sub	r9,r17,r2
   47268:	102d883a 	mov	r22,r2
   4726c:	0240090e 	bge	zero,r9,47294 <___vfprintf_internal_r+0x474>
   47270:	480f883a 	mov	r7,r9
   47274:	01800804 	movi	r6,32
   47278:	e00b883a 	mov	r5,fp
   4727c:	9809883a 	mov	r4,r19
   47280:	da401015 	stw	r9,64(sp)
   47284:	0046db40 	call	46db4 <print_repeat>
   47288:	da401017 	ldw	r9,64(sp)
   4728c:	103fee1e 	bne	r2,zero,47248 <__alt_data_end+0xfffe0148>
   47290:	8261883a 	add	r16,r16,r9
   47294:	e0800117 	ldw	r2,4(fp)
   47298:	b00f883a 	mov	r7,r22
   4729c:	a00d883a 	mov	r6,r20
   472a0:	e00b883a 	mov	r5,fp
   472a4:	9809883a 	mov	r4,r19
   472a8:	103ee83a 	callr	r2
   472ac:	103fe61e 	bne	r2,zero,47248 <__alt_data_end+0xfffe0148>
   472b0:	85a1883a 	add	r16,r16,r22
   472b4:	dd800a17 	ldw	r22,40(sp)
   472b8:	00001006 	br	472fc <___vfprintf_internal_r+0x4dc>
   472bc:	05c00044 	movi	r23,1
   472c0:	04bfffc4 	movi	r18,-1
   472c4:	d8000e15 	stw	zero,56(sp)
   472c8:	05400284 	movi	r21,10
   472cc:	9023883a 	mov	r17,r18
   472d0:	d8000c15 	stw	zero,48(sp)
   472d4:	d8000b15 	stw	zero,44(sp)
   472d8:	b829883a 	mov	r20,r23
   472dc:	00000806 	br	47300 <___vfprintf_internal_r+0x4e0>
   472e0:	dd000b15 	stw	r20,44(sp)
   472e4:	05000084 	movi	r20,2
   472e8:	00000506 	br	47300 <___vfprintf_internal_r+0x4e0>
   472ec:	00c00044 	movi	r3,1
   472f0:	d8c00c15 	stw	r3,48(sp)
   472f4:	050000c4 	movi	r20,3
   472f8:	00000106 	br	47300 <___vfprintf_internal_r+0x4e0>
   472fc:	0029883a 	mov	r20,zero
   47300:	d8c00f17 	ldw	r3,60(sp)
   47304:	18c00044 	addi	r3,r3,1
   47308:	d8c00f15 	stw	r3,60(sp)
   4730c:	003ede06 	br	46e88 <__alt_data_end+0xfffdfd88>
   47310:	8005883a 	mov	r2,r16
   47314:	dfc01a17 	ldw	ra,104(sp)
   47318:	df001917 	ldw	fp,100(sp)
   4731c:	ddc01817 	ldw	r23,96(sp)
   47320:	dd801717 	ldw	r22,92(sp)
   47324:	dd401617 	ldw	r21,88(sp)
   47328:	dd001517 	ldw	r20,84(sp)
   4732c:	dcc01417 	ldw	r19,80(sp)
   47330:	dc801317 	ldw	r18,76(sp)
   47334:	dc401217 	ldw	r17,72(sp)
   47338:	dc001117 	ldw	r16,68(sp)
   4733c:	dec01b04 	addi	sp,sp,108
   47340:	f800283a 	ret

00047344 <__vfprintf_internal>:
   47344:	00800174 	movhi	r2,5
   47348:	10b32e04 	addi	r2,r2,-13128
   4734c:	300f883a 	mov	r7,r6
   47350:	280d883a 	mov	r6,r5
   47354:	200b883a 	mov	r5,r4
   47358:	11000017 	ldw	r4,0(r2)
   4735c:	0046e201 	jmpi	46e20 <___vfprintf_internal_r>

00047360 <__sfvwrite_small_dev>:
   47360:	2880000b 	ldhu	r2,0(r5)
   47364:	1080020c 	andi	r2,r2,8
   47368:	10002126 	beq	r2,zero,473f0 <__sfvwrite_small_dev+0x90>
   4736c:	2880008f 	ldh	r2,2(r5)
   47370:	defffa04 	addi	sp,sp,-24
   47374:	dc000015 	stw	r16,0(sp)
   47378:	dfc00515 	stw	ra,20(sp)
   4737c:	dd000415 	stw	r20,16(sp)
   47380:	dcc00315 	stw	r19,12(sp)
   47384:	dc800215 	stw	r18,8(sp)
   47388:	dc400115 	stw	r17,4(sp)
   4738c:	2821883a 	mov	r16,r5
   47390:	10001216 	blt	r2,zero,473dc <__sfvwrite_small_dev+0x7c>
   47394:	2027883a 	mov	r19,r4
   47398:	3025883a 	mov	r18,r6
   4739c:	3823883a 	mov	r17,r7
   473a0:	05010004 	movi	r20,1024
   473a4:	04400b0e 	bge	zero,r17,473d4 <__sfvwrite_small_dev+0x74>
   473a8:	880f883a 	mov	r7,r17
   473ac:	a440010e 	bge	r20,r17,473b4 <__sfvwrite_small_dev+0x54>
   473b0:	01c10004 	movi	r7,1024
   473b4:	8140008f 	ldh	r5,2(r16)
   473b8:	900d883a 	mov	r6,r18
   473bc:	9809883a 	mov	r4,r19
   473c0:	00474c40 	call	474c4 <_write_r>
   473c4:	0080050e 	bge	zero,r2,473dc <__sfvwrite_small_dev+0x7c>
   473c8:	88a3c83a 	sub	r17,r17,r2
   473cc:	90a5883a 	add	r18,r18,r2
   473d0:	003ff406 	br	473a4 <__alt_data_end+0xfffe02a4>
   473d4:	0005883a 	mov	r2,zero
   473d8:	00000706 	br	473f8 <__sfvwrite_small_dev+0x98>
   473dc:	8080000b 	ldhu	r2,0(r16)
   473e0:	10801014 	ori	r2,r2,64
   473e4:	8080000d 	sth	r2,0(r16)
   473e8:	00bfffc4 	movi	r2,-1
   473ec:	00000206 	br	473f8 <__sfvwrite_small_dev+0x98>
   473f0:	00bfffc4 	movi	r2,-1
   473f4:	f800283a 	ret
   473f8:	dfc00517 	ldw	ra,20(sp)
   473fc:	dd000417 	ldw	r20,16(sp)
   47400:	dcc00317 	ldw	r19,12(sp)
   47404:	dc800217 	ldw	r18,8(sp)
   47408:	dc400117 	ldw	r17,4(sp)
   4740c:	dc000017 	ldw	r16,0(sp)
   47410:	dec00604 	addi	sp,sp,24
   47414:	f800283a 	ret

00047418 <putc>:
   47418:	defffd04 	addi	sp,sp,-12
   4741c:	00800134 	movhi	r2,4
   47420:	dc000115 	stw	r16,4(sp)
   47424:	dfc00215 	stw	ra,8(sp)
   47428:	109cd804 	addi	r2,r2,29536
   4742c:	28800115 	stw	r2,4(r5)
   47430:	00800174 	movhi	r2,5
   47434:	10b32e04 	addi	r2,r2,-13128
   47438:	d9000005 	stb	r4,0(sp)
   4743c:	2021883a 	mov	r16,r4
   47440:	11000017 	ldw	r4,0(r2)
   47444:	01c00044 	movi	r7,1
   47448:	d80d883a 	mov	r6,sp
   4744c:	00473600 	call	47360 <__sfvwrite_small_dev>
   47450:	00ffffc4 	movi	r3,-1
   47454:	10c00126 	beq	r2,r3,4745c <putc+0x44>
   47458:	8005883a 	mov	r2,r16
   4745c:	dfc00217 	ldw	ra,8(sp)
   47460:	dc000117 	ldw	r16,4(sp)
   47464:	dec00304 	addi	sp,sp,12
   47468:	f800283a 	ret

0004746c <_putc_r>:
   4746c:	defffd04 	addi	sp,sp,-12
   47470:	00800134 	movhi	r2,4
   47474:	dc000115 	stw	r16,4(sp)
   47478:	dfc00215 	stw	ra,8(sp)
   4747c:	109cd804 	addi	r2,r2,29536
   47480:	30800115 	stw	r2,4(r6)
   47484:	00800174 	movhi	r2,5
   47488:	10b32e04 	addi	r2,r2,-13128
   4748c:	11000017 	ldw	r4,0(r2)
   47490:	2821883a 	mov	r16,r5
   47494:	01c00044 	movi	r7,1
   47498:	300b883a 	mov	r5,r6
   4749c:	d80d883a 	mov	r6,sp
   474a0:	dc000005 	stb	r16,0(sp)
   474a4:	00473600 	call	47360 <__sfvwrite_small_dev>
   474a8:	00ffffc4 	movi	r3,-1
   474ac:	10c00126 	beq	r2,r3,474b4 <_putc_r+0x48>
   474b0:	8005883a 	mov	r2,r16
   474b4:	dfc00217 	ldw	ra,8(sp)
   474b8:	dc000117 	ldw	r16,4(sp)
   474bc:	dec00304 	addi	sp,sp,12
   474c0:	f800283a 	ret

000474c4 <_write_r>:
   474c4:	defffd04 	addi	sp,sp,-12
   474c8:	dc000015 	stw	r16,0(sp)
   474cc:	04000174 	movhi	r16,5
   474d0:	dc400115 	stw	r17,4(sp)
   474d4:	84381004 	addi	r16,r16,-8128
   474d8:	2023883a 	mov	r17,r4
   474dc:	2809883a 	mov	r4,r5
   474e0:	300b883a 	mov	r5,r6
   474e4:	380d883a 	mov	r6,r7
   474e8:	dfc00215 	stw	ra,8(sp)
   474ec:	80000015 	stw	zero,0(r16)
   474f0:	00476c00 	call	476c0 <write>
   474f4:	00ffffc4 	movi	r3,-1
   474f8:	10c0031e 	bne	r2,r3,47508 <_write_r+0x44>
   474fc:	80c00017 	ldw	r3,0(r16)
   47500:	18000126 	beq	r3,zero,47508 <_write_r+0x44>
   47504:	88c00015 	stw	r3,0(r17)
   47508:	dfc00217 	ldw	ra,8(sp)
   4750c:	dc400117 	ldw	r17,4(sp)
   47510:	dc000017 	ldw	r16,0(sp)
   47514:	dec00304 	addi	sp,sp,12
   47518:	f800283a 	ret

0004751c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4751c:	defffc04 	addi	sp,sp,-16
   47520:	df000315 	stw	fp,12(sp)
   47524:	df000304 	addi	fp,sp,12
   47528:	e13ffd15 	stw	r4,-12(fp)
   4752c:	e17ffe15 	stw	r5,-8(fp)
   47530:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   47534:	e0fffe17 	ldw	r3,-8(fp)
   47538:	e0bffd17 	ldw	r2,-12(fp)
   4753c:	18800c26 	beq	r3,r2,47570 <alt_load_section+0x54>
  {
    while( to != end )
   47540:	00000806 	br	47564 <alt_load_section+0x48>
    {
      *to++ = *from++;
   47544:	e0bffe17 	ldw	r2,-8(fp)
   47548:	10c00104 	addi	r3,r2,4
   4754c:	e0fffe15 	stw	r3,-8(fp)
   47550:	e0fffd17 	ldw	r3,-12(fp)
   47554:	19000104 	addi	r4,r3,4
   47558:	e13ffd15 	stw	r4,-12(fp)
   4755c:	18c00017 	ldw	r3,0(r3)
   47560:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   47564:	e0fffe17 	ldw	r3,-8(fp)
   47568:	e0bfff17 	ldw	r2,-4(fp)
   4756c:	18bff51e 	bne	r3,r2,47544 <__alt_data_end+0xfffe0444>
    {
      *to++ = *from++;
    }
  }
}
   47570:	0001883a 	nop
   47574:	e037883a 	mov	sp,fp
   47578:	df000017 	ldw	fp,0(sp)
   4757c:	dec00104 	addi	sp,sp,4
   47580:	f800283a 	ret

00047584 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   47584:	defffe04 	addi	sp,sp,-8
   47588:	dfc00115 	stw	ra,4(sp)
   4758c:	df000015 	stw	fp,0(sp)
   47590:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   47594:	01800174 	movhi	r6,5
   47598:	31b33a04 	addi	r6,r6,-13080
   4759c:	01400174 	movhi	r5,5
   475a0:	296e6404 	addi	r5,r5,-18032
   475a4:	01000174 	movhi	r4,5
   475a8:	21333a04 	addi	r4,r4,-13080
   475ac:	004751c0 	call	4751c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   475b0:	01800134 	movhi	r6,4
   475b4:	31809104 	addi	r6,r6,580
   475b8:	01400134 	movhi	r5,4
   475bc:	29400804 	addi	r5,r5,32
   475c0:	01000134 	movhi	r4,4
   475c4:	21000804 	addi	r4,r4,32
   475c8:	004751c0 	call	4751c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   475cc:	01800174 	movhi	r6,5
   475d0:	31ae6404 	addi	r6,r6,-18032
   475d4:	01400174 	movhi	r5,5
   475d8:	296de804 	addi	r5,r5,-18528
   475dc:	01000174 	movhi	r4,5
   475e0:	212de804 	addi	r4,r4,-18528
   475e4:	004751c0 	call	4751c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   475e8:	004a3800 	call	4a380 <alt_dcache_flush_all>
  alt_icache_flush_all();
   475ec:	004a6240 	call	4a624 <alt_icache_flush_all>
}
   475f0:	0001883a 	nop
   475f4:	e037883a 	mov	sp,fp
   475f8:	dfc00117 	ldw	ra,4(sp)
   475fc:	df000017 	ldw	fp,0(sp)
   47600:	dec00204 	addi	sp,sp,8
   47604:	f800283a 	ret

00047608 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   47608:	defffd04 	addi	sp,sp,-12
   4760c:	dfc00215 	stw	ra,8(sp)
   47610:	df000115 	stw	fp,4(sp)
   47614:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   47618:	0009883a 	mov	r4,zero
   4761c:	00477ec0 	call	477ec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   47620:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   47624:	00478240 	call	47824 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   47628:	01800174 	movhi	r6,5
   4762c:	31ae4d04 	addi	r6,r6,-18124
   47630:	01400174 	movhi	r5,5
   47634:	296e4d04 	addi	r5,r5,-18124
   47638:	01000174 	movhi	r4,5
   4763c:	212e4d04 	addi	r4,r4,-18124
   47640:	004a9bc0 	call	4a9bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   47644:	004a4d40 	call	4a4d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   47648:	01000174 	movhi	r4,5
   4764c:	21294d04 	addi	r4,r4,-23244
   47650:	004b3f80 	call	4b3f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   47654:	d0a4e517 	ldw	r2,-27756(gp)
   47658:	d0e4e617 	ldw	r3,-27752(gp)
   4765c:	d124e717 	ldw	r4,-27748(gp)
   47660:	200d883a 	mov	r6,r4
   47664:	180b883a 	mov	r5,r3
   47668:	1009883a 	mov	r4,r2
   4766c:	0041ac80 	call	41ac8 <main>
   47670:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   47674:	01000044 	movi	r4,1
   47678:	004a2b00 	call	4a2b0 <close>
  exit (result);
   4767c:	e13fff17 	ldw	r4,-4(fp)
   47680:	004b40c0 	call	4b40c <exit>

00047684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   47684:	defffe04 	addi	sp,sp,-8
   47688:	dfc00115 	stw	ra,4(sp)
   4768c:	df000015 	stw	fp,0(sp)
   47690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   47694:	d0a00a17 	ldw	r2,-32728(gp)
   47698:	10000326 	beq	r2,zero,476a8 <alt_get_errno+0x24>
   4769c:	d0a00a17 	ldw	r2,-32728(gp)
   476a0:	103ee83a 	callr	r2
   476a4:	00000106 	br	476ac <alt_get_errno+0x28>
   476a8:	d0a4e404 	addi	r2,gp,-27760
}
   476ac:	e037883a 	mov	sp,fp
   476b0:	dfc00117 	ldw	ra,4(sp)
   476b4:	df000017 	ldw	fp,0(sp)
   476b8:	dec00204 	addi	sp,sp,8
   476bc:	f800283a 	ret

000476c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   476c0:	defff904 	addi	sp,sp,-28
   476c4:	dfc00615 	stw	ra,24(sp)
   476c8:	df000515 	stw	fp,20(sp)
   476cc:	df000504 	addi	fp,sp,20
   476d0:	e13ffd15 	stw	r4,-12(fp)
   476d4:	e17ffe15 	stw	r5,-8(fp)
   476d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   476dc:	e0bffd17 	ldw	r2,-12(fp)
   476e0:	10000616 	blt	r2,zero,476fc <write+0x3c>
   476e4:	e0bffd17 	ldw	r2,-12(fp)
   476e8:	10c00324 	muli	r3,r2,12
   476ec:	00800174 	movhi	r2,5
   476f0:	10b2cc04 	addi	r2,r2,-13520
   476f4:	1885883a 	add	r2,r3,r2
   476f8:	00000106 	br	47700 <write+0x40>
   476fc:	0005883a 	mov	r2,zero
   47700:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   47704:	e0bffb17 	ldw	r2,-20(fp)
   47708:	10002126 	beq	r2,zero,47790 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4770c:	e0bffb17 	ldw	r2,-20(fp)
   47710:	10800217 	ldw	r2,8(r2)
   47714:	108000cc 	andi	r2,r2,3
   47718:	10001826 	beq	r2,zero,4777c <write+0xbc>
   4771c:	e0bffb17 	ldw	r2,-20(fp)
   47720:	10800017 	ldw	r2,0(r2)
   47724:	10800617 	ldw	r2,24(r2)
   47728:	10001426 	beq	r2,zero,4777c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4772c:	e0bffb17 	ldw	r2,-20(fp)
   47730:	10800017 	ldw	r2,0(r2)
   47734:	10800617 	ldw	r2,24(r2)
   47738:	e0ffff17 	ldw	r3,-4(fp)
   4773c:	180d883a 	mov	r6,r3
   47740:	e17ffe17 	ldw	r5,-8(fp)
   47744:	e13ffb17 	ldw	r4,-20(fp)
   47748:	103ee83a 	callr	r2
   4774c:	e0bffc15 	stw	r2,-16(fp)
   47750:	e0bffc17 	ldw	r2,-16(fp)
   47754:	1000070e 	bge	r2,zero,47774 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   47758:	00476840 	call	47684 <alt_get_errno>
   4775c:	1007883a 	mov	r3,r2
   47760:	e0bffc17 	ldw	r2,-16(fp)
   47764:	0085c83a 	sub	r2,zero,r2
   47768:	18800015 	stw	r2,0(r3)
        return -1;
   4776c:	00bfffc4 	movi	r2,-1
   47770:	00000c06 	br	477a4 <write+0xe4>
      }
      return rval;
   47774:	e0bffc17 	ldw	r2,-16(fp)
   47778:	00000a06 	br	477a4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4777c:	00476840 	call	47684 <alt_get_errno>
   47780:	1007883a 	mov	r3,r2
   47784:	00800344 	movi	r2,13
   47788:	18800015 	stw	r2,0(r3)
   4778c:	00000406 	br	477a0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   47790:	00476840 	call	47684 <alt_get_errno>
   47794:	1007883a 	mov	r3,r2
   47798:	00801444 	movi	r2,81
   4779c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   477a0:	00bfffc4 	movi	r2,-1
}
   477a4:	e037883a 	mov	sp,fp
   477a8:	dfc00117 	ldw	ra,4(sp)
   477ac:	df000017 	ldw	fp,0(sp)
   477b0:	dec00204 	addi	sp,sp,8
   477b4:	f800283a 	ret

000477b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   477b8:	defffd04 	addi	sp,sp,-12
   477bc:	dfc00215 	stw	ra,8(sp)
   477c0:	df000115 	stw	fp,4(sp)
   477c4:	df000104 	addi	fp,sp,4
   477c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   477cc:	d1600704 	addi	r5,gp,-32740
   477d0:	e13fff17 	ldw	r4,-4(fp)
   477d4:	004a4300 	call	4a430 <alt_dev_llist_insert>
}
   477d8:	e037883a 	mov	sp,fp
   477dc:	dfc00117 	ldw	ra,4(sp)
   477e0:	df000017 	ldw	fp,0(sp)
   477e4:	dec00204 	addi	sp,sp,8
   477e8:	f800283a 	ret

000477ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   477ec:	defffd04 	addi	sp,sp,-12
   477f0:	dfc00215 	stw	ra,8(sp)
   477f4:	df000115 	stw	fp,4(sp)
   477f8:	df000104 	addi	fp,sp,4
   477fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   47800:	004b0fc0 	call	4b0fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   47804:	00800044 	movi	r2,1
   47808:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4780c:	0001883a 	nop
   47810:	e037883a 	mov	sp,fp
   47814:	dfc00117 	ldw	ra,4(sp)
   47818:	df000017 	ldw	fp,0(sp)
   4781c:	dec00204 	addi	sp,sp,8
   47820:	f800283a 	ret

00047824 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   47824:	defffe04 	addi	sp,sp,-8
   47828:	dfc00115 	stw	ra,4(sp)
   4782c:	df000015 	stw	fp,0(sp)
   47830:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   47834:	01c0fa04 	movi	r7,1000
   47838:	018000c4 	movi	r6,3
   4783c:	000b883a 	mov	r5,zero
   47840:	01000234 	movhi	r4,8
   47844:	21041004 	addi	r4,r4,4160
   47848:	0049f740 	call	49f74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_DAC, i2c_dac);
   4784c:	01000174 	movhi	r4,5
   47850:	212e9c04 	addi	r4,r4,-17808
   47854:	0047ae40 	call	47ae4 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   47858:	000d883a 	mov	r6,zero
   4785c:	000b883a 	mov	r5,zero
   47860:	01000174 	movhi	r4,5
   47864:	212eb404 	addi	r4,r4,-17712
   47868:	00495f80 	call	495f8 <altera_avalon_jtag_uart_init>
   4786c:	01000174 	movhi	r4,5
   47870:	212eaa04 	addi	r4,r4,-17752
   47874:	00477b80 	call	477b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   47878:	0001883a 	nop
}
   4787c:	0001883a 	nop
   47880:	e037883a 	mov	sp,fp
   47884:	dfc00117 	ldw	ra,4(sp)
   47888:	df000017 	ldw	fp,0(sp)
   4788c:	dec00204 	addi	sp,sp,8
   47890:	f800283a 	ret

00047894 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   47894:	defff904 	addi	sp,sp,-28
   47898:	dfc00615 	stw	ra,24(sp)
   4789c:	df000515 	stw	fp,20(sp)
   478a0:	df000504 	addi	fp,sp,20
   478a4:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   478a8:	008000b4 	movhi	r2,2
   478ac:	10a1a804 	addi	r2,r2,-31072
   478b0:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   478b4:	e0bfff17 	ldw	r2,-4(fp)
   478b8:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   478bc:	e0bffc17 	ldw	r2,-16(fp)
   478c0:	10800717 	ldw	r2,28(r2)
   478c4:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   478c8:	e0bffd17 	ldw	r2,-12(fp)
   478cc:	10800217 	ldw	r2,8(r2)
   478d0:	10800098 	cmpnei	r2,r2,2
   478d4:	1000251e 	bne	r2,zero,4796c <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   478d8:	e0bffd17 	ldw	r2,-12(fp)
   478dc:	10c00017 	ldw	r3,0(r2)
   478e0:	e0bffd17 	ldw	r2,-12(fp)
   478e4:	10800117 	ldw	r2,4(r2)
   478e8:	e13ffe04 	addi	r4,fp,-8
   478ec:	200f883a 	mov	r7,r4
   478f0:	100d883a 	mov	r6,r2
   478f4:	180b883a 	mov	r5,r3
   478f8:	e13ffc17 	ldw	r4,-16(fp)
   478fc:	00480440 	call	48044 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   47900:	e0bffd17 	ldw	r2,-12(fp)
   47904:	10c00117 	ldw	r3,4(r2)
   47908:	e0bffe17 	ldw	r2,-8(fp)
   4790c:	1887c83a 	sub	r3,r3,r2
   47910:	e0bffd17 	ldw	r2,-12(fp)
   47914:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   47918:	e0bffd17 	ldw	r2,-12(fp)
   4791c:	10c00017 	ldw	r3,0(r2)
   47920:	e0bffe17 	ldw	r2,-8(fp)
   47924:	1887883a 	add	r3,r3,r2
   47928:	e0bffd17 	ldw	r2,-12(fp)
   4792c:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   47930:	e0bffd17 	ldw	r2,-12(fp)
   47934:	10800117 	ldw	r2,4(r2)
   47938:	10000c26 	beq	r2,zero,4796c <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   4793c:	01400704 	movi	r5,28
   47940:	e13ffc17 	ldw	r4,-16(fp)
   47944:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   47948:	01400084 	movi	r5,2
   4794c:	e13ffc17 	ldw	r4,-16(fp)
   47950:	00492880 	call	49288 <alt_avalon_i2c_int_enable>
   47954:	00000e06 	br	47990 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   47958:	e0bffb17 	ldw	r2,-20(fp)
   4795c:	10bfffc4 	addi	r2,r2,-1
   47960:	e0bffb15 	stw	r2,-20(fp)
   47964:	e0bffb17 	ldw	r2,-20(fp)
   47968:	10000426 	beq	r2,zero,4797c <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   4796c:	e13ffc17 	ldw	r4,-16(fp)
   47970:	00480000 	call	48000 <alt_avalon_i2c_is_busy>
   47974:	103ff81e 	bne	r2,zero,47958 <__alt_data_end+0xfffe0858>
   47978:	00000106 	br	47980 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   4797c:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   47980:	e13ffc17 	ldw	r4,-16(fp)
   47984:	0047ca80 	call	47ca8 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   47988:	e0bffd17 	ldw	r2,-12(fp)
   4798c:	10000215 	stw	zero,8(r2)
}
   47990:	e037883a 	mov	sp,fp
   47994:	dfc00117 	ldw	ra,4(sp)
   47998:	df000017 	ldw	fp,0(sp)
   4799c:	dec00204 	addi	sp,sp,8
   479a0:	f800283a 	ret

000479a4 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   479a4:	defffc04 	addi	sp,sp,-16
   479a8:	dfc00315 	stw	ra,12(sp)
   479ac:	df000215 	stw	fp,8(sp)
   479b0:	df000204 	addi	fp,sp,8
   479b4:	e13ffe15 	stw	r4,-8(fp)
   479b8:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   479bc:	e0bfff17 	ldw	r2,-4(fp)
   479c0:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   479c4:	e1ffff17 	ldw	r7,-4(fp)
   479c8:	000d883a 	mov	r6,zero
   479cc:	01400134 	movhi	r5,4
   479d0:	295e2504 	addi	r5,r5,30868
   479d4:	e13ffe17 	ldw	r4,-8(fp)
   479d8:	0047a900 	call	47a90 <alt_avalon_i2c_register_callback>
}
   479dc:	0001883a 	nop
   479e0:	e037883a 	mov	sp,fp
   479e4:	dfc00117 	ldw	ra,4(sp)
   479e8:	df000017 	ldw	fp,0(sp)
   479ec:	dec00204 	addi	sp,sp,8
   479f0:	f800283a 	ret

000479f4 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   479f4:	defff904 	addi	sp,sp,-28
   479f8:	dfc00615 	stw	ra,24(sp)
   479fc:	df000515 	stw	fp,20(sp)
   47a00:	df000504 	addi	fp,sp,20
   47a04:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   47a08:	e0bfff17 	ldw	r2,-4(fp)
   47a0c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   47a10:	014007c4 	movi	r5,31
   47a14:	e13ffb17 	ldw	r4,-20(fp)
   47a18:	00492200 	call	49220 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   47a1c:	01400704 	movi	r5,28
   47a20:	e13ffb17 	ldw	r4,-20(fp)
   47a24:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   47a28:	e0bffb17 	ldw	r2,-20(fp)
   47a2c:	10800617 	ldw	r2,24(r2)
   47a30:	10001126 	beq	r2,zero,47a78 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47a34:	0005303a 	rdctl	r2,status
   47a38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47a3c:	e0fffd17 	ldw	r3,-12(fp)
   47a40:	00bfff84 	movi	r2,-2
   47a44:	1884703a 	and	r2,r3,r2
   47a48:	1001703a 	wrctl	status,r2
  
  return context;
   47a4c:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   47a50:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   47a54:	e0bffb17 	ldw	r2,-20(fp)
   47a58:	10800617 	ldw	r2,24(r2)
   47a5c:	e13ffb17 	ldw	r4,-20(fp)
   47a60:	103ee83a 	callr	r2
   47a64:	e0bffc17 	ldw	r2,-16(fp)
   47a68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47a6c:	e0bffe17 	ldw	r2,-8(fp)
   47a70:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   47a74:	0001883a 	nop
   47a78:	0001883a 	nop
}
   47a7c:	e037883a 	mov	sp,fp
   47a80:	dfc00117 	ldw	ra,4(sp)
   47a84:	df000017 	ldw	fp,0(sp)
   47a88:	dec00204 	addi	sp,sp,8
   47a8c:	f800283a 	ret

00047a90 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   47a90:	defffb04 	addi	sp,sp,-20
   47a94:	df000415 	stw	fp,16(sp)
   47a98:	df000404 	addi	fp,sp,16
   47a9c:	e13ffc15 	stw	r4,-16(fp)
   47aa0:	e17ffd15 	stw	r5,-12(fp)
   47aa4:	e1bffe15 	stw	r6,-8(fp)
   47aa8:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   47aac:	e0bffc17 	ldw	r2,-16(fp)
   47ab0:	e0fffd17 	ldw	r3,-12(fp)
   47ab4:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   47ab8:	e0bffc17 	ldw	r2,-16(fp)
   47abc:	e0ffff17 	ldw	r3,-4(fp)
   47ac0:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   47ac4:	e0bffc17 	ldw	r2,-16(fp)
   47ac8:	e0fffe17 	ldw	r3,-8(fp)
   47acc:	10c00815 	stw	r3,32(r2)

    return ;
   47ad0:	0001883a 	nop
}
   47ad4:	e037883a 	mov	sp,fp
   47ad8:	df000017 	ldw	fp,0(sp)
   47adc:	dec00104 	addi	sp,sp,4
   47ae0:	f800283a 	ret

00047ae4 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   47ae4:	defff704 	addi	sp,sp,-36
   47ae8:	dfc00815 	stw	ra,32(sp)
   47aec:	df000715 	stw	fp,28(sp)
   47af0:	df000704 	addi	fp,sp,28
   47af4:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   47af8:	e13fff17 	ldw	r4,-4(fp)
   47afc:	0047ca80 	call	47ca8 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   47b00:	014007c4 	movi	r5,31
   47b04:	e13fff17 	ldw	r4,-4(fp)
   47b08:	00492200 	call	49220 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   47b0c:	01400704 	movi	r5,28
   47b10:	e13fff17 	ldw	r4,-4(fp)
   47b14:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   47b18:	014000c4 	movi	r5,3
   47b1c:	e13fff17 	ldw	r4,-4(fp)
   47b20:	004942c0 	call	4942c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   47b24:	014000c4 	movi	r5,3
   47b28:	e13fff17 	ldw	r4,-4(fp)
   47b2c:	004937c0 	call	4937c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   47b30:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   47b34:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   47b38:	e0bffb04 	addi	r2,fp,-20
   47b3c:	018000b4 	movhi	r6,2
   47b40:	31a1a804 	addi	r6,r6,-31072
   47b44:	100b883a 	mov	r5,r2
   47b48:	e13fff17 	ldw	r4,-4(fp)
   47b4c:	0047f040 	call	47f04 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   47b50:	e0bffb04 	addi	r2,fp,-20
   47b54:	100b883a 	mov	r5,r2
   47b58:	e13fff17 	ldw	r4,-4(fp)
   47b5c:	0047da40 	call	47da4 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   47b60:	d1600304 	addi	r5,gp,-32756
   47b64:	e13fff17 	ldw	r4,-4(fp)
   47b68:	004a4300 	call	4a430 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   47b6c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   47b70:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   47b74:	e0bffa17 	ldw	r2,-24(fp)
   47b78:	10000c1e 	bne	r2,zero,47bac <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   47b7c:	e0bfff17 	ldw	r2,-4(fp)
   47b80:	10c00417 	ldw	r3,16(r2)
   47b84:	e0bfff17 	ldw	r2,-4(fp)
   47b88:	10800517 	ldw	r2,20(r2)
   47b8c:	d8000015 	stw	zero,0(sp)
   47b90:	e1ffff17 	ldw	r7,-4(fp)
   47b94:	01800134 	movhi	r6,4
   47b98:	319e7d04 	addi	r6,r6,31220
   47b9c:	100b883a 	mov	r5,r2
   47ba0:	1809883a 	mov	r4,r3
   47ba4:	004a6580 	call	4a658 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   47ba8:	00000406 	br	47bbc <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   47bac:	01000174 	movhi	r4,5
   47bb0:	212e5904 	addi	r4,r4,-18076
   47bb4:	004ac8c0 	call	4ac8c <alt_printf>
    }

    return;
   47bb8:	0001883a 	nop

}
   47bbc:	e037883a 	mov	sp,fp
   47bc0:	dfc00117 	ldw	ra,4(sp)
   47bc4:	df000017 	ldw	fp,0(sp)
   47bc8:	dec00204 	addi	sp,sp,8
   47bcc:	f800283a 	ret

00047bd0 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   47bd0:	defffc04 	addi	sp,sp,-16
   47bd4:	dfc00315 	stw	ra,12(sp)
   47bd8:	df000215 	stw	fp,8(sp)
   47bdc:	df000204 	addi	fp,sp,8
   47be0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   47be4:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   47be8:	d1600304 	addi	r5,gp,-32756
   47bec:	e13fff17 	ldw	r4,-4(fp)
   47bf0:	004a5940 	call	4a594 <alt_find_dev>
   47bf4:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   47bf8:	e0bffe17 	ldw	r2,-8(fp)
}
   47bfc:	e037883a 	mov	sp,fp
   47c00:	dfc00117 	ldw	ra,4(sp)
   47c04:	df000017 	ldw	fp,0(sp)
   47c08:	dec00204 	addi	sp,sp,8
   47c0c:	f800283a 	ret

00047c10 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   47c10:	defffc04 	addi	sp,sp,-16
   47c14:	df000315 	stw	fp,12(sp)
   47c18:	df000304 	addi	fp,sp,12
   47c1c:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   47c20:	e0bfff17 	ldw	r2,-4(fp)
   47c24:	10800717 	ldw	r2,28(r2)
   47c28:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   47c2c:	e0bfff17 	ldw	r2,-4(fp)
   47c30:	10800317 	ldw	r2,12(r2)
   47c34:	10800204 	addi	r2,r2,8
   47c38:	10800037 	ldwio	r2,0(r2)
   47c3c:	1080004c 	andi	r2,r2,1
   47c40:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   47c44:	e0bffe17 	ldw	r2,-8(fp)
   47c48:	10000226 	beq	r2,zero,47c54 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   47c4c:	00bffe44 	movi	r2,-7
   47c50:	00001106 	br	47c98 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   47c54:	e0bfff17 	ldw	r2,-4(fp)
   47c58:	10c00617 	ldw	r3,24(r2)
   47c5c:	00800134 	movhi	r2,4
   47c60:	109e2504 	addi	r2,r2,30868
   47c64:	1880021e 	bne	r3,r2,47c70 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   47c68:	e0bffd17 	ldw	r2,-12(fp)
   47c6c:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   47c70:	e0bfff17 	ldw	r2,-4(fp)
   47c74:	10800317 	ldw	r2,12(r2)
   47c78:	10800204 	addi	r2,r2,8
   47c7c:	e0ffff17 	ldw	r3,-4(fp)
   47c80:	18c00317 	ldw	r3,12(r3)
   47c84:	18c00204 	addi	r3,r3,8
   47c88:	18c00037 	ldwio	r3,0(r3)
   47c8c:	18c00054 	ori	r3,r3,1
   47c90:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   47c94:	0005883a 	mov	r2,zero
}
   47c98:	e037883a 	mov	sp,fp
   47c9c:	df000017 	ldw	fp,0(sp)
   47ca0:	dec00104 	addi	sp,sp,4
   47ca4:	f800283a 	ret

00047ca8 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   47ca8:	defffe04 	addi	sp,sp,-8
   47cac:	df000115 	stw	fp,4(sp)
   47cb0:	df000104 	addi	fp,sp,4
   47cb4:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   47cb8:	e0bfff17 	ldw	r2,-4(fp)
   47cbc:	10800317 	ldw	r2,12(r2)
   47cc0:	10800204 	addi	r2,r2,8
   47cc4:	e0ffff17 	ldw	r3,-4(fp)
   47cc8:	18c00317 	ldw	r3,12(r3)
   47ccc:	18c00204 	addi	r3,r3,8
   47cd0:	19000037 	ldwio	r4,0(r3)
   47cd4:	00ffff84 	movi	r3,-2
   47cd8:	20c6703a 	and	r3,r4,r3
   47cdc:	10c00035 	stwio	r3,0(r2)

}
   47ce0:	0001883a 	nop
   47ce4:	e037883a 	mov	sp,fp
   47ce8:	df000017 	ldw	fp,0(sp)
   47cec:	dec00104 	addi	sp,sp,4
   47cf0:	f800283a 	ret

00047cf4 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   47cf4:	defffd04 	addi	sp,sp,-12
   47cf8:	df000215 	stw	fp,8(sp)
   47cfc:	df000204 	addi	fp,sp,8
   47d00:	e13ffe15 	stw	r4,-8(fp)
   47d04:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   47d08:	e0bffe17 	ldw	r2,-8(fp)
   47d0c:	10c00d17 	ldw	r3,52(r2)
   47d10:	e0bfff17 	ldw	r2,-4(fp)
   47d14:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   47d18:	e0bffe17 	ldw	r2,-8(fp)
   47d1c:	10800317 	ldw	r2,12(r2)
   47d20:	10800204 	addi	r2,r2,8
   47d24:	10800037 	ldwio	r2,0(r2)
   47d28:	1080008c 	andi	r2,r2,2
   47d2c:	1005d07a 	srai	r2,r2,1
   47d30:	1007883a 	mov	r3,r2
   47d34:	e0bfff17 	ldw	r2,-4(fp)
   47d38:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   47d3c:	e0bffe17 	ldw	r2,-8(fp)
   47d40:	10800317 	ldw	r2,12(r2)
   47d44:	10800904 	addi	r2,r2,36
   47d48:	10800037 	ldwio	r2,0(r2)
   47d4c:	1007883a 	mov	r3,r2
   47d50:	e0bfff17 	ldw	r2,-4(fp)
   47d54:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   47d58:	e0bffe17 	ldw	r2,-8(fp)
   47d5c:	10800317 	ldw	r2,12(r2)
   47d60:	10800804 	addi	r2,r2,32
   47d64:	10800037 	ldwio	r2,0(r2)
   47d68:	1007883a 	mov	r3,r2
   47d6c:	e0bfff17 	ldw	r2,-4(fp)
   47d70:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   47d74:	e0bffe17 	ldw	r2,-8(fp)
   47d78:	10800317 	ldw	r2,12(r2)
   47d7c:	10800a04 	addi	r2,r2,40
   47d80:	10800037 	ldwio	r2,0(r2)
   47d84:	1007883a 	mov	r3,r2
   47d88:	e0bfff17 	ldw	r2,-4(fp)
   47d8c:	10c0030d 	sth	r3,12(r2)
}
   47d90:	0001883a 	nop
   47d94:	e037883a 	mov	sp,fp
   47d98:	df000017 	ldw	fp,0(sp)
   47d9c:	dec00104 	addi	sp,sp,4
   47da0:	f800283a 	ret

00047da4 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   47da4:	defffd04 	addi	sp,sp,-12
   47da8:	df000215 	stw	fp,8(sp)
   47dac:	df000204 	addi	fp,sp,8
   47db0:	e13ffe15 	stw	r4,-8(fp)
   47db4:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   47db8:	e0bfff17 	ldw	r2,-4(fp)
   47dbc:	10c00017 	ldw	r3,0(r2)
   47dc0:	e0bffe17 	ldw	r2,-8(fp)
   47dc4:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   47dc8:	e0bffe17 	ldw	r2,-8(fp)
   47dcc:	10800317 	ldw	r2,12(r2)
   47dd0:	10c00204 	addi	r3,r2,8
   47dd4:	e0bffe17 	ldw	r2,-8(fp)
   47dd8:	10800317 	ldw	r2,12(r2)
   47ddc:	10800204 	addi	r2,r2,8
   47de0:	10800037 	ldwio	r2,0(r2)
   47de4:	1009883a 	mov	r4,r2
   47de8:	00bfff44 	movi	r2,-3
   47dec:	2088703a 	and	r4,r4,r2
   47df0:	e0bfff17 	ldw	r2,-4(fp)
   47df4:	10800117 	ldw	r2,4(r2)
   47df8:	1085883a 	add	r2,r2,r2
   47dfc:	1080008c 	andi	r2,r2,2
   47e00:	2084b03a 	or	r2,r4,r2
   47e04:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   47e08:	e0bffe17 	ldw	r2,-8(fp)
   47e0c:	10800317 	ldw	r2,12(r2)
   47e10:	10800904 	addi	r2,r2,36
   47e14:	e0ffff17 	ldw	r3,-4(fp)
   47e18:	18c0020b 	ldhu	r3,8(r3)
   47e1c:	18ffffcc 	andi	r3,r3,65535
   47e20:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   47e24:	e0bffe17 	ldw	r2,-8(fp)
   47e28:	10800317 	ldw	r2,12(r2)
   47e2c:	10800804 	addi	r2,r2,32
   47e30:	e0ffff17 	ldw	r3,-4(fp)
   47e34:	18c0028b 	ldhu	r3,10(r3)
   47e38:	18ffffcc 	andi	r3,r3,65535
   47e3c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   47e40:	e0bffe17 	ldw	r2,-8(fp)
   47e44:	10800317 	ldw	r2,12(r2)
   47e48:	10800a04 	addi	r2,r2,40
   47e4c:	e0ffff17 	ldw	r3,-4(fp)
   47e50:	18c0030b 	ldhu	r3,12(r3)
   47e54:	18ffffcc 	andi	r3,r3,65535
   47e58:	10c00035 	stwio	r3,0(r2)
}
   47e5c:	0001883a 	nop
   47e60:	e037883a 	mov	sp,fp
   47e64:	df000017 	ldw	fp,0(sp)
   47e68:	dec00104 	addi	sp,sp,4
   47e6c:	f800283a 	ret

00047e70 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   47e70:	defffb04 	addi	sp,sp,-20
   47e74:	dfc00415 	stw	ra,16(sp)
   47e78:	df000315 	stw	fp,12(sp)
   47e7c:	df000304 	addi	fp,sp,12
   47e80:	e13ffd15 	stw	r4,-12(fp)
   47e84:	e17ffe15 	stw	r5,-8(fp)
   47e88:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   47e8c:	e0bffe17 	ldw	r2,-8(fp)
   47e90:	1080028b 	ldhu	r2,10(r2)
   47e94:	10bfffcc 	andi	r2,r2,65535
   47e98:	10000426 	beq	r2,zero,47eac <alt_avalon_i2c_master_config_speed_get+0x3c>
   47e9c:	e0bffe17 	ldw	r2,-8(fp)
   47ea0:	1080020b 	ldhu	r2,8(r2)
   47ea4:	10bfffcc 	andi	r2,r2,65535
   47ea8:	1000021e 	bne	r2,zero,47eb4 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   47eac:	00bfff44 	movi	r2,-3
   47eb0:	00000f06 	br	47ef0 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   47eb4:	e0bffd17 	ldw	r2,-12(fp)
   47eb8:	11000c17 	ldw	r4,48(r2)
   47ebc:	e0bffe17 	ldw	r2,-8(fp)
   47ec0:	1080028b 	ldhu	r2,10(r2)
   47ec4:	10ffffcc 	andi	r3,r2,65535
   47ec8:	e0bffe17 	ldw	r2,-8(fp)
   47ecc:	1080020b 	ldhu	r2,8(r2)
   47ed0:	10bfffcc 	andi	r2,r2,65535
   47ed4:	1885883a 	add	r2,r3,r2
   47ed8:	100b883a 	mov	r5,r2
   47edc:	0042f080 	call	42f08 <__udivsi3>
   47ee0:	1007883a 	mov	r3,r2
   47ee4:	e0bfff17 	ldw	r2,-4(fp)
   47ee8:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   47eec:	0005883a 	mov	r2,zero
}
   47ef0:	e037883a 	mov	sp,fp
   47ef4:	dfc00117 	ldw	ra,4(sp)
   47ef8:	df000017 	ldw	fp,0(sp)
   47efc:	dec00204 	addi	sp,sp,8
   47f00:	f800283a 	ret

00047f04 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   47f04:	defff904 	addi	sp,sp,-28
   47f08:	dfc00615 	stw	ra,24(sp)
   47f0c:	df000515 	stw	fp,20(sp)
   47f10:	df000504 	addi	fp,sp,20
   47f14:	e13ffd15 	stw	r4,-12(fp)
   47f18:	e17ffe15 	stw	r5,-8(fp)
   47f1c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   47f20:	e0ffff17 	ldw	r3,-4(fp)
   47f24:	008001b4 	movhi	r2,6
   47f28:	1086a004 	addi	r2,r2,6784
   47f2c:	10c00436 	bltu	r2,r3,47f40 <alt_avalon_i2c_master_config_speed_set+0x3c>
   47f30:	e0bfff17 	ldw	r2,-4(fp)
   47f34:	10000226 	beq	r2,zero,47f40 <alt_avalon_i2c_master_config_speed_set+0x3c>
   47f38:	e0bfff17 	ldw	r2,-4(fp)
   47f3c:	1000021e 	bne	r2,zero,47f48 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   47f40:	00bfff04 	movi	r2,-4
   47f44:	00002906 	br	47fec <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   47f48:	e0bffd17 	ldw	r2,-12(fp)
   47f4c:	10c00c17 	ldw	r3,48(r2)
   47f50:	e0bfff17 	ldw	r2,-4(fp)
   47f54:	1085883a 	add	r2,r2,r2
   47f58:	100b883a 	mov	r5,r2
   47f5c:	1809883a 	mov	r4,r3
   47f60:	0042f080 	call	42f08 <__udivsi3>
   47f64:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   47f68:	e0bffb17 	ldw	r2,-20(fp)
   47f6c:	10800f04 	addi	r2,r2,60
   47f70:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   47f74:	e0bffb17 	ldw	r2,-20(fp)
   47f78:	10bff104 	addi	r2,r2,-60
   47f7c:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   47f80:	e0ffff17 	ldw	r3,-4(fp)
   47f84:	008000b4 	movhi	r2,2
   47f88:	10a1a804 	addi	r2,r2,-31072
   47f8c:	10c0042e 	bgeu	r2,r3,47fa0 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   47f90:	e0bffe17 	ldw	r2,-8(fp)
   47f94:	00c00044 	movi	r3,1
   47f98:	10c00115 	stw	r3,4(r2)
   47f9c:	00000206 	br	47fa8 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   47fa0:	e0bffe17 	ldw	r2,-8(fp)
   47fa4:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   47fa8:	e0bffb17 	ldw	r2,-20(fp)
   47fac:	1007883a 	mov	r3,r2
   47fb0:	e0bffe17 	ldw	r2,-8(fp)
   47fb4:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   47fb8:	e0bffc17 	ldw	r2,-16(fp)
   47fbc:	1007883a 	mov	r3,r2
   47fc0:	e0bffe17 	ldw	r2,-8(fp)
   47fc4:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   47fc8:	e0bffb17 	ldw	r2,-20(fp)
   47fcc:	1007883a 	mov	r3,r2
   47fd0:	e0bffb17 	ldw	r2,-20(fp)
   47fd4:	1004d07a 	srli	r2,r2,1
   47fd8:	1885c83a 	sub	r2,r3,r2
   47fdc:	1007883a 	mov	r3,r2
   47fe0:	e0bffe17 	ldw	r2,-8(fp)
   47fe4:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   47fe8:	0005883a 	mov	r2,zero

}
   47fec:	e037883a 	mov	sp,fp
   47ff0:	dfc00117 	ldw	ra,4(sp)
   47ff4:	df000017 	ldw	fp,0(sp)
   47ff8:	dec00204 	addi	sp,sp,8
   47ffc:	f800283a 	ret

00048000 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   48000:	defffe04 	addi	sp,sp,-8
   48004:	df000115 	stw	fp,4(sp)
   48008:	df000104 	addi	fp,sp,4
   4800c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   48010:	e0bfff17 	ldw	r2,-4(fp)
   48014:	10800317 	ldw	r2,12(r2)
   48018:	10800504 	addi	r2,r2,20
   4801c:	10800037 	ldwio	r2,0(r2)
   48020:	1080004c 	andi	r2,r2,1
   48024:	10000226 	beq	r2,zero,48030 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   48028:	00800044 	movi	r2,1
   4802c:	00000106 	br	48034 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   48030:	0005883a 	mov	r2,zero
}
   48034:	e037883a 	mov	sp,fp
   48038:	df000017 	ldw	fp,0(sp)
   4803c:	dec00104 	addi	sp,sp,4
   48040:	f800283a 	ret

00048044 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   48044:	defffb04 	addi	sp,sp,-20
   48048:	df000415 	stw	fp,16(sp)
   4804c:	df000404 	addi	fp,sp,16
   48050:	e13ffc15 	stw	r4,-16(fp)
   48054:	e17ffd15 	stw	r5,-12(fp)
   48058:	e1bffe15 	stw	r6,-8(fp)
   4805c:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   48060:	e0bfff17 	ldw	r2,-4(fp)
   48064:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   48068:	00001406 	br	480bc <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   4806c:	e0bfff17 	ldw	r2,-4(fp)
   48070:	10800017 	ldw	r2,0(r2)
   48074:	e0fffd17 	ldw	r3,-12(fp)
   48078:	1885883a 	add	r2,r3,r2
   4807c:	e0fffc17 	ldw	r3,-16(fp)
   48080:	18c00317 	ldw	r3,12(r3)
   48084:	18c00104 	addi	r3,r3,4
   48088:	18c00037 	ldwio	r3,0(r3)
   4808c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   48090:	e0bfff17 	ldw	r2,-4(fp)
   48094:	10800017 	ldw	r2,0(r2)
   48098:	10c00044 	addi	r3,r2,1
   4809c:	e0bfff17 	ldw	r2,-4(fp)
   480a0:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   480a4:	e0bfff17 	ldw	r2,-4(fp)
   480a8:	10c00017 	ldw	r3,0(r2)
   480ac:	e0bffe17 	ldw	r2,-8(fp)
   480b0:	1880021e 	bne	r3,r2,480bc <alt_avalon_i2c_rx_read_available+0x78>
   480b4:	e0bffe17 	ldw	r2,-8(fp)
   480b8:	1000061e 	bne	r2,zero,480d4 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   480bc:	e0bffc17 	ldw	r2,-16(fp)
   480c0:	10800317 	ldw	r2,12(r2)
   480c4:	10800704 	addi	r2,r2,28
   480c8:	10800037 	ldwio	r2,0(r2)
   480cc:	103fe71e 	bne	r2,zero,4806c <__alt_data_end+0xfffe0f6c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   480d0:	00000106 	br	480d8 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   480d4:	0001883a 	nop
    }
}
   480d8:	0001883a 	nop
   480dc:	e037883a 	mov	sp,fp
   480e0:	df000017 	ldw	fp,0(sp)
   480e4:	dec00104 	addi	sp,sp,4
   480e8:	f800283a 	ret

000480ec <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   480ec:	defffa04 	addi	sp,sp,-24
   480f0:	dfc00515 	stw	ra,20(sp)
   480f4:	df000415 	stw	fp,16(sp)
   480f8:	df000404 	addi	fp,sp,16
   480fc:	e13ffe15 	stw	r4,-8(fp)
   48100:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   48104:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   48108:	008000b4 	movhi	r2,2
   4810c:	10a1a804 	addi	r2,r2,-31072
   48110:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   48114:	00000d06 	br	4814c <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   48118:	e0bffd17 	ldw	r2,-12(fp)
   4811c:	108002a8 	cmpgeui	r2,r2,10
   48120:	1000021e 	bne	r2,zero,4812c <alt_avalon_i2c_rx_read+0x40>
   48124:	0109c404 	movi	r4,10000
   48128:	004a11c0 	call	4a11c <alt_busy_sleep>
      if (--timeout == 0)
   4812c:	e0bffd17 	ldw	r2,-12(fp)
   48130:	10bfffc4 	addi	r2,r2,-1
   48134:	e0bffd15 	stw	r2,-12(fp)
   48138:	e0bffd17 	ldw	r2,-12(fp)
   4813c:	1000031e 	bne	r2,zero,4814c <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   48140:	00bfff84 	movi	r2,-2
   48144:	e0bffc15 	stw	r2,-16(fp)
        break;
   48148:	00000506 	br	48160 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   4814c:	e0bffe17 	ldw	r2,-8(fp)
   48150:	10800317 	ldw	r2,12(r2)
   48154:	10800704 	addi	r2,r2,28
   48158:	10800037 	ldwio	r2,0(r2)
   4815c:	103fee26 	beq	r2,zero,48118 <__alt_data_end+0xfffe1018>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   48160:	e0bffe17 	ldw	r2,-8(fp)
   48164:	10800317 	ldw	r2,12(r2)
   48168:	10800104 	addi	r2,r2,4
   4816c:	10800037 	ldwio	r2,0(r2)
   48170:	1007883a 	mov	r3,r2
   48174:	e0bfff17 	ldw	r2,-4(fp)
   48178:	10c00005 	stb	r3,0(r2)
        
    return status;
   4817c:	e0bffc17 	ldw	r2,-16(fp)
}
   48180:	e037883a 	mov	sp,fp
   48184:	dfc00117 	ldw	ra,4(sp)
   48188:	df000017 	ldw	fp,0(sp)
   4818c:	dec00204 	addi	sp,sp,8
   48190:	f800283a 	ret

00048194 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   48194:	defff804 	addi	sp,sp,-32
   48198:	dfc00715 	stw	ra,28(sp)
   4819c:	df000615 	stw	fp,24(sp)
   481a0:	df000604 	addi	fp,sp,24
   481a4:	e13ffc15 	stw	r4,-16(fp)
   481a8:	2809883a 	mov	r4,r5
   481ac:	3007883a 	mov	r3,r6
   481b0:	3805883a 	mov	r2,r7
   481b4:	e13ffd05 	stb	r4,-12(fp)
   481b8:	e0fffe05 	stb	r3,-8(fp)
   481bc:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   481c0:	0089c404 	movi	r2,10000
   481c4:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   481c8:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   481cc:	00000c06 	br	48200 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   481d0:	e0bffa17 	ldw	r2,-24(fp)
   481d4:	108002a8 	cmpgeui	r2,r2,10
   481d8:	1000021e 	bne	r2,zero,481e4 <alt_avalon_i2c_cmd_write+0x50>
   481dc:	0109c404 	movi	r4,10000
   481e0:	004a11c0 	call	4a11c <alt_busy_sleep>
      if (--timeout == 0)
   481e4:	e0bffa17 	ldw	r2,-24(fp)
   481e8:	10bfffc4 	addi	r2,r2,-1
   481ec:	e0bffa15 	stw	r2,-24(fp)
   481f0:	e0bffa17 	ldw	r2,-24(fp)
   481f4:	1000021e 	bne	r2,zero,48200 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   481f8:	00bfff84 	movi	r2,-2
   481fc:	00001906 	br	48264 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   48200:	e0bffc17 	ldw	r2,-16(fp)
   48204:	10800317 	ldw	r2,12(r2)
   48208:	10800404 	addi	r2,r2,16
   4820c:	10800037 	ldwio	r2,0(r2)
   48210:	1080004c 	andi	r2,r2,1
   48214:	103fee26 	beq	r2,zero,481d0 <__alt_data_end+0xfffe10d0>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   48218:	e0bffc17 	ldw	r2,-16(fp)
   4821c:	10800317 	ldw	r2,12(r2)
   48220:	e13ffd03 	ldbu	r4,-12(fp)
   48224:	e0fffe03 	ldbu	r3,-8(fp)
   48228:	1806927a 	slli	r3,r3,9
   4822c:	20c8b03a 	or	r4,r4,r3
   48230:	e0ffff03 	ldbu	r3,-4(fp)
   48234:	1806923a 	slli	r3,r3,8
   48238:	20c6b03a 	or	r3,r4,r3
   4823c:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   48240:	e0bffb04 	addi	r2,fp,-20
   48244:	100b883a 	mov	r5,r2
   48248:	e13ffc17 	ldw	r4,-16(fp)
   4824c:	00483d40 	call	483d4 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   48250:	e0bffb04 	addi	r2,fp,-20
   48254:	100b883a 	mov	r5,r2
   48258:	e13ffc17 	ldw	r4,-16(fp)
   4825c:	00484200 	call	48420 <alt_avalon_i2c_check_arblost>
    
    return status;
   48260:	e0bffb17 	ldw	r2,-20(fp)
}
   48264:	e037883a 	mov	sp,fp
   48268:	dfc00117 	ldw	ra,4(sp)
   4826c:	df000017 	ldw	fp,0(sp)
   48270:	dec00204 	addi	sp,sp,8
   48274:	f800283a 	ret

00048278 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   48278:	defffa04 	addi	sp,sp,-24
   4827c:	dfc00515 	stw	ra,20(sp)
   48280:	df000415 	stw	fp,16(sp)
   48284:	df000404 	addi	fp,sp,16
   48288:	e13ffd15 	stw	r4,-12(fp)
   4828c:	e17ffe15 	stw	r5,-8(fp)
   48290:	3005883a 	mov	r2,r6
   48294:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   48298:	e0bffd17 	ldw	r2,-12(fp)
   4829c:	10800d17 	ldw	r2,52(r2)
   482a0:	10800058 	cmpnei	r2,r2,1
   482a4:	10001c1e 	bne	r2,zero,48318 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   482a8:	e0bffd17 	ldw	r2,-12(fp)
   482ac:	10800917 	ldw	r2,36(r2)
   482b0:	109e0014 	ori	r2,r2,30720
   482b4:	1004d1fa 	srli	r2,r2,7
   482b8:	1007883a 	mov	r3,r2
   482bc:	00bfff84 	movi	r2,-2
   482c0:	1884703a 	and	r2,r3,r2
   482c4:	1007883a 	mov	r3,r2
   482c8:	e0bffe17 	ldw	r2,-8(fp)
   482cc:	1884b03a 	or	r2,r3,r2
   482d0:	10803fcc 	andi	r2,r2,255
   482d4:	e0ffff03 	ldbu	r3,-4(fp)
   482d8:	000f883a 	mov	r7,zero
   482dc:	180d883a 	mov	r6,r3
   482e0:	100b883a 	mov	r5,r2
   482e4:	e13ffd17 	ldw	r4,-12(fp)
   482e8:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   482ec:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   482f0:	e0bffd17 	ldw	r2,-12(fp)
   482f4:	10800917 	ldw	r2,36(r2)
   482f8:	10803fcc 	andi	r2,r2,255
   482fc:	000f883a 	mov	r7,zero
   48300:	000d883a 	mov	r6,zero
   48304:	100b883a 	mov	r5,r2
   48308:	e13ffd17 	ldw	r4,-12(fp)
   4830c:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   48310:	e0bffc15 	stw	r2,-16(fp)
   48314:	00000e06 	br	48350 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   48318:	e0bffd17 	ldw	r2,-12(fp)
   4831c:	10800917 	ldw	r2,36(r2)
   48320:	1085883a 	add	r2,r2,r2
   48324:	1007883a 	mov	r3,r2
   48328:	e0bffe17 	ldw	r2,-8(fp)
   4832c:	1884b03a 	or	r2,r3,r2
   48330:	10803fcc 	andi	r2,r2,255
   48334:	e0ffff03 	ldbu	r3,-4(fp)
   48338:	000f883a 	mov	r7,zero
   4833c:	180d883a 	mov	r6,r3
   48340:	100b883a 	mov	r5,r2
   48344:	e13ffd17 	ldw	r4,-12(fp)
   48348:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   4834c:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   48350:	e0bffc17 	ldw	r2,-16(fp)
}
   48354:	e037883a 	mov	sp,fp
   48358:	dfc00117 	ldw	ra,4(sp)
   4835c:	df000017 	ldw	fp,0(sp)
   48360:	dec00204 	addi	sp,sp,8
   48364:	f800283a 	ret

00048368 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   48368:	defffd04 	addi	sp,sp,-12
   4836c:	df000215 	stw	fp,8(sp)
   48370:	df000204 	addi	fp,sp,8
   48374:	e13ffe15 	stw	r4,-8(fp)
   48378:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   4837c:	e0bffe17 	ldw	r2,-8(fp)
   48380:	10c00917 	ldw	r3,36(r2)
   48384:	e0bfff17 	ldw	r2,-4(fp)
   48388:	10c00015 	stw	r3,0(r2)
}
   4838c:	0001883a 	nop
   48390:	e037883a 	mov	sp,fp
   48394:	df000017 	ldw	fp,0(sp)
   48398:	dec00104 	addi	sp,sp,4
   4839c:	f800283a 	ret

000483a0 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   483a0:	defffd04 	addi	sp,sp,-12
   483a4:	df000215 	stw	fp,8(sp)
   483a8:	df000204 	addi	fp,sp,8
   483ac:	e13ffe15 	stw	r4,-8(fp)
   483b0:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   483b4:	e0bffe17 	ldw	r2,-8(fp)
   483b8:	e0ffff17 	ldw	r3,-4(fp)
   483bc:	10c00915 	stw	r3,36(r2)
}
   483c0:	0001883a 	nop
   483c4:	e037883a 	mov	sp,fp
   483c8:	df000017 	ldw	fp,0(sp)
   483cc:	dec00104 	addi	sp,sp,4
   483d0:	f800283a 	ret

000483d4 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   483d4:	defffd04 	addi	sp,sp,-12
   483d8:	df000215 	stw	fp,8(sp)
   483dc:	df000204 	addi	fp,sp,8
   483e0:	e13ffe15 	stw	r4,-8(fp)
   483e4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   483e8:	e0bffe17 	ldw	r2,-8(fp)
   483ec:	10800317 	ldw	r2,12(r2)
   483f0:	10800404 	addi	r2,r2,16
   483f4:	10800037 	ldwio	r2,0(r2)
   483f8:	1080010c 	andi	r2,r2,4
   483fc:	10000326 	beq	r2,zero,4840c <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   48400:	e0bfff17 	ldw	r2,-4(fp)
   48404:	00fffec4 	movi	r3,-5
   48408:	10c00015 	stw	r3,0(r2)
    }
}
   4840c:	0001883a 	nop
   48410:	e037883a 	mov	sp,fp
   48414:	df000017 	ldw	fp,0(sp)
   48418:	dec00104 	addi	sp,sp,4
   4841c:	f800283a 	ret

00048420 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   48420:	defffd04 	addi	sp,sp,-12
   48424:	df000215 	stw	fp,8(sp)
   48428:	df000204 	addi	fp,sp,8
   4842c:	e13ffe15 	stw	r4,-8(fp)
   48430:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   48434:	e0bffe17 	ldw	r2,-8(fp)
   48438:	10800317 	ldw	r2,12(r2)
   4843c:	10800404 	addi	r2,r2,16
   48440:	10800037 	ldwio	r2,0(r2)
   48444:	1080020c 	andi	r2,r2,8
   48448:	10000326 	beq	r2,zero,48458 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   4844c:	e0bfff17 	ldw	r2,-4(fp)
   48450:	00fffe84 	movi	r3,-6
   48454:	10c00015 	stw	r3,0(r2)
    }
}
   48458:	0001883a 	nop
   4845c:	e037883a 	mov	sp,fp
   48460:	df000017 	ldw	fp,0(sp)
   48464:	dec00104 	addi	sp,sp,4
   48468:	f800283a 	ret

0004846c <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   4846c:	defff804 	addi	sp,sp,-32
   48470:	dfc00715 	stw	ra,28(sp)
   48474:	df000615 	stw	fp,24(sp)
   48478:	df000604 	addi	fp,sp,24
   4847c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   48480:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   48484:	e0bfff17 	ldw	r2,-4(fp)
   48488:	10800717 	ldw	r2,28(r2)
   4848c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   48490:	e0bffb17 	ldw	r2,-20(fp)
   48494:	10800117 	ldw	r2,4(r2)
   48498:	10800044 	addi	r2,r2,1
   4849c:	1089c424 	muli	r2,r2,10000
   484a0:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   484a4:	e0bffd04 	addi	r2,fp,-12
   484a8:	100b883a 	mov	r5,r2
   484ac:	e13fff17 	ldw	r4,-4(fp)
   484b0:	00492ec0 	call	492ec <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   484b4:	e0bffd17 	ldw	r2,-12(fp)
   484b8:	100b883a 	mov	r5,r2
   484bc:	e13fff17 	ldw	r4,-4(fp)
   484c0:	00492200 	call	49220 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   484c4:	e0bffc04 	addi	r2,fp,-16
   484c8:	100b883a 	mov	r5,r2
   484cc:	e13fff17 	ldw	r4,-4(fp)
   484d0:	00483d40 	call	483d4 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   484d4:	e0bffc17 	ldw	r2,-16(fp)
   484d8:	10002226 	beq	r2,zero,48564 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
   484dc:	e0bffb17 	ldw	r2,-20(fp)
   484e0:	10800217 	ldw	r2,8(r2)
   484e4:	10001d26 	beq	r2,zero,4855c <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   484e8:	00000d06 	br	48520 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
   484ec:	e0bffa17 	ldw	r2,-24(fp)
   484f0:	108002a8 	cmpgeui	r2,r2,10
   484f4:	1000021e 	bne	r2,zero,48500 <alt_avalon_i2c_interrupt_transaction_status+0x94>
   484f8:	0109c404 	movi	r4,10000
   484fc:	004a11c0 	call	4a11c <alt_busy_sleep>
              if (--timeout == 0)
   48500:	e0bffa17 	ldw	r2,-24(fp)
   48504:	10bfffc4 	addi	r2,r2,-1
   48508:	e0bffa15 	stw	r2,-24(fp)
   4850c:	e0bffa17 	ldw	r2,-24(fp)
   48510:	1000031e 	bne	r2,zero,48520 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   48514:	00bfff84 	movi	r2,-2
   48518:	e0bffc15 	stw	r2,-16(fp)
                 break;
   4851c:	00000306 	br	4852c <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   48520:	e13fff17 	ldw	r4,-4(fp)
   48524:	00480000 	call	48000 <alt_avalon_i2c_is_busy>
   48528:	103ff01e 	bne	r2,zero,484ec <__alt_data_end+0xfffe13ec>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   4852c:	e0bffb17 	ldw	r2,-20(fp)
   48530:	10800017 	ldw	r2,0(r2)
   48534:	e0fffe04 	addi	r3,fp,-8
   48538:	180f883a 	mov	r7,r3
   4853c:	000d883a 	mov	r6,zero
   48540:	100b883a 	mov	r5,r2
   48544:	e13fff17 	ldw	r4,-4(fp)
   48548:	00480440 	call	48044 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   4854c:	e13fff17 	ldw	r4,-4(fp)
   48550:	0047ca80 	call	47ca8 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   48554:	e0bffb17 	ldw	r2,-20(fp)
   48558:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   4855c:	e0bffc17 	ldw	r2,-16(fp)
   48560:	00000a06 	br	4858c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
   48564:	e0bffb17 	ldw	r2,-20(fp)
   48568:	10800217 	ldw	r2,8(r2)
   4856c:	10000626 	beq	r2,zero,48588 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   48570:	e0bffd17 	ldw	r2,-12(fp)
   48574:	100b883a 	mov	r5,r2
   48578:	e13fff17 	ldw	r4,-4(fp)
   4857c:	00492880 	call	49288 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   48580:	00bffe44 	movi	r2,-7
   48584:	00000106 	br	4858c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   48588:	0005883a 	mov	r2,zero
}
   4858c:	e037883a 	mov	sp,fp
   48590:	dfc00117 	ldw	ra,4(sp)
   48594:	df000017 	ldw	fp,0(sp)
   48598:	dec00204 	addi	sp,sp,8
   4859c:	f800283a 	ret

000485a0 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   485a0:	defff704 	addi	sp,sp,-36
   485a4:	dfc00815 	stw	ra,32(sp)
   485a8:	df000715 	stw	fp,28(sp)
   485ac:	df000704 	addi	fp,sp,28
   485b0:	e13ffc15 	stw	r4,-16(fp)
   485b4:	e17ffd15 	stw	r5,-12(fp)
   485b8:	e1bffe15 	stw	r6,-8(fp)
   485bc:	3805883a 	mov	r2,r7
   485c0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   485c4:	0089c404 	movi	r2,10000
   485c8:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   485cc:	00002206 	br	48658 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   485d0:	e0bffb17 	ldw	r2,-20(fp)
   485d4:	108002a8 	cmpgeui	r2,r2,10
   485d8:	1000021e 	bne	r2,zero,485e4 <alt_avalon_i2c_master_tx+0x44>
   485dc:	0109c404 	movi	r4,10000
   485e0:	004a11c0 	call	4a11c <alt_busy_sleep>
      if (use_interrupts)
   485e4:	e0bfff03 	ldbu	r2,-4(fp)
   485e8:	10000926 	beq	r2,zero,48610 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   485ec:	00800044 	movi	r2,1
   485f0:	d8800015 	stw	r2,0(sp)
   485f4:	000f883a 	mov	r7,zero
   485f8:	e1bffe17 	ldw	r6,-8(fp)
   485fc:	e17ffd17 	ldw	r5,-12(fp)
   48600:	e13ffc17 	ldw	r4,-16(fp)
   48604:	0048b480 	call	48b48 <alt_avalon_i2c_master_transmit_using_interrupts>
   48608:	e0bffa15 	stw	r2,-24(fp)
   4860c:	00000806 	br	48630 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   48610:	00800044 	movi	r2,1
   48614:	d8800015 	stw	r2,0(sp)
   48618:	000f883a 	mov	r7,zero
   4861c:	e1bffe17 	ldw	r6,-8(fp)
   48620:	e17ffd17 	ldw	r5,-12(fp)
   48624:	e13ffc17 	ldw	r4,-16(fp)
   48628:	004898c0 	call	4898c <alt_avalon_i2c_master_transmit>
   4862c:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   48630:	e0bffa17 	ldw	r2,-24(fp)
   48634:	10bffea0 	cmpeqi	r2,r2,-6
   48638:	1000061e 	bne	r2,zero,48654 <alt_avalon_i2c_master_tx+0xb4>
   4863c:	e0bffa17 	ldw	r2,-24(fp)
   48640:	10bffee0 	cmpeqi	r2,r2,-5
   48644:	1000031e 	bne	r2,zero,48654 <alt_avalon_i2c_master_tx+0xb4>
   48648:	e0bffa17 	ldw	r2,-24(fp)
   4864c:	10bffe58 	cmpnei	r2,r2,-7
   48650:	1000061e 	bne	r2,zero,4866c <alt_avalon_i2c_master_tx+0xcc>
   48654:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   48658:	e0bffb17 	ldw	r2,-20(fp)
   4865c:	10ffffc4 	addi	r3,r2,-1
   48660:	e0fffb15 	stw	r3,-20(fp)
   48664:	103fda1e 	bne	r2,zero,485d0 <__alt_data_end+0xfffe14d0>
   48668:	00000106 	br	48670 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   4866c:	0001883a 	nop
    }

    return status;
   48670:	e0bffa17 	ldw	r2,-24(fp)
}        
   48674:	e037883a 	mov	sp,fp
   48678:	dfc00117 	ldw	ra,4(sp)
   4867c:	df000017 	ldw	fp,0(sp)
   48680:	dec00204 	addi	sp,sp,8
   48684:	f800283a 	ret

00048688 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   48688:	defff704 	addi	sp,sp,-36
   4868c:	dfc00815 	stw	ra,32(sp)
   48690:	df000715 	stw	fp,28(sp)
   48694:	df000704 	addi	fp,sp,28
   48698:	e13ffc15 	stw	r4,-16(fp)
   4869c:	e17ffd15 	stw	r5,-12(fp)
   486a0:	e1bffe15 	stw	r6,-8(fp)
   486a4:	3805883a 	mov	r2,r7
   486a8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   486ac:	0089c404 	movi	r2,10000
   486b0:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   486b4:	e0bfff03 	ldbu	r2,-4(fp)
   486b8:	10003426 	beq	r2,zero,4878c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   486bc:	00001706 	br	4871c <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   486c0:	e0bffb17 	ldw	r2,-20(fp)
   486c4:	108002a8 	cmpgeui	r2,r2,10
   486c8:	1000021e 	bne	r2,zero,486d4 <alt_avalon_i2c_master_rx+0x4c>
   486cc:	0109c404 	movi	r4,10000
   486d0:	004a11c0 	call	4a11c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   486d4:	00800044 	movi	r2,1
   486d8:	d8800015 	stw	r2,0(sp)
   486dc:	000f883a 	mov	r7,zero
   486e0:	e1bffe17 	ldw	r6,-8(fp)
   486e4:	e17ffd17 	ldw	r5,-12(fp)
   486e8:	e13ffc17 	ldw	r4,-16(fp)
   486ec:	0048f5c0 	call	48f5c <alt_avalon_i2c_master_receive_using_interrupts>
   486f0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   486f4:	e0bffa17 	ldw	r2,-24(fp)
   486f8:	10bffea0 	cmpeqi	r2,r2,-6
   486fc:	1000061e 	bne	r2,zero,48718 <alt_avalon_i2c_master_rx+0x90>
   48700:	e0bffa17 	ldw	r2,-24(fp)
   48704:	10bffee0 	cmpeqi	r2,r2,-5
   48708:	1000031e 	bne	r2,zero,48718 <alt_avalon_i2c_master_rx+0x90>
   4870c:	e0bffa17 	ldw	r2,-24(fp)
   48710:	10bffe58 	cmpnei	r2,r2,-7
   48714:	1000221e 	bne	r2,zero,487a0 <alt_avalon_i2c_master_rx+0x118>
   48718:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   4871c:	e0bffb17 	ldw	r2,-20(fp)
   48720:	10ffffc4 	addi	r3,r2,-1
   48724:	e0fffb15 	stw	r3,-20(fp)
   48728:	103fe51e 	bne	r2,zero,486c0 <__alt_data_end+0xfffe15c0>
   4872c:	00001f06 	br	487ac <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   48730:	e0bffb17 	ldw	r2,-20(fp)
   48734:	108002a8 	cmpgeui	r2,r2,10
   48738:	1000021e 	bne	r2,zero,48744 <alt_avalon_i2c_master_rx+0xbc>
   4873c:	0109c404 	movi	r4,10000
   48740:	004a11c0 	call	4a11c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   48744:	00800044 	movi	r2,1
   48748:	d8800015 	stw	r2,0(sp)
   4874c:	000f883a 	mov	r7,zero
   48750:	e1bffe17 	ldw	r6,-8(fp)
   48754:	e17ffd17 	ldw	r5,-12(fp)
   48758:	e13ffc17 	ldw	r4,-16(fp)
   4875c:	0048d500 	call	48d50 <alt_avalon_i2c_master_receive>
   48760:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   48764:	e0bffa17 	ldw	r2,-24(fp)
   48768:	10bffea0 	cmpeqi	r2,r2,-6
   4876c:	1000061e 	bne	r2,zero,48788 <alt_avalon_i2c_master_rx+0x100>
   48770:	e0bffa17 	ldw	r2,-24(fp)
   48774:	10bffee0 	cmpeqi	r2,r2,-5
   48778:	1000031e 	bne	r2,zero,48788 <alt_avalon_i2c_master_rx+0x100>
   4877c:	e0bffa17 	ldw	r2,-24(fp)
   48780:	10bffe58 	cmpnei	r2,r2,-7
   48784:	1000081e 	bne	r2,zero,487a8 <alt_avalon_i2c_master_rx+0x120>
   48788:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   4878c:	e0bffb17 	ldw	r2,-20(fp)
   48790:	10ffffc4 	addi	r3,r2,-1
   48794:	e0fffb15 	stw	r3,-20(fp)
   48798:	103fe51e 	bne	r2,zero,48730 <__alt_data_end+0xfffe1630>
   4879c:	00000306 	br	487ac <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   487a0:	0001883a 	nop
   487a4:	00000106 	br	487ac <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   487a8:	0001883a 	nop
      }
    }
    
    return status;
   487ac:	e0bffa17 	ldw	r2,-24(fp)
}        
   487b0:	e037883a 	mov	sp,fp
   487b4:	dfc00117 	ldw	ra,4(sp)
   487b8:	df000017 	ldw	fp,0(sp)
   487bc:	dec00204 	addi	sp,sp,8
   487c0:	f800283a 	ret

000487c4 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   487c4:	defff604 	addi	sp,sp,-40
   487c8:	dfc00915 	stw	ra,36(sp)
   487cc:	df000815 	stw	fp,32(sp)
   487d0:	df000804 	addi	fp,sp,32
   487d4:	e13ffb15 	stw	r4,-20(fp)
   487d8:	e17ffc15 	stw	r5,-16(fp)
   487dc:	e1bffd15 	stw	r6,-12(fp)
   487e0:	e1fffe15 	stw	r7,-8(fp)
   487e4:	e0800317 	ldw	r2,12(fp)
   487e8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   487ec:	0089c404 	movi	r2,10000
   487f0:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   487f4:	e0bfff03 	ldbu	r2,-4(fp)
   487f8:	10005626 	beq	r2,zero,48954 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   487fc:	00002806 	br	488a0 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   48800:	e0bffa17 	ldw	r2,-24(fp)
   48804:	108002a8 	cmpgeui	r2,r2,10
   48808:	1000021e 	bne	r2,zero,48814 <alt_avalon_i2c_master_tx_rx+0x50>
   4880c:	0109c404 	movi	r4,10000
   48810:	004a11c0 	call	4a11c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   48814:	d8000015 	stw	zero,0(sp)
   48818:	000f883a 	mov	r7,zero
   4881c:	e1bffd17 	ldw	r6,-12(fp)
   48820:	e17ffc17 	ldw	r5,-16(fp)
   48824:	e13ffb17 	ldw	r4,-20(fp)
   48828:	0048b480 	call	48b48 <alt_avalon_i2c_master_transmit_using_interrupts>
   4882c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   48830:	e0bff917 	ldw	r2,-28(fp)
   48834:	10bffea0 	cmpeqi	r2,r2,-6
   48838:	1000191e 	bne	r2,zero,488a0 <alt_avalon_i2c_master_tx_rx+0xdc>
   4883c:	e0bff917 	ldw	r2,-28(fp)
   48840:	10bffee0 	cmpeqi	r2,r2,-5
   48844:	1000161e 	bne	r2,zero,488a0 <alt_avalon_i2c_master_tx_rx+0xdc>
   48848:	e0bff917 	ldw	r2,-28(fp)
   4884c:	10bffe58 	cmpnei	r2,r2,-7
   48850:	1000011e 	bne	r2,zero,48858 <alt_avalon_i2c_master_tx_rx+0x94>
   48854:	00001206 	br	488a0 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   48858:	00800044 	movi	r2,1
   4885c:	d8800015 	stw	r2,0(sp)
   48860:	01c00044 	movi	r7,1
   48864:	e1800217 	ldw	r6,8(fp)
   48868:	e17ffe17 	ldw	r5,-8(fp)
   4886c:	e13ffb17 	ldw	r4,-20(fp)
   48870:	0048f5c0 	call	48f5c <alt_avalon_i2c_master_receive_using_interrupts>
   48874:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   48878:	e0bff917 	ldw	r2,-28(fp)
   4887c:	10bffea0 	cmpeqi	r2,r2,-6
   48880:	1000061e 	bne	r2,zero,4889c <alt_avalon_i2c_master_tx_rx+0xd8>
   48884:	e0bff917 	ldw	r2,-28(fp)
   48888:	10bffee0 	cmpeqi	r2,r2,-5
   4888c:	1000031e 	bne	r2,zero,4889c <alt_avalon_i2c_master_tx_rx+0xd8>
   48890:	e0bff917 	ldw	r2,-28(fp)
   48894:	10bffe58 	cmpnei	r2,r2,-7
   48898:	1000331e 	bne	r2,zero,48968 <alt_avalon_i2c_master_tx_rx+0x1a4>
   4889c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   488a0:	e0bffa17 	ldw	r2,-24(fp)
   488a4:	10ffffc4 	addi	r3,r2,-1
   488a8:	e0fffa15 	stw	r3,-24(fp)
   488ac:	103fd41e 	bne	r2,zero,48800 <__alt_data_end+0xfffe1700>
   488b0:	00003006 	br	48974 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   488b4:	e0bffa17 	ldw	r2,-24(fp)
   488b8:	108002a8 	cmpgeui	r2,r2,10
   488bc:	1000021e 	bne	r2,zero,488c8 <alt_avalon_i2c_master_tx_rx+0x104>
   488c0:	0109c404 	movi	r4,10000
   488c4:	004a11c0 	call	4a11c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   488c8:	d8000015 	stw	zero,0(sp)
   488cc:	000f883a 	mov	r7,zero
   488d0:	e1bffd17 	ldw	r6,-12(fp)
   488d4:	e17ffc17 	ldw	r5,-16(fp)
   488d8:	e13ffb17 	ldw	r4,-20(fp)
   488dc:	004898c0 	call	4898c <alt_avalon_i2c_master_transmit>
   488e0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   488e4:	e0bff917 	ldw	r2,-28(fp)
   488e8:	10bffea0 	cmpeqi	r2,r2,-6
   488ec:	1000191e 	bne	r2,zero,48954 <alt_avalon_i2c_master_tx_rx+0x190>
   488f0:	e0bff917 	ldw	r2,-28(fp)
   488f4:	10bffee0 	cmpeqi	r2,r2,-5
   488f8:	1000161e 	bne	r2,zero,48954 <alt_avalon_i2c_master_tx_rx+0x190>
   488fc:	e0bff917 	ldw	r2,-28(fp)
   48900:	10bffe58 	cmpnei	r2,r2,-7
   48904:	1000011e 	bne	r2,zero,4890c <alt_avalon_i2c_master_tx_rx+0x148>
   48908:	00001206 	br	48954 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   4890c:	00800044 	movi	r2,1
   48910:	d8800015 	stw	r2,0(sp)
   48914:	01c00044 	movi	r7,1
   48918:	e1800217 	ldw	r6,8(fp)
   4891c:	e17ffe17 	ldw	r5,-8(fp)
   48920:	e13ffb17 	ldw	r4,-20(fp)
   48924:	0048d500 	call	48d50 <alt_avalon_i2c_master_receive>
   48928:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   4892c:	e0bff917 	ldw	r2,-28(fp)
   48930:	10bffea0 	cmpeqi	r2,r2,-6
   48934:	1000061e 	bne	r2,zero,48950 <alt_avalon_i2c_master_tx_rx+0x18c>
   48938:	e0bff917 	ldw	r2,-28(fp)
   4893c:	10bffee0 	cmpeqi	r2,r2,-5
   48940:	1000031e 	bne	r2,zero,48950 <alt_avalon_i2c_master_tx_rx+0x18c>
   48944:	e0bff917 	ldw	r2,-28(fp)
   48948:	10bffe58 	cmpnei	r2,r2,-7
   4894c:	1000081e 	bne	r2,zero,48970 <alt_avalon_i2c_master_tx_rx+0x1ac>
   48950:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   48954:	e0bffa17 	ldw	r2,-24(fp)
   48958:	10ffffc4 	addi	r3,r2,-1
   4895c:	e0fffa15 	stw	r3,-24(fp)
   48960:	103fd41e 	bne	r2,zero,488b4 <__alt_data_end+0xfffe17b4>
   48964:	00000306 	br	48974 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   48968:	0001883a 	nop
   4896c:	00000106 	br	48974 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   48970:	0001883a 	nop
      }
    }
    
    return status;
   48974:	e0bff917 	ldw	r2,-28(fp)
}                                       
   48978:	e037883a 	mov	sp,fp
   4897c:	dfc00117 	ldw	ra,4(sp)
   48980:	df000017 	ldw	fp,0(sp)
   48984:	dec00204 	addi	sp,sp,8
   48988:	f800283a 	ret

0004898c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   4898c:	defff704 	addi	sp,sp,-36
   48990:	dfc00815 	stw	ra,32(sp)
   48994:	df000715 	stw	fp,28(sp)
   48998:	df000704 	addi	fp,sp,28
   4899c:	e13ffb15 	stw	r4,-20(fp)
   489a0:	e17ffc15 	stw	r5,-16(fp)
   489a4:	e1bffd15 	stw	r6,-12(fp)
   489a8:	3807883a 	mov	r3,r7
   489ac:	e0800217 	ldw	r2,8(fp)
   489b0:	e0fffe05 	stb	r3,-8(fp)
   489b4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   489b8:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   489bc:	e0bffd17 	ldw	r2,-12(fp)
   489c0:	1089c424 	muli	r2,r2,10000
   489c4:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   489c8:	e0bffd17 	ldw	r2,-12(fp)
   489cc:	1000021e 	bne	r2,zero,489d8 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   489d0:	0005883a 	mov	r2,zero
   489d4:	00005706 	br	48b34 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   489d8:	e0bffe03 	ldbu	r2,-8(fp)
   489dc:	10000a1e 	bne	r2,zero,48a08 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   489e0:	e13ffb17 	ldw	r4,-20(fp)
   489e4:	0047c100 	call	47c10 <alt_avalon_i2c_enable>
   489e8:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   489ec:	e0bffa17 	ldw	r2,-24(fp)
   489f0:	10000226 	beq	r2,zero,489fc <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
   489f4:	e0bffa17 	ldw	r2,-24(fp)
   489f8:	00004e06 	br	48b34 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   489fc:	01400704 	movi	r5,28
   48a00:	e13ffb17 	ldw	r4,-20(fp)
   48a04:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   48a08:	e0bffe03 	ldbu	r2,-8(fp)
   48a0c:	100d883a 	mov	r6,r2
   48a10:	000b883a 	mov	r5,zero
   48a14:	e13ffb17 	ldw	r4,-20(fp)
   48a18:	00482780 	call	48278 <alt_avalon_i2c_send_address>
   48a1c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   48a20:	e0bffa17 	ldw	r2,-24(fp)
   48a24:	1000271e 	bne	r2,zero,48ac4 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   48a28:	00000f06 	br	48a68 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   48a2c:	e0bffc17 	ldw	r2,-16(fp)
   48a30:	10800003 	ldbu	r2,0(r2)
   48a34:	10803fcc 	andi	r2,r2,255
   48a38:	000f883a 	mov	r7,zero
   48a3c:	000d883a 	mov	r6,zero
   48a40:	100b883a 	mov	r5,r2
   48a44:	e13ffb17 	ldw	r4,-20(fp)
   48a48:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   48a4c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   48a50:	e0bffc17 	ldw	r2,-16(fp)
   48a54:	10800044 	addi	r2,r2,1
   48a58:	e0bffc15 	stw	r2,-16(fp)
            --size;
   48a5c:	e0bffd17 	ldw	r2,-12(fp)
   48a60:	10bfffc4 	addi	r2,r2,-1
   48a64:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   48a68:	e0bffd17 	ldw	r2,-12(fp)
   48a6c:	108000b0 	cmpltui	r2,r2,2
   48a70:	1000021e 	bne	r2,zero,48a7c <alt_avalon_i2c_master_transmit+0xf0>
   48a74:	e0bffa17 	ldw	r2,-24(fp)
   48a78:	103fec26 	beq	r2,zero,48a2c <__alt_data_end+0xfffe192c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   48a7c:	e0bffa17 	ldw	r2,-24(fp)
   48a80:	1000101e 	bne	r2,zero,48ac4 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   48a84:	e0bffc17 	ldw	r2,-16(fp)
   48a88:	10800003 	ldbu	r2,0(r2)
   48a8c:	10803fcc 	andi	r2,r2,255
   48a90:	e0ffff03 	ldbu	r3,-4(fp)
   48a94:	180f883a 	mov	r7,r3
   48a98:	000d883a 	mov	r6,zero
   48a9c:	100b883a 	mov	r5,r2
   48aa0:	e13ffb17 	ldw	r4,-20(fp)
   48aa4:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   48aa8:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   48aac:	e0bffc17 	ldw	r2,-16(fp)
   48ab0:	10800044 	addi	r2,r2,1
   48ab4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   48ab8:	e0bffd17 	ldw	r2,-12(fp)
   48abc:	10bfffc4 	addi	r2,r2,-1
   48ac0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   48ac4:	e0bfff03 	ldbu	r2,-4(fp)
   48ac8:	1000101e 	bne	r2,zero,48b0c <alt_avalon_i2c_master_transmit+0x180>
   48acc:	e0bffa17 	ldw	r2,-24(fp)
   48ad0:	10001726 	beq	r2,zero,48b30 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   48ad4:	00000d06 	br	48b0c <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
   48ad8:	e0bff917 	ldw	r2,-28(fp)
   48adc:	108002a8 	cmpgeui	r2,r2,10
   48ae0:	1000021e 	bne	r2,zero,48aec <alt_avalon_i2c_master_transmit+0x160>
   48ae4:	0109c404 	movi	r4,10000
   48ae8:	004a11c0 	call	4a11c <alt_busy_sleep>
            if (--timeout == 0)
   48aec:	e0bff917 	ldw	r2,-28(fp)
   48af0:	10bfffc4 	addi	r2,r2,-1
   48af4:	e0bff915 	stw	r2,-28(fp)
   48af8:	e0bff917 	ldw	r2,-28(fp)
   48afc:	1000031e 	bne	r2,zero,48b0c <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   48b00:	00bfff84 	movi	r2,-2
   48b04:	e0bffa15 	stw	r2,-24(fp)
               break;
   48b08:	00000306 	br	48b18 <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   48b0c:	e13ffb17 	ldw	r4,-20(fp)
   48b10:	00480000 	call	48000 <alt_avalon_i2c_is_busy>
   48b14:	103ff01e 	bne	r2,zero,48ad8 <__alt_data_end+0xfffe19d8>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   48b18:	e0bffa04 	addi	r2,fp,-24
   48b1c:	100b883a 	mov	r5,r2
   48b20:	e13ffb17 	ldw	r4,-20(fp)
   48b24:	00483d40 	call	483d4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   48b28:	e13ffb17 	ldw	r4,-20(fp)
   48b2c:	0047ca80 	call	47ca8 <alt_avalon_i2c_disable>
    }


    return status;
   48b30:	e0bffa17 	ldw	r2,-24(fp)
}
   48b34:	e037883a 	mov	sp,fp
   48b38:	dfc00117 	ldw	ra,4(sp)
   48b3c:	df000017 	ldw	fp,0(sp)
   48b40:	dec00204 	addi	sp,sp,8
   48b44:	f800283a 	ret

00048b48 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   48b48:	defff604 	addi	sp,sp,-40
   48b4c:	dfc00915 	stw	ra,36(sp)
   48b50:	df000815 	stw	fp,32(sp)
   48b54:	df000804 	addi	fp,sp,32
   48b58:	e13ffb15 	stw	r4,-20(fp)
   48b5c:	e17ffc15 	stw	r5,-16(fp)
   48b60:	e1bffd15 	stw	r6,-12(fp)
   48b64:	3807883a 	mov	r3,r7
   48b68:	e0800217 	ldw	r2,8(fp)
   48b6c:	e0fffe05 	stb	r3,-8(fp)
   48b70:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   48b74:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   48b78:	e0bffd17 	ldw	r2,-12(fp)
   48b7c:	1089c424 	muli	r2,r2,10000
   48b80:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   48b84:	e0bffb17 	ldw	r2,-20(fp)
   48b88:	10800717 	ldw	r2,28(r2)
   48b8c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   48b90:	e0bffd17 	ldw	r2,-12(fp)
   48b94:	1000021e 	bne	r2,zero,48ba0 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
   48b98:	0005883a 	mov	r2,zero
   48b9c:	00006706 	br	48d3c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   48ba0:	e0bffb17 	ldw	r2,-20(fp)
   48ba4:	10c00617 	ldw	r3,24(r2)
   48ba8:	00800134 	movhi	r2,4
   48bac:	109e2504 	addi	r2,r2,30868
   48bb0:	18800226 	beq	r3,r2,48bbc <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   48bb4:	00bfff44 	movi	r2,-3
   48bb8:	00006006 	br	48d3c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   48bbc:	e0bffe03 	ldbu	r2,-8(fp)
   48bc0:	10000a1e 	bne	r2,zero,48bec <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   48bc4:	e13ffb17 	ldw	r4,-20(fp)
   48bc8:	0047c100 	call	47c10 <alt_avalon_i2c_enable>
   48bcc:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   48bd0:	e0bff817 	ldw	r2,-32(fp)
   48bd4:	10000226 	beq	r2,zero,48be0 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
   48bd8:	e0bff817 	ldw	r2,-32(fp)
   48bdc:	00005706 	br	48d3c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   48be0:	01400704 	movi	r5,28
   48be4:	e13ffb17 	ldw	r4,-20(fp)
   48be8:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   48bec:	e0bffe03 	ldbu	r2,-8(fp)
   48bf0:	100d883a 	mov	r6,r2
   48bf4:	000b883a 	mov	r5,zero
   48bf8:	e13ffb17 	ldw	r4,-20(fp)
   48bfc:	00482780 	call	48278 <alt_avalon_i2c_send_address>
   48c00:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   48c04:	e0bff817 	ldw	r2,-32(fp)
   48c08:	1000271e 	bne	r2,zero,48ca8 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   48c0c:	00000f06 	br	48c4c <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   48c10:	e0bffc17 	ldw	r2,-16(fp)
   48c14:	10800003 	ldbu	r2,0(r2)
   48c18:	10803fcc 	andi	r2,r2,255
   48c1c:	000f883a 	mov	r7,zero
   48c20:	000d883a 	mov	r6,zero
   48c24:	100b883a 	mov	r5,r2
   48c28:	e13ffb17 	ldw	r4,-20(fp)
   48c2c:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   48c30:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   48c34:	e0bffc17 	ldw	r2,-16(fp)
   48c38:	10800044 	addi	r2,r2,1
   48c3c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   48c40:	e0bffd17 	ldw	r2,-12(fp)
   48c44:	10bfffc4 	addi	r2,r2,-1
   48c48:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   48c4c:	e0bffd17 	ldw	r2,-12(fp)
   48c50:	108000b0 	cmpltui	r2,r2,2
   48c54:	1000021e 	bne	r2,zero,48c60 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
   48c58:	e0bff817 	ldw	r2,-32(fp)
   48c5c:	103fec26 	beq	r2,zero,48c10 <__alt_data_end+0xfffe1b10>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   48c60:	e0bff817 	ldw	r2,-32(fp)
   48c64:	1000101e 	bne	r2,zero,48ca8 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   48c68:	e0bffc17 	ldw	r2,-16(fp)
   48c6c:	10800003 	ldbu	r2,0(r2)
   48c70:	10803fcc 	andi	r2,r2,255
   48c74:	e0ffff03 	ldbu	r3,-4(fp)
   48c78:	180f883a 	mov	r7,r3
   48c7c:	000d883a 	mov	r6,zero
   48c80:	100b883a 	mov	r5,r2
   48c84:	e13ffb17 	ldw	r4,-20(fp)
   48c88:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   48c8c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   48c90:	e0bffc17 	ldw	r2,-16(fp)
   48c94:	10800044 	addi	r2,r2,1
   48c98:	e0bffc15 	stw	r2,-16(fp)
            --size;
   48c9c:	e0bffd17 	ldw	r2,-12(fp)
   48ca0:	10bfffc4 	addi	r2,r2,-1
   48ca4:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   48ca8:	e0bff817 	ldw	r2,-32(fp)
   48cac:	10001426 	beq	r2,zero,48d00 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   48cb0:	00000d06 	br	48ce8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   48cb4:	e0bff917 	ldw	r2,-28(fp)
   48cb8:	108002a8 	cmpgeui	r2,r2,10
   48cbc:	1000021e 	bne	r2,zero,48cc8 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
   48cc0:	0109c404 	movi	r4,10000
   48cc4:	004a11c0 	call	4a11c <alt_busy_sleep>
            if (--timeout == 0)
   48cc8:	e0bff917 	ldw	r2,-28(fp)
   48ccc:	10bfffc4 	addi	r2,r2,-1
   48cd0:	e0bff915 	stw	r2,-28(fp)
   48cd4:	e0bff917 	ldw	r2,-28(fp)
   48cd8:	1000031e 	bne	r2,zero,48ce8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   48cdc:	00bfff84 	movi	r2,-2
   48ce0:	e0bff815 	stw	r2,-32(fp)
               break;
   48ce4:	00000306 	br	48cf4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   48ce8:	e13ffb17 	ldw	r4,-20(fp)
   48cec:	00480000 	call	48000 <alt_avalon_i2c_is_busy>
   48cf0:	103ff01e 	bne	r2,zero,48cb4 <__alt_data_end+0xfffe1bb4>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   48cf4:	e13ffb17 	ldw	r4,-20(fp)
   48cf8:	0047ca80 	call	47ca8 <alt_avalon_i2c_disable>
   48cfc:	00000e06 	br	48d38 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
   48d00:	e0bfff03 	ldbu	r2,-4(fp)
   48d04:	10000c26 	beq	r2,zero,48d38 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   48d08:	01400704 	movi	r5,28
   48d0c:	e13ffb17 	ldw	r4,-20(fp)
   48d10:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   48d14:	000b883a 	mov	r5,zero
   48d18:	e13ffb17 	ldw	r4,-20(fp)
   48d1c:	004942c0 	call	4942c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   48d20:	e0bffa17 	ldw	r2,-24(fp)
   48d24:	00c00044 	movi	r3,1
   48d28:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   48d2c:	01400044 	movi	r5,1
   48d30:	e13ffb17 	ldw	r4,-20(fp)
   48d34:	00492880 	call	49288 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   48d38:	e0bff817 	ldw	r2,-32(fp)
}
   48d3c:	e037883a 	mov	sp,fp
   48d40:	dfc00117 	ldw	ra,4(sp)
   48d44:	df000017 	ldw	fp,0(sp)
   48d48:	dec00204 	addi	sp,sp,8
   48d4c:	f800283a 	ret

00048d50 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   48d50:	defff404 	addi	sp,sp,-48
   48d54:	dfc00b15 	stw	ra,44(sp)
   48d58:	df000a15 	stw	fp,40(sp)
   48d5c:	df000a04 	addi	fp,sp,40
   48d60:	e13ffb15 	stw	r4,-20(fp)
   48d64:	e17ffc15 	stw	r5,-16(fp)
   48d68:	e1bffd15 	stw	r6,-12(fp)
   48d6c:	3807883a 	mov	r3,r7
   48d70:	e0800217 	ldw	r2,8(fp)
   48d74:	e0fffe05 	stb	r3,-8(fp)
   48d78:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   48d7c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   48d80:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   48d84:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   48d88:	e0bffd17 	ldw	r2,-12(fp)
   48d8c:	1000021e 	bne	r2,zero,48d98 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   48d90:	0005883a 	mov	r2,zero
   48d94:	00006c06 	br	48f48 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   48d98:	e0bffe03 	ldbu	r2,-8(fp)
   48d9c:	10000a1e 	bne	r2,zero,48dc8 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   48da0:	e13ffb17 	ldw	r4,-20(fp)
   48da4:	0047c100 	call	47c10 <alt_avalon_i2c_enable>
   48da8:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   48dac:	e0bff917 	ldw	r2,-28(fp)
   48db0:	10000226 	beq	r2,zero,48dbc <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   48db4:	e0bff917 	ldw	r2,-28(fp)
   48db8:	00006306 	br	48f48 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   48dbc:	01400704 	movi	r5,28
   48dc0:	e13ffb17 	ldw	r4,-20(fp)
   48dc4:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   48dc8:	e0bffe03 	ldbu	r2,-8(fp)
   48dcc:	100d883a 	mov	r6,r2
   48dd0:	01400044 	movi	r5,1
   48dd4:	e13ffb17 	ldw	r4,-20(fp)
   48dd8:	00482780 	call	48278 <alt_avalon_i2c_send_address>
   48ddc:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   48de0:	e0bff917 	ldw	r2,-28(fp)
   48de4:	1000341e 	bne	r2,zero,48eb8 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   48de8:	00001906 	br	48e50 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   48dec:	000f883a 	mov	r7,zero
   48df0:	000d883a 	mov	r6,zero
   48df4:	000b883a 	mov	r5,zero
   48df8:	e13ffb17 	ldw	r4,-20(fp)
   48dfc:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   48e00:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   48e04:	e0bff817 	ldw	r2,-32(fp)
   48e08:	10800044 	addi	r2,r2,1
   48e0c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   48e10:	e0bff917 	ldw	r2,-28(fp)
   48e14:	10000e1e 	bne	r2,zero,48e50 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   48e18:	e0bffa04 	addi	r2,fp,-24
   48e1c:	100f883a 	mov	r7,r2
   48e20:	000d883a 	mov	r6,zero
   48e24:	e17ffc17 	ldw	r5,-16(fp)
   48e28:	e13ffb17 	ldw	r4,-20(fp)
   48e2c:	00480440 	call	48044 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   48e30:	e0bffa17 	ldw	r2,-24(fp)
   48e34:	e0fffc17 	ldw	r3,-16(fp)
   48e38:	1885883a 	add	r2,r3,r2
   48e3c:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   48e40:	e0bffa17 	ldw	r2,-24(fp)
   48e44:	e0fff717 	ldw	r3,-36(fp)
   48e48:	1885883a 	add	r2,r3,r2
   48e4c:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   48e50:	e0bffd17 	ldw	r2,-12(fp)
   48e54:	10bfffc4 	addi	r2,r2,-1
   48e58:	e0fff817 	ldw	r3,-32(fp)
   48e5c:	1880022e 	bgeu	r3,r2,48e68 <alt_avalon_i2c_master_receive+0x118>
   48e60:	e0bff917 	ldw	r2,-28(fp)
   48e64:	103fe126 	beq	r2,zero,48dec <__alt_data_end+0xfffe1cec>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   48e68:	e0bff917 	ldw	r2,-28(fp)
   48e6c:	1000121e 	bne	r2,zero,48eb8 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   48e70:	e0bfff03 	ldbu	r2,-4(fp)
   48e74:	100f883a 	mov	r7,r2
   48e78:	000d883a 	mov	r6,zero
   48e7c:	000b883a 	mov	r5,zero
   48e80:	e13ffb17 	ldw	r4,-20(fp)
   48e84:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   48e88:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   48e8c:	00000a06 	br	48eb8 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   48e90:	e17ffc17 	ldw	r5,-16(fp)
   48e94:	e13ffb17 	ldw	r4,-20(fp)
   48e98:	00480ec0 	call	480ec <alt_avalon_i2c_rx_read>
   48e9c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   48ea0:	e0bffc17 	ldw	r2,-16(fp)
   48ea4:	10800044 	addi	r2,r2,1
   48ea8:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   48eac:	e0bff717 	ldw	r2,-36(fp)
   48eb0:	10800044 	addi	r2,r2,1
   48eb4:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   48eb8:	e0fff717 	ldw	r3,-36(fp)
   48ebc:	e0bffd17 	ldw	r2,-12(fp)
   48ec0:	1880022e 	bgeu	r3,r2,48ecc <alt_avalon_i2c_master_receive+0x17c>
   48ec4:	e0bff917 	ldw	r2,-28(fp)
   48ec8:	103ff126 	beq	r2,zero,48e90 <__alt_data_end+0xfffe1d90>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   48ecc:	e0bfff03 	ldbu	r2,-4(fp)
   48ed0:	1000021e 	bne	r2,zero,48edc <alt_avalon_i2c_master_receive+0x18c>
   48ed4:	e0bff917 	ldw	r2,-28(fp)
   48ed8:	10001a26 	beq	r2,zero,48f44 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
   48edc:	e0bffd17 	ldw	r2,-12(fp)
   48ee0:	1089c424 	muli	r2,r2,10000
   48ee4:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   48ee8:	00000d06 	br	48f20 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
   48eec:	e0bff617 	ldw	r2,-40(fp)
   48ef0:	108002a8 	cmpgeui	r2,r2,10
   48ef4:	1000021e 	bne	r2,zero,48f00 <alt_avalon_i2c_master_receive+0x1b0>
   48ef8:	0109c404 	movi	r4,10000
   48efc:	004a11c0 	call	4a11c <alt_busy_sleep>
            if (--timeout == 0)
   48f00:	e0bff617 	ldw	r2,-40(fp)
   48f04:	10bfffc4 	addi	r2,r2,-1
   48f08:	e0bff615 	stw	r2,-40(fp)
   48f0c:	e0bff617 	ldw	r2,-40(fp)
   48f10:	1000031e 	bne	r2,zero,48f20 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   48f14:	00bfff84 	movi	r2,-2
   48f18:	e0bff915 	stw	r2,-28(fp)
               break;
   48f1c:	00000306 	br	48f2c <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   48f20:	e13ffb17 	ldw	r4,-20(fp)
   48f24:	00480000 	call	48000 <alt_avalon_i2c_is_busy>
   48f28:	103ff01e 	bne	r2,zero,48eec <__alt_data_end+0xfffe1dec>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   48f2c:	e0bff904 	addi	r2,fp,-28
   48f30:	100b883a 	mov	r5,r2
   48f34:	e13ffb17 	ldw	r4,-20(fp)
   48f38:	00483d40 	call	483d4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   48f3c:	e13ffb17 	ldw	r4,-20(fp)
   48f40:	0047ca80 	call	47ca8 <alt_avalon_i2c_disable>
    }

    return status;
   48f44:	e0bff917 	ldw	r2,-28(fp)
}
   48f48:	e037883a 	mov	sp,fp
   48f4c:	dfc00117 	ldw	ra,4(sp)
   48f50:	df000017 	ldw	fp,0(sp)
   48f54:	dec00204 	addi	sp,sp,8
   48f58:	f800283a 	ret

00048f5c <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   48f5c:	defff504 	addi	sp,sp,-44
   48f60:	dfc00a15 	stw	ra,40(sp)
   48f64:	df000915 	stw	fp,36(sp)
   48f68:	df000904 	addi	fp,sp,36
   48f6c:	e13ffb15 	stw	r4,-20(fp)
   48f70:	e17ffc15 	stw	r5,-16(fp)
   48f74:	e1bffd15 	stw	r6,-12(fp)
   48f78:	3807883a 	mov	r3,r7
   48f7c:	e0800217 	ldw	r2,8(fp)
   48f80:	e0fffe05 	stb	r3,-8(fp)
   48f84:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   48f88:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   48f8c:	e0bffb17 	ldw	r2,-20(fp)
   48f90:	10800717 	ldw	r2,28(r2)
   48f94:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   48f98:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   48f9c:	e0bffd17 	ldw	r2,-12(fp)
   48fa0:	1000021e 	bne	r2,zero,48fac <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   48fa4:	0005883a 	mov	r2,zero
   48fa8:	00006206 	br	49134 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   48fac:	e0bffb17 	ldw	r2,-20(fp)
   48fb0:	10c00617 	ldw	r3,24(r2)
   48fb4:	00800134 	movhi	r2,4
   48fb8:	109e2504 	addi	r2,r2,30868
   48fbc:	18800226 	beq	r3,r2,48fc8 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   48fc0:	00bfff44 	movi	r2,-3
   48fc4:	00005b06 	br	49134 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   48fc8:	e0bffe03 	ldbu	r2,-8(fp)
   48fcc:	10000a1e 	bne	r2,zero,48ff8 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   48fd0:	e13ffb17 	ldw	r4,-20(fp)
   48fd4:	0047c100 	call	47c10 <alt_avalon_i2c_enable>
   48fd8:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   48fdc:	e0bff717 	ldw	r2,-36(fp)
   48fe0:	10000226 	beq	r2,zero,48fec <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   48fe4:	e0bff717 	ldw	r2,-36(fp)
   48fe8:	00005206 	br	49134 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   48fec:	01400704 	movi	r5,28
   48ff0:	e13ffb17 	ldw	r4,-20(fp)
   48ff4:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   48ff8:	e0bffe03 	ldbu	r2,-8(fp)
   48ffc:	100d883a 	mov	r6,r2
   49000:	01400044 	movi	r5,1
   49004:	e13ffb17 	ldw	r4,-20(fp)
   49008:	00482780 	call	48278 <alt_avalon_i2c_send_address>
   4900c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   49010:	e0bff717 	ldw	r2,-36(fp)
   49014:	1000191e 	bne	r2,zero,4907c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   49018:	00000906 	br	49040 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   4901c:	000f883a 	mov	r7,zero
   49020:	000d883a 	mov	r6,zero
   49024:	000b883a 	mov	r5,zero
   49028:	e13ffb17 	ldw	r4,-20(fp)
   4902c:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   49030:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   49034:	e0bff917 	ldw	r2,-28(fp)
   49038:	10800044 	addi	r2,r2,1
   4903c:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   49040:	e0bffd17 	ldw	r2,-12(fp)
   49044:	10bfffc4 	addi	r2,r2,-1
   49048:	e0fff917 	ldw	r3,-28(fp)
   4904c:	1880022e 	bgeu	r3,r2,49058 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   49050:	e0bff717 	ldw	r2,-36(fp)
   49054:	103ff126 	beq	r2,zero,4901c <__alt_data_end+0xfffe1f1c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   49058:	e0bff717 	ldw	r2,-36(fp)
   4905c:	1000071e 	bne	r2,zero,4907c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   49060:	e0bfff03 	ldbu	r2,-4(fp)
   49064:	100f883a 	mov	r7,r2
   49068:	000d883a 	mov	r6,zero
   4906c:	000b883a 	mov	r5,zero
   49070:	e13ffb17 	ldw	r4,-20(fp)
   49074:	00481940 	call	48194 <alt_avalon_i2c_cmd_write>
   49078:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   4907c:	e0bff717 	ldw	r2,-36(fp)
   49080:	10001726 	beq	r2,zero,490e0 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
   49084:	e0bffd17 	ldw	r2,-12(fp)
   49088:	1089c424 	muli	r2,r2,10000
   4908c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   49090:	00000d06 	br	490c8 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
   49094:	e0bff817 	ldw	r2,-32(fp)
   49098:	108002a8 	cmpgeui	r2,r2,10
   4909c:	1000021e 	bne	r2,zero,490a8 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
   490a0:	0109c404 	movi	r4,10000
   490a4:	004a11c0 	call	4a11c <alt_busy_sleep>
            if (--timeout == 0)
   490a8:	e0bff817 	ldw	r2,-32(fp)
   490ac:	10bfffc4 	addi	r2,r2,-1
   490b0:	e0bff815 	stw	r2,-32(fp)
   490b4:	e0bff817 	ldw	r2,-32(fp)
   490b8:	1000031e 	bne	r2,zero,490c8 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   490bc:	00bfff84 	movi	r2,-2
   490c0:	e0bff715 	stw	r2,-36(fp)
               break;
   490c4:	00000306 	br	490d4 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   490c8:	e13ffb17 	ldw	r4,-20(fp)
   490cc:	00480000 	call	48000 <alt_avalon_i2c_is_busy>
   490d0:	103ff01e 	bne	r2,zero,49094 <__alt_data_end+0xfffe1f94>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   490d4:	e13ffb17 	ldw	r4,-20(fp)
   490d8:	0047ca80 	call	47ca8 <alt_avalon_i2c_disable>
   490dc:	00001406 	br	49130 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
   490e0:	e0bfff03 	ldbu	r2,-4(fp)
   490e4:	10001226 	beq	r2,zero,49130 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   490e8:	01400704 	movi	r5,28
   490ec:	e13ffb17 	ldw	r4,-20(fp)
   490f0:	00491e40 	call	491e4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   490f4:	000b883a 	mov	r5,zero
   490f8:	e13ffb17 	ldw	r4,-20(fp)
   490fc:	004937c0 	call	4937c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   49100:	e0bffa17 	ldw	r2,-24(fp)
   49104:	00c00084 	movi	r3,2
   49108:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   4910c:	e0bffa17 	ldw	r2,-24(fp)
   49110:	e0fffc17 	ldw	r3,-16(fp)
   49114:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   49118:	e0bffa17 	ldw	r2,-24(fp)
   4911c:	e0fffd17 	ldw	r3,-12(fp)
   49120:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   49124:	01400084 	movi	r5,2
   49128:	e13ffb17 	ldw	r4,-20(fp)
   4912c:	00492880 	call	49288 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   49130:	e0bff717 	ldw	r2,-36(fp)
}
   49134:	e037883a 	mov	sp,fp
   49138:	dfc00117 	ldw	ra,4(sp)
   4913c:	df000017 	ldw	fp,0(sp)
   49140:	dec00204 	addi	sp,sp,8
   49144:	f800283a 	ret

00049148 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   49148:	defffd04 	addi	sp,sp,-12
   4914c:	df000215 	stw	fp,8(sp)
   49150:	df000204 	addi	fp,sp,8
   49154:	e13ffe15 	stw	r4,-8(fp)
   49158:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   4915c:	e0bffe17 	ldw	r2,-8(fp)
   49160:	10800317 	ldw	r2,12(r2)
   49164:	10800404 	addi	r2,r2,16
   49168:	10c00037 	ldwio	r3,0(r2)
   4916c:	e0bffe17 	ldw	r2,-8(fp)
   49170:	10800317 	ldw	r2,12(r2)
   49174:	10800304 	addi	r2,r2,12
   49178:	10800037 	ldwio	r2,0(r2)
   4917c:	1884703a 	and	r2,r3,r2
   49180:	1007883a 	mov	r3,r2
   49184:	e0bfff17 	ldw	r2,-4(fp)
   49188:	10c00015 	stw	r3,0(r2)
}
   4918c:	0001883a 	nop
   49190:	e037883a 	mov	sp,fp
   49194:	df000017 	ldw	fp,0(sp)
   49198:	dec00104 	addi	sp,sp,4
   4919c:	f800283a 	ret

000491a0 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   491a0:	defffd04 	addi	sp,sp,-12
   491a4:	df000215 	stw	fp,8(sp)
   491a8:	df000204 	addi	fp,sp,8
   491ac:	e13ffe15 	stw	r4,-8(fp)
   491b0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   491b4:	e0bffe17 	ldw	r2,-8(fp)
   491b8:	10800317 	ldw	r2,12(r2)
   491bc:	10800404 	addi	r2,r2,16
   491c0:	10800037 	ldwio	r2,0(r2)
   491c4:	1007883a 	mov	r3,r2
   491c8:	e0bfff17 	ldw	r2,-4(fp)
   491cc:	10c00015 	stw	r3,0(r2)
}
   491d0:	0001883a 	nop
   491d4:	e037883a 	mov	sp,fp
   491d8:	df000017 	ldw	fp,0(sp)
   491dc:	dec00104 	addi	sp,sp,4
   491e0:	f800283a 	ret

000491e4 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   491e4:	defffd04 	addi	sp,sp,-12
   491e8:	df000215 	stw	fp,8(sp)
   491ec:	df000204 	addi	fp,sp,8
   491f0:	e13ffe15 	stw	r4,-8(fp)
   491f4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   491f8:	e0bffe17 	ldw	r2,-8(fp)
   491fc:	10800317 	ldw	r2,12(r2)
   49200:	10800404 	addi	r2,r2,16
   49204:	e0ffff17 	ldw	r3,-4(fp)
   49208:	10c00035 	stwio	r3,0(r2)
}
   4920c:	0001883a 	nop
   49210:	e037883a 	mov	sp,fp
   49214:	df000017 	ldw	fp,0(sp)
   49218:	dec00104 	addi	sp,sp,4
   4921c:	f800283a 	ret

00049220 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   49220:	defffb04 	addi	sp,sp,-20
   49224:	dfc00415 	stw	ra,16(sp)
   49228:	df000315 	stw	fp,12(sp)
   4922c:	df000304 	addi	fp,sp,12
   49230:	e13ffe15 	stw	r4,-8(fp)
   49234:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   49238:	e17ffd04 	addi	r5,fp,-12
   4923c:	e13ffe17 	ldw	r4,-8(fp)
   49240:	00492ec0 	call	492ec <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   49244:	e0bfff17 	ldw	r2,-4(fp)
   49248:	0086303a 	nor	r3,zero,r2
   4924c:	e0bffd17 	ldw	r2,-12(fp)
   49250:	1884703a 	and	r2,r3,r2
   49254:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   49258:	e0bffe17 	ldw	r2,-8(fp)
   4925c:	10800317 	ldw	r2,12(r2)
   49260:	10800304 	addi	r2,r2,12
   49264:	e0fffd17 	ldw	r3,-12(fp)
   49268:	18c007cc 	andi	r3,r3,31
   4926c:	10c00035 	stwio	r3,0(r2)
}
   49270:	0001883a 	nop
   49274:	e037883a 	mov	sp,fp
   49278:	dfc00117 	ldw	ra,4(sp)
   4927c:	df000017 	ldw	fp,0(sp)
   49280:	dec00204 	addi	sp,sp,8
   49284:	f800283a 	ret

00049288 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   49288:	defffb04 	addi	sp,sp,-20
   4928c:	dfc00415 	stw	ra,16(sp)
   49290:	df000315 	stw	fp,12(sp)
   49294:	df000304 	addi	fp,sp,12
   49298:	e13ffe15 	stw	r4,-8(fp)
   4929c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   492a0:	e17ffd04 	addi	r5,fp,-12
   492a4:	e13ffe17 	ldw	r4,-8(fp)
   492a8:	00492ec0 	call	492ec <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   492ac:	e0fffd17 	ldw	r3,-12(fp)
   492b0:	e0bfff17 	ldw	r2,-4(fp)
   492b4:	1884b03a 	or	r2,r3,r2
   492b8:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   492bc:	e0bffe17 	ldw	r2,-8(fp)
   492c0:	10800317 	ldw	r2,12(r2)
   492c4:	10800304 	addi	r2,r2,12
   492c8:	e0fffd17 	ldw	r3,-12(fp)
   492cc:	18c007cc 	andi	r3,r3,31
   492d0:	10c00035 	stwio	r3,0(r2)
}
   492d4:	0001883a 	nop
   492d8:	e037883a 	mov	sp,fp
   492dc:	dfc00117 	ldw	ra,4(sp)
   492e0:	df000017 	ldw	fp,0(sp)
   492e4:	dec00204 	addi	sp,sp,8
   492e8:	f800283a 	ret

000492ec <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   492ec:	defffd04 	addi	sp,sp,-12
   492f0:	df000215 	stw	fp,8(sp)
   492f4:	df000204 	addi	fp,sp,8
   492f8:	e13ffe15 	stw	r4,-8(fp)
   492fc:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   49300:	e0bffe17 	ldw	r2,-8(fp)
   49304:	10800317 	ldw	r2,12(r2)
   49308:	10800304 	addi	r2,r2,12
   4930c:	10800037 	ldwio	r2,0(r2)
   49310:	10c007cc 	andi	r3,r2,31
   49314:	e0bfff17 	ldw	r2,-4(fp)
   49318:	10c00015 	stw	r3,0(r2)
}
   4931c:	0001883a 	nop
   49320:	e037883a 	mov	sp,fp
   49324:	df000017 	ldw	fp,0(sp)
   49328:	dec00104 	addi	sp,sp,4
   4932c:	f800283a 	ret

00049330 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   49330:	defffd04 	addi	sp,sp,-12
   49334:	df000215 	stw	fp,8(sp)
   49338:	df000204 	addi	fp,sp,8
   4933c:	e13ffe15 	stw	r4,-8(fp)
   49340:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   49344:	e0bffe17 	ldw	r2,-8(fp)
   49348:	10800317 	ldw	r2,12(r2)
   4934c:	10800204 	addi	r2,r2,8
   49350:	10800037 	ldwio	r2,0(r2)
   49354:	10800c0c 	andi	r2,r2,48
   49358:	1005d13a 	srai	r2,r2,4
   4935c:	1007883a 	mov	r3,r2
   49360:	e0bfff17 	ldw	r2,-4(fp)
   49364:	10c00015 	stw	r3,0(r2)
}
   49368:	0001883a 	nop
   4936c:	e037883a 	mov	sp,fp
   49370:	df000017 	ldw	fp,0(sp)
   49374:	dec00104 	addi	sp,sp,4
   49378:	f800283a 	ret

0004937c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   4937c:	defffd04 	addi	sp,sp,-12
   49380:	df000215 	stw	fp,8(sp)
   49384:	df000204 	addi	fp,sp,8
   49388:	e13ffe15 	stw	r4,-8(fp)
   4938c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   49390:	e0bffe17 	ldw	r2,-8(fp)
   49394:	10800317 	ldw	r2,12(r2)
   49398:	10800204 	addi	r2,r2,8
   4939c:	e0fffe17 	ldw	r3,-8(fp)
   493a0:	18c00317 	ldw	r3,12(r3)
   493a4:	18c00204 	addi	r3,r3,8
   493a8:	18c00037 	ldwio	r3,0(r3)
   493ac:	1809883a 	mov	r4,r3
   493b0:	00fff3c4 	movi	r3,-49
   493b4:	20c8703a 	and	r4,r4,r3
   493b8:	e0ffff17 	ldw	r3,-4(fp)
   493bc:	1806913a 	slli	r3,r3,4
   493c0:	18c00c0c 	andi	r3,r3,48
   493c4:	20c6b03a 	or	r3,r4,r3
   493c8:	10c00035 	stwio	r3,0(r2)
}
   493cc:	0001883a 	nop
   493d0:	e037883a 	mov	sp,fp
   493d4:	df000017 	ldw	fp,0(sp)
   493d8:	dec00104 	addi	sp,sp,4
   493dc:	f800283a 	ret

000493e0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   493e0:	defffd04 	addi	sp,sp,-12
   493e4:	df000215 	stw	fp,8(sp)
   493e8:	df000204 	addi	fp,sp,8
   493ec:	e13ffe15 	stw	r4,-8(fp)
   493f0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   493f4:	e0bffe17 	ldw	r2,-8(fp)
   493f8:	10800317 	ldw	r2,12(r2)
   493fc:	10800204 	addi	r2,r2,8
   49400:	10800037 	ldwio	r2,0(r2)
   49404:	1080030c 	andi	r2,r2,12
   49408:	1005d0ba 	srai	r2,r2,2
   4940c:	1007883a 	mov	r3,r2
   49410:	e0bfff17 	ldw	r2,-4(fp)
   49414:	10c00015 	stw	r3,0(r2)
}
   49418:	0001883a 	nop
   4941c:	e037883a 	mov	sp,fp
   49420:	df000017 	ldw	fp,0(sp)
   49424:	dec00104 	addi	sp,sp,4
   49428:	f800283a 	ret

0004942c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   4942c:	defffd04 	addi	sp,sp,-12
   49430:	df000215 	stw	fp,8(sp)
   49434:	df000204 	addi	fp,sp,8
   49438:	e13ffe15 	stw	r4,-8(fp)
   4943c:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   49440:	e0bffe17 	ldw	r2,-8(fp)
   49444:	10800317 	ldw	r2,12(r2)
   49448:	10c00204 	addi	r3,r2,8
   4944c:	e0bffe17 	ldw	r2,-8(fp)
   49450:	10800317 	ldw	r2,12(r2)
   49454:	10800204 	addi	r2,r2,8
   49458:	10800037 	ldwio	r2,0(r2)
   4945c:	1009883a 	mov	r4,r2
   49460:	00bffcc4 	movi	r2,-13
   49464:	2088703a 	and	r4,r4,r2
   49468:	e0bfff17 	ldw	r2,-4(fp)
   4946c:	1085883a 	add	r2,r2,r2
   49470:	1085883a 	add	r2,r2,r2
   49474:	1080030c 	andi	r2,r2,12
   49478:	2084b03a 	or	r2,r4,r2
   4947c:	18800035 	stwio	r2,0(r3)
}
   49480:	0001883a 	nop
   49484:	e037883a 	mov	sp,fp
   49488:	df000017 	ldw	fp,0(sp)
   4948c:	dec00104 	addi	sp,sp,4
   49490:	f800283a 	ret

00049494 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   49494:	defffa04 	addi	sp,sp,-24
   49498:	dfc00515 	stw	ra,20(sp)
   4949c:	df000415 	stw	fp,16(sp)
   494a0:	df000404 	addi	fp,sp,16
   494a4:	e13ffd15 	stw	r4,-12(fp)
   494a8:	e17ffe15 	stw	r5,-8(fp)
   494ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   494b0:	e0bffd17 	ldw	r2,-12(fp)
   494b4:	10800017 	ldw	r2,0(r2)
   494b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   494bc:	e0bffc17 	ldw	r2,-16(fp)
   494c0:	10c00a04 	addi	r3,r2,40
   494c4:	e0bffd17 	ldw	r2,-12(fp)
   494c8:	10800217 	ldw	r2,8(r2)
   494cc:	100f883a 	mov	r7,r2
   494d0:	e1bfff17 	ldw	r6,-4(fp)
   494d4:	e17ffe17 	ldw	r5,-8(fp)
   494d8:	1809883a 	mov	r4,r3
   494dc:	0049abc0 	call	49abc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   494e0:	e037883a 	mov	sp,fp
   494e4:	dfc00117 	ldw	ra,4(sp)
   494e8:	df000017 	ldw	fp,0(sp)
   494ec:	dec00204 	addi	sp,sp,8
   494f0:	f800283a 	ret

000494f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   494f4:	defffa04 	addi	sp,sp,-24
   494f8:	dfc00515 	stw	ra,20(sp)
   494fc:	df000415 	stw	fp,16(sp)
   49500:	df000404 	addi	fp,sp,16
   49504:	e13ffd15 	stw	r4,-12(fp)
   49508:	e17ffe15 	stw	r5,-8(fp)
   4950c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   49510:	e0bffd17 	ldw	r2,-12(fp)
   49514:	10800017 	ldw	r2,0(r2)
   49518:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4951c:	e0bffc17 	ldw	r2,-16(fp)
   49520:	10c00a04 	addi	r3,r2,40
   49524:	e0bffd17 	ldw	r2,-12(fp)
   49528:	10800217 	ldw	r2,8(r2)
   4952c:	100f883a 	mov	r7,r2
   49530:	e1bfff17 	ldw	r6,-4(fp)
   49534:	e17ffe17 	ldw	r5,-8(fp)
   49538:	1809883a 	mov	r4,r3
   4953c:	0049cd80 	call	49cd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   49540:	e037883a 	mov	sp,fp
   49544:	dfc00117 	ldw	ra,4(sp)
   49548:	df000017 	ldw	fp,0(sp)
   4954c:	dec00204 	addi	sp,sp,8
   49550:	f800283a 	ret

00049554 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   49554:	defffc04 	addi	sp,sp,-16
   49558:	dfc00315 	stw	ra,12(sp)
   4955c:	df000215 	stw	fp,8(sp)
   49560:	df000204 	addi	fp,sp,8
   49564:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   49568:	e0bfff17 	ldw	r2,-4(fp)
   4956c:	10800017 	ldw	r2,0(r2)
   49570:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   49574:	e0bffe17 	ldw	r2,-8(fp)
   49578:	10c00a04 	addi	r3,r2,40
   4957c:	e0bfff17 	ldw	r2,-4(fp)
   49580:	10800217 	ldw	r2,8(r2)
   49584:	100b883a 	mov	r5,r2
   49588:	1809883a 	mov	r4,r3
   4958c:	00499640 	call	49964 <altera_avalon_jtag_uart_close>
}
   49590:	e037883a 	mov	sp,fp
   49594:	dfc00117 	ldw	ra,4(sp)
   49598:	df000017 	ldw	fp,0(sp)
   4959c:	dec00204 	addi	sp,sp,8
   495a0:	f800283a 	ret

000495a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   495a4:	defffa04 	addi	sp,sp,-24
   495a8:	dfc00515 	stw	ra,20(sp)
   495ac:	df000415 	stw	fp,16(sp)
   495b0:	df000404 	addi	fp,sp,16
   495b4:	e13ffd15 	stw	r4,-12(fp)
   495b8:	e17ffe15 	stw	r5,-8(fp)
   495bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   495c0:	e0bffd17 	ldw	r2,-12(fp)
   495c4:	10800017 	ldw	r2,0(r2)
   495c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   495cc:	e0bffc17 	ldw	r2,-16(fp)
   495d0:	10800a04 	addi	r2,r2,40
   495d4:	e1bfff17 	ldw	r6,-4(fp)
   495d8:	e17ffe17 	ldw	r5,-8(fp)
   495dc:	1009883a 	mov	r4,r2
   495e0:	00499cc0 	call	499cc <altera_avalon_jtag_uart_ioctl>
}
   495e4:	e037883a 	mov	sp,fp
   495e8:	dfc00117 	ldw	ra,4(sp)
   495ec:	df000017 	ldw	fp,0(sp)
   495f0:	dec00204 	addi	sp,sp,8
   495f4:	f800283a 	ret

000495f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   495f8:	defffa04 	addi	sp,sp,-24
   495fc:	dfc00515 	stw	ra,20(sp)
   49600:	df000415 	stw	fp,16(sp)
   49604:	df000404 	addi	fp,sp,16
   49608:	e13ffd15 	stw	r4,-12(fp)
   4960c:	e17ffe15 	stw	r5,-8(fp)
   49610:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   49614:	e0bffd17 	ldw	r2,-12(fp)
   49618:	00c00044 	movi	r3,1
   4961c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   49620:	e0bffd17 	ldw	r2,-12(fp)
   49624:	10800017 	ldw	r2,0(r2)
   49628:	10800104 	addi	r2,r2,4
   4962c:	1007883a 	mov	r3,r2
   49630:	e0bffd17 	ldw	r2,-12(fp)
   49634:	10800817 	ldw	r2,32(r2)
   49638:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4963c:	e0bffe17 	ldw	r2,-8(fp)
   49640:	e0ffff17 	ldw	r3,-4(fp)
   49644:	d8000015 	stw	zero,0(sp)
   49648:	e1fffd17 	ldw	r7,-12(fp)
   4964c:	01800174 	movhi	r6,5
   49650:	31a5ae04 	addi	r6,r6,-26952
   49654:	180b883a 	mov	r5,r3
   49658:	1009883a 	mov	r4,r2
   4965c:	004a6580 	call	4a658 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   49660:	e0bffd17 	ldw	r2,-12(fp)
   49664:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   49668:	e0bffd17 	ldw	r2,-12(fp)
   4966c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   49670:	d0e4e917 	ldw	r3,-27740(gp)
   49674:	e1fffd17 	ldw	r7,-12(fp)
   49678:	01800174 	movhi	r6,5
   4967c:	31a63104 	addi	r6,r6,-26428
   49680:	180b883a 	mov	r5,r3
   49684:	1009883a 	mov	r4,r2
   49688:	0049ff00 	call	49ff0 <alt_alarm_start>
   4968c:	1000040e 	bge	r2,zero,496a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   49690:	e0fffd17 	ldw	r3,-12(fp)
   49694:	00a00034 	movhi	r2,32768
   49698:	10bfffc4 	addi	r2,r2,-1
   4969c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   496a0:	0001883a 	nop
   496a4:	e037883a 	mov	sp,fp
   496a8:	dfc00117 	ldw	ra,4(sp)
   496ac:	df000017 	ldw	fp,0(sp)
   496b0:	dec00204 	addi	sp,sp,8
   496b4:	f800283a 	ret

000496b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   496b8:	defff804 	addi	sp,sp,-32
   496bc:	df000715 	stw	fp,28(sp)
   496c0:	df000704 	addi	fp,sp,28
   496c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   496c8:	e0bfff17 	ldw	r2,-4(fp)
   496cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   496d0:	e0bffb17 	ldw	r2,-20(fp)
   496d4:	10800017 	ldw	r2,0(r2)
   496d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   496dc:	e0bffc17 	ldw	r2,-16(fp)
   496e0:	10800104 	addi	r2,r2,4
   496e4:	10800037 	ldwio	r2,0(r2)
   496e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   496ec:	e0bffd17 	ldw	r2,-12(fp)
   496f0:	1080c00c 	andi	r2,r2,768
   496f4:	10006d26 	beq	r2,zero,498ac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   496f8:	e0bffd17 	ldw	r2,-12(fp)
   496fc:	1080400c 	andi	r2,r2,256
   49700:	10003526 	beq	r2,zero,497d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   49704:	00800074 	movhi	r2,1
   49708:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4970c:	e0bffb17 	ldw	r2,-20(fp)
   49710:	10800a17 	ldw	r2,40(r2)
   49714:	10800044 	addi	r2,r2,1
   49718:	1081ffcc 	andi	r2,r2,2047
   4971c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   49720:	e0bffb17 	ldw	r2,-20(fp)
   49724:	10c00b17 	ldw	r3,44(r2)
   49728:	e0bffe17 	ldw	r2,-8(fp)
   4972c:	18801526 	beq	r3,r2,49784 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   49730:	e0bffc17 	ldw	r2,-16(fp)
   49734:	10800037 	ldwio	r2,0(r2)
   49738:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4973c:	e0bff917 	ldw	r2,-28(fp)
   49740:	10a0000c 	andi	r2,r2,32768
   49744:	10001126 	beq	r2,zero,4978c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   49748:	e0bffb17 	ldw	r2,-20(fp)
   4974c:	10800a17 	ldw	r2,40(r2)
   49750:	e0fff917 	ldw	r3,-28(fp)
   49754:	1809883a 	mov	r4,r3
   49758:	e0fffb17 	ldw	r3,-20(fp)
   4975c:	1885883a 	add	r2,r3,r2
   49760:	10800e04 	addi	r2,r2,56
   49764:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   49768:	e0bffb17 	ldw	r2,-20(fp)
   4976c:	10800a17 	ldw	r2,40(r2)
   49770:	10800044 	addi	r2,r2,1
   49774:	10c1ffcc 	andi	r3,r2,2047
   49778:	e0bffb17 	ldw	r2,-20(fp)
   4977c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   49780:	003fe206 	br	4970c <__alt_data_end+0xfffe260c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   49784:	0001883a 	nop
   49788:	00000106 	br	49790 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4978c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   49790:	e0bff917 	ldw	r2,-28(fp)
   49794:	10bfffec 	andhi	r2,r2,65535
   49798:	10000f26 	beq	r2,zero,497d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4979c:	e0bffb17 	ldw	r2,-20(fp)
   497a0:	10c00817 	ldw	r3,32(r2)
   497a4:	00bfff84 	movi	r2,-2
   497a8:	1886703a 	and	r3,r3,r2
   497ac:	e0bffb17 	ldw	r2,-20(fp)
   497b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   497b4:	e0bffc17 	ldw	r2,-16(fp)
   497b8:	10800104 	addi	r2,r2,4
   497bc:	1007883a 	mov	r3,r2
   497c0:	e0bffb17 	ldw	r2,-20(fp)
   497c4:	10800817 	ldw	r2,32(r2)
   497c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   497cc:	e0bffc17 	ldw	r2,-16(fp)
   497d0:	10800104 	addi	r2,r2,4
   497d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   497d8:	e0bffd17 	ldw	r2,-12(fp)
   497dc:	1080800c 	andi	r2,r2,512
   497e0:	103fbe26 	beq	r2,zero,496dc <__alt_data_end+0xfffe25dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   497e4:	e0bffd17 	ldw	r2,-12(fp)
   497e8:	1004d43a 	srli	r2,r2,16
   497ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   497f0:	00001406 	br	49844 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   497f4:	e0bffc17 	ldw	r2,-16(fp)
   497f8:	e0fffb17 	ldw	r3,-20(fp)
   497fc:	18c00d17 	ldw	r3,52(r3)
   49800:	e13ffb17 	ldw	r4,-20(fp)
   49804:	20c7883a 	add	r3,r4,r3
   49808:	18c20e04 	addi	r3,r3,2104
   4980c:	18c00003 	ldbu	r3,0(r3)
   49810:	18c03fcc 	andi	r3,r3,255
   49814:	18c0201c 	xori	r3,r3,128
   49818:	18ffe004 	addi	r3,r3,-128
   4981c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   49820:	e0bffb17 	ldw	r2,-20(fp)
   49824:	10800d17 	ldw	r2,52(r2)
   49828:	10800044 	addi	r2,r2,1
   4982c:	10c1ffcc 	andi	r3,r2,2047
   49830:	e0bffb17 	ldw	r2,-20(fp)
   49834:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   49838:	e0bffa17 	ldw	r2,-24(fp)
   4983c:	10bfffc4 	addi	r2,r2,-1
   49840:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   49844:	e0bffa17 	ldw	r2,-24(fp)
   49848:	10000526 	beq	r2,zero,49860 <altera_avalon_jtag_uart_irq+0x1a8>
   4984c:	e0bffb17 	ldw	r2,-20(fp)
   49850:	10c00d17 	ldw	r3,52(r2)
   49854:	e0bffb17 	ldw	r2,-20(fp)
   49858:	10800c17 	ldw	r2,48(r2)
   4985c:	18bfe51e 	bne	r3,r2,497f4 <__alt_data_end+0xfffe26f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   49860:	e0bffa17 	ldw	r2,-24(fp)
   49864:	103f9d26 	beq	r2,zero,496dc <__alt_data_end+0xfffe25dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   49868:	e0bffb17 	ldw	r2,-20(fp)
   4986c:	10c00817 	ldw	r3,32(r2)
   49870:	00bfff44 	movi	r2,-3
   49874:	1886703a 	and	r3,r3,r2
   49878:	e0bffb17 	ldw	r2,-20(fp)
   4987c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   49880:	e0bffb17 	ldw	r2,-20(fp)
   49884:	10800017 	ldw	r2,0(r2)
   49888:	10800104 	addi	r2,r2,4
   4988c:	1007883a 	mov	r3,r2
   49890:	e0bffb17 	ldw	r2,-20(fp)
   49894:	10800817 	ldw	r2,32(r2)
   49898:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4989c:	e0bffc17 	ldw	r2,-16(fp)
   498a0:	10800104 	addi	r2,r2,4
   498a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   498a8:	003f8c06 	br	496dc <__alt_data_end+0xfffe25dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   498ac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   498b0:	0001883a 	nop
   498b4:	e037883a 	mov	sp,fp
   498b8:	df000017 	ldw	fp,0(sp)
   498bc:	dec00104 	addi	sp,sp,4
   498c0:	f800283a 	ret

000498c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   498c4:	defff804 	addi	sp,sp,-32
   498c8:	df000715 	stw	fp,28(sp)
   498cc:	df000704 	addi	fp,sp,28
   498d0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   498d4:	e0bffb17 	ldw	r2,-20(fp)
   498d8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   498dc:	e0bff917 	ldw	r2,-28(fp)
   498e0:	10800017 	ldw	r2,0(r2)
   498e4:	10800104 	addi	r2,r2,4
   498e8:	10800037 	ldwio	r2,0(r2)
   498ec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   498f0:	e0bffa17 	ldw	r2,-24(fp)
   498f4:	1081000c 	andi	r2,r2,1024
   498f8:	10000b26 	beq	r2,zero,49928 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   498fc:	e0bff917 	ldw	r2,-28(fp)
   49900:	10800017 	ldw	r2,0(r2)
   49904:	10800104 	addi	r2,r2,4
   49908:	1007883a 	mov	r3,r2
   4990c:	e0bff917 	ldw	r2,-28(fp)
   49910:	10800817 	ldw	r2,32(r2)
   49914:	10810014 	ori	r2,r2,1024
   49918:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4991c:	e0bff917 	ldw	r2,-28(fp)
   49920:	10000915 	stw	zero,36(r2)
   49924:	00000a06 	br	49950 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   49928:	e0bff917 	ldw	r2,-28(fp)
   4992c:	10c00917 	ldw	r3,36(r2)
   49930:	00a00034 	movhi	r2,32768
   49934:	10bfff04 	addi	r2,r2,-4
   49938:	10c00536 	bltu	r2,r3,49950 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4993c:	e0bff917 	ldw	r2,-28(fp)
   49940:	10800917 	ldw	r2,36(r2)
   49944:	10c00044 	addi	r3,r2,1
   49948:	e0bff917 	ldw	r2,-28(fp)
   4994c:	10c00915 	stw	r3,36(r2)
   49950:	d0a4e917 	ldw	r2,-27740(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   49954:	e037883a 	mov	sp,fp
   49958:	df000017 	ldw	fp,0(sp)
   4995c:	dec00104 	addi	sp,sp,4
   49960:	f800283a 	ret

00049964 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   49964:	defffd04 	addi	sp,sp,-12
   49968:	df000215 	stw	fp,8(sp)
   4996c:	df000204 	addi	fp,sp,8
   49970:	e13ffe15 	stw	r4,-8(fp)
   49974:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   49978:	00000506 	br	49990 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4997c:	e0bfff17 	ldw	r2,-4(fp)
   49980:	1090000c 	andi	r2,r2,16384
   49984:	10000226 	beq	r2,zero,49990 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   49988:	00bffd44 	movi	r2,-11
   4998c:	00000b06 	br	499bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   49990:	e0bffe17 	ldw	r2,-8(fp)
   49994:	10c00d17 	ldw	r3,52(r2)
   49998:	e0bffe17 	ldw	r2,-8(fp)
   4999c:	10800c17 	ldw	r2,48(r2)
   499a0:	18800526 	beq	r3,r2,499b8 <altera_avalon_jtag_uart_close+0x54>
   499a4:	e0bffe17 	ldw	r2,-8(fp)
   499a8:	10c00917 	ldw	r3,36(r2)
   499ac:	e0bffe17 	ldw	r2,-8(fp)
   499b0:	10800117 	ldw	r2,4(r2)
   499b4:	18bff136 	bltu	r3,r2,4997c <__alt_data_end+0xfffe287c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   499b8:	0005883a 	mov	r2,zero
}
   499bc:	e037883a 	mov	sp,fp
   499c0:	df000017 	ldw	fp,0(sp)
   499c4:	dec00104 	addi	sp,sp,4
   499c8:	f800283a 	ret

000499cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   499cc:	defffa04 	addi	sp,sp,-24
   499d0:	df000515 	stw	fp,20(sp)
   499d4:	df000504 	addi	fp,sp,20
   499d8:	e13ffd15 	stw	r4,-12(fp)
   499dc:	e17ffe15 	stw	r5,-8(fp)
   499e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   499e4:	00bff9c4 	movi	r2,-25
   499e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   499ec:	e0bffe17 	ldw	r2,-8(fp)
   499f0:	10da8060 	cmpeqi	r3,r2,27137
   499f4:	1800031e 	bne	r3,zero,49a04 <altera_avalon_jtag_uart_ioctl+0x38>
   499f8:	109a80a0 	cmpeqi	r2,r2,27138
   499fc:	1000181e 	bne	r2,zero,49a60 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   49a00:	00002906 	br	49aa8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   49a04:	e0bffd17 	ldw	r2,-12(fp)
   49a08:	10c00117 	ldw	r3,4(r2)
   49a0c:	00a00034 	movhi	r2,32768
   49a10:	10bfffc4 	addi	r2,r2,-1
   49a14:	18802126 	beq	r3,r2,49a9c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   49a18:	e0bfff17 	ldw	r2,-4(fp)
   49a1c:	10800017 	ldw	r2,0(r2)
   49a20:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   49a24:	e0bffc17 	ldw	r2,-16(fp)
   49a28:	10800090 	cmplti	r2,r2,2
   49a2c:	1000061e 	bne	r2,zero,49a48 <altera_avalon_jtag_uart_ioctl+0x7c>
   49a30:	e0fffc17 	ldw	r3,-16(fp)
   49a34:	00a00034 	movhi	r2,32768
   49a38:	10bfffc4 	addi	r2,r2,-1
   49a3c:	18800226 	beq	r3,r2,49a48 <altera_avalon_jtag_uart_ioctl+0x7c>
   49a40:	e0bffc17 	ldw	r2,-16(fp)
   49a44:	00000206 	br	49a50 <altera_avalon_jtag_uart_ioctl+0x84>
   49a48:	00a00034 	movhi	r2,32768
   49a4c:	10bfff84 	addi	r2,r2,-2
   49a50:	e0fffd17 	ldw	r3,-12(fp)
   49a54:	18800115 	stw	r2,4(r3)
      rc = 0;
   49a58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   49a5c:	00000f06 	br	49a9c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   49a60:	e0bffd17 	ldw	r2,-12(fp)
   49a64:	10c00117 	ldw	r3,4(r2)
   49a68:	00a00034 	movhi	r2,32768
   49a6c:	10bfffc4 	addi	r2,r2,-1
   49a70:	18800c26 	beq	r3,r2,49aa4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   49a74:	e0bffd17 	ldw	r2,-12(fp)
   49a78:	10c00917 	ldw	r3,36(r2)
   49a7c:	e0bffd17 	ldw	r2,-12(fp)
   49a80:	10800117 	ldw	r2,4(r2)
   49a84:	1885803a 	cmpltu	r2,r3,r2
   49a88:	10c03fcc 	andi	r3,r2,255
   49a8c:	e0bfff17 	ldw	r2,-4(fp)
   49a90:	10c00015 	stw	r3,0(r2)
      rc = 0;
   49a94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   49a98:	00000206 	br	49aa4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   49a9c:	0001883a 	nop
   49aa0:	00000106 	br	49aa8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   49aa4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   49aa8:	e0bffb17 	ldw	r2,-20(fp)
}
   49aac:	e037883a 	mov	sp,fp
   49ab0:	df000017 	ldw	fp,0(sp)
   49ab4:	dec00104 	addi	sp,sp,4
   49ab8:	f800283a 	ret

00049abc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   49abc:	defff304 	addi	sp,sp,-52
   49ac0:	dfc00c15 	stw	ra,48(sp)
   49ac4:	df000b15 	stw	fp,44(sp)
   49ac8:	df000b04 	addi	fp,sp,44
   49acc:	e13ffc15 	stw	r4,-16(fp)
   49ad0:	e17ffd15 	stw	r5,-12(fp)
   49ad4:	e1bffe15 	stw	r6,-8(fp)
   49ad8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   49adc:	e0bffd17 	ldw	r2,-12(fp)
   49ae0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   49ae4:	00004706 	br	49c04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   49ae8:	e0bffc17 	ldw	r2,-16(fp)
   49aec:	10800a17 	ldw	r2,40(r2)
   49af0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   49af4:	e0bffc17 	ldw	r2,-16(fp)
   49af8:	10800b17 	ldw	r2,44(r2)
   49afc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   49b00:	e0fff717 	ldw	r3,-36(fp)
   49b04:	e0bff817 	ldw	r2,-32(fp)
   49b08:	18800536 	bltu	r3,r2,49b20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   49b0c:	e0fff717 	ldw	r3,-36(fp)
   49b10:	e0bff817 	ldw	r2,-32(fp)
   49b14:	1885c83a 	sub	r2,r3,r2
   49b18:	e0bff615 	stw	r2,-40(fp)
   49b1c:	00000406 	br	49b30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   49b20:	00c20004 	movi	r3,2048
   49b24:	e0bff817 	ldw	r2,-32(fp)
   49b28:	1885c83a 	sub	r2,r3,r2
   49b2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   49b30:	e0bff617 	ldw	r2,-40(fp)
   49b34:	10001e26 	beq	r2,zero,49bb0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   49b38:	e0fffe17 	ldw	r3,-8(fp)
   49b3c:	e0bff617 	ldw	r2,-40(fp)
   49b40:	1880022e 	bgeu	r3,r2,49b4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   49b44:	e0bffe17 	ldw	r2,-8(fp)
   49b48:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   49b4c:	e0bffc17 	ldw	r2,-16(fp)
   49b50:	10c00e04 	addi	r3,r2,56
   49b54:	e0bff817 	ldw	r2,-32(fp)
   49b58:	1885883a 	add	r2,r3,r2
   49b5c:	e1bff617 	ldw	r6,-40(fp)
   49b60:	100b883a 	mov	r5,r2
   49b64:	e13ff517 	ldw	r4,-44(fp)
   49b68:	004b45c0 	call	4b45c <memcpy>
      ptr   += n;
   49b6c:	e0fff517 	ldw	r3,-44(fp)
   49b70:	e0bff617 	ldw	r2,-40(fp)
   49b74:	1885883a 	add	r2,r3,r2
   49b78:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   49b7c:	e0fffe17 	ldw	r3,-8(fp)
   49b80:	e0bff617 	ldw	r2,-40(fp)
   49b84:	1885c83a 	sub	r2,r3,r2
   49b88:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   49b8c:	e0fff817 	ldw	r3,-32(fp)
   49b90:	e0bff617 	ldw	r2,-40(fp)
   49b94:	1885883a 	add	r2,r3,r2
   49b98:	10c1ffcc 	andi	r3,r2,2047
   49b9c:	e0bffc17 	ldw	r2,-16(fp)
   49ba0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   49ba4:	e0bffe17 	ldw	r2,-8(fp)
   49ba8:	00bfcf16 	blt	zero,r2,49ae8 <__alt_data_end+0xfffe29e8>
   49bac:	00000106 	br	49bb4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   49bb0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   49bb4:	e0fff517 	ldw	r3,-44(fp)
   49bb8:	e0bffd17 	ldw	r2,-12(fp)
   49bbc:	1880141e 	bne	r3,r2,49c10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   49bc0:	e0bfff17 	ldw	r2,-4(fp)
   49bc4:	1090000c 	andi	r2,r2,16384
   49bc8:	1000131e 	bne	r2,zero,49c18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   49bcc:	0001883a 	nop
   49bd0:	e0bffc17 	ldw	r2,-16(fp)
   49bd4:	10c00a17 	ldw	r3,40(r2)
   49bd8:	e0bff717 	ldw	r2,-36(fp)
   49bdc:	1880051e 	bne	r3,r2,49bf4 <altera_avalon_jtag_uart_read+0x138>
   49be0:	e0bffc17 	ldw	r2,-16(fp)
   49be4:	10c00917 	ldw	r3,36(r2)
   49be8:	e0bffc17 	ldw	r2,-16(fp)
   49bec:	10800117 	ldw	r2,4(r2)
   49bf0:	18bff736 	bltu	r3,r2,49bd0 <__alt_data_end+0xfffe2ad0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   49bf4:	e0bffc17 	ldw	r2,-16(fp)
   49bf8:	10c00a17 	ldw	r3,40(r2)
   49bfc:	e0bff717 	ldw	r2,-36(fp)
   49c00:	18800726 	beq	r3,r2,49c20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   49c04:	e0bffe17 	ldw	r2,-8(fp)
   49c08:	00bfb716 	blt	zero,r2,49ae8 <__alt_data_end+0xfffe29e8>
   49c0c:	00000506 	br	49c24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   49c10:	0001883a 	nop
   49c14:	00000306 	br	49c24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   49c18:	0001883a 	nop
   49c1c:	00000106 	br	49c24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   49c20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   49c24:	e0fff517 	ldw	r3,-44(fp)
   49c28:	e0bffd17 	ldw	r2,-12(fp)
   49c2c:	18801826 	beq	r3,r2,49c90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49c30:	0005303a 	rdctl	r2,status
   49c34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49c38:	e0fffb17 	ldw	r3,-20(fp)
   49c3c:	00bfff84 	movi	r2,-2
   49c40:	1884703a 	and	r2,r3,r2
   49c44:	1001703a 	wrctl	status,r2
  
  return context;
   49c48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   49c4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   49c50:	e0bffc17 	ldw	r2,-16(fp)
   49c54:	10800817 	ldw	r2,32(r2)
   49c58:	10c00054 	ori	r3,r2,1
   49c5c:	e0bffc17 	ldw	r2,-16(fp)
   49c60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   49c64:	e0bffc17 	ldw	r2,-16(fp)
   49c68:	10800017 	ldw	r2,0(r2)
   49c6c:	10800104 	addi	r2,r2,4
   49c70:	1007883a 	mov	r3,r2
   49c74:	e0bffc17 	ldw	r2,-16(fp)
   49c78:	10800817 	ldw	r2,32(r2)
   49c7c:	18800035 	stwio	r2,0(r3)
   49c80:	e0bffa17 	ldw	r2,-24(fp)
   49c84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49c88:	e0bff917 	ldw	r2,-28(fp)
   49c8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   49c90:	e0fff517 	ldw	r3,-44(fp)
   49c94:	e0bffd17 	ldw	r2,-12(fp)
   49c98:	18800426 	beq	r3,r2,49cac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   49c9c:	e0fff517 	ldw	r3,-44(fp)
   49ca0:	e0bffd17 	ldw	r2,-12(fp)
   49ca4:	1885c83a 	sub	r2,r3,r2
   49ca8:	00000606 	br	49cc4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   49cac:	e0bfff17 	ldw	r2,-4(fp)
   49cb0:	1090000c 	andi	r2,r2,16384
   49cb4:	10000226 	beq	r2,zero,49cc0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   49cb8:	00bffd44 	movi	r2,-11
   49cbc:	00000106 	br	49cc4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   49cc0:	00bffec4 	movi	r2,-5
}
   49cc4:	e037883a 	mov	sp,fp
   49cc8:	dfc00117 	ldw	ra,4(sp)
   49ccc:	df000017 	ldw	fp,0(sp)
   49cd0:	dec00204 	addi	sp,sp,8
   49cd4:	f800283a 	ret

00049cd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   49cd8:	defff304 	addi	sp,sp,-52
   49cdc:	dfc00c15 	stw	ra,48(sp)
   49ce0:	df000b15 	stw	fp,44(sp)
   49ce4:	df000b04 	addi	fp,sp,44
   49ce8:	e13ffc15 	stw	r4,-16(fp)
   49cec:	e17ffd15 	stw	r5,-12(fp)
   49cf0:	e1bffe15 	stw	r6,-8(fp)
   49cf4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   49cf8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   49cfc:	e0bffd17 	ldw	r2,-12(fp)
   49d00:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   49d04:	00003706 	br	49de4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   49d08:	e0bffc17 	ldw	r2,-16(fp)
   49d0c:	10800c17 	ldw	r2,48(r2)
   49d10:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   49d14:	e0bffc17 	ldw	r2,-16(fp)
   49d18:	10800d17 	ldw	r2,52(r2)
   49d1c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   49d20:	e0fff917 	ldw	r3,-28(fp)
   49d24:	e0bff517 	ldw	r2,-44(fp)
   49d28:	1880062e 	bgeu	r3,r2,49d44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   49d2c:	e0fff517 	ldw	r3,-44(fp)
   49d30:	e0bff917 	ldw	r2,-28(fp)
   49d34:	1885c83a 	sub	r2,r3,r2
   49d38:	10bfffc4 	addi	r2,r2,-1
   49d3c:	e0bff615 	stw	r2,-40(fp)
   49d40:	00000b06 	br	49d70 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   49d44:	e0bff517 	ldw	r2,-44(fp)
   49d48:	10000526 	beq	r2,zero,49d60 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   49d4c:	00c20004 	movi	r3,2048
   49d50:	e0bff917 	ldw	r2,-28(fp)
   49d54:	1885c83a 	sub	r2,r3,r2
   49d58:	e0bff615 	stw	r2,-40(fp)
   49d5c:	00000406 	br	49d70 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   49d60:	00c1ffc4 	movi	r3,2047
   49d64:	e0bff917 	ldw	r2,-28(fp)
   49d68:	1885c83a 	sub	r2,r3,r2
   49d6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   49d70:	e0bff617 	ldw	r2,-40(fp)
   49d74:	10001e26 	beq	r2,zero,49df0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   49d78:	e0fffe17 	ldw	r3,-8(fp)
   49d7c:	e0bff617 	ldw	r2,-40(fp)
   49d80:	1880022e 	bgeu	r3,r2,49d8c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   49d84:	e0bffe17 	ldw	r2,-8(fp)
   49d88:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   49d8c:	e0bffc17 	ldw	r2,-16(fp)
   49d90:	10c20e04 	addi	r3,r2,2104
   49d94:	e0bff917 	ldw	r2,-28(fp)
   49d98:	1885883a 	add	r2,r3,r2
   49d9c:	e1bff617 	ldw	r6,-40(fp)
   49da0:	e17ffd17 	ldw	r5,-12(fp)
   49da4:	1009883a 	mov	r4,r2
   49da8:	004b45c0 	call	4b45c <memcpy>
      ptr   += n;
   49dac:	e0fffd17 	ldw	r3,-12(fp)
   49db0:	e0bff617 	ldw	r2,-40(fp)
   49db4:	1885883a 	add	r2,r3,r2
   49db8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   49dbc:	e0fffe17 	ldw	r3,-8(fp)
   49dc0:	e0bff617 	ldw	r2,-40(fp)
   49dc4:	1885c83a 	sub	r2,r3,r2
   49dc8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   49dcc:	e0fff917 	ldw	r3,-28(fp)
   49dd0:	e0bff617 	ldw	r2,-40(fp)
   49dd4:	1885883a 	add	r2,r3,r2
   49dd8:	10c1ffcc 	andi	r3,r2,2047
   49ddc:	e0bffc17 	ldw	r2,-16(fp)
   49de0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   49de4:	e0bffe17 	ldw	r2,-8(fp)
   49de8:	00bfc716 	blt	zero,r2,49d08 <__alt_data_end+0xfffe2c08>
   49dec:	00000106 	br	49df4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   49df0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49df4:	0005303a 	rdctl	r2,status
   49df8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49dfc:	e0fffb17 	ldw	r3,-20(fp)
   49e00:	00bfff84 	movi	r2,-2
   49e04:	1884703a 	and	r2,r3,r2
   49e08:	1001703a 	wrctl	status,r2
  
  return context;
   49e0c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   49e10:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   49e14:	e0bffc17 	ldw	r2,-16(fp)
   49e18:	10800817 	ldw	r2,32(r2)
   49e1c:	10c00094 	ori	r3,r2,2
   49e20:	e0bffc17 	ldw	r2,-16(fp)
   49e24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   49e28:	e0bffc17 	ldw	r2,-16(fp)
   49e2c:	10800017 	ldw	r2,0(r2)
   49e30:	10800104 	addi	r2,r2,4
   49e34:	1007883a 	mov	r3,r2
   49e38:	e0bffc17 	ldw	r2,-16(fp)
   49e3c:	10800817 	ldw	r2,32(r2)
   49e40:	18800035 	stwio	r2,0(r3)
   49e44:	e0bffa17 	ldw	r2,-24(fp)
   49e48:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49e4c:	e0bff817 	ldw	r2,-32(fp)
   49e50:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   49e54:	e0bffe17 	ldw	r2,-8(fp)
   49e58:	0080100e 	bge	zero,r2,49e9c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   49e5c:	e0bfff17 	ldw	r2,-4(fp)
   49e60:	1090000c 	andi	r2,r2,16384
   49e64:	1000101e 	bne	r2,zero,49ea8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   49e68:	0001883a 	nop
   49e6c:	e0bffc17 	ldw	r2,-16(fp)
   49e70:	10c00d17 	ldw	r3,52(r2)
   49e74:	e0bff517 	ldw	r2,-44(fp)
   49e78:	1880051e 	bne	r3,r2,49e90 <altera_avalon_jtag_uart_write+0x1b8>
   49e7c:	e0bffc17 	ldw	r2,-16(fp)
   49e80:	10c00917 	ldw	r3,36(r2)
   49e84:	e0bffc17 	ldw	r2,-16(fp)
   49e88:	10800117 	ldw	r2,4(r2)
   49e8c:	18bff736 	bltu	r3,r2,49e6c <__alt_data_end+0xfffe2d6c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   49e90:	e0bffc17 	ldw	r2,-16(fp)
   49e94:	10800917 	ldw	r2,36(r2)
   49e98:	1000051e 	bne	r2,zero,49eb0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   49e9c:	e0bffe17 	ldw	r2,-8(fp)
   49ea0:	00bfd016 	blt	zero,r2,49de4 <__alt_data_end+0xfffe2ce4>
   49ea4:	00000306 	br	49eb4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   49ea8:	0001883a 	nop
   49eac:	00000106 	br	49eb4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   49eb0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   49eb4:	e0fffd17 	ldw	r3,-12(fp)
   49eb8:	e0bff717 	ldw	r2,-36(fp)
   49ebc:	18800426 	beq	r3,r2,49ed0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   49ec0:	e0fffd17 	ldw	r3,-12(fp)
   49ec4:	e0bff717 	ldw	r2,-36(fp)
   49ec8:	1885c83a 	sub	r2,r3,r2
   49ecc:	00000606 	br	49ee8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   49ed0:	e0bfff17 	ldw	r2,-4(fp)
   49ed4:	1090000c 	andi	r2,r2,16384
   49ed8:	10000226 	beq	r2,zero,49ee4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   49edc:	00bffd44 	movi	r2,-11
   49ee0:	00000106 	br	49ee8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   49ee4:	00bffec4 	movi	r2,-5
}
   49ee8:	e037883a 	mov	sp,fp
   49eec:	dfc00117 	ldw	ra,4(sp)
   49ef0:	df000017 	ldw	fp,0(sp)
   49ef4:	dec00204 	addi	sp,sp,8
   49ef8:	f800283a 	ret

00049efc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   49efc:	defffa04 	addi	sp,sp,-24
   49f00:	dfc00515 	stw	ra,20(sp)
   49f04:	df000415 	stw	fp,16(sp)
   49f08:	df000404 	addi	fp,sp,16
   49f0c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   49f10:	0007883a 	mov	r3,zero
   49f14:	e0bfff17 	ldw	r2,-4(fp)
   49f18:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   49f1c:	e0bfff17 	ldw	r2,-4(fp)
   49f20:	10800104 	addi	r2,r2,4
   49f24:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49f28:	0005303a 	rdctl	r2,status
   49f2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   49f30:	e0fffd17 	ldw	r3,-12(fp)
   49f34:	00bfff84 	movi	r2,-2
   49f38:	1884703a 	and	r2,r3,r2
   49f3c:	1001703a 	wrctl	status,r2
  
  return context;
   49f40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   49f44:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   49f48:	004aff40 	call	4aff4 <alt_tick>
   49f4c:	e0bffc17 	ldw	r2,-16(fp)
   49f50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   49f54:	e0bffe17 	ldw	r2,-8(fp)
   49f58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   49f5c:	0001883a 	nop
   49f60:	e037883a 	mov	sp,fp
   49f64:	dfc00117 	ldw	ra,4(sp)
   49f68:	df000017 	ldw	fp,0(sp)
   49f6c:	dec00204 	addi	sp,sp,8
   49f70:	f800283a 	ret

00049f74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   49f74:	defff804 	addi	sp,sp,-32
   49f78:	dfc00715 	stw	ra,28(sp)
   49f7c:	df000615 	stw	fp,24(sp)
   49f80:	df000604 	addi	fp,sp,24
   49f84:	e13ffc15 	stw	r4,-16(fp)
   49f88:	e17ffd15 	stw	r5,-12(fp)
   49f8c:	e1bffe15 	stw	r6,-8(fp)
   49f90:	e1ffff15 	stw	r7,-4(fp)
   49f94:	e0bfff17 	ldw	r2,-4(fp)
   49f98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   49f9c:	d0a4e917 	ldw	r2,-27740(gp)
   49fa0:	1000021e 	bne	r2,zero,49fac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   49fa4:	e0bffb17 	ldw	r2,-20(fp)
   49fa8:	d0a4e915 	stw	r2,-27740(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   49fac:	e0bffc17 	ldw	r2,-16(fp)
   49fb0:	10800104 	addi	r2,r2,4
   49fb4:	00c001c4 	movi	r3,7
   49fb8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   49fbc:	d8000015 	stw	zero,0(sp)
   49fc0:	e1fffc17 	ldw	r7,-16(fp)
   49fc4:	01800174 	movhi	r6,5
   49fc8:	31a7bf04 	addi	r6,r6,-24836
   49fcc:	e17ffe17 	ldw	r5,-8(fp)
   49fd0:	e13ffd17 	ldw	r4,-12(fp)
   49fd4:	004a6580 	call	4a658 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   49fd8:	0001883a 	nop
   49fdc:	e037883a 	mov	sp,fp
   49fe0:	dfc00117 	ldw	ra,4(sp)
   49fe4:	df000017 	ldw	fp,0(sp)
   49fe8:	dec00204 	addi	sp,sp,8
   49fec:	f800283a 	ret

00049ff0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   49ff0:	defff504 	addi	sp,sp,-44
   49ff4:	df000a15 	stw	fp,40(sp)
   49ff8:	df000a04 	addi	fp,sp,40
   49ffc:	e13ffc15 	stw	r4,-16(fp)
   4a000:	e17ffd15 	stw	r5,-12(fp)
   4a004:	e1bffe15 	stw	r6,-8(fp)
   4a008:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4a00c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4a010:	d0a4e917 	ldw	r2,-27740(gp)
  
  if (alt_ticks_per_second ())
   4a014:	10003c26 	beq	r2,zero,4a108 <alt_alarm_start+0x118>
  {
    if (alarm)
   4a018:	e0bffc17 	ldw	r2,-16(fp)
   4a01c:	10003826 	beq	r2,zero,4a100 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4a020:	e0bffc17 	ldw	r2,-16(fp)
   4a024:	e0fffe17 	ldw	r3,-8(fp)
   4a028:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4a02c:	e0bffc17 	ldw	r2,-16(fp)
   4a030:	e0ffff17 	ldw	r3,-4(fp)
   4a034:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a038:	0005303a 	rdctl	r2,status
   4a03c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a040:	e0fff917 	ldw	r3,-28(fp)
   4a044:	00bfff84 	movi	r2,-2
   4a048:	1884703a 	and	r2,r3,r2
   4a04c:	1001703a 	wrctl	status,r2
  
  return context;
   4a050:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   4a054:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4a058:	d0a4ea17 	ldw	r2,-27736(gp)
      
      current_nticks = alt_nticks();
   4a05c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4a060:	e0fffd17 	ldw	r3,-12(fp)
   4a064:	e0bff617 	ldw	r2,-40(fp)
   4a068:	1885883a 	add	r2,r3,r2
   4a06c:	10c00044 	addi	r3,r2,1
   4a070:	e0bffc17 	ldw	r2,-16(fp)
   4a074:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4a078:	e0bffc17 	ldw	r2,-16(fp)
   4a07c:	10c00217 	ldw	r3,8(r2)
   4a080:	e0bff617 	ldw	r2,-40(fp)
   4a084:	1880042e 	bgeu	r3,r2,4a098 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   4a088:	e0bffc17 	ldw	r2,-16(fp)
   4a08c:	00c00044 	movi	r3,1
   4a090:	10c00405 	stb	r3,16(r2)
   4a094:	00000206 	br	4a0a0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   4a098:	e0bffc17 	ldw	r2,-16(fp)
   4a09c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4a0a0:	e0bffc17 	ldw	r2,-16(fp)
   4a0a4:	d0e00c04 	addi	r3,gp,-32720
   4a0a8:	e0fffa15 	stw	r3,-24(fp)
   4a0ac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4a0b0:	e0bffb17 	ldw	r2,-20(fp)
   4a0b4:	e0fffa17 	ldw	r3,-24(fp)
   4a0b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4a0bc:	e0bffa17 	ldw	r2,-24(fp)
   4a0c0:	10c00017 	ldw	r3,0(r2)
   4a0c4:	e0bffb17 	ldw	r2,-20(fp)
   4a0c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4a0cc:	e0bffa17 	ldw	r2,-24(fp)
   4a0d0:	10800017 	ldw	r2,0(r2)
   4a0d4:	e0fffb17 	ldw	r3,-20(fp)
   4a0d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4a0dc:	e0bffa17 	ldw	r2,-24(fp)
   4a0e0:	e0fffb17 	ldw	r3,-20(fp)
   4a0e4:	10c00015 	stw	r3,0(r2)
   4a0e8:	e0bff817 	ldw	r2,-32(fp)
   4a0ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a0f0:	e0bff717 	ldw	r2,-36(fp)
   4a0f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4a0f8:	0005883a 	mov	r2,zero
   4a0fc:	00000306 	br	4a10c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4a100:	00bffa84 	movi	r2,-22
   4a104:	00000106 	br	4a10c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   4a108:	00bfde84 	movi	r2,-134
  }
}
   4a10c:	e037883a 	mov	sp,fp
   4a110:	df000017 	ldw	fp,0(sp)
   4a114:	dec00104 	addi	sp,sp,4
   4a118:	f800283a 	ret

0004a11c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4a11c:	defffa04 	addi	sp,sp,-24
   4a120:	dfc00515 	stw	ra,20(sp)
   4a124:	df000415 	stw	fp,16(sp)
   4a128:	df000404 	addi	fp,sp,16
   4a12c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   4a130:	008000c4 	movi	r2,3
   4a134:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   4a138:	e0fffd17 	ldw	r3,-12(fp)
   4a13c:	008003f4 	movhi	r2,15
   4a140:	10909004 	addi	r2,r2,16960
   4a144:	1885383a 	mul	r2,r3,r2
   4a148:	100b883a 	mov	r5,r2
   4a14c:	01017db4 	movhi	r4,1526
   4a150:	21384004 	addi	r4,r4,-7936
   4a154:	0042f080 	call	42f08 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4a158:	100b883a 	mov	r5,r2
   4a15c:	01200034 	movhi	r4,32768
   4a160:	213fffc4 	addi	r4,r4,-1
   4a164:	0042f080 	call	42f08 <__udivsi3>
   4a168:	100b883a 	mov	r5,r2
   4a16c:	e13fff17 	ldw	r4,-4(fp)
   4a170:	0042f080 	call	42f08 <__udivsi3>
   4a174:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4a178:	e0bffe17 	ldw	r2,-8(fp)
   4a17c:	10002a26 	beq	r2,zero,4a228 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   4a180:	e03ffc15 	stw	zero,-16(fp)
   4a184:	00001706 	br	4a1e4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4a188:	00a00034 	movhi	r2,32768
   4a18c:	10bfffc4 	addi	r2,r2,-1
   4a190:	10bfffc4 	addi	r2,r2,-1
   4a194:	103ffe1e 	bne	r2,zero,4a190 <__alt_data_end+0xfffe3090>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   4a198:	e0fffd17 	ldw	r3,-12(fp)
   4a19c:	008003f4 	movhi	r2,15
   4a1a0:	10909004 	addi	r2,r2,16960
   4a1a4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4a1a8:	100b883a 	mov	r5,r2
   4a1ac:	01017db4 	movhi	r4,1526
   4a1b0:	21384004 	addi	r4,r4,-7936
   4a1b4:	0042f080 	call	42f08 <__udivsi3>
   4a1b8:	100b883a 	mov	r5,r2
   4a1bc:	01200034 	movhi	r4,32768
   4a1c0:	213fffc4 	addi	r4,r4,-1
   4a1c4:	0042f080 	call	42f08 <__udivsi3>
   4a1c8:	1007883a 	mov	r3,r2
   4a1cc:	e0bfff17 	ldw	r2,-4(fp)
   4a1d0:	10c5c83a 	sub	r2,r2,r3
   4a1d4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4a1d8:	e0bffc17 	ldw	r2,-16(fp)
   4a1dc:	10800044 	addi	r2,r2,1
   4a1e0:	e0bffc15 	stw	r2,-16(fp)
   4a1e4:	e0fffc17 	ldw	r3,-16(fp)
   4a1e8:	e0bffe17 	ldw	r2,-8(fp)
   4a1ec:	18bfe616 	blt	r3,r2,4a188 <__alt_data_end+0xfffe3088>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4a1f0:	e0fffd17 	ldw	r3,-12(fp)
   4a1f4:	008003f4 	movhi	r2,15
   4a1f8:	10909004 	addi	r2,r2,16960
   4a1fc:	1885383a 	mul	r2,r3,r2
   4a200:	100b883a 	mov	r5,r2
   4a204:	01017db4 	movhi	r4,1526
   4a208:	21384004 	addi	r4,r4,-7936
   4a20c:	0042f080 	call	42f08 <__udivsi3>
   4a210:	1007883a 	mov	r3,r2
   4a214:	e0bfff17 	ldw	r2,-4(fp)
   4a218:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4a21c:	10bfffc4 	addi	r2,r2,-1
   4a220:	103ffe1e 	bne	r2,zero,4a21c <__alt_data_end+0xfffe311c>
   4a224:	00000d06 	br	4a25c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4a228:	e0fffd17 	ldw	r3,-12(fp)
   4a22c:	008003f4 	movhi	r2,15
   4a230:	10909004 	addi	r2,r2,16960
   4a234:	1885383a 	mul	r2,r3,r2
   4a238:	100b883a 	mov	r5,r2
   4a23c:	01017db4 	movhi	r4,1526
   4a240:	21384004 	addi	r4,r4,-7936
   4a244:	0042f080 	call	42f08 <__udivsi3>
   4a248:	1007883a 	mov	r3,r2
   4a24c:	e0bfff17 	ldw	r2,-4(fp)
   4a250:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4a254:	10bfffc4 	addi	r2,r2,-1
   4a258:	00bffe16 	blt	zero,r2,4a254 <__alt_data_end+0xfffe3154>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   4a25c:	0005883a 	mov	r2,zero
}
   4a260:	e037883a 	mov	sp,fp
   4a264:	dfc00117 	ldw	ra,4(sp)
   4a268:	df000017 	ldw	fp,0(sp)
   4a26c:	dec00204 	addi	sp,sp,8
   4a270:	f800283a 	ret

0004a274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a274:	defffe04 	addi	sp,sp,-8
   4a278:	dfc00115 	stw	ra,4(sp)
   4a27c:	df000015 	stw	fp,0(sp)
   4a280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4a284:	d0a00a17 	ldw	r2,-32728(gp)
   4a288:	10000326 	beq	r2,zero,4a298 <alt_get_errno+0x24>
   4a28c:	d0a00a17 	ldw	r2,-32728(gp)
   4a290:	103ee83a 	callr	r2
   4a294:	00000106 	br	4a29c <alt_get_errno+0x28>
   4a298:	d0a4e404 	addi	r2,gp,-27760
}
   4a29c:	e037883a 	mov	sp,fp
   4a2a0:	dfc00117 	ldw	ra,4(sp)
   4a2a4:	df000017 	ldw	fp,0(sp)
   4a2a8:	dec00204 	addi	sp,sp,8
   4a2ac:	f800283a 	ret

0004a2b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4a2b0:	defffb04 	addi	sp,sp,-20
   4a2b4:	dfc00415 	stw	ra,16(sp)
   4a2b8:	df000315 	stw	fp,12(sp)
   4a2bc:	df000304 	addi	fp,sp,12
   4a2c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4a2c4:	e0bfff17 	ldw	r2,-4(fp)
   4a2c8:	10000616 	blt	r2,zero,4a2e4 <close+0x34>
   4a2cc:	e0bfff17 	ldw	r2,-4(fp)
   4a2d0:	10c00324 	muli	r3,r2,12
   4a2d4:	00800174 	movhi	r2,5
   4a2d8:	10b2cc04 	addi	r2,r2,-13520
   4a2dc:	1885883a 	add	r2,r3,r2
   4a2e0:	00000106 	br	4a2e8 <close+0x38>
   4a2e4:	0005883a 	mov	r2,zero
   4a2e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4a2ec:	e0bffd17 	ldw	r2,-12(fp)
   4a2f0:	10001926 	beq	r2,zero,4a358 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4a2f4:	e0bffd17 	ldw	r2,-12(fp)
   4a2f8:	10800017 	ldw	r2,0(r2)
   4a2fc:	10800417 	ldw	r2,16(r2)
   4a300:	10000626 	beq	r2,zero,4a31c <close+0x6c>
   4a304:	e0bffd17 	ldw	r2,-12(fp)
   4a308:	10800017 	ldw	r2,0(r2)
   4a30c:	10800417 	ldw	r2,16(r2)
   4a310:	e13ffd17 	ldw	r4,-12(fp)
   4a314:	103ee83a 	callr	r2
   4a318:	00000106 	br	4a320 <close+0x70>
   4a31c:	0005883a 	mov	r2,zero
   4a320:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4a324:	e13fff17 	ldw	r4,-4(fp)
   4a328:	004aef40 	call	4aef4 <alt_release_fd>
    if (rval < 0)
   4a32c:	e0bffe17 	ldw	r2,-8(fp)
   4a330:	1000070e 	bge	r2,zero,4a350 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4a334:	004a2740 	call	4a274 <alt_get_errno>
   4a338:	1007883a 	mov	r3,r2
   4a33c:	e0bffe17 	ldw	r2,-8(fp)
   4a340:	0085c83a 	sub	r2,zero,r2
   4a344:	18800015 	stw	r2,0(r3)
      return -1;
   4a348:	00bfffc4 	movi	r2,-1
   4a34c:	00000706 	br	4a36c <close+0xbc>
    }
    return 0;
   4a350:	0005883a 	mov	r2,zero
   4a354:	00000506 	br	4a36c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a358:	004a2740 	call	4a274 <alt_get_errno>
   4a35c:	1007883a 	mov	r3,r2
   4a360:	00801444 	movi	r2,81
   4a364:	18800015 	stw	r2,0(r3)
    return -1;
   4a368:	00bfffc4 	movi	r2,-1
  }
}
   4a36c:	e037883a 	mov	sp,fp
   4a370:	dfc00117 	ldw	ra,4(sp)
   4a374:	df000017 	ldw	fp,0(sp)
   4a378:	dec00204 	addi	sp,sp,8
   4a37c:	f800283a 	ret

0004a380 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4a380:	defffe04 	addi	sp,sp,-8
   4a384:	df000115 	stw	fp,4(sp)
   4a388:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4a38c:	e03fff15 	stw	zero,-4(fp)
   4a390:	00000506 	br	4a3a8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4a394:	e0bfff17 	ldw	r2,-4(fp)
   4a398:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4a39c:	e0bfff17 	ldw	r2,-4(fp)
   4a3a0:	10800804 	addi	r2,r2,32
   4a3a4:	e0bfff15 	stw	r2,-4(fp)
   4a3a8:	e0bfff17 	ldw	r2,-4(fp)
   4a3ac:	10820030 	cmpltui	r2,r2,2048
   4a3b0:	103ff81e 	bne	r2,zero,4a394 <__alt_data_end+0xfffe3294>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4a3b4:	0001883a 	nop
   4a3b8:	e037883a 	mov	sp,fp
   4a3bc:	df000017 	ldw	fp,0(sp)
   4a3c0:	dec00104 	addi	sp,sp,4
   4a3c4:	f800283a 	ret

0004a3c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4a3c8:	defffc04 	addi	sp,sp,-16
   4a3cc:	df000315 	stw	fp,12(sp)
   4a3d0:	df000304 	addi	fp,sp,12
   4a3d4:	e13ffd15 	stw	r4,-12(fp)
   4a3d8:	e17ffe15 	stw	r5,-8(fp)
   4a3dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4a3e0:	e0bfff17 	ldw	r2,-4(fp)
}
   4a3e4:	e037883a 	mov	sp,fp
   4a3e8:	df000017 	ldw	fp,0(sp)
   4a3ec:	dec00104 	addi	sp,sp,4
   4a3f0:	f800283a 	ret

0004a3f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a3f4:	defffe04 	addi	sp,sp,-8
   4a3f8:	dfc00115 	stw	ra,4(sp)
   4a3fc:	df000015 	stw	fp,0(sp)
   4a400:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4a404:	d0a00a17 	ldw	r2,-32728(gp)
   4a408:	10000326 	beq	r2,zero,4a418 <alt_get_errno+0x24>
   4a40c:	d0a00a17 	ldw	r2,-32728(gp)
   4a410:	103ee83a 	callr	r2
   4a414:	00000106 	br	4a41c <alt_get_errno+0x28>
   4a418:	d0a4e404 	addi	r2,gp,-27760
}
   4a41c:	e037883a 	mov	sp,fp
   4a420:	dfc00117 	ldw	ra,4(sp)
   4a424:	df000017 	ldw	fp,0(sp)
   4a428:	dec00204 	addi	sp,sp,8
   4a42c:	f800283a 	ret

0004a430 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4a430:	defffa04 	addi	sp,sp,-24
   4a434:	dfc00515 	stw	ra,20(sp)
   4a438:	df000415 	stw	fp,16(sp)
   4a43c:	df000404 	addi	fp,sp,16
   4a440:	e13ffe15 	stw	r4,-8(fp)
   4a444:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4a448:	e0bffe17 	ldw	r2,-8(fp)
   4a44c:	10000326 	beq	r2,zero,4a45c <alt_dev_llist_insert+0x2c>
   4a450:	e0bffe17 	ldw	r2,-8(fp)
   4a454:	10800217 	ldw	r2,8(r2)
   4a458:	1000061e 	bne	r2,zero,4a474 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4a45c:	004a3f40 	call	4a3f4 <alt_get_errno>
   4a460:	1007883a 	mov	r3,r2
   4a464:	00800584 	movi	r2,22
   4a468:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4a46c:	00bffa84 	movi	r2,-22
   4a470:	00001306 	br	4a4c0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4a474:	e0bffe17 	ldw	r2,-8(fp)
   4a478:	e0ffff17 	ldw	r3,-4(fp)
   4a47c:	e0fffc15 	stw	r3,-16(fp)
   4a480:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4a484:	e0bffd17 	ldw	r2,-12(fp)
   4a488:	e0fffc17 	ldw	r3,-16(fp)
   4a48c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4a490:	e0bffc17 	ldw	r2,-16(fp)
   4a494:	10c00017 	ldw	r3,0(r2)
   4a498:	e0bffd17 	ldw	r2,-12(fp)
   4a49c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4a4a0:	e0bffc17 	ldw	r2,-16(fp)
   4a4a4:	10800017 	ldw	r2,0(r2)
   4a4a8:	e0fffd17 	ldw	r3,-12(fp)
   4a4ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4a4b0:	e0bffc17 	ldw	r2,-16(fp)
   4a4b4:	e0fffd17 	ldw	r3,-12(fp)
   4a4b8:	10c00015 	stw	r3,0(r2)

  return 0;  
   4a4bc:	0005883a 	mov	r2,zero
}
   4a4c0:	e037883a 	mov	sp,fp
   4a4c4:	dfc00117 	ldw	ra,4(sp)
   4a4c8:	df000017 	ldw	fp,0(sp)
   4a4cc:	dec00204 	addi	sp,sp,8
   4a4d0:	f800283a 	ret

0004a4d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4a4d4:	defffd04 	addi	sp,sp,-12
   4a4d8:	dfc00215 	stw	ra,8(sp)
   4a4dc:	df000115 	stw	fp,4(sp)
   4a4e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4a4e4:	00800174 	movhi	r2,5
   4a4e8:	10ade704 	addi	r2,r2,-18532
   4a4ec:	e0bfff15 	stw	r2,-4(fp)
   4a4f0:	00000606 	br	4a50c <_do_ctors+0x38>
        (*ctor) (); 
   4a4f4:	e0bfff17 	ldw	r2,-4(fp)
   4a4f8:	10800017 	ldw	r2,0(r2)
   4a4fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4a500:	e0bfff17 	ldw	r2,-4(fp)
   4a504:	10bfff04 	addi	r2,r2,-4
   4a508:	e0bfff15 	stw	r2,-4(fp)
   4a50c:	e0ffff17 	ldw	r3,-4(fp)
   4a510:	00800174 	movhi	r2,5
   4a514:	10ade804 	addi	r2,r2,-18528
   4a518:	18bff62e 	bgeu	r3,r2,4a4f4 <__alt_data_end+0xfffe33f4>
        (*ctor) (); 
}
   4a51c:	0001883a 	nop
   4a520:	e037883a 	mov	sp,fp
   4a524:	dfc00117 	ldw	ra,4(sp)
   4a528:	df000017 	ldw	fp,0(sp)
   4a52c:	dec00204 	addi	sp,sp,8
   4a530:	f800283a 	ret

0004a534 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4a534:	defffd04 	addi	sp,sp,-12
   4a538:	dfc00215 	stw	ra,8(sp)
   4a53c:	df000115 	stw	fp,4(sp)
   4a540:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4a544:	00800174 	movhi	r2,5
   4a548:	10ade704 	addi	r2,r2,-18532
   4a54c:	e0bfff15 	stw	r2,-4(fp)
   4a550:	00000606 	br	4a56c <_do_dtors+0x38>
        (*dtor) (); 
   4a554:	e0bfff17 	ldw	r2,-4(fp)
   4a558:	10800017 	ldw	r2,0(r2)
   4a55c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4a560:	e0bfff17 	ldw	r2,-4(fp)
   4a564:	10bfff04 	addi	r2,r2,-4
   4a568:	e0bfff15 	stw	r2,-4(fp)
   4a56c:	e0ffff17 	ldw	r3,-4(fp)
   4a570:	00800174 	movhi	r2,5
   4a574:	10ade804 	addi	r2,r2,-18528
   4a578:	18bff62e 	bgeu	r3,r2,4a554 <__alt_data_end+0xfffe3454>
        (*dtor) (); 
}
   4a57c:	0001883a 	nop
   4a580:	e037883a 	mov	sp,fp
   4a584:	dfc00117 	ldw	ra,4(sp)
   4a588:	df000017 	ldw	fp,0(sp)
   4a58c:	dec00204 	addi	sp,sp,8
   4a590:	f800283a 	ret

0004a594 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4a594:	defffa04 	addi	sp,sp,-24
   4a598:	dfc00515 	stw	ra,20(sp)
   4a59c:	df000415 	stw	fp,16(sp)
   4a5a0:	df000404 	addi	fp,sp,16
   4a5a4:	e13ffe15 	stw	r4,-8(fp)
   4a5a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4a5ac:	e0bfff17 	ldw	r2,-4(fp)
   4a5b0:	10800017 	ldw	r2,0(r2)
   4a5b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4a5b8:	e13ffe17 	ldw	r4,-8(fp)
   4a5bc:	0046d980 	call	46d98 <strlen>
   4a5c0:	10800044 	addi	r2,r2,1
   4a5c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4a5c8:	00000d06 	br	4a600 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4a5cc:	e0bffc17 	ldw	r2,-16(fp)
   4a5d0:	10800217 	ldw	r2,8(r2)
   4a5d4:	e0fffd17 	ldw	r3,-12(fp)
   4a5d8:	180d883a 	mov	r6,r3
   4a5dc:	e17ffe17 	ldw	r5,-8(fp)
   4a5e0:	1009883a 	mov	r4,r2
   4a5e4:	004b42c0 	call	4b42c <memcmp>
   4a5e8:	1000021e 	bne	r2,zero,4a5f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4a5ec:	e0bffc17 	ldw	r2,-16(fp)
   4a5f0:	00000706 	br	4a610 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4a5f4:	e0bffc17 	ldw	r2,-16(fp)
   4a5f8:	10800017 	ldw	r2,0(r2)
   4a5fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4a600:	e0fffc17 	ldw	r3,-16(fp)
   4a604:	e0bfff17 	ldw	r2,-4(fp)
   4a608:	18bff01e 	bne	r3,r2,4a5cc <__alt_data_end+0xfffe34cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4a60c:	0005883a 	mov	r2,zero
}
   4a610:	e037883a 	mov	sp,fp
   4a614:	dfc00117 	ldw	ra,4(sp)
   4a618:	df000017 	ldw	fp,0(sp)
   4a61c:	dec00204 	addi	sp,sp,8
   4a620:	f800283a 	ret

0004a624 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4a624:	defffe04 	addi	sp,sp,-8
   4a628:	dfc00115 	stw	ra,4(sp)
   4a62c:	df000015 	stw	fp,0(sp)
   4a630:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4a634:	01440004 	movi	r5,4096
   4a638:	0009883a 	mov	r4,zero
   4a63c:	004b2cc0 	call	4b2cc <alt_icache_flush>
#endif
}
   4a640:	0001883a 	nop
   4a644:	e037883a 	mov	sp,fp
   4a648:	dfc00117 	ldw	ra,4(sp)
   4a64c:	df000017 	ldw	fp,0(sp)
   4a650:	dec00204 	addi	sp,sp,8
   4a654:	f800283a 	ret

0004a658 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4a658:	defff904 	addi	sp,sp,-28
   4a65c:	dfc00615 	stw	ra,24(sp)
   4a660:	df000515 	stw	fp,20(sp)
   4a664:	df000504 	addi	fp,sp,20
   4a668:	e13ffc15 	stw	r4,-16(fp)
   4a66c:	e17ffd15 	stw	r5,-12(fp)
   4a670:	e1bffe15 	stw	r6,-8(fp)
   4a674:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4a678:	e0800217 	ldw	r2,8(fp)
   4a67c:	d8800015 	stw	r2,0(sp)
   4a680:	e1ffff17 	ldw	r7,-4(fp)
   4a684:	e1bffe17 	ldw	r6,-8(fp)
   4a688:	e17ffd17 	ldw	r5,-12(fp)
   4a68c:	e13ffc17 	ldw	r4,-16(fp)
   4a690:	004a8080 	call	4a808 <alt_iic_isr_register>
}  
   4a694:	e037883a 	mov	sp,fp
   4a698:	dfc00117 	ldw	ra,4(sp)
   4a69c:	df000017 	ldw	fp,0(sp)
   4a6a0:	dec00204 	addi	sp,sp,8
   4a6a4:	f800283a 	ret

0004a6a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4a6a8:	defff904 	addi	sp,sp,-28
   4a6ac:	df000615 	stw	fp,24(sp)
   4a6b0:	df000604 	addi	fp,sp,24
   4a6b4:	e13ffe15 	stw	r4,-8(fp)
   4a6b8:	e17fff15 	stw	r5,-4(fp)
   4a6bc:	e0bfff17 	ldw	r2,-4(fp)
   4a6c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a6c4:	0005303a 	rdctl	r2,status
   4a6c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a6cc:	e0fffb17 	ldw	r3,-20(fp)
   4a6d0:	00bfff84 	movi	r2,-2
   4a6d4:	1884703a 	and	r2,r3,r2
   4a6d8:	1001703a 	wrctl	status,r2
  
  return context;
   4a6dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4a6e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4a6e4:	00c00044 	movi	r3,1
   4a6e8:	e0bffa17 	ldw	r2,-24(fp)
   4a6ec:	1884983a 	sll	r2,r3,r2
   4a6f0:	1007883a 	mov	r3,r2
   4a6f4:	d0a4e817 	ldw	r2,-27744(gp)
   4a6f8:	1884b03a 	or	r2,r3,r2
   4a6fc:	d0a4e815 	stw	r2,-27744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4a700:	d0a4e817 	ldw	r2,-27744(gp)
   4a704:	100170fa 	wrctl	ienable,r2
   4a708:	e0bffc17 	ldw	r2,-16(fp)
   4a70c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a710:	e0bffd17 	ldw	r2,-12(fp)
   4a714:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4a718:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4a71c:	0001883a 	nop
}
   4a720:	e037883a 	mov	sp,fp
   4a724:	df000017 	ldw	fp,0(sp)
   4a728:	dec00104 	addi	sp,sp,4
   4a72c:	f800283a 	ret

0004a730 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4a730:	defff904 	addi	sp,sp,-28
   4a734:	df000615 	stw	fp,24(sp)
   4a738:	df000604 	addi	fp,sp,24
   4a73c:	e13ffe15 	stw	r4,-8(fp)
   4a740:	e17fff15 	stw	r5,-4(fp)
   4a744:	e0bfff17 	ldw	r2,-4(fp)
   4a748:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a74c:	0005303a 	rdctl	r2,status
   4a750:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a754:	e0fffb17 	ldw	r3,-20(fp)
   4a758:	00bfff84 	movi	r2,-2
   4a75c:	1884703a 	and	r2,r3,r2
   4a760:	1001703a 	wrctl	status,r2
  
  return context;
   4a764:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4a768:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4a76c:	00c00044 	movi	r3,1
   4a770:	e0bffa17 	ldw	r2,-24(fp)
   4a774:	1884983a 	sll	r2,r3,r2
   4a778:	0084303a 	nor	r2,zero,r2
   4a77c:	1007883a 	mov	r3,r2
   4a780:	d0a4e817 	ldw	r2,-27744(gp)
   4a784:	1884703a 	and	r2,r3,r2
   4a788:	d0a4e815 	stw	r2,-27744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4a78c:	d0a4e817 	ldw	r2,-27744(gp)
   4a790:	100170fa 	wrctl	ienable,r2
   4a794:	e0bffc17 	ldw	r2,-16(fp)
   4a798:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a79c:	e0bffd17 	ldw	r2,-12(fp)
   4a7a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4a7a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4a7a8:	0001883a 	nop
}
   4a7ac:	e037883a 	mov	sp,fp
   4a7b0:	df000017 	ldw	fp,0(sp)
   4a7b4:	dec00104 	addi	sp,sp,4
   4a7b8:	f800283a 	ret

0004a7bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4a7bc:	defffc04 	addi	sp,sp,-16
   4a7c0:	df000315 	stw	fp,12(sp)
   4a7c4:	df000304 	addi	fp,sp,12
   4a7c8:	e13ffe15 	stw	r4,-8(fp)
   4a7cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4a7d0:	000530fa 	rdctl	r2,ienable
   4a7d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4a7d8:	00c00044 	movi	r3,1
   4a7dc:	e0bfff17 	ldw	r2,-4(fp)
   4a7e0:	1884983a 	sll	r2,r3,r2
   4a7e4:	1007883a 	mov	r3,r2
   4a7e8:	e0bffd17 	ldw	r2,-12(fp)
   4a7ec:	1884703a 	and	r2,r3,r2
   4a7f0:	1004c03a 	cmpne	r2,r2,zero
   4a7f4:	10803fcc 	andi	r2,r2,255
}
   4a7f8:	e037883a 	mov	sp,fp
   4a7fc:	df000017 	ldw	fp,0(sp)
   4a800:	dec00104 	addi	sp,sp,4
   4a804:	f800283a 	ret

0004a808 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4a808:	defff504 	addi	sp,sp,-44
   4a80c:	dfc00a15 	stw	ra,40(sp)
   4a810:	df000915 	stw	fp,36(sp)
   4a814:	df000904 	addi	fp,sp,36
   4a818:	e13ffc15 	stw	r4,-16(fp)
   4a81c:	e17ffd15 	stw	r5,-12(fp)
   4a820:	e1bffe15 	stw	r6,-8(fp)
   4a824:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4a828:	00bffa84 	movi	r2,-22
   4a82c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4a830:	e0bffd17 	ldw	r2,-12(fp)
   4a834:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4a838:	e0bff817 	ldw	r2,-32(fp)
   4a83c:	10800808 	cmpgei	r2,r2,32
   4a840:	1000271e 	bne	r2,zero,4a8e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a844:	0005303a 	rdctl	r2,status
   4a848:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a84c:	e0fffb17 	ldw	r3,-20(fp)
   4a850:	00bfff84 	movi	r2,-2
   4a854:	1884703a 	and	r2,r3,r2
   4a858:	1001703a 	wrctl	status,r2
  
  return context;
   4a85c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4a860:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   4a864:	00800174 	movhi	r2,5
   4a868:	10b81804 	addi	r2,r2,-8096
   4a86c:	e0fff817 	ldw	r3,-32(fp)
   4a870:	180690fa 	slli	r3,r3,3
   4a874:	10c5883a 	add	r2,r2,r3
   4a878:	e0fffe17 	ldw	r3,-8(fp)
   4a87c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4a880:	00800174 	movhi	r2,5
   4a884:	10b81804 	addi	r2,r2,-8096
   4a888:	e0fff817 	ldw	r3,-32(fp)
   4a88c:	180690fa 	slli	r3,r3,3
   4a890:	10c5883a 	add	r2,r2,r3
   4a894:	10800104 	addi	r2,r2,4
   4a898:	e0ffff17 	ldw	r3,-4(fp)
   4a89c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4a8a0:	e0bffe17 	ldw	r2,-8(fp)
   4a8a4:	10000526 	beq	r2,zero,4a8bc <alt_iic_isr_register+0xb4>
   4a8a8:	e0bff817 	ldw	r2,-32(fp)
   4a8ac:	100b883a 	mov	r5,r2
   4a8b0:	e13ffc17 	ldw	r4,-16(fp)
   4a8b4:	004a6a80 	call	4a6a8 <alt_ic_irq_enable>
   4a8b8:	00000406 	br	4a8cc <alt_iic_isr_register+0xc4>
   4a8bc:	e0bff817 	ldw	r2,-32(fp)
   4a8c0:	100b883a 	mov	r5,r2
   4a8c4:	e13ffc17 	ldw	r4,-16(fp)
   4a8c8:	004a7300 	call	4a730 <alt_ic_irq_disable>
   4a8cc:	e0bff715 	stw	r2,-36(fp)
   4a8d0:	e0bffa17 	ldw	r2,-24(fp)
   4a8d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a8d8:	e0bff917 	ldw	r2,-28(fp)
   4a8dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4a8e0:	e0bff717 	ldw	r2,-36(fp)
}
   4a8e4:	e037883a 	mov	sp,fp
   4a8e8:	dfc00117 	ldw	ra,4(sp)
   4a8ec:	df000017 	ldw	fp,0(sp)
   4a8f0:	dec00204 	addi	sp,sp,8
   4a8f4:	f800283a 	ret

0004a8f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4a8f8:	defff904 	addi	sp,sp,-28
   4a8fc:	dfc00615 	stw	ra,24(sp)
   4a900:	df000515 	stw	fp,20(sp)
   4a904:	df000504 	addi	fp,sp,20
   4a908:	e13ffc15 	stw	r4,-16(fp)
   4a90c:	e17ffd15 	stw	r5,-12(fp)
   4a910:	e1bffe15 	stw	r6,-8(fp)
   4a914:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4a918:	e1bfff17 	ldw	r6,-4(fp)
   4a91c:	e17ffe17 	ldw	r5,-8(fp)
   4a920:	e13ffd17 	ldw	r4,-12(fp)
   4a924:	004ab380 	call	4ab38 <open>
   4a928:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4a92c:	e0bffb17 	ldw	r2,-20(fp)
   4a930:	10001c16 	blt	r2,zero,4a9a4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   4a934:	00800174 	movhi	r2,5
   4a938:	10b2cc04 	addi	r2,r2,-13520
   4a93c:	e0fffb17 	ldw	r3,-20(fp)
   4a940:	18c00324 	muli	r3,r3,12
   4a944:	10c5883a 	add	r2,r2,r3
   4a948:	10c00017 	ldw	r3,0(r2)
   4a94c:	e0bffc17 	ldw	r2,-16(fp)
   4a950:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4a954:	00800174 	movhi	r2,5
   4a958:	10b2cc04 	addi	r2,r2,-13520
   4a95c:	e0fffb17 	ldw	r3,-20(fp)
   4a960:	18c00324 	muli	r3,r3,12
   4a964:	10c5883a 	add	r2,r2,r3
   4a968:	10800104 	addi	r2,r2,4
   4a96c:	10c00017 	ldw	r3,0(r2)
   4a970:	e0bffc17 	ldw	r2,-16(fp)
   4a974:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4a978:	00800174 	movhi	r2,5
   4a97c:	10b2cc04 	addi	r2,r2,-13520
   4a980:	e0fffb17 	ldw	r3,-20(fp)
   4a984:	18c00324 	muli	r3,r3,12
   4a988:	10c5883a 	add	r2,r2,r3
   4a98c:	10800204 	addi	r2,r2,8
   4a990:	10c00017 	ldw	r3,0(r2)
   4a994:	e0bffc17 	ldw	r2,-16(fp)
   4a998:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4a99c:	e13ffb17 	ldw	r4,-20(fp)
   4a9a0:	004aef40 	call	4aef4 <alt_release_fd>
  }
} 
   4a9a4:	0001883a 	nop
   4a9a8:	e037883a 	mov	sp,fp
   4a9ac:	dfc00117 	ldw	ra,4(sp)
   4a9b0:	df000017 	ldw	fp,0(sp)
   4a9b4:	dec00204 	addi	sp,sp,8
   4a9b8:	f800283a 	ret

0004a9bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4a9bc:	defffb04 	addi	sp,sp,-20
   4a9c0:	dfc00415 	stw	ra,16(sp)
   4a9c4:	df000315 	stw	fp,12(sp)
   4a9c8:	df000304 	addi	fp,sp,12
   4a9cc:	e13ffd15 	stw	r4,-12(fp)
   4a9d0:	e17ffe15 	stw	r5,-8(fp)
   4a9d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4a9d8:	01c07fc4 	movi	r7,511
   4a9dc:	01800044 	movi	r6,1
   4a9e0:	e17ffd17 	ldw	r5,-12(fp)
   4a9e4:	01000174 	movhi	r4,5
   4a9e8:	2132cf04 	addi	r4,r4,-13508
   4a9ec:	004a8f80 	call	4a8f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4a9f0:	01c07fc4 	movi	r7,511
   4a9f4:	000d883a 	mov	r6,zero
   4a9f8:	e17ffe17 	ldw	r5,-8(fp)
   4a9fc:	01000174 	movhi	r4,5
   4aa00:	2132cc04 	addi	r4,r4,-13520
   4aa04:	004a8f80 	call	4a8f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4aa08:	01c07fc4 	movi	r7,511
   4aa0c:	01800044 	movi	r6,1
   4aa10:	e17fff17 	ldw	r5,-4(fp)
   4aa14:	01000174 	movhi	r4,5
   4aa18:	2132d204 	addi	r4,r4,-13496
   4aa1c:	004a8f80 	call	4a8f8 <alt_open_fd>
}  
   4aa20:	0001883a 	nop
   4aa24:	e037883a 	mov	sp,fp
   4aa28:	dfc00117 	ldw	ra,4(sp)
   4aa2c:	df000017 	ldw	fp,0(sp)
   4aa30:	dec00204 	addi	sp,sp,8
   4aa34:	f800283a 	ret

0004aa38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4aa38:	defffe04 	addi	sp,sp,-8
   4aa3c:	dfc00115 	stw	ra,4(sp)
   4aa40:	df000015 	stw	fp,0(sp)
   4aa44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4aa48:	d0a00a17 	ldw	r2,-32728(gp)
   4aa4c:	10000326 	beq	r2,zero,4aa5c <alt_get_errno+0x24>
   4aa50:	d0a00a17 	ldw	r2,-32728(gp)
   4aa54:	103ee83a 	callr	r2
   4aa58:	00000106 	br	4aa60 <alt_get_errno+0x28>
   4aa5c:	d0a4e404 	addi	r2,gp,-27760
}
   4aa60:	e037883a 	mov	sp,fp
   4aa64:	dfc00117 	ldw	ra,4(sp)
   4aa68:	df000017 	ldw	fp,0(sp)
   4aa6c:	dec00204 	addi	sp,sp,8
   4aa70:	f800283a 	ret

0004aa74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4aa74:	defffd04 	addi	sp,sp,-12
   4aa78:	df000215 	stw	fp,8(sp)
   4aa7c:	df000204 	addi	fp,sp,8
   4aa80:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4aa84:	e0bfff17 	ldw	r2,-4(fp)
   4aa88:	10800217 	ldw	r2,8(r2)
   4aa8c:	10d00034 	orhi	r3,r2,16384
   4aa90:	e0bfff17 	ldw	r2,-4(fp)
   4aa94:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4aa98:	e03ffe15 	stw	zero,-8(fp)
   4aa9c:	00001d06 	br	4ab14 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4aaa0:	00800174 	movhi	r2,5
   4aaa4:	10b2cc04 	addi	r2,r2,-13520
   4aaa8:	e0fffe17 	ldw	r3,-8(fp)
   4aaac:	18c00324 	muli	r3,r3,12
   4aab0:	10c5883a 	add	r2,r2,r3
   4aab4:	10c00017 	ldw	r3,0(r2)
   4aab8:	e0bfff17 	ldw	r2,-4(fp)
   4aabc:	10800017 	ldw	r2,0(r2)
   4aac0:	1880111e 	bne	r3,r2,4ab08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4aac4:	00800174 	movhi	r2,5
   4aac8:	10b2cc04 	addi	r2,r2,-13520
   4aacc:	e0fffe17 	ldw	r3,-8(fp)
   4aad0:	18c00324 	muli	r3,r3,12
   4aad4:	10c5883a 	add	r2,r2,r3
   4aad8:	10800204 	addi	r2,r2,8
   4aadc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4aae0:	1000090e 	bge	r2,zero,4ab08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4aae4:	e0bffe17 	ldw	r2,-8(fp)
   4aae8:	10c00324 	muli	r3,r2,12
   4aaec:	00800174 	movhi	r2,5
   4aaf0:	10b2cc04 	addi	r2,r2,-13520
   4aaf4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4aaf8:	e0bfff17 	ldw	r2,-4(fp)
   4aafc:	18800226 	beq	r3,r2,4ab08 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4ab00:	00bffcc4 	movi	r2,-13
   4ab04:	00000806 	br	4ab28 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4ab08:	e0bffe17 	ldw	r2,-8(fp)
   4ab0c:	10800044 	addi	r2,r2,1
   4ab10:	e0bffe15 	stw	r2,-8(fp)
   4ab14:	d0a00917 	ldw	r2,-32732(gp)
   4ab18:	1007883a 	mov	r3,r2
   4ab1c:	e0bffe17 	ldw	r2,-8(fp)
   4ab20:	18bfdf2e 	bgeu	r3,r2,4aaa0 <__alt_data_end+0xfffe39a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4ab24:	0005883a 	mov	r2,zero
}
   4ab28:	e037883a 	mov	sp,fp
   4ab2c:	df000017 	ldw	fp,0(sp)
   4ab30:	dec00104 	addi	sp,sp,4
   4ab34:	f800283a 	ret

0004ab38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4ab38:	defff604 	addi	sp,sp,-40
   4ab3c:	dfc00915 	stw	ra,36(sp)
   4ab40:	df000815 	stw	fp,32(sp)
   4ab44:	df000804 	addi	fp,sp,32
   4ab48:	e13ffd15 	stw	r4,-12(fp)
   4ab4c:	e17ffe15 	stw	r5,-8(fp)
   4ab50:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4ab54:	00bfffc4 	movi	r2,-1
   4ab58:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4ab5c:	00bffb44 	movi	r2,-19
   4ab60:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4ab64:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4ab68:	d1600704 	addi	r5,gp,-32740
   4ab6c:	e13ffd17 	ldw	r4,-12(fp)
   4ab70:	004a5940 	call	4a594 <alt_find_dev>
   4ab74:	e0bff815 	stw	r2,-32(fp)
   4ab78:	e0bff817 	ldw	r2,-32(fp)
   4ab7c:	1000051e 	bne	r2,zero,4ab94 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4ab80:	e13ffd17 	ldw	r4,-12(fp)
   4ab84:	004b1200 	call	4b120 <alt_find_file>
   4ab88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4ab8c:	00800044 	movi	r2,1
   4ab90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4ab94:	e0bff817 	ldw	r2,-32(fp)
   4ab98:	10002926 	beq	r2,zero,4ac40 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4ab9c:	e13ff817 	ldw	r4,-32(fp)
   4aba0:	004b2280 	call	4b228 <alt_get_fd>
   4aba4:	e0bff915 	stw	r2,-28(fp)
   4aba8:	e0bff917 	ldw	r2,-28(fp)
   4abac:	1000030e 	bge	r2,zero,4abbc <open+0x84>
    {
      status = index;
   4abb0:	e0bff917 	ldw	r2,-28(fp)
   4abb4:	e0bffa15 	stw	r2,-24(fp)
   4abb8:	00002306 	br	4ac48 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4abbc:	e0bff917 	ldw	r2,-28(fp)
   4abc0:	10c00324 	muli	r3,r2,12
   4abc4:	00800174 	movhi	r2,5
   4abc8:	10b2cc04 	addi	r2,r2,-13520
   4abcc:	1885883a 	add	r2,r3,r2
   4abd0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4abd4:	e0fffe17 	ldw	r3,-8(fp)
   4abd8:	00900034 	movhi	r2,16384
   4abdc:	10bfffc4 	addi	r2,r2,-1
   4abe0:	1886703a 	and	r3,r3,r2
   4abe4:	e0bffc17 	ldw	r2,-16(fp)
   4abe8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4abec:	e0bffb17 	ldw	r2,-20(fp)
   4abf0:	1000051e 	bne	r2,zero,4ac08 <open+0xd0>
   4abf4:	e13ffc17 	ldw	r4,-16(fp)
   4abf8:	004aa740 	call	4aa74 <alt_file_locked>
   4abfc:	e0bffa15 	stw	r2,-24(fp)
   4ac00:	e0bffa17 	ldw	r2,-24(fp)
   4ac04:	10001016 	blt	r2,zero,4ac48 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4ac08:	e0bff817 	ldw	r2,-32(fp)
   4ac0c:	10800317 	ldw	r2,12(r2)
   4ac10:	10000826 	beq	r2,zero,4ac34 <open+0xfc>
   4ac14:	e0bff817 	ldw	r2,-32(fp)
   4ac18:	10800317 	ldw	r2,12(r2)
   4ac1c:	e1ffff17 	ldw	r7,-4(fp)
   4ac20:	e1bffe17 	ldw	r6,-8(fp)
   4ac24:	e17ffd17 	ldw	r5,-12(fp)
   4ac28:	e13ffc17 	ldw	r4,-16(fp)
   4ac2c:	103ee83a 	callr	r2
   4ac30:	00000106 	br	4ac38 <open+0x100>
   4ac34:	0005883a 	mov	r2,zero
   4ac38:	e0bffa15 	stw	r2,-24(fp)
   4ac3c:	00000206 	br	4ac48 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4ac40:	00bffb44 	movi	r2,-19
   4ac44:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4ac48:	e0bffa17 	ldw	r2,-24(fp)
   4ac4c:	1000090e 	bge	r2,zero,4ac74 <open+0x13c>
  {
    alt_release_fd (index);  
   4ac50:	e13ff917 	ldw	r4,-28(fp)
   4ac54:	004aef40 	call	4aef4 <alt_release_fd>
    ALT_ERRNO = -status;
   4ac58:	004aa380 	call	4aa38 <alt_get_errno>
   4ac5c:	1007883a 	mov	r3,r2
   4ac60:	e0bffa17 	ldw	r2,-24(fp)
   4ac64:	0085c83a 	sub	r2,zero,r2
   4ac68:	18800015 	stw	r2,0(r3)
    return -1;
   4ac6c:	00bfffc4 	movi	r2,-1
   4ac70:	00000106 	br	4ac78 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4ac74:	e0bff917 	ldw	r2,-28(fp)
}
   4ac78:	e037883a 	mov	sp,fp
   4ac7c:	dfc00117 	ldw	ra,4(sp)
   4ac80:	df000017 	ldw	fp,0(sp)
   4ac84:	dec00204 	addi	sp,sp,8
   4ac88:	f800283a 	ret

0004ac8c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   4ac8c:	defff204 	addi	sp,sp,-56
   4ac90:	dfc00a15 	stw	ra,40(sp)
   4ac94:	df000915 	stw	fp,36(sp)
   4ac98:	df000904 	addi	fp,sp,36
   4ac9c:	e13fff15 	stw	r4,-4(fp)
   4aca0:	e1400215 	stw	r5,8(fp)
   4aca4:	e1800315 	stw	r6,12(fp)
   4aca8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   4acac:	e0800204 	addi	r2,fp,8
   4acb0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   4acb4:	e0bfff17 	ldw	r2,-4(fp)
   4acb8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   4acbc:	00006f06 	br	4ae7c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   4acc0:	e0bff807 	ldb	r2,-32(fp)
   4acc4:	10800960 	cmpeqi	r2,r2,37
   4acc8:	1000041e 	bne	r2,zero,4acdc <alt_printf+0x50>
        {
            alt_putchar(c);
   4accc:	e0bff807 	ldb	r2,-32(fp)
   4acd0:	1009883a 	mov	r4,r2
   4acd4:	004aeb80 	call	4aeb8 <alt_putchar>
   4acd8:	00006806 	br	4ae7c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   4acdc:	e0bff717 	ldw	r2,-36(fp)
   4ace0:	10c00044 	addi	r3,r2,1
   4ace4:	e0fff715 	stw	r3,-36(fp)
   4ace8:	10800003 	ldbu	r2,0(r2)
   4acec:	e0bff805 	stb	r2,-32(fp)
   4acf0:	e0bff807 	ldb	r2,-32(fp)
   4acf4:	10006926 	beq	r2,zero,4ae9c <alt_printf+0x210>
            {
                if (c == '%')
   4acf8:	e0bff807 	ldb	r2,-32(fp)
   4acfc:	10800958 	cmpnei	r2,r2,37
   4ad00:	1000041e 	bne	r2,zero,4ad14 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   4ad04:	e0bff807 	ldb	r2,-32(fp)
   4ad08:	1009883a 	mov	r4,r2
   4ad0c:	004aeb80 	call	4aeb8 <alt_putchar>
   4ad10:	00005a06 	br	4ae7c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   4ad14:	e0bff807 	ldb	r2,-32(fp)
   4ad18:	108018d8 	cmpnei	r2,r2,99
   4ad1c:	1000081e 	bne	r2,zero,4ad40 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   4ad20:	e0bffe17 	ldw	r2,-8(fp)
   4ad24:	10c00104 	addi	r3,r2,4
   4ad28:	e0fffe15 	stw	r3,-8(fp)
   4ad2c:	10800017 	ldw	r2,0(r2)
   4ad30:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   4ad34:	e13ffd17 	ldw	r4,-12(fp)
   4ad38:	004aeb80 	call	4aeb8 <alt_putchar>
   4ad3c:	00004f06 	br	4ae7c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   4ad40:	e0bff807 	ldb	r2,-32(fp)
   4ad44:	10801e18 	cmpnei	r2,r2,120
   4ad48:	1000341e 	bne	r2,zero,4ae1c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   4ad4c:	e0bffe17 	ldw	r2,-8(fp)
   4ad50:	10c00104 	addi	r3,r2,4
   4ad54:	e0fffe15 	stw	r3,-8(fp)
   4ad58:	10800017 	ldw	r2,0(r2)
   4ad5c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   4ad60:	e0bffb17 	ldw	r2,-20(fp)
   4ad64:	1000031e 	bne	r2,zero,4ad74 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   4ad68:	01000c04 	movi	r4,48
   4ad6c:	004aeb80 	call	4aeb8 <alt_putchar>
                        continue;
   4ad70:	00004206 	br	4ae7c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   4ad74:	00800704 	movi	r2,28
   4ad78:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   4ad7c:	00000306 	br	4ad8c <alt_printf+0x100>
                        digit_shift -= 4;
   4ad80:	e0bff917 	ldw	r2,-28(fp)
   4ad84:	10bfff04 	addi	r2,r2,-4
   4ad88:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   4ad8c:	00c003c4 	movi	r3,15
   4ad90:	e0bff917 	ldw	r2,-28(fp)
   4ad94:	1884983a 	sll	r2,r3,r2
   4ad98:	1007883a 	mov	r3,r2
   4ad9c:	e0bffb17 	ldw	r2,-20(fp)
   4ada0:	1884703a 	and	r2,r3,r2
   4ada4:	103ff626 	beq	r2,zero,4ad80 <__alt_data_end+0xfffe3c80>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   4ada8:	00001906 	br	4ae10 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   4adac:	00c003c4 	movi	r3,15
   4adb0:	e0bff917 	ldw	r2,-28(fp)
   4adb4:	1884983a 	sll	r2,r3,r2
   4adb8:	1007883a 	mov	r3,r2
   4adbc:	e0bffb17 	ldw	r2,-20(fp)
   4adc0:	1886703a 	and	r3,r3,r2
   4adc4:	e0bff917 	ldw	r2,-28(fp)
   4adc8:	1884d83a 	srl	r2,r3,r2
   4adcc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   4add0:	e0bffc17 	ldw	r2,-16(fp)
   4add4:	108002a8 	cmpgeui	r2,r2,10
   4add8:	1000041e 	bne	r2,zero,4adec <alt_printf+0x160>
                            c = '0' + digit;
   4addc:	e0bffc17 	ldw	r2,-16(fp)
   4ade0:	10800c04 	addi	r2,r2,48
   4ade4:	e0bff805 	stb	r2,-32(fp)
   4ade8:	00000306 	br	4adf8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   4adec:	e0bffc17 	ldw	r2,-16(fp)
   4adf0:	108015c4 	addi	r2,r2,87
   4adf4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   4adf8:	e0bff807 	ldb	r2,-32(fp)
   4adfc:	1009883a 	mov	r4,r2
   4ae00:	004aeb80 	call	4aeb8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   4ae04:	e0bff917 	ldw	r2,-28(fp)
   4ae08:	10bfff04 	addi	r2,r2,-4
   4ae0c:	e0bff915 	stw	r2,-28(fp)
   4ae10:	e0bff917 	ldw	r2,-28(fp)
   4ae14:	103fe50e 	bge	r2,zero,4adac <__alt_data_end+0xfffe3cac>
   4ae18:	00001806 	br	4ae7c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   4ae1c:	e0bff807 	ldb	r2,-32(fp)
   4ae20:	10801cd8 	cmpnei	r2,r2,115
   4ae24:	1000151e 	bne	r2,zero,4ae7c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   4ae28:	e0bffe17 	ldw	r2,-8(fp)
   4ae2c:	10c00104 	addi	r3,r2,4
   4ae30:	e0fffe15 	stw	r3,-8(fp)
   4ae34:	10800017 	ldw	r2,0(r2)
   4ae38:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   4ae3c:	00000906 	br	4ae64 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   4ae40:	e0bffa17 	ldw	r2,-24(fp)
   4ae44:	10c00044 	addi	r3,r2,1
   4ae48:	e0fffa15 	stw	r3,-24(fp)
   4ae4c:	10800003 	ldbu	r2,0(r2)
   4ae50:	10803fcc 	andi	r2,r2,255
   4ae54:	1080201c 	xori	r2,r2,128
   4ae58:	10bfe004 	addi	r2,r2,-128
   4ae5c:	1009883a 	mov	r4,r2
   4ae60:	004aeb80 	call	4aeb8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   4ae64:	e0bffa17 	ldw	r2,-24(fp)
   4ae68:	10800003 	ldbu	r2,0(r2)
   4ae6c:	10803fcc 	andi	r2,r2,255
   4ae70:	1080201c 	xori	r2,r2,128
   4ae74:	10bfe004 	addi	r2,r2,-128
   4ae78:	103ff11e 	bne	r2,zero,4ae40 <__alt_data_end+0xfffe3d40>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   4ae7c:	e0bff717 	ldw	r2,-36(fp)
   4ae80:	10c00044 	addi	r3,r2,1
   4ae84:	e0fff715 	stw	r3,-36(fp)
   4ae88:	10800003 	ldbu	r2,0(r2)
   4ae8c:	e0bff805 	stb	r2,-32(fp)
   4ae90:	e0bff807 	ldb	r2,-32(fp)
   4ae94:	103f8a1e 	bne	r2,zero,4acc0 <__alt_data_end+0xfffe3bc0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   4ae98:	00000106 	br	4aea0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   4ae9c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   4aea0:	0001883a 	nop
   4aea4:	e037883a 	mov	sp,fp
   4aea8:	dfc00117 	ldw	ra,4(sp)
   4aeac:	df000017 	ldw	fp,0(sp)
   4aeb0:	dec00504 	addi	sp,sp,20
   4aeb4:	f800283a 	ret

0004aeb8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   4aeb8:	defffd04 	addi	sp,sp,-12
   4aebc:	dfc00215 	stw	ra,8(sp)
   4aec0:	df000115 	stw	fp,4(sp)
   4aec4:	df000104 	addi	fp,sp,4
   4aec8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   4aecc:	d0a00217 	ldw	r2,-32760(gp)
   4aed0:	10800217 	ldw	r2,8(r2)
   4aed4:	100b883a 	mov	r5,r2
   4aed8:	e13fff17 	ldw	r4,-4(fp)
   4aedc:	00474180 	call	47418 <putc>
#endif
#endif
}
   4aee0:	e037883a 	mov	sp,fp
   4aee4:	dfc00117 	ldw	ra,4(sp)
   4aee8:	df000017 	ldw	fp,0(sp)
   4aeec:	dec00204 	addi	sp,sp,8
   4aef0:	f800283a 	ret

0004aef4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4aef4:	defffe04 	addi	sp,sp,-8
   4aef8:	df000115 	stw	fp,4(sp)
   4aefc:	df000104 	addi	fp,sp,4
   4af00:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4af04:	e0bfff17 	ldw	r2,-4(fp)
   4af08:	108000d0 	cmplti	r2,r2,3
   4af0c:	10000d1e 	bne	r2,zero,4af44 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4af10:	00800174 	movhi	r2,5
   4af14:	10b2cc04 	addi	r2,r2,-13520
   4af18:	e0ffff17 	ldw	r3,-4(fp)
   4af1c:	18c00324 	muli	r3,r3,12
   4af20:	10c5883a 	add	r2,r2,r3
   4af24:	10800204 	addi	r2,r2,8
   4af28:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4af2c:	00800174 	movhi	r2,5
   4af30:	10b2cc04 	addi	r2,r2,-13520
   4af34:	e0ffff17 	ldw	r3,-4(fp)
   4af38:	18c00324 	muli	r3,r3,12
   4af3c:	10c5883a 	add	r2,r2,r3
   4af40:	10000015 	stw	zero,0(r2)
  }
}
   4af44:	0001883a 	nop
   4af48:	e037883a 	mov	sp,fp
   4af4c:	df000017 	ldw	fp,0(sp)
   4af50:	dec00104 	addi	sp,sp,4
   4af54:	f800283a 	ret

0004af58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4af58:	defffa04 	addi	sp,sp,-24
   4af5c:	df000515 	stw	fp,20(sp)
   4af60:	df000504 	addi	fp,sp,20
   4af64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4af68:	0005303a 	rdctl	r2,status
   4af6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4af70:	e0fffc17 	ldw	r3,-16(fp)
   4af74:	00bfff84 	movi	r2,-2
   4af78:	1884703a 	and	r2,r3,r2
   4af7c:	1001703a 	wrctl	status,r2
  
  return context;
   4af80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4af84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4af88:	e0bfff17 	ldw	r2,-4(fp)
   4af8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4af90:	e0bffd17 	ldw	r2,-12(fp)
   4af94:	10800017 	ldw	r2,0(r2)
   4af98:	e0fffd17 	ldw	r3,-12(fp)
   4af9c:	18c00117 	ldw	r3,4(r3)
   4afa0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4afa4:	e0bffd17 	ldw	r2,-12(fp)
   4afa8:	10800117 	ldw	r2,4(r2)
   4afac:	e0fffd17 	ldw	r3,-12(fp)
   4afb0:	18c00017 	ldw	r3,0(r3)
   4afb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4afb8:	e0bffd17 	ldw	r2,-12(fp)
   4afbc:	e0fffd17 	ldw	r3,-12(fp)
   4afc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4afc4:	e0bffd17 	ldw	r2,-12(fp)
   4afc8:	e0fffd17 	ldw	r3,-12(fp)
   4afcc:	10c00015 	stw	r3,0(r2)
   4afd0:	e0bffb17 	ldw	r2,-20(fp)
   4afd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4afd8:	e0bffe17 	ldw	r2,-8(fp)
   4afdc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4afe0:	0001883a 	nop
   4afe4:	e037883a 	mov	sp,fp
   4afe8:	df000017 	ldw	fp,0(sp)
   4afec:	dec00104 	addi	sp,sp,4
   4aff0:	f800283a 	ret

0004aff4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4aff4:	defffb04 	addi	sp,sp,-20
   4aff8:	dfc00415 	stw	ra,16(sp)
   4affc:	df000315 	stw	fp,12(sp)
   4b000:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4b004:	d0a00c17 	ldw	r2,-32720(gp)
   4b008:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4b00c:	d0a4ea17 	ldw	r2,-27736(gp)
   4b010:	10800044 	addi	r2,r2,1
   4b014:	d0a4ea15 	stw	r2,-27736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4b018:	00002e06 	br	4b0d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4b01c:	e0bffd17 	ldw	r2,-12(fp)
   4b020:	10800017 	ldw	r2,0(r2)
   4b024:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4b028:	e0bffd17 	ldw	r2,-12(fp)
   4b02c:	10800403 	ldbu	r2,16(r2)
   4b030:	10803fcc 	andi	r2,r2,255
   4b034:	10000426 	beq	r2,zero,4b048 <alt_tick+0x54>
   4b038:	d0a4ea17 	ldw	r2,-27736(gp)
   4b03c:	1000021e 	bne	r2,zero,4b048 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4b040:	e0bffd17 	ldw	r2,-12(fp)
   4b044:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4b048:	e0bffd17 	ldw	r2,-12(fp)
   4b04c:	10800217 	ldw	r2,8(r2)
   4b050:	d0e4ea17 	ldw	r3,-27736(gp)
   4b054:	18801d36 	bltu	r3,r2,4b0cc <alt_tick+0xd8>
   4b058:	e0bffd17 	ldw	r2,-12(fp)
   4b05c:	10800403 	ldbu	r2,16(r2)
   4b060:	10803fcc 	andi	r2,r2,255
   4b064:	1000191e 	bne	r2,zero,4b0cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4b068:	e0bffd17 	ldw	r2,-12(fp)
   4b06c:	10800317 	ldw	r2,12(r2)
   4b070:	e0fffd17 	ldw	r3,-12(fp)
   4b074:	18c00517 	ldw	r3,20(r3)
   4b078:	1809883a 	mov	r4,r3
   4b07c:	103ee83a 	callr	r2
   4b080:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4b084:	e0bfff17 	ldw	r2,-4(fp)
   4b088:	1000031e 	bne	r2,zero,4b098 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4b08c:	e13ffd17 	ldw	r4,-12(fp)
   4b090:	004af580 	call	4af58 <alt_alarm_stop>
   4b094:	00000d06 	br	4b0cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4b098:	e0bffd17 	ldw	r2,-12(fp)
   4b09c:	10c00217 	ldw	r3,8(r2)
   4b0a0:	e0bfff17 	ldw	r2,-4(fp)
   4b0a4:	1887883a 	add	r3,r3,r2
   4b0a8:	e0bffd17 	ldw	r2,-12(fp)
   4b0ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4b0b0:	e0bffd17 	ldw	r2,-12(fp)
   4b0b4:	10c00217 	ldw	r3,8(r2)
   4b0b8:	d0a4ea17 	ldw	r2,-27736(gp)
   4b0bc:	1880032e 	bgeu	r3,r2,4b0cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4b0c0:	e0bffd17 	ldw	r2,-12(fp)
   4b0c4:	00c00044 	movi	r3,1
   4b0c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4b0cc:	e0bffe17 	ldw	r2,-8(fp)
   4b0d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4b0d4:	e0fffd17 	ldw	r3,-12(fp)
   4b0d8:	d0a00c04 	addi	r2,gp,-32720
   4b0dc:	18bfcf1e 	bne	r3,r2,4b01c <__alt_data_end+0xfffe3f1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4b0e0:	0001883a 	nop
}
   4b0e4:	0001883a 	nop
   4b0e8:	e037883a 	mov	sp,fp
   4b0ec:	dfc00117 	ldw	ra,4(sp)
   4b0f0:	df000017 	ldw	fp,0(sp)
   4b0f4:	dec00204 	addi	sp,sp,8
   4b0f8:	f800283a 	ret

0004b0fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4b0fc:	deffff04 	addi	sp,sp,-4
   4b100:	df000015 	stw	fp,0(sp)
   4b104:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4b108:	000170fa 	wrctl	ienable,zero
}
   4b10c:	0001883a 	nop
   4b110:	e037883a 	mov	sp,fp
   4b114:	df000017 	ldw	fp,0(sp)
   4b118:	dec00104 	addi	sp,sp,4
   4b11c:	f800283a 	ret

0004b120 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4b120:	defffb04 	addi	sp,sp,-20
   4b124:	dfc00415 	stw	ra,16(sp)
   4b128:	df000315 	stw	fp,12(sp)
   4b12c:	df000304 	addi	fp,sp,12
   4b130:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4b134:	d0a00517 	ldw	r2,-32748(gp)
   4b138:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4b13c:	00003106 	br	4b204 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4b140:	e0bffd17 	ldw	r2,-12(fp)
   4b144:	10800217 	ldw	r2,8(r2)
   4b148:	1009883a 	mov	r4,r2
   4b14c:	0046d980 	call	46d98 <strlen>
   4b150:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4b154:	e0bffd17 	ldw	r2,-12(fp)
   4b158:	10c00217 	ldw	r3,8(r2)
   4b15c:	e0bffe17 	ldw	r2,-8(fp)
   4b160:	10bfffc4 	addi	r2,r2,-1
   4b164:	1885883a 	add	r2,r3,r2
   4b168:	10800003 	ldbu	r2,0(r2)
   4b16c:	10803fcc 	andi	r2,r2,255
   4b170:	1080201c 	xori	r2,r2,128
   4b174:	10bfe004 	addi	r2,r2,-128
   4b178:	10800bd8 	cmpnei	r2,r2,47
   4b17c:	1000031e 	bne	r2,zero,4b18c <alt_find_file+0x6c>
    {
      len -= 1;
   4b180:	e0bffe17 	ldw	r2,-8(fp)
   4b184:	10bfffc4 	addi	r2,r2,-1
   4b188:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4b18c:	e0bffe17 	ldw	r2,-8(fp)
   4b190:	e0ffff17 	ldw	r3,-4(fp)
   4b194:	1885883a 	add	r2,r3,r2
   4b198:	10800003 	ldbu	r2,0(r2)
   4b19c:	10803fcc 	andi	r2,r2,255
   4b1a0:	1080201c 	xori	r2,r2,128
   4b1a4:	10bfe004 	addi	r2,r2,-128
   4b1a8:	10800be0 	cmpeqi	r2,r2,47
   4b1ac:	1000081e 	bne	r2,zero,4b1d0 <alt_find_file+0xb0>
   4b1b0:	e0bffe17 	ldw	r2,-8(fp)
   4b1b4:	e0ffff17 	ldw	r3,-4(fp)
   4b1b8:	1885883a 	add	r2,r3,r2
   4b1bc:	10800003 	ldbu	r2,0(r2)
   4b1c0:	10803fcc 	andi	r2,r2,255
   4b1c4:	1080201c 	xori	r2,r2,128
   4b1c8:	10bfe004 	addi	r2,r2,-128
   4b1cc:	10000a1e 	bne	r2,zero,4b1f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4b1d0:	e0bffd17 	ldw	r2,-12(fp)
   4b1d4:	10800217 	ldw	r2,8(r2)
   4b1d8:	e0fffe17 	ldw	r3,-8(fp)
   4b1dc:	180d883a 	mov	r6,r3
   4b1e0:	e17fff17 	ldw	r5,-4(fp)
   4b1e4:	1009883a 	mov	r4,r2
   4b1e8:	004b42c0 	call	4b42c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4b1ec:	1000021e 	bne	r2,zero,4b1f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4b1f0:	e0bffd17 	ldw	r2,-12(fp)
   4b1f4:	00000706 	br	4b214 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   4b1f8:	e0bffd17 	ldw	r2,-12(fp)
   4b1fc:	10800017 	ldw	r2,0(r2)
   4b200:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4b204:	e0fffd17 	ldw	r3,-12(fp)
   4b208:	d0a00504 	addi	r2,gp,-32748
   4b20c:	18bfcc1e 	bne	r3,r2,4b140 <__alt_data_end+0xfffe4040>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4b210:	0005883a 	mov	r2,zero
}
   4b214:	e037883a 	mov	sp,fp
   4b218:	dfc00117 	ldw	ra,4(sp)
   4b21c:	df000017 	ldw	fp,0(sp)
   4b220:	dec00204 	addi	sp,sp,8
   4b224:	f800283a 	ret

0004b228 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4b228:	defffc04 	addi	sp,sp,-16
   4b22c:	df000315 	stw	fp,12(sp)
   4b230:	df000304 	addi	fp,sp,12
   4b234:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4b238:	00bffa04 	movi	r2,-24
   4b23c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4b240:	e03ffd15 	stw	zero,-12(fp)
   4b244:	00001906 	br	4b2ac <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   4b248:	00800174 	movhi	r2,5
   4b24c:	10b2cc04 	addi	r2,r2,-13520
   4b250:	e0fffd17 	ldw	r3,-12(fp)
   4b254:	18c00324 	muli	r3,r3,12
   4b258:	10c5883a 	add	r2,r2,r3
   4b25c:	10800017 	ldw	r2,0(r2)
   4b260:	10000f1e 	bne	r2,zero,4b2a0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   4b264:	00800174 	movhi	r2,5
   4b268:	10b2cc04 	addi	r2,r2,-13520
   4b26c:	e0fffd17 	ldw	r3,-12(fp)
   4b270:	18c00324 	muli	r3,r3,12
   4b274:	10c5883a 	add	r2,r2,r3
   4b278:	e0ffff17 	ldw	r3,-4(fp)
   4b27c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4b280:	d0e00917 	ldw	r3,-32732(gp)
   4b284:	e0bffd17 	ldw	r2,-12(fp)
   4b288:	1880020e 	bge	r3,r2,4b294 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   4b28c:	e0bffd17 	ldw	r2,-12(fp)
   4b290:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   4b294:	e0bffd17 	ldw	r2,-12(fp)
   4b298:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4b29c:	00000606 	br	4b2b8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4b2a0:	e0bffd17 	ldw	r2,-12(fp)
   4b2a4:	10800044 	addi	r2,r2,1
   4b2a8:	e0bffd15 	stw	r2,-12(fp)
   4b2ac:	e0bffd17 	ldw	r2,-12(fp)
   4b2b0:	10800810 	cmplti	r2,r2,32
   4b2b4:	103fe41e 	bne	r2,zero,4b248 <__alt_data_end+0xfffe4148>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4b2b8:	e0bffe17 	ldw	r2,-8(fp)
}
   4b2bc:	e037883a 	mov	sp,fp
   4b2c0:	df000017 	ldw	fp,0(sp)
   4b2c4:	dec00104 	addi	sp,sp,4
   4b2c8:	f800283a 	ret

0004b2cc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4b2cc:	defffb04 	addi	sp,sp,-20
   4b2d0:	df000415 	stw	fp,16(sp)
   4b2d4:	df000404 	addi	fp,sp,16
   4b2d8:	e13ffe15 	stw	r4,-8(fp)
   4b2dc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4b2e0:	e0bfff17 	ldw	r2,-4(fp)
   4b2e4:	10840070 	cmpltui	r2,r2,4097
   4b2e8:	1000021e 	bne	r2,zero,4b2f4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4b2ec:	00840004 	movi	r2,4096
   4b2f0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4b2f4:	e0fffe17 	ldw	r3,-8(fp)
   4b2f8:	e0bfff17 	ldw	r2,-4(fp)
   4b2fc:	1885883a 	add	r2,r3,r2
   4b300:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4b304:	e0bffe17 	ldw	r2,-8(fp)
   4b308:	e0bffc15 	stw	r2,-16(fp)
   4b30c:	00000506 	br	4b324 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4b310:	e0bffc17 	ldw	r2,-16(fp)
   4b314:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4b318:	e0bffc17 	ldw	r2,-16(fp)
   4b31c:	10800804 	addi	r2,r2,32
   4b320:	e0bffc15 	stw	r2,-16(fp)
   4b324:	e0fffc17 	ldw	r3,-16(fp)
   4b328:	e0bffd17 	ldw	r2,-12(fp)
   4b32c:	18bff836 	bltu	r3,r2,4b310 <__alt_data_end+0xfffe4210>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4b330:	e0bffe17 	ldw	r2,-8(fp)
   4b334:	108007cc 	andi	r2,r2,31
   4b338:	10000226 	beq	r2,zero,4b344 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4b33c:	e0bffc17 	ldw	r2,-16(fp)
   4b340:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4b344:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4b348:	0001883a 	nop
   4b34c:	e037883a 	mov	sp,fp
   4b350:	df000017 	ldw	fp,0(sp)
   4b354:	dec00104 	addi	sp,sp,4
   4b358:	f800283a 	ret

0004b35c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4b35c:	defffe04 	addi	sp,sp,-8
   4b360:	df000115 	stw	fp,4(sp)
   4b364:	df000104 	addi	fp,sp,4
   4b368:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4b36c:	e0bfff17 	ldw	r2,-4(fp)
   4b370:	10bffe84 	addi	r2,r2,-6
   4b374:	10c00428 	cmpgeui	r3,r2,16
   4b378:	18001a1e 	bne	r3,zero,4b3e4 <alt_exception_cause_generated_bad_addr+0x88>
   4b37c:	100690ba 	slli	r3,r2,2
   4b380:	00800174 	movhi	r2,5
   4b384:	10ace504 	addi	r2,r2,-19564
   4b388:	1885883a 	add	r2,r3,r2
   4b38c:	10800017 	ldw	r2,0(r2)
   4b390:	1000683a 	jmp	r2
   4b394:	0004b3d4 	movui	zero,4815
   4b398:	0004b3d4 	movui	zero,4815
   4b39c:	0004b3e4 	muli	zero,zero,4815
   4b3a0:	0004b3e4 	muli	zero,zero,4815
   4b3a4:	0004b3e4 	muli	zero,zero,4815
   4b3a8:	0004b3d4 	movui	zero,4815
   4b3ac:	0004b3dc 	xori	zero,zero,4815
   4b3b0:	0004b3e4 	muli	zero,zero,4815
   4b3b4:	0004b3d4 	movui	zero,4815
   4b3b8:	0004b3d4 	movui	zero,4815
   4b3bc:	0004b3e4 	muli	zero,zero,4815
   4b3c0:	0004b3d4 	movui	zero,4815
   4b3c4:	0004b3dc 	xori	zero,zero,4815
   4b3c8:	0004b3e4 	muli	zero,zero,4815
   4b3cc:	0004b3e4 	muli	zero,zero,4815
   4b3d0:	0004b3d4 	movui	zero,4815
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4b3d4:	00800044 	movi	r2,1
   4b3d8:	00000306 	br	4b3e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4b3dc:	0005883a 	mov	r2,zero
   4b3e0:	00000106 	br	4b3e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   4b3e4:	0005883a 	mov	r2,zero
  }
}
   4b3e8:	e037883a 	mov	sp,fp
   4b3ec:	df000017 	ldw	fp,0(sp)
   4b3f0:	dec00104 	addi	sp,sp,4
   4b3f4:	f800283a 	ret

0004b3f8 <atexit>:
   4b3f8:	200b883a 	mov	r5,r4
   4b3fc:	000f883a 	mov	r7,zero
   4b400:	000d883a 	mov	r6,zero
   4b404:	0009883a 	mov	r4,zero
   4b408:	004b4841 	jmpi	4b484 <__register_exitproc>

0004b40c <exit>:
   4b40c:	defffe04 	addi	sp,sp,-8
   4b410:	000b883a 	mov	r5,zero
   4b414:	dc000015 	stw	r16,0(sp)
   4b418:	dfc00115 	stw	ra,4(sp)
   4b41c:	2021883a 	mov	r16,r4
   4b420:	004b5dc0 	call	4b5dc <__call_exitprocs>
   4b424:	8009883a 	mov	r4,r16
   4b428:	004b76c0 	call	4b76c <_exit>

0004b42c <memcmp>:
   4b42c:	218d883a 	add	r6,r4,r6
   4b430:	21800826 	beq	r4,r6,4b454 <memcmp+0x28>
   4b434:	20800003 	ldbu	r2,0(r4)
   4b438:	28c00003 	ldbu	r3,0(r5)
   4b43c:	10c00226 	beq	r2,r3,4b448 <memcmp+0x1c>
   4b440:	10c5c83a 	sub	r2,r2,r3
   4b444:	f800283a 	ret
   4b448:	21000044 	addi	r4,r4,1
   4b44c:	29400044 	addi	r5,r5,1
   4b450:	003ff706 	br	4b430 <__alt_data_end+0xfffe4330>
   4b454:	0005883a 	mov	r2,zero
   4b458:	f800283a 	ret

0004b45c <memcpy>:
   4b45c:	2005883a 	mov	r2,r4
   4b460:	2007883a 	mov	r3,r4
   4b464:	218d883a 	add	r6,r4,r6
   4b468:	19800526 	beq	r3,r6,4b480 <memcpy+0x24>
   4b46c:	29000003 	ldbu	r4,0(r5)
   4b470:	18c00044 	addi	r3,r3,1
   4b474:	29400044 	addi	r5,r5,1
   4b478:	193fffc5 	stb	r4,-1(r3)
   4b47c:	003ffa06 	br	4b468 <__alt_data_end+0xfffe4368>
   4b480:	f800283a 	ret

0004b484 <__register_exitproc>:
   4b484:	00800174 	movhi	r2,5
   4b488:	10b32d04 	addi	r2,r2,-13132
   4b48c:	10c00017 	ldw	r3,0(r2)
   4b490:	defff904 	addi	sp,sp,-28
   4b494:	dc000015 	stw	r16,0(sp)
   4b498:	1c000c17 	ldw	r16,48(r3)
   4b49c:	dd400515 	stw	r21,20(sp)
   4b4a0:	dd000415 	stw	r20,16(sp)
   4b4a4:	dcc00315 	stw	r19,12(sp)
   4b4a8:	dc800215 	stw	r18,8(sp)
   4b4ac:	dc400115 	stw	r17,4(sp)
   4b4b0:	dfc00615 	stw	ra,24(sp)
   4b4b4:	202b883a 	mov	r21,r4
   4b4b8:	2823883a 	mov	r17,r5
   4b4bc:	3027883a 	mov	r19,r6
   4b4c0:	3825883a 	mov	r18,r7
   4b4c4:	1029883a 	mov	r20,r2
   4b4c8:	8000021e 	bne	r16,zero,4b4d4 <__register_exitproc+0x50>
   4b4cc:	1c000d04 	addi	r16,r3,52
   4b4d0:	1c000c15 	stw	r16,48(r3)
   4b4d4:	80800117 	ldw	r2,4(r16)
   4b4d8:	00c007c4 	movi	r3,31
   4b4dc:	1880110e 	bge	r3,r2,4b524 <__register_exitproc+0xa0>
   4b4e0:	00800034 	movhi	r2,0
   4b4e4:	10800004 	addi	r2,r2,0
   4b4e8:	1000021e 	bne	r2,zero,4b4f4 <__register_exitproc+0x70>
   4b4ec:	00bfffc4 	movi	r2,-1
   4b4f0:	00003106 	br	4b5b8 <__register_exitproc+0x134>
   4b4f4:	01002304 	movi	r4,140
   4b4f8:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   4b4fc:	1021883a 	mov	r16,r2
   4b500:	103ffa26 	beq	r2,zero,4b4ec <__alt_data_end+0xfffe43ec>
   4b504:	10000115 	stw	zero,4(r2)
   4b508:	a0800017 	ldw	r2,0(r20)
   4b50c:	10c00c17 	ldw	r3,48(r2)
   4b510:	80c00015 	stw	r3,0(r16)
   4b514:	14000c15 	stw	r16,48(r2)
   4b518:	80002215 	stw	zero,136(r16)
   4b51c:	a8001d26 	beq	r21,zero,4b594 <__register_exitproc+0x110>
   4b520:	00000606 	br	4b53c <__register_exitproc+0xb8>
   4b524:	a8001b26 	beq	r21,zero,4b594 <__register_exitproc+0x110>
   4b528:	80802217 	ldw	r2,136(r16)
   4b52c:	1000091e 	bne	r2,zero,4b554 <__register_exitproc+0xd0>
   4b530:	00800034 	movhi	r2,0
   4b534:	10800004 	addi	r2,r2,0
   4b538:	103fec26 	beq	r2,zero,4b4ec <__alt_data_end+0xfffe43ec>
   4b53c:	01004204 	movi	r4,264
   4b540:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   4b544:	103fe926 	beq	r2,zero,4b4ec <__alt_data_end+0xfffe43ec>
   4b548:	10004015 	stw	zero,256(r2)
   4b54c:	10004115 	stw	zero,260(r2)
   4b550:	80802215 	stw	r2,136(r16)
   4b554:	81400117 	ldw	r5,4(r16)
   4b558:	01000044 	movi	r4,1
   4b55c:	2947883a 	add	r3,r5,r5
   4b560:	18c7883a 	add	r3,r3,r3
   4b564:	10c7883a 	add	r3,r2,r3
   4b568:	1cc00015 	stw	r19,0(r3)
   4b56c:	2148983a 	sll	r4,r4,r5
   4b570:	11404017 	ldw	r5,256(r2)
   4b574:	290ab03a 	or	r5,r5,r4
   4b578:	11404015 	stw	r5,256(r2)
   4b57c:	1c802015 	stw	r18,128(r3)
   4b580:	00c00084 	movi	r3,2
   4b584:	a8c0031e 	bne	r21,r3,4b594 <__register_exitproc+0x110>
   4b588:	10c04117 	ldw	r3,260(r2)
   4b58c:	1908b03a 	or	r4,r3,r4
   4b590:	11004115 	stw	r4,260(r2)
   4b594:	80800117 	ldw	r2,4(r16)
   4b598:	10c00044 	addi	r3,r2,1
   4b59c:	10800084 	addi	r2,r2,2
   4b5a0:	1085883a 	add	r2,r2,r2
   4b5a4:	1085883a 	add	r2,r2,r2
   4b5a8:	80c00115 	stw	r3,4(r16)
   4b5ac:	80a1883a 	add	r16,r16,r2
   4b5b0:	84400015 	stw	r17,0(r16)
   4b5b4:	0005883a 	mov	r2,zero
   4b5b8:	dfc00617 	ldw	ra,24(sp)
   4b5bc:	dd400517 	ldw	r21,20(sp)
   4b5c0:	dd000417 	ldw	r20,16(sp)
   4b5c4:	dcc00317 	ldw	r19,12(sp)
   4b5c8:	dc800217 	ldw	r18,8(sp)
   4b5cc:	dc400117 	ldw	r17,4(sp)
   4b5d0:	dc000017 	ldw	r16,0(sp)
   4b5d4:	dec00704 	addi	sp,sp,28
   4b5d8:	f800283a 	ret

0004b5dc <__call_exitprocs>:
   4b5dc:	defff504 	addi	sp,sp,-44
   4b5e0:	dd000515 	stw	r20,20(sp)
   4b5e4:	05000174 	movhi	r20,5
   4b5e8:	dc800315 	stw	r18,12(sp)
   4b5ec:	dfc00a15 	stw	ra,40(sp)
   4b5f0:	df000915 	stw	fp,36(sp)
   4b5f4:	ddc00815 	stw	r23,32(sp)
   4b5f8:	dd800715 	stw	r22,28(sp)
   4b5fc:	dd400615 	stw	r21,24(sp)
   4b600:	dcc00415 	stw	r19,16(sp)
   4b604:	dc400215 	stw	r17,8(sp)
   4b608:	dc000115 	stw	r16,4(sp)
   4b60c:	d9000015 	stw	r4,0(sp)
   4b610:	2825883a 	mov	r18,r5
   4b614:	a5332d04 	addi	r20,r20,-13132
   4b618:	a4400017 	ldw	r17,0(r20)
   4b61c:	8cc00c17 	ldw	r19,48(r17)
   4b620:	8c400c04 	addi	r17,r17,48
   4b624:	98004526 	beq	r19,zero,4b73c <__call_exitprocs+0x160>
   4b628:	9c000117 	ldw	r16,4(r19)
   4b62c:	00900034 	movhi	r2,16384
   4b630:	10bfffc4 	addi	r2,r2,-1
   4b634:	9d402217 	ldw	r21,136(r19)
   4b638:	85bfffc4 	addi	r22,r16,-1
   4b63c:	80a1883a 	add	r16,r16,r2
   4b640:	8421883a 	add	r16,r16,r16
   4b644:	8421883a 	add	r16,r16,r16
   4b648:	ac2f883a 	add	r23,r21,r16
   4b64c:	84000204 	addi	r16,r16,8
   4b650:	9c21883a 	add	r16,r19,r16
   4b654:	b0002716 	blt	r22,zero,4b6f4 <__call_exitprocs+0x118>
   4b658:	90000726 	beq	r18,zero,4b678 <__call_exitprocs+0x9c>
   4b65c:	a800041e 	bne	r21,zero,4b670 <__call_exitprocs+0x94>
   4b660:	b5bfffc4 	addi	r22,r22,-1
   4b664:	bdffff04 	addi	r23,r23,-4
   4b668:	843fff04 	addi	r16,r16,-4
   4b66c:	003ff906 	br	4b654 <__alt_data_end+0xfffe4554>
   4b670:	b9002017 	ldw	r4,128(r23)
   4b674:	913ffa1e 	bne	r18,r4,4b660 <__alt_data_end+0xfffe4560>
   4b678:	99000117 	ldw	r4,4(r19)
   4b67c:	82000017 	ldw	r8,0(r16)
   4b680:	213fffc4 	addi	r4,r4,-1
   4b684:	b100021e 	bne	r22,r4,4b690 <__call_exitprocs+0xb4>
   4b688:	9d800115 	stw	r22,4(r19)
   4b68c:	00000106 	br	4b694 <__call_exitprocs+0xb8>
   4b690:	80000015 	stw	zero,0(r16)
   4b694:	403ff226 	beq	r8,zero,4b660 <__alt_data_end+0xfffe4560>
   4b698:	9f000117 	ldw	fp,4(r19)
   4b69c:	a8000526 	beq	r21,zero,4b6b4 <__call_exitprocs+0xd8>
   4b6a0:	00800044 	movi	r2,1
   4b6a4:	1592983a 	sll	r9,r2,r22
   4b6a8:	a9404017 	ldw	r5,256(r21)
   4b6ac:	494a703a 	and	r5,r9,r5
   4b6b0:	2800021e 	bne	r5,zero,4b6bc <__call_exitprocs+0xe0>
   4b6b4:	403ee83a 	callr	r8
   4b6b8:	00000906 	br	4b6e0 <__call_exitprocs+0x104>
   4b6bc:	a9004117 	ldw	r4,260(r21)
   4b6c0:	4908703a 	and	r4,r9,r4
   4b6c4:	2000041e 	bne	r4,zero,4b6d8 <__call_exitprocs+0xfc>
   4b6c8:	b9400017 	ldw	r5,0(r23)
   4b6cc:	d9000017 	ldw	r4,0(sp)
   4b6d0:	403ee83a 	callr	r8
   4b6d4:	00000206 	br	4b6e0 <__call_exitprocs+0x104>
   4b6d8:	b9000017 	ldw	r4,0(r23)
   4b6dc:	403ee83a 	callr	r8
   4b6e0:	99000117 	ldw	r4,4(r19)
   4b6e4:	e13fcc1e 	bne	fp,r4,4b618 <__alt_data_end+0xfffe4518>
   4b6e8:	89000017 	ldw	r4,0(r17)
   4b6ec:	993fdc26 	beq	r19,r4,4b660 <__alt_data_end+0xfffe4560>
   4b6f0:	003fc906 	br	4b618 <__alt_data_end+0xfffe4518>
   4b6f4:	00800034 	movhi	r2,0
   4b6f8:	10800004 	addi	r2,r2,0
   4b6fc:	10000f26 	beq	r2,zero,4b73c <__call_exitprocs+0x160>
   4b700:	99400117 	ldw	r5,4(r19)
   4b704:	99000017 	ldw	r4,0(r19)
   4b708:	2800091e 	bne	r5,zero,4b730 <__call_exitprocs+0x154>
   4b70c:	20000826 	beq	r4,zero,4b730 <__call_exitprocs+0x154>
   4b710:	89000015 	stw	r4,0(r17)
   4b714:	a8000226 	beq	r21,zero,4b720 <__call_exitprocs+0x144>
   4b718:	a809883a 	mov	r4,r21
   4b71c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   4b720:	9809883a 	mov	r4,r19
   4b724:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   4b728:	8cc00017 	ldw	r19,0(r17)
   4b72c:	003fbd06 	br	4b624 <__alt_data_end+0xfffe4524>
   4b730:	9823883a 	mov	r17,r19
   4b734:	2027883a 	mov	r19,r4
   4b738:	003fba06 	br	4b624 <__alt_data_end+0xfffe4524>
   4b73c:	dfc00a17 	ldw	ra,40(sp)
   4b740:	df000917 	ldw	fp,36(sp)
   4b744:	ddc00817 	ldw	r23,32(sp)
   4b748:	dd800717 	ldw	r22,28(sp)
   4b74c:	dd400617 	ldw	r21,24(sp)
   4b750:	dd000517 	ldw	r20,20(sp)
   4b754:	dcc00417 	ldw	r19,16(sp)
   4b758:	dc800317 	ldw	r18,12(sp)
   4b75c:	dc400217 	ldw	r17,8(sp)
   4b760:	dc000117 	ldw	r16,4(sp)
   4b764:	dec00b04 	addi	sp,sp,44
   4b768:	f800283a 	ret

0004b76c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4b76c:	defffd04 	addi	sp,sp,-12
   4b770:	df000215 	stw	fp,8(sp)
   4b774:	df000204 	addi	fp,sp,8
   4b778:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4b77c:	0001883a 	nop
   4b780:	e0bfff17 	ldw	r2,-4(fp)
   4b784:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4b788:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4b78c:	10000226 	beq	r2,zero,4b798 <_exit+0x2c>
    ALT_SIM_FAIL();
   4b790:	002af070 	cmpltui	zero,zero,43969
   4b794:	00000106 	br	4b79c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4b798:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4b79c:	003fff06 	br	4b79c <__alt_data_end+0xfffe469c>
