
streaming_reconstruct.elf:     file format elf32-littlenios2
streaming_reconstruct.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00015ea8 memsz 0x00015ea8 flags r-x
    LOAD off    0x00016ec8 vaddr 0x00055ec8 paddr 0x00057a04 align 2**12
         filesz 0x00001b3c memsz 0x00001b3c flags rw-
    LOAD off    0x00019540 vaddr 0x00059540 paddr 0x00059540 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015894  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003f0  00055ad8  00055ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  00055ec8  00057a04  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00059540  00059540  00019540  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  000596a4  000596a4  00018a04  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00018a04  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001218  00000000  00000000  00018a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029785  00000000  00000000  00019c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b000  00000000  00000000  000433c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000de01  00000000  00000000  0004e3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002f34  00000000  00000000  0005c1c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004d75  00000000  00000000  0005f0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001be79  00000000  00000000  00063e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007fcec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fa0  00000000  00000000  0007fd50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00085d4a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00085d4d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00085d57  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00085d58  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00085d59  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00085d5d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00085d61  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00085d65  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00085d6e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00085d77  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000e  00000000  00000000  00085d80  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000022  00000000  00000000  00085d8e  2**0
                  CONTENTS, READONLY
 29 .jdi          00005b59  00000000  00000000  00085db0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000690e3  00000000  00000000  0008b909  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00055ad8 l    d  .rodata	00000000 .rodata
00055ec8 l    d  .rwdata	00000000 .rwdata
00059540 l    d  .bss	00000000 .bss
000596a4 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../streaming_reconstruct_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_fmod.c
00055b90 l     O .rodata	00000010 Zero
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00055ec8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00055cea l     O .rodata	00000010 zeroes.4404
000493b4 l     F .text	000000bc __sbprintf
00055cfa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000495c4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004b0f4 l     F .text	00000008 __fp_unlock
0004b108 l     F .text	0000019c __sinit.part.1
0004b2a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0005630c l     O .rwdata	00000020 lc_ctype_charset
000562ec l     O .rwdata	00000020 lc_message_charset
0005632c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00055d28 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004e62c l     F .text	000000fc __sprint_r.part.0
00055e5c l     O .rodata	00000010 blanks.4348
00055e4c l     O .rodata	00000010 zeroes.4349
0004fbb8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000511f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00051300 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0005132c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00051418 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000514f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000515e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000517b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000579ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00051a04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00051b38 l     F .text	00000034 alt_dev_reg
00056914 l     O .rwdata	00000038 i2c_dac
0005694c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00051c14 l     F .text	00000110 optional_irq_callback
00051d74 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00053a38 l     F .text	0000020c altera_avalon_jtag_uart_irq
00053c44 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0005427c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0005463c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00054b40 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00054c80 l     F .text	0000003c alt_get_errno
00054cbc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00059578 g     O .bss	00000004 alt_instruction_exception_handler
0004dce4 g     F .text	00000074 _mprec_log10
0004ddd0 g     F .text	0000008c __any_on
00050154 g     F .text	00000054 _isatty_r
00055d34 g     O .rodata	00000028 __mprec_tinytens
000516f4 g     F .text	0000007c alt_main
0004194c g     F .text	0000009c convert_adc_to_signal
00047034 g     F .text	000000c0 _puts_r
00041aac g     F .text	00000080 send_to_PCF
000595a4 g     O .bss	00000100 alt_irq
000501a8 g     F .text	00000060 _lseek_r
000424a0 g     F .text	0000019c log
00057a04 g       *ABS*	00000000 __flash_rwdata_start
000459c8 g     F .text	00000088 .hidden __eqdf2
000596a4 g       *ABS*	00000000 __alt_heap_start
00046ff8 g     F .text	0000003c printf
000503c0 g     F .text	0000009c _wcrtomb_r
0004e4ec g     F .text	0000005c __sseek
0004b444 g     F .text	00000010 __sinit
00050268 g     F .text	00000140 __swbuf_r
0004bf0c g     F .text	0000007c _setlocale_r
0004b2ac g     F .text	00000068 __sfmoreglue
0005246c g     F .text	000000a8 alt_avalon_i2c_rx_read
00051794 g     F .text	00000024 __malloc_unlock
000421c4 g     F .text	00000100 round
000437fc g     F .text	00000440 .hidden __divsf3
0005366c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
000521f0 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00041330 g     F .text	00000234 calc_order
00041564 g     F .text	000000f4 modulo
0004cbdc g     F .text	0000015c memmove
0004b42c g     F .text	00000018 _cleanup
00052ec8 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
0004ce60 g     F .text	000000a8 _Balloc
000446a0 g     F .text	00000070 .hidden __fixsfsi
00045a50 g     F .text	000000dc .hidden __gtdf2
000552e0 g     F .text	00000024 altera_nios2_gen2_irq_init
00046fb8 g     F .text	00000010 __errno
00040000 g     F .entry	0000001c __reset
00040e24 g     F .text	00000328 anti_diff_2nd
00041fe4 g     F .text	000001e0 ceil
00040020 g       *ABS*	00000000 __flash_exceptions_start
000500f8 g     F .text	0000005c _fstat_r
0004263c g     F .text	00000340 __ieee754_fmod
0005955c g     O .bss	00000004 errno
0004e468 g     F .text	00000008 __seofread
00059564 g     O .bss	00000004 alt_argv
0005f9ac g       *ABS*	00000000 _gp
000536b0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
000441bc g     F .text	000004e4 .hidden __subsf3
000579b0 g     O .rwdata	00000004 fs
00052380 g     F .text	00000044 alt_avalon_i2c_is_busy
00056794 g     O .rwdata	00000180 alt_fd_list
00052124 g     F .text	000000cc alt_avalon_i2c_master_config_set
000547dc g     F .text	00000090 alt_find_dev
0004ca94 g     F .text	00000148 memcpy
0004b0fc g     F .text	0000000c _cleanup_r
00046bc0 g     F .text	000000dc .hidden __floatsidf
00054c04 g     F .text	0000007c alt_io_redirect
00051058 g     F .text	000000f4 .hidden __ltdf2
00055ad8 g       *ABS*	00000000 __DTOR_END__
00041b2c g     F .text	000001a0 process_lowpass
00052d0c g     F .text	000001bc alt_avalon_i2c_master_transmit
000470f4 g     F .text	00000014 puts
00055540 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00040304 g     F .text	00000130 updateMovingAverage
00043098 g     F .text	00000074 __fpclassifyd
0004dc40 g     F .text	000000a4 __ratio
0004fb9c g     F .text	0000001c __vfiprintf_internal
00053e3c g     F .text	0000021c altera_avalon_jtag_uart_read
00046fc8 g     F .text	00000030 _printf_r
00043278 g     F .text	00000064 .hidden __udivsi3
000422c4 g     F .text	00000084 roundf
00051454 g     F .text	000000a4 isatty
00055d84 g     O .rodata	000000c8 __mprec_tens
0004bf88 g     F .text	0000000c __locale_charset
00043cf8 g     F .text	000000c8 .hidden __lesf2
000554b0 g     F .text	00000090 alt_icache_flush
00051f90 g     F .text	00000098 alt_avalon_i2c_enable
00059558 g     O .bss	00000004 __malloc_top_pad
000535a0 g     F .text	00000068 alt_avalon_i2c_int_disable
000579c4 g     O .rwdata	00000004 __mb_cur_max
0004bfb8 g     F .text	0000000c _localeconv_r
0004d26c g     F .text	0000003c __i2b
0004b8c8 g     F .text	000004bc __sfvwrite_r
0004e3c0 g     F .text	00000054 _sbrk_r
00050208 g     F .text	00000060 _read_r
000579e4 g     O .rwdata	00000004 alt_max_fd
0004fdec g     F .text	000000f0 _fclose_r
0004114c g     F .text	000001e4 anti_diff_1st
0004b0c4 g     F .text	00000030 fflush
00059554 g     O .bss	00000004 __malloc_max_sbrked_mem
000530d0 g     F .text	0000020c alt_avalon_i2c_master_receive
00046c9c g     F .text	00000110 .hidden __extendsfdf2
00044834 g     F .text	000008ac .hidden __adddf3
0004d9e8 g     F .text	0000010c __b2d
00050b20 g     F .text	00000538 .hidden __umoddi3
00051620 g     F .text	000000d4 lseek
000579b8 g     O .rwdata	00000004 __fdlib_version
00053608 g     F .text	00000064 alt_avalon_i2c_int_enable
000579bc g     O .rwdata	00000004 _global_impure_ptr
0004de5c g     F .text	00000564 _realloc_r
000596a4 g       *ABS*	00000000 __bss_end
00054a50 g     F .text	000000f0 alt_iic_isr_register
000551d8 g     F .text	00000108 alt_tick
000505a8 g     F .text	00000578 .hidden __udivdi3
000534c8 g     F .text	00000058 alt_avalon_i2c_int_status_get
00050054 g     F .text	00000024 _fputwc_r
00055d5c g     O .rodata	00000028 __mprec_bigtens
0004d050 g     F .text	00000104 __s2b
0005114c g     F .text	000000a8 .hidden __floatunsidf
0004d728 g     F .text	00000060 __mcmp
0004b464 g     F .text	00000018 __fp_lock_all
00054a04 g     F .text	0000004c alt_ic_irq_enabled
0005513c g     F .text	0000009c alt_alarm_stop
00051e10 g     F .text	00000054 alt_avalon_i2c_register_callback
0005956c g     O .bss	00000004 alt_irq_active
00051e64 g     F .text	000000ec alt_avalon_i2c_init
000400fc g     F .exceptions	000000d4 alt_irq_handler
0005676c g     O .rwdata	00000028 alt_dev_null
00041ccc g     F .text	000000b0 top
000545f4 g     F .text	00000048 alt_dcache_flush_all
0004d154 g     F .text	00000068 __hi0bits
00046b40 g     F .text	00000080 .hidden __fixdfsi
00059540 g     O .bss	00000004 y_prev
00057a04 g       *ABS*	00000000 __ram_rwdata_end
000579dc g     O .rwdata	00000008 alt_dev_list
00051a40 g     F .text	000000f8 write
000556a4 g     F .text	000000a0 _putc_r
000527a0 g     F .text	0000004c alt_avalon_i2c_check_arblost
00043c3c g     F .text	000000bc .hidden __gtsf2
00053564 g     F .text	0000003c alt_avalon_i2c_int_clear
00055ec8 g       *ABS*	00000000 __ram_rodata_end
00051368 g     F .text	000000b0 fstat
00051058 g     F .text	000000f4 .hidden __ledf2
000579f0 g     O .rwdata	00000008 alt_avalon_i2c_list
0004d4a0 g     F .text	00000140 __pow5mult
0004e740 g     F .text	0000145c ___vfiprintf_internal_r
0005954c g     O .bss	00000004 __nlocale_changed
000432dc g     F .text	00000058 .hidden __umodsi3
000596a4 g       *ABS*	00000000 end
000409b8 g     F .text	0000046c anti_diff_3rd
00053978 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00051f50 g     F .text	00000040 alt_avalon_i2c_open
00055ad8 g       *ABS*	00000000 __CTOR_LIST__
00067100 g       *ABS*	00000000 __alt_stack_pointer
00052920 g     F .text	000000e8 alt_avalon_i2c_master_tx
000542f4 g     F .text	0000007c alt_avalon_timer_sc_init
00046f54 g     F .text	00000064 .hidden __clzsi2
00042348 g     F .text	00000158 fmod
00054058 g     F .text	00000224 altera_avalon_jtag_uart_write
0004b454 g     F .text	00000004 __sfp_lock_acquire
0004c9b0 g     F .text	000000e4 memchr
000471a0 g     F .text	000021f8 ___vfprintf_internal_r
0004b5b8 g     F .text	00000310 _free_r
00054ed4 g     F .text	0000022c alt_printf
0004bf94 g     F .text	00000010 __locale_mb_cur_max
00055924 g     F .text	00000180 __call_exitprocs
00059548 g     O .bss	00000004 __mlocale_changed
00051d24 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
000579c8 g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
00059570 g     O .bss	00000004 _alt_tick_rate
00040788 g     F .text	00000230 anti_diff_nth
000532dc g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
000536fc g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0004d5e0 g     F .text	00000148 __lshift
00059574 g     O .bss	00000004 _alt_nticks
000517f4 g     F .text	000000fc read
00051ba4 g     F .text	00000070 alt_sys_init
00044710 g     F .text	00000124 .hidden __floatsisf
0005580c g     F .text	00000118 __register_exitproc
00052b44 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0004d2a8 g     F .text	000001f8 __multiply
00053ce4 g     F .text	00000068 altera_avalon_jtag_uart_close
00055ec8 g       *ABS*	00000000 __ram_rwdata_start
00055ad8 g       *ABS*	00000000 __ram_rodata_start
0005957c g     O .bss	00000028 __malloc_current_mallinfo
0004daf4 g     F .text	0000014c __d2b
00041d7c g     F .text	00000064 stream_adc_out
00053814 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0005540c g     F .text	000000a4 alt_get_fd
0005449c g     F .text	00000158 alt_busy_sleep
0004fcd4 g     F .text	00000054 _close_r
00055628 g     F .text	0000007c memcmp
000523c4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
000538d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000596a4 g       *ABS*	00000000 __alt_stack_base
00053924 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00049470 g     F .text	00000154 __swsetup_r
000450e0 g     F .text	000008e8 .hidden __divdf3
0004b314 g     F .text	00000118 __sfp
0004dd58 g     F .text	00000078 __copybits
00056364 g     O .rwdata	00000408 __malloc_av_
0004b460 g     F .text	00000004 __sinit_lock_release
00045b2c g     F .text	00000718 .hidden __muldf3
0004e414 g     F .text	00000054 __sread
00055304 g     F .text	00000108 alt_find_file
00054678 g     F .text	000000a4 alt_dev_llist_insert
00051770 g     F .text	00000024 __malloc_lock
00051954 g     F .text	000000b0 sbrk
000527ec g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
00052754 g     F .text	0000004c alt_avalon_i2c_check_nack
0004b068 g     F .text	0000005c _fflush_r
0004fd28 g     F .text	000000c4 _calloc_r
00059540 g       *ABS*	00000000 __bss_start
0004cd38 g     F .text	00000128 memset
00041de0 g     F .text	00000204 main
00052720 g     F .text	00000034 alt_avalon_i2c_master_target_set
00059568 g     O .bss	00000004 alt_envp
00059550 g     O .bss	00000004 __malloc_max_total_mem
00053874 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000503a8 g     F .text	00000018 __swbuf
00053520 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00043cf8 g     F .text	000000c8 .hidden __ltsf2
000579ac g     O .rwdata	00000004 fc
0004e548 g     F .text	00000008 __sclose
0004310c g     F .text	00000008 matherr
00067100 g       *ABS*	00000000 __alt_heap_limit
0004fedc g     F .text	00000014 fclose
00046dac g     F .text	000001a8 .hidden __truncdfsf2
000497c4 g     F .text	00001688 _dtoa_r
0004c1a4 g     F .text	0000080c _malloc_r
00040290 g     F .text	00000074 initMovingAverage
0005051c g     F .text	00000030 __ascii_wctomb
000579e8 g     O .rwdata	00000004 alt_errno
0004bd84 g     F .text	000000c4 _fwalk
00055744 g     F .text	000000c8 putc
00043180 g     F .text	00000084 .hidden __divsi3
00040434 g     F .text	00000228 initReconstructor
0004b494 g     F .text	00000124 _malloc_trim_r
00055ad8 g       *ABS*	00000000 __CTOR_END__
00043dc0 g     F .text	000003fc .hidden __mulsf3
0004e550 g     F .text	000000dc strcmp
00055ad8 g       *ABS*	00000000 __flash_rodata_start
00055ad8 g       *ABS*	00000000 __DTOR_LIST__
000419e8 g     F .text	000000c4 float_to_dac
000459c8 g     F .text	00000088 .hidden __nedf2
00051b6c g     F .text	00000038 alt_irq_init
000518f0 g     F .text	00000064 alt_release_fd
00055ba0 g     O .rodata	00000100 .hidden __clz_tab
00059544 g     O .bss	00000004 _PathLocale
000555dc g     F .text	00000014 atexit
00043c3c g     F .text	000000bc .hidden __gesf2
0004fc74 g     F .text	00000060 _write_r
00041658 g     F .text	0000009c center_to_2lam
0004bfc4 g     F .text	00000018 setlocale
000579c0 g     O .rwdata	00000004 _impure_ptr
00059560 g     O .bss	00000004 alt_argc
0004ae4c g     F .text	0000021c __sflush_r
0005477c g     F .text	00000060 _do_dtors
0004bfb0 g     F .text	00000008 __locale_cjk_lang
0004297c g     F .text	0000071c __ieee754_log
000526e8 g     F .text	00000038 alt_avalon_i2c_master_target_get
000525f8 g     F .text	000000f0 alt_avalon_i2c_send_address
00040020 g       .exceptions	00000000 alt_irq_entry
0004d984 g     F .text	00000064 __ulp
0004b47c g     F .text	00000018 __fp_unlock_all
000579d4 g     O .rwdata	00000008 alt_fs_list
00043114 g     F .text	0000000c nan
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004bfdc g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000537ac g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
000548a0 g     F .text	00000050 alt_ic_isr_register
00052028 g     F .text	0000004c alt_avalon_i2c_disable
00057a04 g       *ABS*	00000000 _edata
000596a4 g       *ABS*	00000000 _end
0004fef0 g     F .text	00000164 __fputwc
00040244 g       *ABS*	00000000 __ram_exceptions_end
00053d4c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00052074 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00054978 g     F .text	0000008c alt_ic_irq_disable
0004e470 g     F .text	0000007c __swrite
000579cc g     O .rwdata	00000004 __malloc_trim_threshold
0004bfa4 g     F .text	0000000c __locale_msgcharset
000555f0 g     F .text	00000038 exit
000579b4 g     O .rwdata	00000004 a
0004be48 g     F .text	000000c4 _fwalk_reent
0004d788 g     F .text	000001fc __mdiff
00043204 g     F .text	00000074 .hidden __modsi3
00067100 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004b458 g     F .text	00000004 __sfp_lock_release
00052284 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000416f4 g     F .text	00000258 update
00052514 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00043120 g     F .text	00000060 .hidden __fixunssfsi
00055aa4 g     F .text	00000034 _exit
00054370 g     F .text	0000012c alt_alarm_start
0004bfe8 g     F .text	000001bc __smakebuf_r
00047108 g     F .text	00000098 strlen
00054d80 g     F .text	00000154 open
00045a50 g     F .text	000000dc .hidden __gedf2
00055100 g     F .text	0000003c alt_putchar
000579d0 g     O .rwdata	00000004 __wctomb
0004e728 g     F .text	00000018 __sprint_r
0005486c g     F .text	00000034 alt_icache_flush_all
0004065c g     F .text	0000012c nth_order_difference
000579f8 g     O .rwdata	00000004 alt_priority_mask
000548f0 g     F .text	00000088 alt_ic_irq_enable
00049398 g     F .text	0000001c __vfprintf_internal
0005054c g     F .text	0000005c _wctomb_r
00046244 g     F .text	000008fc .hidden __subdf3
0004d1bc g     F .text	000000b0 __lo0bits
000579fc g     O .rwdata	00000008 alt_alarm_list
0005471c g     F .text	00000060 _do_ctors
0005045c g     F .text	000000c0 wcrtomb
00051230 g     F .text	000000d0 close
00043334 g     F .text	000004c8 .hidden __addsf3
00053760 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00051560 g     F .text	00000084 alt_load
00052a08 g     F .text	0000013c alt_avalon_i2c_master_rx
00050078 g     F .text	00000080 fputwc
0004b45c g     F .text	00000004 __sinit_lock_acquire
0004cf30 g     F .text	00000120 __multadd
0004cf08 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8f04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	008001b4 	movhi	r2,6
   40140:	10a56904 	addi	r2,r2,-27228
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	008001b4 	movhi	r2,6
   40158:	10a56904 	addi	r2,r2,-27228
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd902c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd9020>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a6f317 	ldw	r2,-25652(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a6f317 	ldw	r2,-25652(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffd9148>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   4025c:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40260:	d6be6b14 	ori	gp,gp,63916
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40268:	10a55014 	ori	r2,r2,38208

    movhi r3, %hi(__bss_end)
   4026c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40270:	18e5a914 	ori	r3,r3,38564

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffd9178>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	00515600 	call	51560 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	00516f40 	call	516f4 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffd918c>

00040290 <initMovingAverage>:
    int index;
    int count;
    float sum;
} MovingAverage;

void initMovingAverage(MovingAverage *ma) {
   40290:	defffd04 	addi	sp,sp,-12
   40294:	df000215 	stw	fp,8(sp)
   40298:	df000204 	addi	fp,sp,8
   4029c:	e13fff15 	stw	r4,-4(fp)
    ma->index = 0;
   402a0:	e0bfff17 	ldw	r2,-4(fp)
   402a4:	10006415 	stw	zero,400(r2)
    ma->count = 0;
   402a8:	e0bfff17 	ldw	r2,-4(fp)
   402ac:	10006515 	stw	zero,404(r2)
    ma->sum = 0.0;
   402b0:	e0bfff17 	ldw	r2,-4(fp)
   402b4:	10006615 	stw	zero,408(r2)

    for (int i = 0; i < MA_WINDOW_SIZE; i++) {
   402b8:	e03ffe15 	stw	zero,-8(fp)
   402bc:	00000906 	br	402e4 <initMovingAverage+0x54>
        ma->buffer[i] = 0.0;
   402c0:	e0ffff17 	ldw	r3,-4(fp)
   402c4:	e0bffe17 	ldw	r2,-8(fp)
   402c8:	1085883a 	add	r2,r2,r2
   402cc:	1085883a 	add	r2,r2,r2
   402d0:	1885883a 	add	r2,r3,r2
   402d4:	10000015 	stw	zero,0(r2)
void initMovingAverage(MovingAverage *ma) {
    ma->index = 0;
    ma->count = 0;
    ma->sum = 0.0;

    for (int i = 0; i < MA_WINDOW_SIZE; i++) {
   402d8:	e0bffe17 	ldw	r2,-8(fp)
   402dc:	10800044 	addi	r2,r2,1
   402e0:	e0bffe15 	stw	r2,-8(fp)
   402e4:	e0bffe17 	ldw	r2,-8(fp)
   402e8:	10801910 	cmplti	r2,r2,100
   402ec:	103ff41e 	bne	r2,zero,402c0 <__alt_data_end+0xfffd91c0>
        ma->buffer[i] = 0.0;
    }
}
   402f0:	0001883a 	nop
   402f4:	e037883a 	mov	sp,fp
   402f8:	df000017 	ldw	fp,0(sp)
   402fc:	dec00104 	addi	sp,sp,4
   40300:	f800283a 	ret

00040304 <updateMovingAverage>:

//}
float updateMovingAverage(MovingAverage *ma, float new_sample) {
   40304:	defffb04 	addi	sp,sp,-20
   40308:	dfc00415 	stw	ra,16(sp)
   4030c:	df000315 	stw	fp,12(sp)
   40310:	dc000215 	stw	r16,8(sp)
   40314:	df000304 	addi	fp,sp,12
   40318:	e13ffd15 	stw	r4,-12(fp)
   4031c:	e17ffe15 	stw	r5,-8(fp)
    // Remove the oldest sample from the sum
    ma->sum -= ma->buffer[ma->index];
   40320:	e0bffd17 	ldw	r2,-12(fp)
   40324:	11006617 	ldw	r4,408(r2)
   40328:	e0bffd17 	ldw	r2,-12(fp)
   4032c:	10806417 	ldw	r2,400(r2)
   40330:	e0fffd17 	ldw	r3,-12(fp)
   40334:	1085883a 	add	r2,r2,r2
   40338:	1085883a 	add	r2,r2,r2
   4033c:	1885883a 	add	r2,r3,r2
   40340:	10c00017 	ldw	r3,0(r2)
   40344:	180b883a 	mov	r5,r3
   40348:	00441bc0 	call	441bc <__subsf3>
   4034c:	1009883a 	mov	r4,r2
   40350:	2007883a 	mov	r3,r4
   40354:	e0bffd17 	ldw	r2,-12(fp)
   40358:	10c06615 	stw	r3,408(r2)

    // Add the new sample to the buffer and sum
    ma->buffer[ma->index] = new_sample;
   4035c:	e0bffd17 	ldw	r2,-12(fp)
   40360:	10806417 	ldw	r2,400(r2)
   40364:	e0fffd17 	ldw	r3,-12(fp)
   40368:	1085883a 	add	r2,r2,r2
   4036c:	1085883a 	add	r2,r2,r2
   40370:	1885883a 	add	r2,r3,r2
   40374:	e0fffe17 	ldw	r3,-8(fp)
   40378:	10c00015 	stw	r3,0(r2)
    ma->sum += new_sample;
   4037c:	e0bffd17 	ldw	r2,-12(fp)
   40380:	10c06617 	ldw	r3,408(r2)
   40384:	e17ffe17 	ldw	r5,-8(fp)
   40388:	1809883a 	mov	r4,r3
   4038c:	00433340 	call	43334 <__addsf3>
   40390:	1009883a 	mov	r4,r2
   40394:	2007883a 	mov	r3,r4
   40398:	e0bffd17 	ldw	r2,-12(fp)
   4039c:	10c06615 	stw	r3,408(r2)

    // Update the index (circular buffer)
    ma->index = (ma->index + 1) % MA_WINDOW_SIZE;
   403a0:	e0bffd17 	ldw	r2,-12(fp)
   403a4:	10806417 	ldw	r2,400(r2)
   403a8:	10800044 	addi	r2,r2,1
   403ac:	01401904 	movi	r5,100
   403b0:	1009883a 	mov	r4,r2
   403b4:	00432040 	call	43204 <__modsi3>
   403b8:	1007883a 	mov	r3,r2
   403bc:	e0bffd17 	ldw	r2,-12(fp)
   403c0:	10c06415 	stw	r3,400(r2)

    // Update the count (if less than window size)
    if (ma->count < MA_WINDOW_SIZE) {
   403c4:	e0bffd17 	ldw	r2,-12(fp)
   403c8:	10806517 	ldw	r2,404(r2)
   403cc:	10801908 	cmpgei	r2,r2,100
   403d0:	1000051e 	bne	r2,zero,403e8 <updateMovingAverage+0xe4>
        ma->count++;
   403d4:	e0bffd17 	ldw	r2,-12(fp)
   403d8:	10806517 	ldw	r2,404(r2)
   403dc:	10c00044 	addi	r3,r2,1
   403e0:	e0bffd17 	ldw	r2,-12(fp)
   403e4:	10c06515 	stw	r3,404(r2)
    }

    // Compute the moving average
    return ma->sum / ma->count;
   403e8:	e0bffd17 	ldw	r2,-12(fp)
   403ec:	14006617 	ldw	r16,408(r2)
   403f0:	e0bffd17 	ldw	r2,-12(fp)
   403f4:	10806517 	ldw	r2,404(r2)
   403f8:	1009883a 	mov	r4,r2
   403fc:	00447100 	call	44710 <__floatsisf>
   40400:	1007883a 	mov	r3,r2
   40404:	180b883a 	mov	r5,r3
   40408:	8009883a 	mov	r4,r16
   4040c:	00437fc0 	call	437fc <__divsf3>
   40410:	1009883a 	mov	r4,r2
   40414:	2007883a 	mov	r3,r4
   40418:	1805883a 	mov	r2,r3
}
   4041c:	e6ffff04 	addi	sp,fp,-4
   40420:	dfc00217 	ldw	ra,8(sp)
   40424:	df000117 	ldw	fp,4(sp)
   40428:	dc000017 	ldw	r16,0(sp)
   4042c:	dec00304 	addi	sp,sp,12
   40430:	f800283a 	ret

00040434 <initReconstructor>:


} UnlimitedSamplerReconstructor;

/* Initialize the reconstructor */
void initReconstructor(UnlimitedSamplerReconstructor *recon, float lam) {
   40434:	defff904 	addi	sp,sp,-28
   40438:	df000615 	stw	fp,24(sp)
   4043c:	df000604 	addi	fp,sp,24
   40440:	e13ffe15 	stw	r4,-8(fp)
   40444:	e17fff15 	stw	r5,-4(fp)
    recon->lam = lam;
   40448:	e0bffe17 	ldw	r2,-8(fp)
   4044c:	e0ffff17 	ldw	r3,-4(fp)
   40450:	10c00015 	stw	r3,0(r2)
    recon->prev_y = 0.0;
   40454:	e0bffe17 	ldw	r2,-8(fp)
   40458:	10000115 	stw	zero,4(r2)
    recon->prev_eps = 0.0;
   4045c:	e0bffe17 	ldw	r2,-8(fp)
   40460:	10000215 	stw	zero,8(r2)
    recon->initialized = 0;
   40464:	e0bffe17 	ldw	r2,-8(fp)
   40468:	10000315 	stw	zero,12(r2)
    recon->max_in=0.001;
   4046c:	e0fffe17 	ldw	r3,-8(fp)
   40470:	008ea0f4 	movhi	r2,14979
   40474:	10849bc4 	addi	r2,r2,4719
   40478:	18800415 	stw	r2,16(r3)
    recon->sampling_interval=0.000001;
   4047c:	e0fffe17 	ldw	r3,-8(fp)
   40480:	008d61b4 	movhi	r2,13702
   40484:	108def44 	addi	r2,r2,14269
   40488:	1880d215 	stw	r2,840(r3)
    recon->diff_reset=0;
   4048c:	e0bffe17 	ldw	r2,-8(fp)
   40490:	10000615 	stw	zero,24(r2)
    recon-> anti_diff_reset=0;
   40494:	e0bffe17 	ldw	r2,-8(fp)
   40498:	10000715 	stw	zero,28(r2)
//    recon->max_order=10;
    recon->order=1;
   4049c:	e0bffe17 	ldw	r2,-8(fp)
   404a0:	00c00044 	movi	r3,1
   404a4:	10c00515 	stw	r3,20(r2)
//    recon->J=MAX_J;

    for (int i = 0; i < MAX_ORDER+1; i++) {
   404a8:	e03ffa15 	stw	zero,-24(fp)
   404ac:	00001106 	br	404f4 <initReconstructor+0xc0>
        recon->diff_buffer[i] = 0.0;
   404b0:	e0fffe17 	ldw	r3,-8(fp)
   404b4:	e0bffa17 	ldw	r2,-24(fp)
   404b8:	10800204 	addi	r2,r2,8
   404bc:	1085883a 	add	r2,r2,r2
   404c0:	1085883a 	add	r2,r2,r2
   404c4:	1885883a 	add	r2,r3,r2
   404c8:	10000015 	stw	zero,0(r2)
        recon->anti_diff_buffer[i] = 0.0;
   404cc:	e0fffe17 	ldw	r3,-8(fp)
   404d0:	e0bffa17 	ldw	r2,-24(fp)
   404d4:	10801b44 	addi	r2,r2,109
   404d8:	1085883a 	add	r2,r2,r2
   404dc:	1085883a 	add	r2,r2,r2
   404e0:	1885883a 	add	r2,r3,r2
   404e4:	10000015 	stw	zero,0(r2)
    recon-> anti_diff_reset=0;
//    recon->max_order=10;
    recon->order=1;
//    recon->J=MAX_J;

    for (int i = 0; i < MAX_ORDER+1; i++) {
   404e8:	e0bffa17 	ldw	r2,-24(fp)
   404ec:	10800044 	addi	r2,r2,1
   404f0:	e0bffa15 	stw	r2,-24(fp)
   404f4:	e0bffa17 	ldw	r2,-24(fp)
   404f8:	10801950 	cmplti	r2,r2,101
   404fc:	103fec1e 	bne	r2,zero,404b0 <__alt_data_end+0xfffd93b0>
        recon->diff_buffer[i] = 0.0;
        recon->anti_diff_buffer[i] = 0.0;
    }
    for (int i = 0; i < MAX_ORDER; ++i) {
   40500:	e03ffb15 	stw	zero,-20(fp)
   40504:	00003e06 	br	40600 <initReconstructor+0x1cc>
        recon->s1[i] = 0.0f;
   40508:	e0fffe17 	ldw	r3,-8(fp)
   4050c:	e0bffb17 	ldw	r2,-20(fp)
   40510:	10803504 	addi	r2,r2,212
   40514:	1085883a 	add	r2,r2,r2
   40518:	1085883a 	add	r2,r2,r2
   4051c:	1885883a 	add	r2,r3,r2
   40520:	10000015 	stw	zero,0(r2)
        recon->s2[i] = 0.0f;
   40524:	e0fffe17 	ldw	r3,-8(fp)
   40528:	e0bffb17 	ldw	r2,-20(fp)
   4052c:	10804e04 	addi	r2,r2,312
   40530:	1085883a 	add	r2,r2,r2
   40534:	1085883a 	add	r2,r2,r2
   40538:	1885883a 	add	r2,r3,r2
   4053c:	10000015 	stw	zero,0(r2)
        recon->res_index[i] = 0;
   40540:	e0fffe17 	ldw	r3,-8(fp)
   40544:	e0bffb17 	ldw	r2,-20(fp)
   40548:	1081de04 	addi	r2,r2,1912
   4054c:	1085883a 	add	r2,r2,r2
   40550:	1085883a 	add	r2,r2,r2
   40554:	1885883a 	add	r2,r3,r2
   40558:	10000015 	stw	zero,0(r2)
        for (int j = 0; j < MAX_J; ++j){
   4055c:	e03ffc15 	stw	zero,-16(fp)
   40560:	00002106 	br	405e8 <initReconstructor+0x1b4>
        	recon->s1_hist[i][j] = 0.0f;
   40564:	e0fffe17 	ldw	r3,-8(fp)
   40568:	e0bffb17 	ldw	r2,-20(fp)
   4056c:	11000164 	muli	r4,r2,5
   40570:	e0bffc17 	ldw	r2,-16(fp)
   40574:	2085883a 	add	r2,r4,r2
   40578:	10806704 	addi	r2,r2,412
   4057c:	1085883a 	add	r2,r2,r2
   40580:	1085883a 	add	r2,r2,r2
   40584:	1885883a 	add	r2,r3,r2
   40588:	10000015 	stw	zero,0(r2)
            recon->s2_hist[i][j] = 0.0f;
   4058c:	e0fffe17 	ldw	r3,-8(fp)
   40590:	e0bffb17 	ldw	r2,-20(fp)
   40594:	11000164 	muli	r4,r2,5
   40598:	e0bffc17 	ldw	r2,-16(fp)
   4059c:	2085883a 	add	r2,r4,r2
   405a0:	1080e404 	addi	r2,r2,912
   405a4:	1085883a 	add	r2,r2,r2
   405a8:	1085883a 	add	r2,r2,r2
   405ac:	1885883a 	add	r2,r3,r2
   405b0:	10000015 	stw	zero,0(r2)
        	recon->in_hist[i][j] = 0.0f;
   405b4:	e0fffe17 	ldw	r3,-8(fp)
   405b8:	e0bffb17 	ldw	r2,-20(fp)
   405bc:	11000164 	muli	r4,r2,5
   405c0:	e0bffc17 	ldw	r2,-16(fp)
   405c4:	2085883a 	add	r2,r4,r2
   405c8:	10816104 	addi	r2,r2,1412
   405cc:	1085883a 	add	r2,r2,r2
   405d0:	1085883a 	add	r2,r2,r2
   405d4:	1885883a 	add	r2,r3,r2
   405d8:	10000015 	stw	zero,0(r2)
    }
    for (int i = 0; i < MAX_ORDER; ++i) {
        recon->s1[i] = 0.0f;
        recon->s2[i] = 0.0f;
        recon->res_index[i] = 0;
        for (int j = 0; j < MAX_J; ++j){
   405dc:	e0bffc17 	ldw	r2,-16(fp)
   405e0:	10800044 	addi	r2,r2,1
   405e4:	e0bffc15 	stw	r2,-16(fp)
   405e8:	e0bffc17 	ldw	r2,-16(fp)
   405ec:	10800150 	cmplti	r2,r2,5
   405f0:	103fdc1e 	bne	r2,zero,40564 <__alt_data_end+0xfffd9464>

    for (int i = 0; i < MAX_ORDER+1; i++) {
        recon->diff_buffer[i] = 0.0;
        recon->anti_diff_buffer[i] = 0.0;
    }
    for (int i = 0; i < MAX_ORDER; ++i) {
   405f4:	e0bffb17 	ldw	r2,-20(fp)
   405f8:	10800044 	addi	r2,r2,1
   405fc:	e0bffb15 	stw	r2,-20(fp)
   40600:	e0bffb17 	ldw	r2,-20(fp)
   40604:	10801910 	cmplti	r2,r2,100
   40608:	103fbf1e 	bne	r2,zero,40508 <__alt_data_end+0xfffd9408>
        	recon->s1_hist[i][j] = 0.0f;
            recon->s2_hist[i][j] = 0.0f;
        	recon->in_hist[i][j] = 0.0f;
    }
    }
    for (int i = 0; i <= MAX_ORDER; ++i)
   4060c:	e03ffd15 	stw	zero,-12(fp)
   40610:	00000a06 	br	4063c <initReconstructor+0x208>
        recon->anti_diff_buffer[i] = 0.0f;
   40614:	e0fffe17 	ldw	r3,-8(fp)
   40618:	e0bffd17 	ldw	r2,-12(fp)
   4061c:	10801b44 	addi	r2,r2,109
   40620:	1085883a 	add	r2,r2,r2
   40624:	1085883a 	add	r2,r2,r2
   40628:	1885883a 	add	r2,r3,r2
   4062c:	10000015 	stw	zero,0(r2)
        	recon->s1_hist[i][j] = 0.0f;
            recon->s2_hist[i][j] = 0.0f;
        	recon->in_hist[i][j] = 0.0f;
    }
    }
    for (int i = 0; i <= MAX_ORDER; ++i)
   40630:	e0bffd17 	ldw	r2,-12(fp)
   40634:	10800044 	addi	r2,r2,1
   40638:	e0bffd15 	stw	r2,-12(fp)
   4063c:	e0bffd17 	ldw	r2,-12(fp)
   40640:	10801950 	cmplti	r2,r2,101
   40644:	103ff31e 	bne	r2,zero,40614 <__alt_data_end+0xfffd9514>
        recon->anti_diff_buffer[i] = 0.0f;


}
   40648:	0001883a 	nop
   4064c:	e037883a 	mov	sp,fp
   40650:	df000017 	ldw	fp,0(sp)
   40654:	dec00104 	addi	sp,sp,4
   40658:	f800283a 	ret

0004065c <nth_order_difference>:
float nth_order_difference(float new_sample,UnlimitedSamplerReconstructor *recon) {
   4065c:	defff804 	addi	sp,sp,-32
   40660:	dfc00715 	stw	ra,28(sp)
   40664:	df000615 	stw	fp,24(sp)
   40668:	df000604 	addi	fp,sp,24
   4066c:	e13ffe15 	stw	r4,-8(fp)
   40670:	e17fff15 	stw	r5,-4(fp)
	float x = new_sample;
   40674:	e0bffe17 	ldw	r2,-8(fp)
   40678:	e0bffa15 	stw	r2,-24(fp)
	if (recon->diff_reset >0){
   4067c:	e0bfff17 	ldw	r2,-4(fp)
   40680:	10800617 	ldw	r2,24(r2)
   40684:	0080130e 	bge	zero,r2,406d4 <nth_order_difference+0x78>
		for (int i = 0; i <= recon->order; ++i){
   40688:	e03ffb15 	stw	zero,-20(fp)
   4068c:	00000a06 	br	406b8 <nth_order_difference+0x5c>
		recon->diff_buffer[i]=0;
   40690:	e0ffff17 	ldw	r3,-4(fp)
   40694:	e0bffb17 	ldw	r2,-20(fp)
   40698:	10800204 	addi	r2,r2,8
   4069c:	1085883a 	add	r2,r2,r2
   406a0:	1085883a 	add	r2,r2,r2
   406a4:	1885883a 	add	r2,r3,r2
   406a8:	10000015 	stw	zero,0(r2)

}
float nth_order_difference(float new_sample,UnlimitedSamplerReconstructor *recon) {
	float x = new_sample;
	if (recon->diff_reset >0){
		for (int i = 0; i <= recon->order; ++i){
   406ac:	e0bffb17 	ldw	r2,-20(fp)
   406b0:	10800044 	addi	r2,r2,1
   406b4:	e0bffb15 	stw	r2,-20(fp)
   406b8:	e0bfff17 	ldw	r2,-4(fp)
   406bc:	10c00517 	ldw	r3,20(r2)
   406c0:	e0bffb17 	ldw	r2,-20(fp)
   406c4:	18bff20e 	bge	r3,r2,40690 <__alt_data_end+0xfffd9590>
		recon->diff_buffer[i]=0;

		}
		recon->diff_reset=0;
   406c8:	e0bfff17 	ldw	r2,-4(fp)
   406cc:	10000615 	stw	zero,24(r2)
   406d0:	00001f06 	br	40750 <nth_order_difference+0xf4>
	}else
	{
		for (int i = 0; i <= recon->order; ++i) {
   406d4:	e03ffc15 	stw	zero,-16(fp)
   406d8:	00001906 	br	40740 <nth_order_difference+0xe4>
			float delta = x - recon->diff_buffer[i];
   406dc:	e0ffff17 	ldw	r3,-4(fp)
   406e0:	e0bffc17 	ldw	r2,-16(fp)
   406e4:	10800204 	addi	r2,r2,8
   406e8:	1085883a 	add	r2,r2,r2
   406ec:	1085883a 	add	r2,r2,r2
   406f0:	1885883a 	add	r2,r3,r2
   406f4:	10c00017 	ldw	r3,0(r2)
   406f8:	180b883a 	mov	r5,r3
   406fc:	e13ffa17 	ldw	r4,-24(fp)
   40700:	00441bc0 	call	441bc <__subsf3>
   40704:	1007883a 	mov	r3,r2
   40708:	e0fffd15 	stw	r3,-12(fp)
			recon->diff_buffer[i] = x;
   4070c:	e0ffff17 	ldw	r3,-4(fp)
   40710:	e0bffc17 	ldw	r2,-16(fp)
   40714:	10800204 	addi	r2,r2,8
   40718:	1085883a 	add	r2,r2,r2
   4071c:	1085883a 	add	r2,r2,r2
   40720:	1885883a 	add	r2,r3,r2
   40724:	e0fffa17 	ldw	r3,-24(fp)
   40728:	10c00015 	stw	r3,0(r2)
			x = delta;
   4072c:	e0bffd17 	ldw	r2,-12(fp)
   40730:	e0bffa15 	stw	r2,-24(fp)

		}
		recon->diff_reset=0;
	}else
	{
		for (int i = 0; i <= recon->order; ++i) {
   40734:	e0bffc17 	ldw	r2,-16(fp)
   40738:	10800044 	addi	r2,r2,1
   4073c:	e0bffc15 	stw	r2,-16(fp)
   40740:	e0bfff17 	ldw	r2,-4(fp)
   40744:	10c00517 	ldw	r3,20(r2)
   40748:	e0bffc17 	ldw	r2,-16(fp)
   4074c:	18bfe30e 	bge	r3,r2,406dc <__alt_data_end+0xfffd95dc>
			recon->diff_buffer[i] = x;
			x = delta;
	//        }
		}
	}
    return recon->diff_buffer[recon->order];
   40750:	e0bfff17 	ldw	r2,-4(fp)
   40754:	10800517 	ldw	r2,20(r2)
   40758:	e0ffff17 	ldw	r3,-4(fp)
   4075c:	10800204 	addi	r2,r2,8
   40760:	1085883a 	add	r2,r2,r2
   40764:	1085883a 	add	r2,r2,r2
   40768:	1885883a 	add	r2,r3,r2
   4076c:	10c00017 	ldw	r3,0(r2)
   40770:	1805883a 	mov	r2,r3
}
   40774:	e037883a 	mov	sp,fp
   40778:	dfc00117 	ldw	ra,4(sp)
   4077c:	df000017 	ldw	fp,0(sp)
   40780:	dec00204 	addi	sp,sp,8
   40784:	f800283a 	ret

00040788 <anti_diff_nth>:

float anti_diff_nth(float diffN,UnlimitedSamplerReconstructor *recon) {
   40788:	defff604 	addi	sp,sp,-40
   4078c:	dfc00915 	stw	ra,36(sp)
   40790:	df000815 	stw	fp,32(sp)
   40794:	dcc00715 	stw	r19,28(sp)
   40798:	dc800615 	stw	r18,24(sp)
   4079c:	dc400515 	stw	r17,20(sp)
   407a0:	dc000415 	stw	r16,16(sp)
   407a4:	df000804 	addi	fp,sp,32
   407a8:	e13ffa15 	stw	r4,-24(fp)
   407ac:	e17ffb15 	stw	r5,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   407b0:	e0bffa17 	ldw	r2,-24(fp)
   407b4:	e0bff815 	stw	r2,-32(fp)

	for (int i = 0; i < recon->order-1; ++i) {
   407b8:	e03ff915 	stw	zero,-28(fp)
   407bc:	00005506 	br	40914 <anti_diff_nth+0x18c>
//		int idx = recon->res_index[i] % recon->J;
	    // 1. Integrate current level
	    x = recon->anti_diff_buffer[i] + x;
   407c0:	e0fffb17 	ldw	r3,-20(fp)
   407c4:	e0bff917 	ldw	r2,-28(fp)
   407c8:	10801b44 	addi	r2,r2,109
   407cc:	1085883a 	add	r2,r2,r2
   407d0:	1085883a 	add	r2,r2,r2
   407d4:	1885883a 	add	r2,r3,r2
   407d8:	10c00017 	ldw	r3,0(r2)
   407dc:	180b883a 	mov	r5,r3
   407e0:	e13ff817 	ldw	r4,-32(fp)
   407e4:	00433340 	call	43334 <__addsf3>
   407e8:	1007883a 	mov	r3,r2
   407ec:	e0fff815 	stw	r3,-32(fp)
	    x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   407f0:	e0bffb17 	ldw	r2,-20(fp)
   407f4:	10c00017 	ldw	r3,0(r2)
   407f8:	1809883a 	mov	r4,r3
   407fc:	0046c9c0 	call	46c9c <__extendsfdf2>
   40800:	1011883a 	mov	r8,r2
   40804:	1813883a 	mov	r9,r3
   40808:	400d883a 	mov	r6,r8
   4080c:	480f883a 	mov	r7,r9
   40810:	4009883a 	mov	r4,r8
   40814:	480b883a 	mov	r5,r9
   40818:	00448340 	call	44834 <__adddf3>
   4081c:	1009883a 	mov	r4,r2
   40820:	180b883a 	mov	r5,r3
   40824:	2021883a 	mov	r16,r4
   40828:	2823883a 	mov	r17,r5
   4082c:	e13ff817 	ldw	r4,-32(fp)
   40830:	0046c9c0 	call	46c9c <__extendsfdf2>
   40834:	1025883a 	mov	r18,r2
   40838:	1827883a 	mov	r19,r3
   4083c:	e0bffb17 	ldw	r2,-20(fp)
   40840:	10c00017 	ldw	r3,0(r2)
   40844:	1809883a 	mov	r4,r3
   40848:	0046c9c0 	call	46c9c <__extendsfdf2>
   4084c:	1011883a 	mov	r8,r2
   40850:	1813883a 	mov	r9,r3
   40854:	400d883a 	mov	r6,r8
   40858:	480f883a 	mov	r7,r9
   4085c:	4009883a 	mov	r4,r8
   40860:	480b883a 	mov	r5,r9
   40864:	00448340 	call	44834 <__adddf3>
   40868:	1009883a 	mov	r4,r2
   4086c:	180b883a 	mov	r5,r3
   40870:	2005883a 	mov	r2,r4
   40874:	2807883a 	mov	r3,r5
   40878:	100d883a 	mov	r6,r2
   4087c:	180f883a 	mov	r7,r3
   40880:	9009883a 	mov	r4,r18
   40884:	980b883a 	mov	r5,r19
   40888:	00450e00 	call	450e0 <__divdf3>
   4088c:	1009883a 	mov	r4,r2
   40890:	180b883a 	mov	r5,r3
   40894:	2005883a 	mov	r2,r4
   40898:	2807883a 	mov	r3,r5
   4089c:	1009883a 	mov	r4,r2
   408a0:	180b883a 	mov	r5,r3
   408a4:	00421c40 	call	421c4 <round>
   408a8:	1009883a 	mov	r4,r2
   408ac:	180b883a 	mov	r5,r3
   408b0:	200d883a 	mov	r6,r4
   408b4:	280f883a 	mov	r7,r5
   408b8:	8009883a 	mov	r4,r16
   408bc:	880b883a 	mov	r5,r17
   408c0:	0045b2c0 	call	45b2c <__muldf3>
   408c4:	1009883a 	mov	r4,r2
   408c8:	180b883a 	mov	r5,r3
   408cc:	2005883a 	mov	r2,r4
   408d0:	2807883a 	mov	r3,r5
   408d4:	1009883a 	mov	r4,r2
   408d8:	180b883a 	mov	r5,r3
   408dc:	0046dac0 	call	46dac <__truncdfsf2>
   408e0:	1007883a 	mov	r3,r2
   408e4:	e0fff815 	stw	r3,-32(fp)
//	    x+=2*recon->lam*(6*recon->max_in/recon->lam+1);
	    recon->anti_diff_buffer[i] = x;
   408e8:	e0fffb17 	ldw	r3,-20(fp)
   408ec:	e0bff917 	ldw	r2,-28(fp)
   408f0:	10801b44 	addi	r2,r2,109
   408f4:	1085883a 	add	r2,r2,r2
   408f8:	1085883a 	add	r2,r2,r2
   408fc:	1885883a 	add	r2,r3,r2
   40900:	e0fff817 	ldw	r3,-32(fp)
   40904:	10c00015 	stw	r3,0(r2)
}

float anti_diff_nth(float diffN,UnlimitedSamplerReconstructor *recon) {
	float x = diffN;  // the N-th difference input (Δⁿε[k])

	for (int i = 0; i < recon->order-1; ++i) {
   40908:	e0bff917 	ldw	r2,-28(fp)
   4090c:	10800044 	addi	r2,r2,1
   40910:	e0bff915 	stw	r2,-28(fp)
   40914:	e0bffb17 	ldw	r2,-20(fp)
   40918:	10800517 	ldw	r2,20(r2)
   4091c:	10bfffc4 	addi	r2,r2,-1
   40920:	e0fff917 	ldw	r3,-28(fp)
   40924:	18bfa616 	blt	r3,r2,407c0 <__alt_data_end+0xfffd96c0>
//	    printf("anti_diff_buffer at layer %d= %f.\n", i,recon->anti_diff_buffer[i] );

	}

	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   40928:	e0bffb17 	ldw	r2,-20(fp)
   4092c:	10800517 	ldw	r2,20(r2)
   40930:	10bfffc4 	addi	r2,r2,-1
   40934:	e0fffb17 	ldw	r3,-20(fp)
   40938:	10801b44 	addi	r2,r2,109
   4093c:	1085883a 	add	r2,r2,r2
   40940:	1085883a 	add	r2,r2,r2
   40944:	1885883a 	add	r2,r3,r2
   40948:	10c00017 	ldw	r3,0(r2)
   4094c:	180b883a 	mov	r5,r3
   40950:	e13ff817 	ldw	r4,-32(fp)
   40954:	00433340 	call	43334 <__addsf3>
   40958:	1007883a 	mov	r3,r2
   4095c:	e0fff815 	stw	r3,-32(fp)
	recon->anti_diff_buffer[recon->order-1] = x;
   40960:	e0bffb17 	ldw	r2,-20(fp)
   40964:	10800517 	ldw	r2,20(r2)
   40968:	10bfffc4 	addi	r2,r2,-1
   4096c:	e0fffb17 	ldw	r3,-20(fp)
   40970:	10801b44 	addi	r2,r2,109
   40974:	1085883a 	add	r2,r2,r2
   40978:	1085883a 	add	r2,r2,r2
   4097c:	1885883a 	add	r2,r3,r2
   40980:	e0fff817 	ldw	r3,-32(fp)
   40984:	10c00015 	stw	r3,0(r2)

	return x;  // final reconstructed sample g[k]
   40988:	e0bff817 	ldw	r2,-32(fp)
   4098c:	1007883a 	mov	r3,r2
}
   40990:	1805883a 	mov	r2,r3
   40994:	e6fffc04 	addi	sp,fp,-16
   40998:	dfc00517 	ldw	ra,20(sp)
   4099c:	df000417 	ldw	fp,16(sp)
   409a0:	dcc00317 	ldw	r19,12(sp)
   409a4:	dc800217 	ldw	r18,8(sp)
   409a8:	dc400117 	ldw	r17,4(sp)
   409ac:	dc000017 	ldw	r16,0(sp)
   409b0:	dec00604 	addi	sp,sp,24
   409b4:	f800283a 	ret

000409b8 <anti_diff_3rd>:

float anti_diff_3rd(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   409b8:	defff204 	addi	sp,sp,-56
   409bc:	dfc00d15 	stw	ra,52(sp)
   409c0:	df000c15 	stw	fp,48(sp)
   409c4:	dcc00b15 	stw	r19,44(sp)
   409c8:	dc800a15 	stw	r18,40(sp)
   409cc:	dc400915 	stw	r17,36(sp)
   409d0:	dc000815 	stw	r16,32(sp)
   409d4:	df000c04 	addi	fp,sp,48
   409d8:	e13ff815 	stw	r4,-32(fp)
   409dc:	e17ff915 	stw	r5,-28(fp)
   409e0:	e1bffa15 	stw	r6,-24(fp)
   409e4:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   409e8:	e0bff817 	ldw	r2,-32(fp)
   409ec:	e0bff415 	stw	r2,-48(fp)

	x = recon->anti_diff_buffer[0] + x;
   409f0:	e0bff917 	ldw	r2,-28(fp)
   409f4:	10c06d17 	ldw	r3,436(r2)
   409f8:	180b883a 	mov	r5,r3
   409fc:	e13ff417 	ldw	r4,-48(fp)
   40a00:	00433340 	call	43334 <__addsf3>
   40a04:	1007883a 	mov	r3,r2
   40a08:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40a0c:	e0bff917 	ldw	r2,-28(fp)
   40a10:	10c00017 	ldw	r3,0(r2)
   40a14:	1809883a 	mov	r4,r3
   40a18:	0046c9c0 	call	46c9c <__extendsfdf2>
   40a1c:	1011883a 	mov	r8,r2
   40a20:	1813883a 	mov	r9,r3
   40a24:	400d883a 	mov	r6,r8
   40a28:	480f883a 	mov	r7,r9
   40a2c:	4009883a 	mov	r4,r8
   40a30:	480b883a 	mov	r5,r9
   40a34:	00448340 	call	44834 <__adddf3>
   40a38:	1009883a 	mov	r4,r2
   40a3c:	180b883a 	mov	r5,r3
   40a40:	2021883a 	mov	r16,r4
   40a44:	2823883a 	mov	r17,r5
   40a48:	e13ff417 	ldw	r4,-48(fp)
   40a4c:	0046c9c0 	call	46c9c <__extendsfdf2>
   40a50:	1025883a 	mov	r18,r2
   40a54:	1827883a 	mov	r19,r3
   40a58:	e0bff917 	ldw	r2,-28(fp)
   40a5c:	10c00017 	ldw	r3,0(r2)
   40a60:	1809883a 	mov	r4,r3
   40a64:	0046c9c0 	call	46c9c <__extendsfdf2>
   40a68:	1011883a 	mov	r8,r2
   40a6c:	1813883a 	mov	r9,r3
   40a70:	400d883a 	mov	r6,r8
   40a74:	480f883a 	mov	r7,r9
   40a78:	4009883a 	mov	r4,r8
   40a7c:	480b883a 	mov	r5,r9
   40a80:	00448340 	call	44834 <__adddf3>
   40a84:	1009883a 	mov	r4,r2
   40a88:	180b883a 	mov	r5,r3
   40a8c:	2005883a 	mov	r2,r4
   40a90:	2807883a 	mov	r3,r5
   40a94:	100d883a 	mov	r6,r2
   40a98:	180f883a 	mov	r7,r3
   40a9c:	9009883a 	mov	r4,r18
   40aa0:	980b883a 	mov	r5,r19
   40aa4:	00450e00 	call	450e0 <__divdf3>
   40aa8:	1009883a 	mov	r4,r2
   40aac:	180b883a 	mov	r5,r3
   40ab0:	2005883a 	mov	r2,r4
   40ab4:	2807883a 	mov	r3,r5
   40ab8:	1009883a 	mov	r4,r2
   40abc:	180b883a 	mov	r5,r3
   40ac0:	00421c40 	call	421c4 <round>
   40ac4:	1009883a 	mov	r4,r2
   40ac8:	180b883a 	mov	r5,r3
   40acc:	200d883a 	mov	r6,r4
   40ad0:	280f883a 	mov	r7,r5
   40ad4:	8009883a 	mov	r4,r16
   40ad8:	880b883a 	mov	r5,r17
   40adc:	0045b2c0 	call	45b2c <__muldf3>
   40ae0:	1009883a 	mov	r4,r2
   40ae4:	180b883a 	mov	r5,r3
   40ae8:	2005883a 	mov	r2,r4
   40aec:	2807883a 	mov	r3,r5
   40af0:	1009883a 	mov	r4,r2
   40af4:	180b883a 	mov	r5,r3
   40af8:	0046dac0 	call	46dac <__truncdfsf2>
   40afc:	1007883a 	mov	r3,r2
   40b00:	e0fff415 	stw	r3,-48(fp)
	float avg1 = updateMovingAverage(ma1, x);
   40b04:	e17ff417 	ldw	r5,-48(fp)
   40b08:	e13ffa17 	ldw	r4,-24(fp)
   40b0c:	00403040 	call	40304 <updateMovingAverage>
   40b10:	e0bff515 	stw	r2,-44(fp)

	recon->anti_diff_buffer[0] = x;
   40b14:	e0bff917 	ldw	r2,-28(fp)
   40b18:	e0fff417 	ldw	r3,-48(fp)
   40b1c:	10c06d15 	stw	r3,436(r2)

	x=x-avg1;
   40b20:	e17ff517 	ldw	r5,-44(fp)
   40b24:	e13ff417 	ldw	r4,-48(fp)
   40b28:	00441bc0 	call	441bc <__subsf3>
   40b2c:	1007883a 	mov	r3,r2
   40b30:	e0fff415 	stw	r3,-48(fp)

	x = recon->anti_diff_buffer[1] + x;
   40b34:	e0bff917 	ldw	r2,-28(fp)
   40b38:	10c06e17 	ldw	r3,440(r2)
   40b3c:	180b883a 	mov	r5,r3
   40b40:	e13ff417 	ldw	r4,-48(fp)
   40b44:	00433340 	call	43334 <__addsf3>
   40b48:	1007883a 	mov	r3,r2
   40b4c:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40b50:	e0bff917 	ldw	r2,-28(fp)
   40b54:	10c00017 	ldw	r3,0(r2)
   40b58:	1809883a 	mov	r4,r3
   40b5c:	0046c9c0 	call	46c9c <__extendsfdf2>
   40b60:	1011883a 	mov	r8,r2
   40b64:	1813883a 	mov	r9,r3
   40b68:	400d883a 	mov	r6,r8
   40b6c:	480f883a 	mov	r7,r9
   40b70:	4009883a 	mov	r4,r8
   40b74:	480b883a 	mov	r5,r9
   40b78:	00448340 	call	44834 <__adddf3>
   40b7c:	1009883a 	mov	r4,r2
   40b80:	180b883a 	mov	r5,r3
   40b84:	2021883a 	mov	r16,r4
   40b88:	2823883a 	mov	r17,r5
   40b8c:	e13ff417 	ldw	r4,-48(fp)
   40b90:	0046c9c0 	call	46c9c <__extendsfdf2>
   40b94:	1025883a 	mov	r18,r2
   40b98:	1827883a 	mov	r19,r3
   40b9c:	e0bff917 	ldw	r2,-28(fp)
   40ba0:	10c00017 	ldw	r3,0(r2)
   40ba4:	1809883a 	mov	r4,r3
   40ba8:	0046c9c0 	call	46c9c <__extendsfdf2>
   40bac:	1011883a 	mov	r8,r2
   40bb0:	1813883a 	mov	r9,r3
   40bb4:	400d883a 	mov	r6,r8
   40bb8:	480f883a 	mov	r7,r9
   40bbc:	4009883a 	mov	r4,r8
   40bc0:	480b883a 	mov	r5,r9
   40bc4:	00448340 	call	44834 <__adddf3>
   40bc8:	1009883a 	mov	r4,r2
   40bcc:	180b883a 	mov	r5,r3
   40bd0:	2005883a 	mov	r2,r4
   40bd4:	2807883a 	mov	r3,r5
   40bd8:	100d883a 	mov	r6,r2
   40bdc:	180f883a 	mov	r7,r3
   40be0:	9009883a 	mov	r4,r18
   40be4:	980b883a 	mov	r5,r19
   40be8:	00450e00 	call	450e0 <__divdf3>
   40bec:	1009883a 	mov	r4,r2
   40bf0:	180b883a 	mov	r5,r3
   40bf4:	2005883a 	mov	r2,r4
   40bf8:	2807883a 	mov	r3,r5
   40bfc:	1009883a 	mov	r4,r2
   40c00:	180b883a 	mov	r5,r3
   40c04:	00421c40 	call	421c4 <round>
   40c08:	1009883a 	mov	r4,r2
   40c0c:	180b883a 	mov	r5,r3
   40c10:	200d883a 	mov	r6,r4
   40c14:	280f883a 	mov	r7,r5
   40c18:	8009883a 	mov	r4,r16
   40c1c:	880b883a 	mov	r5,r17
   40c20:	0045b2c0 	call	45b2c <__muldf3>
   40c24:	1009883a 	mov	r4,r2
   40c28:	180b883a 	mov	r5,r3
   40c2c:	2005883a 	mov	r2,r4
   40c30:	2807883a 	mov	r3,r5
   40c34:	1009883a 	mov	r4,r2
   40c38:	180b883a 	mov	r5,r3
   40c3c:	0046dac0 	call	46dac <__truncdfsf2>
   40c40:	1007883a 	mov	r3,r2
   40c44:	e0fff415 	stw	r3,-48(fp)
	float avg2 = updateMovingAverage(ma2, x);
   40c48:	e17ff417 	ldw	r5,-48(fp)
   40c4c:	e13ffb17 	ldw	r4,-20(fp)
   40c50:	00403040 	call	40304 <updateMovingAverage>
   40c54:	e0bff615 	stw	r2,-40(fp)

	recon->anti_diff_buffer[1] = x;
   40c58:	e0bff917 	ldw	r2,-28(fp)
   40c5c:	e0fff417 	ldw	r3,-48(fp)
   40c60:	10c06e15 	stw	r3,440(r2)
	x=x-avg2;
   40c64:	e17ff617 	ldw	r5,-40(fp)
   40c68:	e13ff417 	ldw	r4,-48(fp)
   40c6c:	00441bc0 	call	441bc <__subsf3>
   40c70:	1007883a 	mov	r3,r2
   40c74:	e0fff415 	stw	r3,-48(fp)


	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
   40c78:	e0bff917 	ldw	r2,-28(fp)
   40c7c:	10800517 	ldw	r2,20(r2)
   40c80:	10bfffc4 	addi	r2,r2,-1
   40c84:	e0fff917 	ldw	r3,-28(fp)
   40c88:	10801b44 	addi	r2,r2,109
   40c8c:	1085883a 	add	r2,r2,r2
   40c90:	1085883a 	add	r2,r2,r2
   40c94:	1885883a 	add	r2,r3,r2
   40c98:	10c00017 	ldw	r3,0(r2)
   40c9c:	180b883a 	mov	r5,r3
   40ca0:	e13ff417 	ldw	r4,-48(fp)
   40ca4:	00433340 	call	43334 <__addsf3>
   40ca8:	1007883a 	mov	r3,r2
   40cac:	e0fff415 	stw	r3,-48(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40cb0:	e0bff917 	ldw	r2,-28(fp)
   40cb4:	10c00017 	ldw	r3,0(r2)
   40cb8:	1809883a 	mov	r4,r3
   40cbc:	0046c9c0 	call	46c9c <__extendsfdf2>
   40cc0:	1011883a 	mov	r8,r2
   40cc4:	1813883a 	mov	r9,r3
   40cc8:	400d883a 	mov	r6,r8
   40ccc:	480f883a 	mov	r7,r9
   40cd0:	4009883a 	mov	r4,r8
   40cd4:	480b883a 	mov	r5,r9
   40cd8:	00448340 	call	44834 <__adddf3>
   40cdc:	1009883a 	mov	r4,r2
   40ce0:	180b883a 	mov	r5,r3
   40ce4:	2021883a 	mov	r16,r4
   40ce8:	2823883a 	mov	r17,r5
   40cec:	e13ff417 	ldw	r4,-48(fp)
   40cf0:	0046c9c0 	call	46c9c <__extendsfdf2>
   40cf4:	1025883a 	mov	r18,r2
   40cf8:	1827883a 	mov	r19,r3
   40cfc:	e0bff917 	ldw	r2,-28(fp)
   40d00:	10c00017 	ldw	r3,0(r2)
   40d04:	1809883a 	mov	r4,r3
   40d08:	0046c9c0 	call	46c9c <__extendsfdf2>
   40d0c:	1011883a 	mov	r8,r2
   40d10:	1813883a 	mov	r9,r3
   40d14:	400d883a 	mov	r6,r8
   40d18:	480f883a 	mov	r7,r9
   40d1c:	4009883a 	mov	r4,r8
   40d20:	480b883a 	mov	r5,r9
   40d24:	00448340 	call	44834 <__adddf3>
   40d28:	1009883a 	mov	r4,r2
   40d2c:	180b883a 	mov	r5,r3
   40d30:	2005883a 	mov	r2,r4
   40d34:	2807883a 	mov	r3,r5
   40d38:	100d883a 	mov	r6,r2
   40d3c:	180f883a 	mov	r7,r3
   40d40:	9009883a 	mov	r4,r18
   40d44:	980b883a 	mov	r5,r19
   40d48:	00450e00 	call	450e0 <__divdf3>
   40d4c:	1009883a 	mov	r4,r2
   40d50:	180b883a 	mov	r5,r3
   40d54:	2005883a 	mov	r2,r4
   40d58:	2807883a 	mov	r3,r5
   40d5c:	1009883a 	mov	r4,r2
   40d60:	180b883a 	mov	r5,r3
   40d64:	00421c40 	call	421c4 <round>
   40d68:	1009883a 	mov	r4,r2
   40d6c:	180b883a 	mov	r5,r3
   40d70:	200d883a 	mov	r6,r4
   40d74:	280f883a 	mov	r7,r5
   40d78:	8009883a 	mov	r4,r16
   40d7c:	880b883a 	mov	r5,r17
   40d80:	0045b2c0 	call	45b2c <__muldf3>
   40d84:	1009883a 	mov	r4,r2
   40d88:	180b883a 	mov	r5,r3
   40d8c:	2005883a 	mov	r2,r4
   40d90:	2807883a 	mov	r3,r5
   40d94:	1009883a 	mov	r4,r2
   40d98:	180b883a 	mov	r5,r3
   40d9c:	0046dac0 	call	46dac <__truncdfsf2>
   40da0:	1007883a 	mov	r3,r2
   40da4:	e0fff415 	stw	r3,-48(fp)

	recon->anti_diff_buffer[recon->order-1] = x;
   40da8:	e0bff917 	ldw	r2,-28(fp)
   40dac:	10800517 	ldw	r2,20(r2)
   40db0:	10bfffc4 	addi	r2,r2,-1
   40db4:	e0fff917 	ldw	r3,-28(fp)
   40db8:	10801b44 	addi	r2,r2,109
   40dbc:	1085883a 	add	r2,r2,r2
   40dc0:	1085883a 	add	r2,r2,r2
   40dc4:	1885883a 	add	r2,r3,r2
   40dc8:	e0fff417 	ldw	r3,-48(fp)
   40dcc:	10c00015 	stw	r3,0(r2)
	float avg3 = updateMovingAverage(ma3, x);
   40dd0:	e17ff417 	ldw	r5,-48(fp)
   40dd4:	e1000217 	ldw	r4,8(fp)
   40dd8:	00403040 	call	40304 <updateMovingAverage>
   40ddc:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg3;
   40de0:	e17ff717 	ldw	r5,-36(fp)
   40de4:	e13ff417 	ldw	r4,-48(fp)
   40de8:	00441bc0 	call	441bc <__subsf3>
   40dec:	1007883a 	mov	r3,r2
   40df0:	e0fff415 	stw	r3,-48(fp)

	return x;  // final reconstructed sample g[k]
   40df4:	e0bff417 	ldw	r2,-48(fp)
   40df8:	1007883a 	mov	r3,r2
}
   40dfc:	1805883a 	mov	r2,r3
   40e00:	e6fffc04 	addi	sp,fp,-16
   40e04:	dfc00517 	ldw	ra,20(sp)
   40e08:	df000417 	ldw	fp,16(sp)
   40e0c:	dcc00317 	ldw	r19,12(sp)
   40e10:	dc800217 	ldw	r18,8(sp)
   40e14:	dc400117 	ldw	r17,4(sp)
   40e18:	dc000017 	ldw	r16,0(sp)
   40e1c:	dec00604 	addi	sp,sp,24
   40e20:	f800283a 	ret

00040e24 <anti_diff_2nd>:
float anti_diff_2nd(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   40e24:	defff304 	addi	sp,sp,-52
   40e28:	dfc00c15 	stw	ra,48(sp)
   40e2c:	df000b15 	stw	fp,44(sp)
   40e30:	dcc00a15 	stw	r19,40(sp)
   40e34:	dc800915 	stw	r18,36(sp)
   40e38:	dc400815 	stw	r17,32(sp)
   40e3c:	dc000715 	stw	r16,28(sp)
   40e40:	df000b04 	addi	fp,sp,44
   40e44:	e13ff815 	stw	r4,-32(fp)
   40e48:	e17ff915 	stw	r5,-28(fp)
   40e4c:	e1bffa15 	stw	r6,-24(fp)
   40e50:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   40e54:	e0bff817 	ldw	r2,-32(fp)
   40e58:	e0bff515 	stw	r2,-44(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40e5c:	e0bff917 	ldw	r2,-28(fp)
   40e60:	10c00017 	ldw	r3,0(r2)
   40e64:	1809883a 	mov	r4,r3
   40e68:	0046c9c0 	call	46c9c <__extendsfdf2>
   40e6c:	1011883a 	mov	r8,r2
   40e70:	1813883a 	mov	r9,r3
   40e74:	400d883a 	mov	r6,r8
   40e78:	480f883a 	mov	r7,r9
   40e7c:	4009883a 	mov	r4,r8
   40e80:	480b883a 	mov	r5,r9
   40e84:	00448340 	call	44834 <__adddf3>
   40e88:	1009883a 	mov	r4,r2
   40e8c:	180b883a 	mov	r5,r3
   40e90:	2021883a 	mov	r16,r4
   40e94:	2823883a 	mov	r17,r5
   40e98:	e13ff517 	ldw	r4,-44(fp)
   40e9c:	0046c9c0 	call	46c9c <__extendsfdf2>
   40ea0:	1025883a 	mov	r18,r2
   40ea4:	1827883a 	mov	r19,r3
   40ea8:	e0bff917 	ldw	r2,-28(fp)
   40eac:	10c00017 	ldw	r3,0(r2)
   40eb0:	1809883a 	mov	r4,r3
   40eb4:	0046c9c0 	call	46c9c <__extendsfdf2>
   40eb8:	1011883a 	mov	r8,r2
   40ebc:	1813883a 	mov	r9,r3
   40ec0:	400d883a 	mov	r6,r8
   40ec4:	480f883a 	mov	r7,r9
   40ec8:	4009883a 	mov	r4,r8
   40ecc:	480b883a 	mov	r5,r9
   40ed0:	00448340 	call	44834 <__adddf3>
   40ed4:	1009883a 	mov	r4,r2
   40ed8:	180b883a 	mov	r5,r3
   40edc:	2005883a 	mov	r2,r4
   40ee0:	2807883a 	mov	r3,r5
   40ee4:	100d883a 	mov	r6,r2
   40ee8:	180f883a 	mov	r7,r3
   40eec:	9009883a 	mov	r4,r18
   40ef0:	980b883a 	mov	r5,r19
   40ef4:	00450e00 	call	450e0 <__divdf3>
   40ef8:	1009883a 	mov	r4,r2
   40efc:	180b883a 	mov	r5,r3
   40f00:	2005883a 	mov	r2,r4
   40f04:	2807883a 	mov	r3,r5
   40f08:	1009883a 	mov	r4,r2
   40f0c:	180b883a 	mov	r5,r3
   40f10:	00421c40 	call	421c4 <round>
   40f14:	1009883a 	mov	r4,r2
   40f18:	180b883a 	mov	r5,r3
   40f1c:	200d883a 	mov	r6,r4
   40f20:	280f883a 	mov	r7,r5
   40f24:	8009883a 	mov	r4,r16
   40f28:	880b883a 	mov	r5,r17
   40f2c:	0045b2c0 	call	45b2c <__muldf3>
   40f30:	1009883a 	mov	r4,r2
   40f34:	180b883a 	mov	r5,r3
   40f38:	2005883a 	mov	r2,r4
   40f3c:	2807883a 	mov	r3,r5
   40f40:	1009883a 	mov	r4,r2
   40f44:	180b883a 	mov	r5,r3
   40f48:	0046dac0 	call	46dac <__truncdfsf2>
   40f4c:	1007883a 	mov	r3,r2
   40f50:	e0fff515 	stw	r3,-44(fp)

	x = recon->anti_diff_buffer[0] + x;
   40f54:	e0bff917 	ldw	r2,-28(fp)
   40f58:	10c06d17 	ldw	r3,436(r2)
   40f5c:	180b883a 	mov	r5,r3
   40f60:	e13ff517 	ldw	r4,-44(fp)
   40f64:	00433340 	call	43334 <__addsf3>
   40f68:	1007883a 	mov	r3,r2
   40f6c:	e0fff515 	stw	r3,-44(fp)





	recon->anti_diff_buffer[0] = x;
   40f70:	e0bff917 	ldw	r2,-28(fp)
   40f74:	e0fff517 	ldw	r3,-44(fp)
   40f78:	10c06d15 	stw	r3,436(r2)
	float avg1 = updateMovingAverage(ma1, x);
   40f7c:	e17ff517 	ldw	r5,-44(fp)
   40f80:	e13ffa17 	ldw	r4,-24(fp)
   40f84:	00403040 	call	40304 <updateMovingAverage>
   40f88:	e0bff615 	stw	r2,-40(fp)
	x=x-avg1;
   40f8c:	e17ff617 	ldw	r5,-40(fp)
   40f90:	e13ff517 	ldw	r4,-44(fp)
   40f94:	00441bc0 	call	441bc <__subsf3>
   40f98:	1007883a 	mov	r3,r2
   40f9c:	e0fff515 	stw	r3,-44(fp)



	// Final integration
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   40fa0:	e0bff917 	ldw	r2,-28(fp)
   40fa4:	10c00017 	ldw	r3,0(r2)
   40fa8:	1809883a 	mov	r4,r3
   40fac:	0046c9c0 	call	46c9c <__extendsfdf2>
   40fb0:	1011883a 	mov	r8,r2
   40fb4:	1813883a 	mov	r9,r3
   40fb8:	400d883a 	mov	r6,r8
   40fbc:	480f883a 	mov	r7,r9
   40fc0:	4009883a 	mov	r4,r8
   40fc4:	480b883a 	mov	r5,r9
   40fc8:	00448340 	call	44834 <__adddf3>
   40fcc:	1009883a 	mov	r4,r2
   40fd0:	180b883a 	mov	r5,r3
   40fd4:	2021883a 	mov	r16,r4
   40fd8:	2823883a 	mov	r17,r5
   40fdc:	e13ff517 	ldw	r4,-44(fp)
   40fe0:	0046c9c0 	call	46c9c <__extendsfdf2>
   40fe4:	1025883a 	mov	r18,r2
   40fe8:	1827883a 	mov	r19,r3
   40fec:	e0bff917 	ldw	r2,-28(fp)
   40ff0:	10c00017 	ldw	r3,0(r2)
   40ff4:	1809883a 	mov	r4,r3
   40ff8:	0046c9c0 	call	46c9c <__extendsfdf2>
   40ffc:	1011883a 	mov	r8,r2
   41000:	1813883a 	mov	r9,r3
   41004:	400d883a 	mov	r6,r8
   41008:	480f883a 	mov	r7,r9
   4100c:	4009883a 	mov	r4,r8
   41010:	480b883a 	mov	r5,r9
   41014:	00448340 	call	44834 <__adddf3>
   41018:	1009883a 	mov	r4,r2
   4101c:	180b883a 	mov	r5,r3
   41020:	2005883a 	mov	r2,r4
   41024:	2807883a 	mov	r3,r5
   41028:	100d883a 	mov	r6,r2
   4102c:	180f883a 	mov	r7,r3
   41030:	9009883a 	mov	r4,r18
   41034:	980b883a 	mov	r5,r19
   41038:	00450e00 	call	450e0 <__divdf3>
   4103c:	1009883a 	mov	r4,r2
   41040:	180b883a 	mov	r5,r3
   41044:	2005883a 	mov	r2,r4
   41048:	2807883a 	mov	r3,r5
   4104c:	1009883a 	mov	r4,r2
   41050:	180b883a 	mov	r5,r3
   41054:	00421c40 	call	421c4 <round>
   41058:	1009883a 	mov	r4,r2
   4105c:	180b883a 	mov	r5,r3
   41060:	200d883a 	mov	r6,r4
   41064:	280f883a 	mov	r7,r5
   41068:	8009883a 	mov	r4,r16
   4106c:	880b883a 	mov	r5,r17
   41070:	0045b2c0 	call	45b2c <__muldf3>
   41074:	1009883a 	mov	r4,r2
   41078:	180b883a 	mov	r5,r3
   4107c:	2005883a 	mov	r2,r4
   41080:	2807883a 	mov	r3,r5
   41084:	1009883a 	mov	r4,r2
   41088:	180b883a 	mov	r5,r3
   4108c:	0046dac0 	call	46dac <__truncdfsf2>
   41090:	1007883a 	mov	r3,r2
   41094:	e0fff515 	stw	r3,-44(fp)
	x = recon->anti_diff_buffer[recon->order-1] + x;
   41098:	e0bff917 	ldw	r2,-28(fp)
   4109c:	10800517 	ldw	r2,20(r2)
   410a0:	10bfffc4 	addi	r2,r2,-1
   410a4:	e0fff917 	ldw	r3,-28(fp)
   410a8:	10801b44 	addi	r2,r2,109
   410ac:	1085883a 	add	r2,r2,r2
   410b0:	1085883a 	add	r2,r2,r2
   410b4:	1885883a 	add	r2,r3,r2
   410b8:	10c00017 	ldw	r3,0(r2)
   410bc:	180b883a 	mov	r5,r3
   410c0:	e13ff517 	ldw	r4,-44(fp)
   410c4:	00433340 	call	43334 <__addsf3>
   410c8:	1007883a 	mov	r3,r2
   410cc:	e0fff515 	stw	r3,-44(fp)


	recon->anti_diff_buffer[recon->order-1] = x;
   410d0:	e0bff917 	ldw	r2,-28(fp)
   410d4:	10800517 	ldw	r2,20(r2)
   410d8:	10bfffc4 	addi	r2,r2,-1
   410dc:	e0fff917 	ldw	r3,-28(fp)
   410e0:	10801b44 	addi	r2,r2,109
   410e4:	1085883a 	add	r2,r2,r2
   410e8:	1085883a 	add	r2,r2,r2
   410ec:	1885883a 	add	r2,r3,r2
   410f0:	e0fff517 	ldw	r3,-44(fp)
   410f4:	10c00015 	stw	r3,0(r2)


	float avg2 = updateMovingAverage(ma2, x);
   410f8:	e17ff517 	ldw	r5,-44(fp)
   410fc:	e13ffb17 	ldw	r4,-20(fp)
   41100:	00403040 	call	40304 <updateMovingAverage>
   41104:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg2;
   41108:	e17ff717 	ldw	r5,-36(fp)
   4110c:	e13ff517 	ldw	r4,-44(fp)
   41110:	00441bc0 	call	441bc <__subsf3>
   41114:	1007883a 	mov	r3,r2
   41118:	e0fff515 	stw	r3,-44(fp)


	return x;  // final reconstructed sample g[k]
   4111c:	e0bff517 	ldw	r2,-44(fp)
   41120:	1007883a 	mov	r3,r2
}
   41124:	1805883a 	mov	r2,r3
   41128:	e6fffc04 	addi	sp,fp,-16
   4112c:	dfc00517 	ldw	ra,20(sp)
   41130:	df000417 	ldw	fp,16(sp)
   41134:	dcc00317 	ldw	r19,12(sp)
   41138:	dc800217 	ldw	r18,8(sp)
   4113c:	dc400117 	ldw	r17,4(sp)
   41140:	dc000017 	ldw	r16,0(sp)
   41144:	dec00604 	addi	sp,sp,24
   41148:	f800283a 	ret

0004114c <anti_diff_1st>:
float anti_diff_1st(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
   4114c:	defff404 	addi	sp,sp,-48
   41150:	dfc00b15 	stw	ra,44(sp)
   41154:	df000a15 	stw	fp,40(sp)
   41158:	dcc00915 	stw	r19,36(sp)
   4115c:	dc800815 	stw	r18,32(sp)
   41160:	dc400715 	stw	r17,28(sp)
   41164:	dc000615 	stw	r16,24(sp)
   41168:	df000a04 	addi	fp,sp,40
   4116c:	e13ff815 	stw	r4,-32(fp)
   41170:	e17ff915 	stw	r5,-28(fp)
   41174:	e1bffa15 	stw	r6,-24(fp)
   41178:	e1fffb15 	stw	r7,-20(fp)
	float x = diffN;  // the N-th difference input (Δⁿε[k])
   4117c:	e0bff817 	ldw	r2,-32(fp)
   41180:	e0bff615 	stw	r2,-40(fp)

	// Final integration

	x = recon->anti_diff_buffer[recon->order-1] + x;
   41184:	e0bff917 	ldw	r2,-28(fp)
   41188:	10800517 	ldw	r2,20(r2)
   4118c:	10bfffc4 	addi	r2,r2,-1
   41190:	e0fff917 	ldw	r3,-28(fp)
   41194:	10801b44 	addi	r2,r2,109
   41198:	1085883a 	add	r2,r2,r2
   4119c:	1085883a 	add	r2,r2,r2
   411a0:	1885883a 	add	r2,r3,r2
   411a4:	10c00017 	ldw	r3,0(r2)
   411a8:	180b883a 	mov	r5,r3
   411ac:	e13ff617 	ldw	r4,-40(fp)
   411b0:	00433340 	call	43334 <__addsf3>
   411b4:	1007883a 	mov	r3,r2
   411b8:	e0fff615 	stw	r3,-40(fp)
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
   411bc:	e0bff917 	ldw	r2,-28(fp)
   411c0:	10c00017 	ldw	r3,0(r2)
   411c4:	1809883a 	mov	r4,r3
   411c8:	0046c9c0 	call	46c9c <__extendsfdf2>
   411cc:	1011883a 	mov	r8,r2
   411d0:	1813883a 	mov	r9,r3
   411d4:	400d883a 	mov	r6,r8
   411d8:	480f883a 	mov	r7,r9
   411dc:	4009883a 	mov	r4,r8
   411e0:	480b883a 	mov	r5,r9
   411e4:	00448340 	call	44834 <__adddf3>
   411e8:	1009883a 	mov	r4,r2
   411ec:	180b883a 	mov	r5,r3
   411f0:	2021883a 	mov	r16,r4
   411f4:	2823883a 	mov	r17,r5
   411f8:	e13ff617 	ldw	r4,-40(fp)
   411fc:	0046c9c0 	call	46c9c <__extendsfdf2>
   41200:	1025883a 	mov	r18,r2
   41204:	1827883a 	mov	r19,r3
   41208:	e0bff917 	ldw	r2,-28(fp)
   4120c:	10c00017 	ldw	r3,0(r2)
   41210:	1809883a 	mov	r4,r3
   41214:	0046c9c0 	call	46c9c <__extendsfdf2>
   41218:	1011883a 	mov	r8,r2
   4121c:	1813883a 	mov	r9,r3
   41220:	400d883a 	mov	r6,r8
   41224:	480f883a 	mov	r7,r9
   41228:	4009883a 	mov	r4,r8
   4122c:	480b883a 	mov	r5,r9
   41230:	00448340 	call	44834 <__adddf3>
   41234:	1009883a 	mov	r4,r2
   41238:	180b883a 	mov	r5,r3
   4123c:	2005883a 	mov	r2,r4
   41240:	2807883a 	mov	r3,r5
   41244:	100d883a 	mov	r6,r2
   41248:	180f883a 	mov	r7,r3
   4124c:	9009883a 	mov	r4,r18
   41250:	980b883a 	mov	r5,r19
   41254:	00450e00 	call	450e0 <__divdf3>
   41258:	1009883a 	mov	r4,r2
   4125c:	180b883a 	mov	r5,r3
   41260:	2005883a 	mov	r2,r4
   41264:	2807883a 	mov	r3,r5
   41268:	1009883a 	mov	r4,r2
   4126c:	180b883a 	mov	r5,r3
   41270:	00421c40 	call	421c4 <round>
   41274:	1009883a 	mov	r4,r2
   41278:	180b883a 	mov	r5,r3
   4127c:	200d883a 	mov	r6,r4
   41280:	280f883a 	mov	r7,r5
   41284:	8009883a 	mov	r4,r16
   41288:	880b883a 	mov	r5,r17
   4128c:	0045b2c0 	call	45b2c <__muldf3>
   41290:	1009883a 	mov	r4,r2
   41294:	180b883a 	mov	r5,r3
   41298:	2005883a 	mov	r2,r4
   4129c:	2807883a 	mov	r3,r5
   412a0:	1009883a 	mov	r4,r2
   412a4:	180b883a 	mov	r5,r3
   412a8:	0046dac0 	call	46dac <__truncdfsf2>
   412ac:	1007883a 	mov	r3,r2
   412b0:	e0fff615 	stw	r3,-40(fp)


	recon->anti_diff_buffer[recon->order-1] = x;
   412b4:	e0bff917 	ldw	r2,-28(fp)
   412b8:	10800517 	ldw	r2,20(r2)
   412bc:	10bfffc4 	addi	r2,r2,-1
   412c0:	e0fff917 	ldw	r3,-28(fp)
   412c4:	10801b44 	addi	r2,r2,109
   412c8:	1085883a 	add	r2,r2,r2
   412cc:	1085883a 	add	r2,r2,r2
   412d0:	1885883a 	add	r2,r3,r2
   412d4:	e0fff617 	ldw	r3,-40(fp)
   412d8:	10c00015 	stw	r3,0(r2)

	float avg2 = updateMovingAverage(ma2, x);
   412dc:	e17ff617 	ldw	r5,-40(fp)
   412e0:	e13ffb17 	ldw	r4,-20(fp)
   412e4:	00403040 	call	40304 <updateMovingAverage>
   412e8:	e0bff715 	stw	r2,-36(fp)
//	x = hpf_update(hpf, x);
	x=x-avg2;
   412ec:	e17ff717 	ldw	r5,-36(fp)
   412f0:	e13ff617 	ldw	r4,-40(fp)
   412f4:	00441bc0 	call	441bc <__subsf3>
   412f8:	1007883a 	mov	r3,r2
   412fc:	e0fff615 	stw	r3,-40(fp)


	return x;  // final reconstructed sample g[k]
   41300:	e0bff617 	ldw	r2,-40(fp)
   41304:	1007883a 	mov	r3,r2
}
   41308:	1805883a 	mov	r2,r3
   4130c:	e6fffc04 	addi	sp,fp,-16
   41310:	dfc00517 	ldw	ra,20(sp)
   41314:	df000417 	ldw	fp,16(sp)
   41318:	dcc00317 	ldw	r19,12(sp)
   4131c:	dc800217 	ldw	r18,8(sp)
   41320:	dc400117 	ldw	r17,4(sp)
   41324:	dc000017 	ldw	r16,0(sp)
   41328:	dec00604 	addi	sp,sp,24
   4132c:	f800283a 	ret

00041330 <calc_order>:

int calc_order(UnlimitedSamplerReconstructor *recon) {
   41330:	defff704 	addi	sp,sp,-36
   41334:	dfc00815 	stw	ra,32(sp)
   41338:	df000715 	stw	fp,28(sp)
   4133c:	dc400615 	stw	r17,24(sp)
   41340:	dc000515 	stw	r16,20(sp)
   41344:	df000704 	addi	fp,sp,28
   41348:	e13ffd15 	stw	r4,-12(fp)
	float denominator = recon->sampling_interval * M_PI * M_E;
   4134c:	e0bffd17 	ldw	r2,-12(fp)
   41350:	10c0d217 	ldw	r3,840(r2)
   41354:	1809883a 	mov	r4,r3
   41358:	0046c9c0 	call	46c9c <__extendsfdf2>
   4135c:	1011883a 	mov	r8,r2
   41360:	1813883a 	mov	r9,r3
   41364:	01951134 	movhi	r6,21572
   41368:	318b4604 	addi	r6,r6,11544
   4136c:	01d00274 	movhi	r7,16393
   41370:	39c87ec4 	addi	r7,r7,8699
   41374:	4009883a 	mov	r4,r8
   41378:	480b883a 	mov	r5,r9
   4137c:	0045b2c0 	call	45b2c <__muldf3>
   41380:	1009883a 	mov	r4,r2
   41384:	180b883a 	mov	r5,r3
   41388:	2005883a 	mov	r2,r4
   4138c:	2807883a 	mov	r3,r5
   41390:	01a2c534 	movhi	r6,35604
   41394:	3195da44 	addi	r6,r6,22377
   41398:	01d001b4 	movhi	r7,16390
   4139c:	39efc284 	addi	r7,r7,-16630
   413a0:	1009883a 	mov	r4,r2
   413a4:	180b883a 	mov	r5,r3
   413a8:	0045b2c0 	call	45b2c <__muldf3>
   413ac:	1009883a 	mov	r4,r2
   413b0:	180b883a 	mov	r5,r3
   413b4:	2005883a 	mov	r2,r4
   413b8:	2807883a 	mov	r3,r5
   413bc:	1009883a 	mov	r4,r2
   413c0:	180b883a 	mov	r5,r3
   413c4:	0046dac0 	call	46dac <__truncdfsf2>
   413c8:	1007883a 	mov	r3,r2
   413cc:	e0fffa15 	stw	r3,-24(fp)

    if (recon->lam <= 0 || recon->max_in <= 0 || denominator <= 0) {
   413d0:	e0bffd17 	ldw	r2,-12(fp)
   413d4:	10c00017 	ldw	r3,0(r2)
   413d8:	000b883a 	mov	r5,zero
   413dc:	1809883a 	mov	r4,r3
   413e0:	0043cf80 	call	43cf8 <__lesf2>
   413e4:	00800a0e 	bge	zero,r2,41410 <calc_order+0xe0>
   413e8:	e0bffd17 	ldw	r2,-12(fp)
   413ec:	10c00417 	ldw	r3,16(r2)
   413f0:	000b883a 	mov	r5,zero
   413f4:	1809883a 	mov	r4,r3
   413f8:	0043cf80 	call	43cf8 <__lesf2>
   413fc:	0080040e 	bge	zero,r2,41410 <calc_order+0xe0>
   41400:	000b883a 	mov	r5,zero
   41404:	e13ffa17 	ldw	r4,-24(fp)
   41408:	0043cf80 	call	43cf8 <__lesf2>
   4140c:	00800216 	blt	zero,r2,41418 <calc_order+0xe8>
        // Handle invalid input
        return 1;  // or any other error signal
   41410:	00800044 	movi	r2,1
   41414:	00004c06 	br	41548 <calc_order+0x218>
    }

    float ratio = log(recon->lam) - log(recon->max_in);
   41418:	e0bffd17 	ldw	r2,-12(fp)
   4141c:	10c00017 	ldw	r3,0(r2)
   41420:	1809883a 	mov	r4,r3
   41424:	0046c9c0 	call	46c9c <__extendsfdf2>
   41428:	100b883a 	mov	r5,r2
   4142c:	180d883a 	mov	r6,r3
   41430:	2809883a 	mov	r4,r5
   41434:	300b883a 	mov	r5,r6
   41438:	00424a00 	call	424a0 <log>
   4143c:	1021883a 	mov	r16,r2
   41440:	1823883a 	mov	r17,r3
   41444:	e0bffd17 	ldw	r2,-12(fp)
   41448:	10c00417 	ldw	r3,16(r2)
   4144c:	1809883a 	mov	r4,r3
   41450:	0046c9c0 	call	46c9c <__extendsfdf2>
   41454:	100b883a 	mov	r5,r2
   41458:	180d883a 	mov	r6,r3
   4145c:	2809883a 	mov	r4,r5
   41460:	300b883a 	mov	r5,r6
   41464:	00424a00 	call	424a0 <log>
   41468:	1009883a 	mov	r4,r2
   4146c:	180b883a 	mov	r5,r3
   41470:	200d883a 	mov	r6,r4
   41474:	280f883a 	mov	r7,r5
   41478:	8009883a 	mov	r4,r16
   4147c:	880b883a 	mov	r5,r17
   41480:	00462440 	call	46244 <__subdf3>
   41484:	1009883a 	mov	r4,r2
   41488:	180b883a 	mov	r5,r3
   4148c:	2005883a 	mov	r2,r4
   41490:	2807883a 	mov	r3,r5
   41494:	1009883a 	mov	r4,r2
   41498:	180b883a 	mov	r5,r3
   4149c:	0046dac0 	call	46dac <__truncdfsf2>
   414a0:	1007883a 	mov	r3,r2
   414a4:	e0fffb15 	stw	r3,-20(fp)
    float denom_log = log(denominator);
   414a8:	e13ffa17 	ldw	r4,-24(fp)
   414ac:	0046c9c0 	call	46c9c <__extendsfdf2>
   414b0:	100b883a 	mov	r5,r2
   414b4:	180d883a 	mov	r6,r3
   414b8:	2809883a 	mov	r4,r5
   414bc:	300b883a 	mov	r5,r6
   414c0:	00424a00 	call	424a0 <log>
   414c4:	100b883a 	mov	r5,r2
   414c8:	180d883a 	mov	r6,r3
   414cc:	2809883a 	mov	r4,r5
   414d0:	300b883a 	mov	r5,r6
   414d4:	0046dac0 	call	46dac <__truncdfsf2>
   414d8:	1007883a 	mov	r3,r2
   414dc:	e0fffc15 	stw	r3,-16(fp)
    int N = (int)ceil(ratio / denom_log);
   414e0:	e17ffc17 	ldw	r5,-16(fp)
   414e4:	e13ffb17 	ldw	r4,-20(fp)
   414e8:	00437fc0 	call	437fc <__divsf3>
   414ec:	1007883a 	mov	r3,r2
   414f0:	1805883a 	mov	r2,r3
   414f4:	1009883a 	mov	r4,r2
   414f8:	0046c9c0 	call	46c9c <__extendsfdf2>
   414fc:	100b883a 	mov	r5,r2
   41500:	180d883a 	mov	r6,r3
   41504:	2809883a 	mov	r4,r5
   41508:	300b883a 	mov	r5,r6
   4150c:	0041fe40 	call	41fe4 <ceil>
   41510:	100b883a 	mov	r5,r2
   41514:	180d883a 	mov	r6,r3
   41518:	2809883a 	mov	r4,r5
   4151c:	300b883a 	mov	r5,r6
   41520:	0046b400 	call	46b40 <__fixdfsi>
   41524:	e0bff915 	stw	r2,-28(fp)
//    return N;
    if (N> MAX_ORDER){
   41528:	e0bff917 	ldw	r2,-28(fp)
   4152c:	10801950 	cmplti	r2,r2,101
   41530:	1000021e 	bne	r2,zero,4153c <calc_order+0x20c>
    	N=MAX_ORDER;
   41534:	00801904 	movi	r2,100
   41538:	e0bff915 	stw	r2,-28(fp)
    }
    return N > 1 ? N : 1;
   4153c:	e0bff917 	ldw	r2,-28(fp)
   41540:	00800116 	blt	zero,r2,41548 <calc_order+0x218>
   41544:	00800044 	movi	r2,1
}
   41548:	e6fffe04 	addi	sp,fp,-8
   4154c:	dfc00317 	ldw	ra,12(sp)
   41550:	df000217 	ldw	fp,8(sp)
   41554:	dc400117 	ldw	r17,4(sp)
   41558:	dc000017 	ldw	r16,0(sp)
   4155c:	dec00404 	addi	sp,sp,16
   41560:	f800283a 	ret

00041564 <modulo>:
/* Centered modulo function into [-λ, λ) */
float modulo(float x, float lam) {
   41564:	defff804 	addi	sp,sp,-32
   41568:	dfc00715 	stw	ra,28(sp)
   4156c:	df000615 	stw	fp,24(sp)
   41570:	dc400515 	stw	r17,20(sp)
   41574:	dc000415 	stw	r16,16(sp)
   41578:	df000604 	addi	fp,sp,24
   4157c:	e13ffc15 	stw	r4,-16(fp)
   41580:	e17ffd15 	stw	r5,-12(fp)
    float two_lam = 2.0 * lam;
   41584:	e0bffd17 	ldw	r2,-12(fp)
   41588:	100b883a 	mov	r5,r2
   4158c:	1009883a 	mov	r4,r2
   41590:	00433340 	call	43334 <__addsf3>
   41594:	1007883a 	mov	r3,r2
   41598:	e0fffb15 	stw	r3,-20(fp)
    float mod = fmod(x + lam, two_lam);
   4159c:	e17ffd17 	ldw	r5,-12(fp)
   415a0:	e13ffc17 	ldw	r4,-16(fp)
   415a4:	00433340 	call	43334 <__addsf3>
   415a8:	1007883a 	mov	r3,r2
   415ac:	1805883a 	mov	r2,r3
   415b0:	1009883a 	mov	r4,r2
   415b4:	0046c9c0 	call	46c9c <__extendsfdf2>
   415b8:	1021883a 	mov	r16,r2
   415bc:	1823883a 	mov	r17,r3
   415c0:	e13ffb17 	ldw	r4,-20(fp)
   415c4:	0046c9c0 	call	46c9c <__extendsfdf2>
   415c8:	1009883a 	mov	r4,r2
   415cc:	180b883a 	mov	r5,r3
   415d0:	200d883a 	mov	r6,r4
   415d4:	280f883a 	mov	r7,r5
   415d8:	8009883a 	mov	r4,r16
   415dc:	880b883a 	mov	r5,r17
   415e0:	00423480 	call	42348 <fmod>
   415e4:	100b883a 	mov	r5,r2
   415e8:	180d883a 	mov	r6,r3
   415ec:	2809883a 	mov	r4,r5
   415f0:	300b883a 	mov	r5,r6
   415f4:	0046dac0 	call	46dac <__truncdfsf2>
   415f8:	1007883a 	mov	r3,r2
   415fc:	e0fffa15 	stw	r3,-24(fp)
    if (mod < 0) mod += two_lam;
   41600:	000b883a 	mov	r5,zero
   41604:	e13ffa17 	ldw	r4,-24(fp)
   41608:	0043cf80 	call	43cf8 <__lesf2>
   4160c:	1000050e 	bge	r2,zero,41624 <modulo+0xc0>
   41610:	e17ffb17 	ldw	r5,-20(fp)
   41614:	e13ffa17 	ldw	r4,-24(fp)
   41618:	00433340 	call	43334 <__addsf3>
   4161c:	1007883a 	mov	r3,r2
   41620:	e0fffa15 	stw	r3,-24(fp)
    return mod - lam;
   41624:	e17ffd17 	ldw	r5,-12(fp)
   41628:	e13ffa17 	ldw	r4,-24(fp)
   4162c:	00441bc0 	call	441bc <__subsf3>
   41630:	1009883a 	mov	r4,r2
   41634:	2007883a 	mov	r3,r4
   41638:	1805883a 	mov	r2,r3
}
   4163c:	e6fffe04 	addi	sp,fp,-8
   41640:	dfc00317 	ldw	ra,12(sp)
   41644:	df000217 	ldw	fp,8(sp)
   41648:	dc400117 	ldw	r17,4(sp)
   4164c:	dc000017 	ldw	r16,0(sp)
   41650:	dec00404 	addi	sp,sp,16
   41654:	f800283a 	ret

00041658 <center_to_2lam>:
float center_to_2lam(float x, float lam) {
   41658:	defffb04 	addi	sp,sp,-20
   4165c:	dfc00415 	stw	ra,16(sp)
   41660:	df000315 	stw	fp,12(sp)
   41664:	dc000215 	stw	r16,8(sp)
   41668:	df000304 	addi	fp,sp,12
   4166c:	e13ffd15 	stw	r4,-12(fp)
   41670:	e17ffe15 	stw	r5,-8(fp)
    return 2.0f * lam * roundf(x / (2.0f * lam));
   41674:	e0bffe17 	ldw	r2,-8(fp)
   41678:	100b883a 	mov	r5,r2
   4167c:	1009883a 	mov	r4,r2
   41680:	00433340 	call	43334 <__addsf3>
   41684:	1007883a 	mov	r3,r2
   41688:	1821883a 	mov	r16,r3
   4168c:	e0bffe17 	ldw	r2,-8(fp)
   41690:	100b883a 	mov	r5,r2
   41694:	1009883a 	mov	r4,r2
   41698:	00433340 	call	43334 <__addsf3>
   4169c:	1007883a 	mov	r3,r2
   416a0:	1805883a 	mov	r2,r3
   416a4:	100b883a 	mov	r5,r2
   416a8:	e13ffd17 	ldw	r4,-12(fp)
   416ac:	00437fc0 	call	437fc <__divsf3>
   416b0:	1007883a 	mov	r3,r2
   416b4:	1805883a 	mov	r2,r3
   416b8:	1009883a 	mov	r4,r2
   416bc:	00422c40 	call	422c4 <roundf>
   416c0:	1007883a 	mov	r3,r2
   416c4:	180b883a 	mov	r5,r3
   416c8:	8009883a 	mov	r4,r16
   416cc:	0043dc00 	call	43dc0 <__mulsf3>
   416d0:	1009883a 	mov	r4,r2
   416d4:	2007883a 	mov	r3,r4
   416d8:	1805883a 	mov	r2,r3
}
   416dc:	e6ffff04 	addi	sp,fp,-4
   416e0:	dfc00217 	ldw	ra,8(sp)
   416e4:	df000117 	ldw	fp,4(sp)
   416e8:	dc000017 	ldw	r16,0(sp)
   416ec:	dec00304 	addi	sp,sp,12
   416f0:	f800283a 	ret

000416f4 <update>:

float update(UnlimitedSamplerReconstructor *recon, int order, float yk,MovingAverage *ma1,MovingAverage *ma2,MovingAverage *ma3) {
   416f4:	defff204 	addi	sp,sp,-56
   416f8:	dfc00d15 	stw	ra,52(sp)
   416fc:	df000c15 	stw	fp,48(sp)
   41700:	dc400b15 	stw	r17,44(sp)
   41704:	dc000a15 	stw	r16,40(sp)
   41708:	df000c04 	addi	fp,sp,48
   4170c:	e13ffa15 	stw	r4,-24(fp)
   41710:	e17ffb15 	stw	r5,-20(fp)
   41714:	e1bffc15 	stw	r6,-16(fp)
   41718:	e1fffd15 	stw	r7,-12(fp)
	if (yk> recon->max_in){
   4171c:	e0bffa17 	ldw	r2,-24(fp)
   41720:	10c00417 	ldw	r3,16(r2)
   41724:	e17ffc17 	ldw	r5,-16(fp)
   41728:	1809883a 	mov	r4,r3
   4172c:	0043cf80 	call	43cf8 <__lesf2>
   41730:	10002f0e 	bge	r2,zero,417f0 <update+0xfc>
		recon->max_in=(2*recon->lam)*round(yk/(2*recon->lam));
   41734:	e0fffa17 	ldw	r3,-24(fp)
   41738:	18800017 	ldw	r2,0(r3)
   4173c:	100b883a 	mov	r5,r2
   41740:	1009883a 	mov	r4,r2
   41744:	00433340 	call	43334 <__addsf3>
   41748:	1007883a 	mov	r3,r2
   4174c:	1805883a 	mov	r2,r3
   41750:	1009883a 	mov	r4,r2
   41754:	0046c9c0 	call	46c9c <__extendsfdf2>
   41758:	1021883a 	mov	r16,r2
   4175c:	1823883a 	mov	r17,r3
   41760:	e0fffa17 	ldw	r3,-24(fp)
   41764:	18800017 	ldw	r2,0(r3)
   41768:	100b883a 	mov	r5,r2
   4176c:	1009883a 	mov	r4,r2
   41770:	00433340 	call	43334 <__addsf3>
   41774:	1007883a 	mov	r3,r2
   41778:	1805883a 	mov	r2,r3
   4177c:	100b883a 	mov	r5,r2
   41780:	e13ffc17 	ldw	r4,-16(fp)
   41784:	00437fc0 	call	437fc <__divsf3>
   41788:	1007883a 	mov	r3,r2
   4178c:	1805883a 	mov	r2,r3
   41790:	1009883a 	mov	r4,r2
   41794:	0046c9c0 	call	46c9c <__extendsfdf2>
   41798:	100b883a 	mov	r5,r2
   4179c:	180d883a 	mov	r6,r3
   417a0:	2809883a 	mov	r4,r5
   417a4:	300b883a 	mov	r5,r6
   417a8:	00421c40 	call	421c4 <round>
   417ac:	1009883a 	mov	r4,r2
   417b0:	180b883a 	mov	r5,r3
   417b4:	200d883a 	mov	r6,r4
   417b8:	280f883a 	mov	r7,r5
   417bc:	8009883a 	mov	r4,r16
   417c0:	880b883a 	mov	r5,r17
   417c4:	0045b2c0 	call	45b2c <__muldf3>
   417c8:	1009883a 	mov	r4,r2
   417cc:	180b883a 	mov	r5,r3
   417d0:	2005883a 	mov	r2,r4
   417d4:	2807883a 	mov	r3,r5
   417d8:	1009883a 	mov	r4,r2
   417dc:	180b883a 	mov	r5,r3
   417e0:	0046dac0 	call	46dac <__truncdfsf2>
   417e4:	1007883a 	mov	r3,r2
   417e8:	e0bffa17 	ldw	r2,-24(fp)
   417ec:	10c00415 	stw	r3,16(r2)
//		printf("new largest= %f \n",recon->max_in);
//		recon->order = calc_order(recon);
//		printf("new order= %d \n",recon->order);

	}
	recon->order =order;
   417f0:	e0bffa17 	ldw	r2,-24(fp)
   417f4:	e0fffb17 	ldw	r3,-20(fp)
   417f8:	10c00515 	stw	r3,20(r2)

    float dy= nth_order_difference(yk,recon);
   417fc:	e17ffa17 	ldw	r5,-24(fp)
   41800:	e13ffc17 	ldw	r4,-16(fp)
   41804:	004065c0 	call	4065c <nth_order_difference>
   41808:	e0bff515 	stw	r2,-44(fp)

    // Step 2: Apply modulo to Δy[k]
    float mod_dy = modulo(dy, recon->lam);
   4180c:	e0bffa17 	ldw	r2,-24(fp)
   41810:	10c00017 	ldw	r3,0(r2)
   41814:	180b883a 	mov	r5,r3
   41818:	e13ff517 	ldw	r4,-44(fp)
   4181c:	00415640 	call	41564 <modulo>
   41820:	e0bff615 	stw	r2,-40(fp)

    // Step 3: Compute Δε[k]
    float delta_eps = mod_dy - dy;
   41824:	e17ff517 	ldw	r5,-44(fp)
   41828:	e13ff617 	ldw	r4,-40(fp)
   4182c:	00441bc0 	call	441bc <__subsf3>
   41830:	1007883a 	mov	r3,r2
   41834:	e0fff715 	stw	r3,-36(fp)
    // Step 4: Update ε[k], round to nearest 2λ

    // use this function if you want no filters, or
//    recon->prev_eps =anti_diff_nth(delta_eps,recon);

    if (recon->order ==2){
   41838:	e0bffa17 	ldw	r2,-24(fp)
   4183c:	10800517 	ldw	r2,20(r2)
   41840:	10800098 	cmpnei	r2,r2,2
   41844:	10000b1e 	bne	r2,zero,41874 <update+0x180>
    	recon->prev_eps =anti_diff_2nd(delta_eps,recon,ma1,ma2,ma3);
   41848:	e0800317 	ldw	r2,12(fp)
   4184c:	d8800015 	stw	r2,0(sp)
   41850:	e1c00217 	ldw	r7,8(fp)
   41854:	e1bffd17 	ldw	r6,-12(fp)
   41858:	e17ffa17 	ldw	r5,-24(fp)
   4185c:	e13ff717 	ldw	r4,-36(fp)
   41860:	0040e240 	call	40e24 <anti_diff_2nd>
   41864:	1007883a 	mov	r3,r2
   41868:	e0bffa17 	ldw	r2,-24(fp)
   4186c:	10c00215 	stw	r3,8(r2)
   41870:	00002106 	br	418f8 <update+0x204>
    }
    else if (recon->order ==1){
   41874:	e0bffa17 	ldw	r2,-24(fp)
   41878:	10800517 	ldw	r2,20(r2)
   4187c:	10800058 	cmpnei	r2,r2,1
   41880:	10000b1e 	bne	r2,zero,418b0 <update+0x1bc>
    	recon->prev_eps =anti_diff_1st(delta_eps,recon,ma1,ma2,ma3);
   41884:	e0800317 	ldw	r2,12(fp)
   41888:	d8800015 	stw	r2,0(sp)
   4188c:	e1c00217 	ldw	r7,8(fp)
   41890:	e1bffd17 	ldw	r6,-12(fp)
   41894:	e17ffa17 	ldw	r5,-24(fp)
   41898:	e13ff717 	ldw	r4,-36(fp)
   4189c:	004114c0 	call	4114c <anti_diff_1st>
   418a0:	1007883a 	mov	r3,r2
   418a4:	e0bffa17 	ldw	r2,-24(fp)
   418a8:	10c00215 	stw	r3,8(r2)
   418ac:	00001206 	br	418f8 <update+0x204>
    }
    else if (recon->order ==3){
   418b0:	e0bffa17 	ldw	r2,-24(fp)
   418b4:	10800517 	ldw	r2,20(r2)
   418b8:	108000d8 	cmpnei	r2,r2,3
   418bc:	10000b1e 	bne	r2,zero,418ec <update+0x1f8>
    	recon->prev_eps =anti_diff_3rd(delta_eps,recon,ma1,ma2,ma3);
   418c0:	e0800317 	ldw	r2,12(fp)
   418c4:	d8800015 	stw	r2,0(sp)
   418c8:	e1c00217 	ldw	r7,8(fp)
   418cc:	e1bffd17 	ldw	r6,-12(fp)
   418d0:	e17ffa17 	ldw	r5,-24(fp)
   418d4:	e13ff717 	ldw	r4,-36(fp)
   418d8:	00409b80 	call	409b8 <anti_diff_3rd>
   418dc:	1007883a 	mov	r3,r2
   418e0:	e0bffa17 	ldw	r2,-24(fp)
   418e4:	10c00215 	stw	r3,8(r2)
   418e8:	00000306 	br	418f8 <update+0x204>
    }
    else {
    	printf("order not implemented");
   418ec:	01000174 	movhi	r4,5
   418f0:	2116b604 	addi	r4,r4,23256
   418f4:	0046ff80 	call	46ff8 <printf>

    }


    float eps_k=recon->prev_eps;
   418f8:	e0bffa17 	ldw	r2,-24(fp)
   418fc:	10800217 	ldw	r2,8(r2)
   41900:	e0bff815 	stw	r2,-32(fp)

    // Step 5: Recover g[k]
    float gk = yk + eps_k;
   41904:	e17ff817 	ldw	r5,-32(fp)
   41908:	e13ffc17 	ldw	r4,-16(fp)
   4190c:	00433340 	call	43334 <__addsf3>
   41910:	1007883a 	mov	r3,r2
   41914:	e0fff915 	stw	r3,-28(fp)
//    printf("reconstructed val%f.\n", gk);

    // Update state
    recon->prev_y = yk;
   41918:	e0bffa17 	ldw	r2,-24(fp)
   4191c:	e0fffc17 	ldw	r3,-16(fp)
   41920:	10c00115 	stw	r3,4(r2)


//    return eps_k;
    return gk;
   41924:	e0bff917 	ldw	r2,-28(fp)
   41928:	1007883a 	mov	r3,r2

}
   4192c:	1805883a 	mov	r2,r3
   41930:	e6fffe04 	addi	sp,fp,-8
   41934:	dfc00317 	ldw	ra,12(sp)
   41938:	df000217 	ldw	fp,8(sp)
   4193c:	dc400117 	ldw	r17,4(sp)
   41940:	dc000017 	ldw	r16,0(sp)
   41944:	dec00404 	addi	sp,sp,16
   41948:	f800283a 	ret

0004194c <convert_adc_to_signal>:
/* Initialize the moving average filter */

/* Update the moving average with a new sample */


float convert_adc_to_signal(int adc_value, int ADC_MAX_VALUE, float V_REF, float OFFSET_VOLTAGE) {
   4194c:	defff704 	addi	sp,sp,-36
   41950:	dfc00815 	stw	ra,32(sp)
   41954:	df000715 	stw	fp,28(sp)
   41958:	dc000615 	stw	r16,24(sp)
   4195c:	df000704 	addi	fp,sp,28
   41960:	e13ffb15 	stw	r4,-20(fp)
   41964:	e17ffc15 	stw	r5,-16(fp)
   41968:	e1bffd15 	stw	r6,-12(fp)
   4196c:	e1fffe15 	stw	r7,-8(fp)
    // Calculate the input voltage
    float input_voltage = (adc_value / (float)ADC_MAX_VALUE) * V_REF;
   41970:	e13ffb17 	ldw	r4,-20(fp)
   41974:	00447100 	call	44710 <__floatsisf>
   41978:	1021883a 	mov	r16,r2
   4197c:	e13ffc17 	ldw	r4,-16(fp)
   41980:	00447100 	call	44710 <__floatsisf>
   41984:	1007883a 	mov	r3,r2
   41988:	180b883a 	mov	r5,r3
   4198c:	8009883a 	mov	r4,r16
   41990:	00437fc0 	call	437fc <__divsf3>
   41994:	1007883a 	mov	r3,r2
   41998:	1805883a 	mov	r2,r3
   4199c:	e17ffd17 	ldw	r5,-12(fp)
   419a0:	1009883a 	mov	r4,r2
   419a4:	0043dc00 	call	43dc0 <__mulsf3>
   419a8:	1007883a 	mov	r3,r2
   419ac:	e0fff915 	stw	r3,-28(fp)

    // Subtract the offset to get the original signal value
    float signal_value = input_voltage - OFFSET_VOLTAGE;
   419b0:	e17ffe17 	ldw	r5,-8(fp)
   419b4:	e13ff917 	ldw	r4,-28(fp)
   419b8:	00441bc0 	call	441bc <__subsf3>
   419bc:	1007883a 	mov	r3,r2
   419c0:	e0fffa15 	stw	r3,-24(fp)

    return signal_value;
   419c4:	e0bffa17 	ldw	r2,-24(fp)
   419c8:	1007883a 	mov	r3,r2
}
   419cc:	1805883a 	mov	r2,r3
   419d0:	e6ffff04 	addi	sp,fp,-4
   419d4:	dfc00217 	ldw	ra,8(sp)
   419d8:	df000117 	ldw	fp,4(sp)
   419dc:	dc000017 	ldw	r16,0(sp)
   419e0:	dec00304 	addi	sp,sp,12
   419e4:	f800283a 	ret

000419e8 <float_to_dac>:


uint8_t float_to_dac(float signal_value, int DAC_MAX_VALUE, float V_REF, float OFFSET) {
   419e8:	defff704 	addi	sp,sp,-36
   419ec:	dfc00815 	stw	ra,32(sp)
   419f0:	df000715 	stw	fp,28(sp)
   419f4:	dc000615 	stw	r16,24(sp)
   419f8:	df000704 	addi	fp,sp,28
   419fc:	e13ffb15 	stw	r4,-20(fp)
   41a00:	e17ffc15 	stw	r5,-16(fp)
   41a04:	e1bffd15 	stw	r6,-12(fp)
   41a08:	e1fffe15 	stw	r7,-8(fp)
    float dac_voltage;
    uint8_t dac_value;

    // Apply offset
    dac_voltage = signal_value + OFFSET;
   41a0c:	e17ffe17 	ldw	r5,-8(fp)
   41a10:	e13ffb17 	ldw	r4,-20(fp)
   41a14:	00433340 	call	43334 <__addsf3>
   41a18:	1007883a 	mov	r3,r2
   41a1c:	e0fff915 	stw	r3,-28(fp)

    // Clamp to DAC range (0V to 5V)
    if (dac_voltage < 0.0f) {
   41a20:	000b883a 	mov	r5,zero
   41a24:	e13ff917 	ldw	r4,-28(fp)
   41a28:	0043cf80 	call	43cf8 <__lesf2>
   41a2c:	1000020e 	bge	r2,zero,41a38 <float_to_dac+0x50>
        dac_voltage = 0.0f;
   41a30:	e03ff915 	stw	zero,-28(fp)
   41a34:	00000606 	br	41a50 <float_to_dac+0x68>
    } else if (dac_voltage > V_REF) {
   41a38:	e17ffd17 	ldw	r5,-12(fp)
   41a3c:	e13ff917 	ldw	r4,-28(fp)
   41a40:	0043c3c0 	call	43c3c <__gesf2>
   41a44:	0080020e 	bge	zero,r2,41a50 <float_to_dac+0x68>
        dac_voltage = V_REF;
   41a48:	e0bffd17 	ldw	r2,-12(fp)
   41a4c:	e0bff915 	stw	r2,-28(fp)
    }

    // Convert to DAC value
    dac_value = (uint8_t)((dac_voltage / V_REF) * DAC_MAX_VALUE);
   41a50:	e17ffd17 	ldw	r5,-12(fp)
   41a54:	e13ff917 	ldw	r4,-28(fp)
   41a58:	00437fc0 	call	437fc <__divsf3>
   41a5c:	1007883a 	mov	r3,r2
   41a60:	1821883a 	mov	r16,r3
   41a64:	e13ffc17 	ldw	r4,-16(fp)
   41a68:	00447100 	call	44710 <__floatsisf>
   41a6c:	1007883a 	mov	r3,r2
   41a70:	180b883a 	mov	r5,r3
   41a74:	8009883a 	mov	r4,r16
   41a78:	0043dc00 	call	43dc0 <__mulsf3>
   41a7c:	1007883a 	mov	r3,r2
   41a80:	1805883a 	mov	r2,r3
   41a84:	1009883a 	mov	r4,r2
   41a88:	00431200 	call	43120 <__fixunssfsi>
   41a8c:	e0bffa05 	stb	r2,-24(fp)

    return dac_value;
   41a90:	e0bffa03 	ldbu	r2,-24(fp)
}
   41a94:	e6ffff04 	addi	sp,fp,-4
   41a98:	dfc00217 	ldw	ra,8(sp)
   41a9c:	df000117 	ldw	fp,4(sp)
   41aa0:	dc000017 	ldw	r16,0(sp)
   41aa4:	dec00304 	addi	sp,sp,12
   41aa8:	f800283a 	ret

00041aac <send_to_PCF>:





int send_to_PCF(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 dac_value) {
   41aac:	defffa04 	addi	sp,sp,-24
   41ab0:	dfc00515 	stw	ra,20(sp)
   41ab4:	df000415 	stw	fp,16(sp)
   41ab8:	df000404 	addi	fp,sp,16
   41abc:	e13ffe15 	stw	r4,-8(fp)
   41ac0:	2805883a 	mov	r2,r5
   41ac4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 txbuffer[2];  // Buffer to hold data to send
    ALT_AVALON_I2C_STATUS_CODE status;

    // Prepare the control byte and DAC data
    txbuffer[0] = 0x40;     // Control byte: Enable DAC
   41ac8:	00801004 	movi	r2,64
   41acc:	e0bffd05 	stb	r2,-12(fp)
    txbuffer[1] = dac_value; // Data byte: Value to set DAC output
   41ad0:	e0bfff03 	ldbu	r2,-4(fp)
   41ad4:	e0bffd45 	stb	r2,-11(fp)

    // Write the data to the DAC
    status = alt_avalon_i2c_master_tx(i2c_dev, txbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
   41ad8:	e0bffd04 	addi	r2,fp,-12
   41adc:	000f883a 	mov	r7,zero
   41ae0:	01800084 	movi	r6,2
   41ae4:	100b883a 	mov	r5,r2
   41ae8:	e13ffe17 	ldw	r4,-8(fp)
   41aec:	00529200 	call	52920 <alt_avalon_i2c_master_tx>
   41af0:	e0bffc15 	stw	r2,-16(fp)
    if (status != ALT_AVALON_I2C_SUCCESS) {
   41af4:	e0bffc17 	ldw	r2,-16(fp)
   41af8:	10000626 	beq	r2,zero,41b14 <send_to_PCF+0x68>
        printf("Error: I2C write to DAC failed with status code: %d\n", status);
   41afc:	e17ffc17 	ldw	r5,-16(fp)
   41b00:	01000174 	movhi	r4,5
   41b04:	2116bc04 	addi	r4,r4,23280
   41b08:	0046ff80 	call	46ff8 <printf>
        return -1; // Return error
   41b0c:	00bfffc4 	movi	r2,-1
   41b10:	00000106 	br	41b18 <send_to_PCF+0x6c>
    }
   // printf("inhere");
    return 0; // Success
   41b14:	0005883a 	mov	r2,zero
}
   41b18:	e037883a 	mov	sp,fp
   41b1c:	dfc00117 	ldw	ra,4(sp)
   41b20:	df000017 	ldw	fp,0(sp)
   41b24:	dec00204 	addi	sp,sp,8
   41b28:	f800283a 	ret

00041b2c <process_lowpass>:
//float alpha = 0.1f;  // Adjust based on desired cutoff
float fc = 5000.0f;
float fs = 10000.0f;


float process_lowpass(float x) {
   41b2c:	defff704 	addi	sp,sp,-36
   41b30:	dfc00815 	stw	ra,32(sp)
   41b34:	df000715 	stw	fp,28(sp)
   41b38:	dcc00615 	stw	r19,24(sp)
   41b3c:	dc800515 	stw	r18,20(sp)
   41b40:	dc400415 	stw	r17,16(sp)
   41b44:	dc000315 	stw	r16,12(sp)
   41b48:	df000704 	addi	fp,sp,28
   41b4c:	e13ffb15 	stw	r4,-20(fp)
	float alpha = (2.0f * M_PI * fc) / (fs + 2.0f * M_PI * fc);
   41b50:	d0a00017 	ldw	r2,-32768(gp)
   41b54:	1009883a 	mov	r4,r2
   41b58:	0046c9c0 	call	46c9c <__extendsfdf2>
   41b5c:	1011883a 	mov	r8,r2
   41b60:	1813883a 	mov	r9,r3
   41b64:	01951134 	movhi	r6,21572
   41b68:	318b4604 	addi	r6,r6,11544
   41b6c:	01d00674 	movhi	r7,16409
   41b70:	39c87ec4 	addi	r7,r7,8699
   41b74:	4009883a 	mov	r4,r8
   41b78:	480b883a 	mov	r5,r9
   41b7c:	0045b2c0 	call	45b2c <__muldf3>
   41b80:	1009883a 	mov	r4,r2
   41b84:	180b883a 	mov	r5,r3
   41b88:	2021883a 	mov	r16,r4
   41b8c:	2823883a 	mov	r17,r5
   41b90:	d0a00117 	ldw	r2,-32764(gp)
   41b94:	1009883a 	mov	r4,r2
   41b98:	0046c9c0 	call	46c9c <__extendsfdf2>
   41b9c:	1025883a 	mov	r18,r2
   41ba0:	1827883a 	mov	r19,r3
   41ba4:	d0a00017 	ldw	r2,-32768(gp)
   41ba8:	1009883a 	mov	r4,r2
   41bac:	0046c9c0 	call	46c9c <__extendsfdf2>
   41bb0:	1011883a 	mov	r8,r2
   41bb4:	1813883a 	mov	r9,r3
   41bb8:	01951134 	movhi	r6,21572
   41bbc:	318b4604 	addi	r6,r6,11544
   41bc0:	01d00674 	movhi	r7,16409
   41bc4:	39c87ec4 	addi	r7,r7,8699
   41bc8:	4009883a 	mov	r4,r8
   41bcc:	480b883a 	mov	r5,r9
   41bd0:	0045b2c0 	call	45b2c <__muldf3>
   41bd4:	1009883a 	mov	r4,r2
   41bd8:	180b883a 	mov	r5,r3
   41bdc:	2005883a 	mov	r2,r4
   41be0:	2807883a 	mov	r3,r5
   41be4:	100d883a 	mov	r6,r2
   41be8:	180f883a 	mov	r7,r3
   41bec:	9009883a 	mov	r4,r18
   41bf0:	980b883a 	mov	r5,r19
   41bf4:	00448340 	call	44834 <__adddf3>
   41bf8:	1009883a 	mov	r4,r2
   41bfc:	180b883a 	mov	r5,r3
   41c00:	2005883a 	mov	r2,r4
   41c04:	2807883a 	mov	r3,r5
   41c08:	100d883a 	mov	r6,r2
   41c0c:	180f883a 	mov	r7,r3
   41c10:	8009883a 	mov	r4,r16
   41c14:	880b883a 	mov	r5,r17
   41c18:	00450e00 	call	450e0 <__divdf3>
   41c1c:	1009883a 	mov	r4,r2
   41c20:	180b883a 	mov	r5,r3
   41c24:	2005883a 	mov	r2,r4
   41c28:	2807883a 	mov	r3,r5
   41c2c:	1009883a 	mov	r4,r2
   41c30:	180b883a 	mov	r5,r3
   41c34:	0046dac0 	call	46dac <__truncdfsf2>
   41c38:	1007883a 	mov	r3,r2
   41c3c:	e0fff915 	stw	r3,-28(fp)
    float y = alpha * x + (1.0f - alpha) * y_prev;
   41c40:	e17ffb17 	ldw	r5,-20(fp)
   41c44:	e13ff917 	ldw	r4,-28(fp)
   41c48:	0043dc00 	call	43dc0 <__mulsf3>
   41c4c:	1007883a 	mov	r3,r2
   41c50:	1821883a 	mov	r16,r3
   41c54:	e17ff917 	ldw	r5,-28(fp)
   41c58:	010fe034 	movhi	r4,16256
   41c5c:	00441bc0 	call	441bc <__subsf3>
   41c60:	1009883a 	mov	r4,r2
   41c64:	2007883a 	mov	r3,r4
   41c68:	d0a6e517 	ldw	r2,-25708(gp)
   41c6c:	100b883a 	mov	r5,r2
   41c70:	1809883a 	mov	r4,r3
   41c74:	0043dc00 	call	43dc0 <__mulsf3>
   41c78:	1007883a 	mov	r3,r2
   41c7c:	1805883a 	mov	r2,r3
   41c80:	100b883a 	mov	r5,r2
   41c84:	8009883a 	mov	r4,r16
   41c88:	00433340 	call	43334 <__addsf3>
   41c8c:	1007883a 	mov	r3,r2
   41c90:	e0fffa15 	stw	r3,-24(fp)
    y_prev = y;
   41c94:	e0bffa17 	ldw	r2,-24(fp)
   41c98:	d0a6e515 	stw	r2,-25708(gp)
    return y;
   41c9c:	e0bffa17 	ldw	r2,-24(fp)
   41ca0:	1007883a 	mov	r3,r2
}
   41ca4:	1805883a 	mov	r2,r3
   41ca8:	e6fffc04 	addi	sp,fp,-16
   41cac:	dfc00517 	ldw	ra,20(sp)
   41cb0:	df000417 	ldw	fp,16(sp)
   41cb4:	dcc00317 	ldw	r19,12(sp)
   41cb8:	dc800217 	ldw	r18,8(sp)
   41cbc:	dc400117 	ldw	r17,4(sp)
   41cc0:	dc000017 	ldw	r16,0(sp)
   41cc4:	dec00604 	addi	sp,sp,24
   41cc8:	f800283a 	ret

00041ccc <top>:
float a=0.1; // the top scale factor

int top(int adc_value,int order, UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2,MovingAverage *ma3  ){
   41ccc:	defff504 	addi	sp,sp,-44
   41cd0:	dfc00a15 	stw	ra,40(sp)
   41cd4:	df000915 	stw	fp,36(sp)
   41cd8:	df000904 	addi	fp,sp,36
   41cdc:	e13ffc15 	stw	r4,-16(fp)
   41ce0:	e17ffd15 	stw	r5,-12(fp)
   41ce4:	e1bffe15 	stw	r6,-8(fp)
   41ce8:	e1ffff15 	stw	r7,-4(fp)

	float signal_in=convert_adc_to_signal(adc_value,4095,4.096,0);
   41cec:	000f883a 	mov	r7,zero
   41cf0:	019020f4 	movhi	r6,16515
   41cf4:	31849bc4 	addi	r6,r6,4719
   41cf8:	0143ffc4 	movi	r5,4095
   41cfc:	e13ffc17 	ldw	r4,-16(fp)
   41d00:	004194c0 	call	4194c <convert_adc_to_signal>
   41d04:	e0bff915 	stw	r2,-28(fp)
	float reconstructed_val=update(recon,order, signal_in,ma1,ma2,ma3)*a;
   41d08:	e0800317 	ldw	r2,12(fp)
   41d0c:	d8800115 	stw	r2,4(sp)
   41d10:	e0800217 	ldw	r2,8(fp)
   41d14:	d8800015 	stw	r2,0(sp)
   41d18:	e1ffff17 	ldw	r7,-4(fp)
   41d1c:	e1bff917 	ldw	r6,-28(fp)
   41d20:	e17ffd17 	ldw	r5,-12(fp)
   41d24:	e13ffe17 	ldw	r4,-8(fp)
   41d28:	00416f40 	call	416f4 <update>
   41d2c:	1007883a 	mov	r3,r2
   41d30:	d0a00217 	ldw	r2,-32760(gp)
   41d34:	100b883a 	mov	r5,r2
   41d38:	1809883a 	mov	r4,r3
   41d3c:	0043dc00 	call	43dc0 <__mulsf3>
   41d40:	1007883a 	mov	r3,r2
   41d44:	e0fffa15 	stw	r3,-24(fp)
//	reconstructed_val=reconstructed_val-avg;
//	reconstructed_val=process_lowpass(reconstructed_val);
//	avg = updateMovingAverage(ma2, reconstructed_val);
//	int dac_out=float_to_dac(reconstructed_val-avg,255,5,1.5);

	int dac_out=float_to_dac(reconstructed_val,255,5,1.5);
   41d48:	01cff034 	movhi	r7,16320
   41d4c:	01902834 	movhi	r6,16544
   41d50:	01403fc4 	movi	r5,255
   41d54:	e13ffa17 	ldw	r4,-24(fp)
   41d58:	00419e80 	call	419e8 <float_to_dac>
   41d5c:	10803fcc 	andi	r2,r2,255
   41d60:	e0bffb15 	stw	r2,-20(fp)

	//int dac_out=float_to_dac(signal_in,255,5,1.5);

	return dac_out;
   41d64:	e0bffb17 	ldw	r2,-20(fp)
}
   41d68:	e037883a 	mov	sp,fp
   41d6c:	dfc00117 	ldw	ra,4(sp)
   41d70:	df000017 	ldw	fp,0(sp)
   41d74:	dec00204 	addi	sp,sp,8
   41d78:	f800283a 	ret

00041d7c <stream_adc_out>:
int stream_adc_out(int adc_value ){
   41d7c:	defffb04 	addi	sp,sp,-20
   41d80:	dfc00415 	stw	ra,16(sp)
   41d84:	df000315 	stw	fp,12(sp)
   41d88:	df000304 	addi	fp,sp,12
   41d8c:	e13fff15 	stw	r4,-4(fp)

	float signal_in=convert_adc_to_signal(adc_value,4095,4.096,0);
   41d90:	000f883a 	mov	r7,zero
   41d94:	019020f4 	movhi	r6,16515
   41d98:	31849bc4 	addi	r6,r6,4719
   41d9c:	0143ffc4 	movi	r5,4095
   41da0:	e13fff17 	ldw	r4,-4(fp)
   41da4:	004194c0 	call	4194c <convert_adc_to_signal>
   41da8:	e0bffd15 	stw	r2,-12(fp)


	int dac_out=float_to_dac(signal_in,255,5,0);
   41dac:	000f883a 	mov	r7,zero
   41db0:	01902834 	movhi	r6,16544
   41db4:	01403fc4 	movi	r5,255
   41db8:	e13ffd17 	ldw	r4,-12(fp)
   41dbc:	00419e80 	call	419e8 <float_to_dac>
   41dc0:	10803fcc 	andi	r2,r2,255
   41dc4:	e0bffe15 	stw	r2,-8(fp)

	return dac_out;
   41dc8:	e0bffe17 	ldw	r2,-8(fp)
}
   41dcc:	e037883a 	mov	sp,fp
   41dd0:	dfc00117 	ldw	ra,4(sp)
   41dd4:	df000017 	ldw	fp,0(sp)
   41dd8:	dec00204 	addi	sp,sp,8
   41ddc:	f800283a 	ret

00041de0 <main>:



void main(void){
   41de0:	def6db04 	addi	sp,sp,-9364
   41de4:	dfc92415 	stw	ra,9360(sp)
   41de8:	df092315 	stw	fp,9356(sp)
   41dec:	df092304 	addi	fp,sp,9356
//	printf("running \n");
	int sample_max=10000;
   41df0:	0089c404 	movi	r2,10000
   41df4:	e0b6df15 	stw	r2,-9348(fp)
	int sample_written=0;
   41df8:	e036e015 	stw	zero,-9344(fp)
//    if (!fp) {
//        printf("Failed to open file on host\n");
//    }


	int ch = 0;
   41dfc:	e036e115 	stw	zero,-9340(fp)
	const int nReadNum = 1; // max 1024
   41e00:	00800044 	movi	r2,1
   41e04:	e0b6e215 	stw	r2,-9336(fp)
	int i, ADC_value, nIndex=0;
   41e08:	e036e315 	stw	zero,-9332(fp)
	uint16_t DAC_val=0;
   41e0c:	e036e40d 	sth	zero,-9328(fp)
	float signal_val, reconstructed_val=0;
   41e10:	e036e515 	stw	zero,-9324(fp)
//	printf("ADC Demo\r\n");
    ALT_AVALON_I2C_DEV_t *i2c_dev;  // Pointer to I2C instance structure
   // int adc_value = 0;             // Example ADC value to send
    int result;
    float lam = 1.1;
   41e14:	008fe374 	movhi	r2,16269
   41e18:	10b33344 	addi	r2,r2,-13107
   41e1c:	e0b6e615 	stw	r2,-9320(fp)
	int downsample_ratio=1; // to downsample,this reads a sample every n adc samples
   41e20:	00800044 	movi	r2,1
   41e24:	e0b6e715 	stw	r2,-9316(fp)
	int count=1;
   41e28:	00800044 	movi	r2,1
   41e2c:	e0b6de15 	stw	r2,-9352(fp)
    UnlimitedSamplerReconstructor recon;
    initReconstructor(&recon, lam);
   41e30:	e0b6eb04 	addi	r2,fp,-9300
   41e34:	e176e617 	ldw	r5,-9320(fp)
   41e38:	1009883a 	mov	r4,r2
   41e3c:	00404340 	call	40434 <initReconstructor>

    MovingAverage ma;
    initMovingAverage(&ma);
   41e40:	e0bec704 	addi	r2,fp,-1252
   41e44:	1009883a 	mov	r4,r2
   41e48:	00402900 	call	40290 <initMovingAverage>
    MovingAverage ma2;
    initMovingAverage(&ma2);
   41e4c:	e0bf2e04 	addi	r2,fp,-840
   41e50:	1009883a 	mov	r4,r2
   41e54:	00402900 	call	40290 <initMovingAverage>
    MovingAverage ma3;
    initMovingAverage(&ma3);
   41e58:	e0bf9504 	addi	r2,fp,-428
   41e5c:	1009883a 	mov	r4,r2
   41e60:	00402900 	call	40290 <initMovingAverage>

    i2c_dev = alt_avalon_i2c_open("/dev/i2c_dac");
   41e64:	01000174 	movhi	r4,5
   41e68:	2116ca04 	addi	r4,r4,23336
   41e6c:	0051f500 	call	51f50 <alt_avalon_i2c_open>
   41e70:	e0b6e815 	stw	r2,-9312(fp)
    if (NULL == i2c_dev) {
   41e74:	e0b6e817 	ldw	r2,-9312(fp)
   41e78:	1000041e 	bne	r2,zero,41e8c <main+0xac>
        printf("Error: Cannot find /dev/i2c_dac\n");
   41e7c:	01000174 	movhi	r4,5
   41e80:	2116ce04 	addi	r4,r4,23352
   41e84:	00470f40 	call	470f4 <puts>
        return ;
   41e88:	00005106 	br	41fd0 <main+0x1f0>
    }
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;


    // Set the target device address (PCF8591T address is typically 0x48)
    alt_avalon_i2c_master_target_set(i2c_dev, 0x48);
   41e8c:	01401204 	movi	r5,72
   41e90:	e136e817 	ldw	r4,-9312(fp)
   41e94:	00527200 	call	52720 <alt_avalon_i2c_master_target_set>
//    alt_avalon_i2c_master_config_set(i2c_dev, &cfg);
//     alt_avalon_i2c_master_target_set(i2c_dev, 0x72);
     if (i2c_dev) {
   41e98:	e0b6e817 	ldw	r2,-9312(fp)
   41e9c:	10000d26 	beq	r2,zero,41ed4 <main+0xf4>
    	 printf("DAC CONNECTED\n");
   41ea0:	01000174 	movhi	r4,5
   41ea4:	2116d604 	addi	r4,r4,23384
   41ea8:	00470f40 	call	470f4 <puts>
         alt_avalon_i2c_master_config_speed_set(i2c_dev,&cfg, 400000); // Set 400 kHz
   41eac:	e0bffc04 	addi	r2,fp,-16
   41eb0:	018001b4 	movhi	r6,6
   41eb4:	3186a004 	addi	r6,r6,6784
   41eb8:	100b883a 	mov	r5,r2
   41ebc:	e136e817 	ldw	r4,-9312(fp)
   41ec0:	00522840 	call	52284 <alt_avalon_i2c_master_config_speed_set>
         alt_avalon_i2c_master_config_set(i2c_dev, &cfg);
   41ec4:	e0bffc04 	addi	r2,fp,-16
   41ec8:	100b883a 	mov	r5,r2
   41ecc:	e136e817 	ldw	r4,-9312(fp)
   41ed0:	00521240 	call	52124 <alt_avalon_i2c_master_config_set>
     }



    IOWR(ADC_LTC2308_BASE, 0x01, nReadNum);
   41ed4:	00800234 	movhi	r2,8
   41ed8:	10841d04 	addi	r2,r2,4212
   41edc:	e0f6e217 	ldw	r3,-9336(fp)
   41ee0:	10c00035 	stwio	r3,0(r2)

	while(1){

		// start measure
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
   41ee4:	e0b6e117 	ldw	r2,-9340(fp)
   41ee8:	1085883a 	add	r2,r2,r2
   41eec:	1007883a 	mov	r3,r2
   41ef0:	00800234 	movhi	r2,8
   41ef4:	10841c04 	addi	r2,r2,4208
   41ef8:	10c00035 	stwio	r3,0(r2)
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x01);
   41efc:	e0b6e117 	ldw	r2,-9340(fp)
   41f00:	1085883a 	add	r2,r2,r2
   41f04:	10c00054 	ori	r3,r2,1
   41f08:	00800234 	movhi	r2,8
   41f0c:	10841c04 	addi	r2,r2,4208
   41f10:	10c00035 	stwio	r3,0(r2)
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
   41f14:	e0b6e117 	ldw	r2,-9340(fp)
   41f18:	1085883a 	add	r2,r2,r2
   41f1c:	1007883a 	mov	r3,r2
   41f20:	00800234 	movhi	r2,8
   41f24:	10841c04 	addi	r2,r2,4208
   41f28:	10c00035 	stwio	r3,0(r2)
		// wait measure done
//		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);

		// read adc value

		for(i=0;i<nReadNum;i+=1){
   41f2c:	e036dd15 	stw	zero,-9356(fp)
   41f30:	00002306 	br	41fc0 <main+0x1e0>
			if (count<downsample_ratio){
   41f34:	e0f6de17 	ldw	r3,-9352(fp)
   41f38:	e0b6e717 	ldw	r2,-9316(fp)
   41f3c:	1880070e 	bge	r3,r2,41f5c <main+0x17c>
				count+=1;
   41f40:	e0b6de17 	ldw	r2,-9352(fp)
   41f44:	10800044 	addi	r2,r2,1
   41f48:	e0b6de15 	stw	r2,-9352(fp)
				IORD(ADC_LTC2308_BASE, 0x01);
   41f4c:	00800234 	movhi	r2,8
   41f50:	10841d04 	addi	r2,r2,4212
   41f54:	10800037 	ldwio	r2,0(r2)
   41f58:	00001606 	br	41fb4 <main+0x1d4>

			}
			else{
				count=1;
   41f5c:	00800044 	movi	r2,1
   41f60:	e0b6de15 	stw	r2,-9352(fp)
// save adc sampled files to text file, run in debug mode.

				ADC_value = IORD(ADC_LTC2308_BASE, 0x01);
   41f64:	00800234 	movhi	r2,8
   41f68:	10841d04 	addi	r2,r2,4212
   41f6c:	10800037 	ldwio	r2,0(r2)
   41f70:	e0b6e915 	stw	r2,-9308(fp)

//			    printf("calculated adc_VAL %d.\n", ADC_value);

// baseline pipelined models

				DAC_val=ALT_CI_RECON_PIPE_1_0(ADC_value,0);
   41f74:	e0b6e917 	ldw	r2,-9308(fp)
   41f78:	0007883a 	mov	r3,zero
   41f7c:	10c5c072 	custom	1,r2,r2,r3
   41f80:	e0b6e40d 	sth	r2,-9328(fp)
//				DAC_val=ALT_CI_RECON_PIPE_N_0(ADC_value,2);

//				printf("calculated dac_VAL %d.\n", DAC_val);


				result = send_to_PCF(i2c_dev, DAC_val);
   41f84:	e0b6e40b 	ldhu	r2,-9328(fp)
   41f88:	10803fcc 	andi	r2,r2,255
   41f8c:	100b883a 	mov	r5,r2
   41f90:	e136e817 	ldw	r4,-9312(fp)
   41f94:	0041aac0 	call	41aac <send_to_PCF>
   41f98:	e0b6ea15 	stw	r2,-9304(fp)
				//	        result = send_to_PCF(i2c_dev, (8)Value);
				////			result = send_to_LTC2607(i2c_dev,0, (alt_u16)Value);
				if (result != 0) {
   41f9c:	e0b6ea17 	ldw	r2,-9304(fp)
   41fa0:	10000426 	beq	r2,zero,41fb4 <main+0x1d4>
					printf("Failed to send data to DAC.\n");
   41fa4:	01000174 	movhi	r4,5
   41fa8:	2116da04 	addi	r4,r4,23400
   41fac:	00470f40 	call	470f4 <puts>
					break;
   41fb0:	00000606 	br	41fcc <main+0x1ec>
		// wait measure done
//		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);

		// read adc value

		for(i=0;i<nReadNum;i+=1){
   41fb4:	e0b6dd17 	ldw	r2,-9356(fp)
   41fb8:	10800044 	addi	r2,r2,1
   41fbc:	e0b6dd15 	stw	r2,-9356(fp)
   41fc0:	e0f6dd17 	ldw	r3,-9356(fp)
   41fc4:	e0b6e217 	ldw	r2,-9336(fp)
   41fc8:	18bfda16 	blt	r3,r2,41f34 <__alt_data_end+0xfffdae34>
			}



	}
	}
   41fcc:	003fc506 	br	41ee4 <__alt_data_end+0xfffdade4>
}
   41fd0:	e037883a 	mov	sp,fp
   41fd4:	dfc00117 	ldw	ra,4(sp)
   41fd8:	df000017 	ldw	fp,0(sp)
   41fdc:	dec00204 	addi	sp,sp,8
   41fe0:	f800283a 	ret

00041fe4 <ceil>:
   41fe4:	2811d53a 	srai	r8,r5,20
   41fe8:	defffa04 	addi	sp,sp,-24
   41fec:	dcc00315 	stw	r19,12(sp)
   41ff0:	4201ffcc 	andi	r8,r8,2047
   41ff4:	dc800215 	stw	r18,8(sp)
   41ff8:	dc400115 	stw	r17,4(sp)
   41ffc:	dc000015 	stw	r16,0(sp)
   42000:	dfc00515 	stw	ra,20(sp)
   42004:	dd000415 	stw	r20,16(sp)
   42008:	44bf0044 	addi	r18,r8,-1023
   4200c:	018004c4 	movi	r6,19
   42010:	2821883a 	mov	r16,r5
   42014:	2005883a 	mov	r2,r4
   42018:	280f883a 	mov	r7,r5
   4201c:	2827883a 	mov	r19,r5
   42020:	2023883a 	mov	r17,r4
   42024:	34801c16 	blt	r6,r18,42098 <ceil+0xb4>
   42028:	90004916 	blt	r18,zero,42150 <ceil+0x16c>
   4202c:	05000434 	movhi	r20,16
   42030:	a53fffc4 	addi	r20,r20,-1
   42034:	a4a9d83a 	sra	r20,r20,r18
   42038:	2d0c703a 	and	r6,r5,r20
   4203c:	310cb03a 	or	r6,r6,r4
   42040:	30001926 	beq	r6,zero,420a8 <ceil+0xc4>
   42044:	01a20034 	movhi	r6,34816
   42048:	01df8e34 	movhi	r7,32312
   4204c:	319d6704 	addi	r6,r6,30108
   42050:	39f90f04 	addi	r7,r7,-7108
   42054:	00448340 	call	44834 <__adddf3>
   42058:	000d883a 	mov	r6,zero
   4205c:	000f883a 	mov	r7,zero
   42060:	1009883a 	mov	r4,r2
   42064:	180b883a 	mov	r5,r3
   42068:	0045a500 	call	45a50 <__gedf2>
   4206c:	0080070e 	bge	zero,r2,4208c <ceil+0xa8>
   42070:	0400030e 	bge	zero,r16,42080 <ceil+0x9c>
   42074:	00800434 	movhi	r2,16
   42078:	14a5d83a 	sra	r18,r2,r18
   4207c:	84a7883a 	add	r19,r16,r18
   42080:	0520303a 	nor	r16,zero,r20
   42084:	84e0703a 	and	r16,r16,r19
   42088:	0023883a 	mov	r17,zero
   4208c:	8805883a 	mov	r2,r17
   42090:	8007883a 	mov	r3,r16
   42094:	00000506 	br	420ac <ceil+0xc8>
   42098:	01800cc4 	movi	r6,51
   4209c:	34800b0e 	bge	r6,r18,420cc <ceil+0xe8>
   420a0:	01810004 	movi	r6,1024
   420a4:	91803b26 	beq	r18,r6,42194 <ceil+0x1b0>
   420a8:	3807883a 	mov	r3,r7
   420ac:	dfc00517 	ldw	ra,20(sp)
   420b0:	dd000417 	ldw	r20,16(sp)
   420b4:	dcc00317 	ldw	r19,12(sp)
   420b8:	dc800217 	ldw	r18,8(sp)
   420bc:	dc400117 	ldw	r17,4(sp)
   420c0:	dc000017 	ldw	r16,0(sp)
   420c4:	dec00604 	addi	sp,sp,24
   420c8:	f800283a 	ret
   420cc:	423efb44 	addi	r8,r8,-1043
   420d0:	053fffc4 	movi	r20,-1
   420d4:	a228d83a 	srl	r20,r20,r8
   420d8:	250c703a 	and	r6,r4,r20
   420dc:	303ff226 	beq	r6,zero,420a8 <__alt_data_end+0xfffdafa8>
   420e0:	01a20034 	movhi	r6,34816
   420e4:	01df8e34 	movhi	r7,32312
   420e8:	319d6704 	addi	r6,r6,30108
   420ec:	39f90f04 	addi	r7,r7,-7108
   420f0:	00448340 	call	44834 <__adddf3>
   420f4:	000d883a 	mov	r6,zero
   420f8:	000f883a 	mov	r7,zero
   420fc:	1009883a 	mov	r4,r2
   42100:	180b883a 	mov	r5,r3
   42104:	0045a500 	call	45a50 <__gedf2>
   42108:	00bfe00e 	bge	zero,r2,4208c <__alt_data_end+0xfffdaf8c>
   4210c:	04000a0e 	bge	zero,r16,42138 <ceil+0x154>
   42110:	00800504 	movi	r2,20
   42114:	90802926 	beq	r18,r2,421bc <ceil+0x1d8>
   42118:	00800d04 	movi	r2,52
   4211c:	14a5c83a 	sub	r18,r2,r18
   42120:	00800044 	movi	r2,1
   42124:	1484983a 	sll	r2,r2,r18
   42128:	1445883a 	add	r2,r2,r17
   4212c:	14401e2e 	bgeu	r2,r17,421a8 <ceil+0x1c4>
   42130:	84c00044 	addi	r19,r16,1
   42134:	1023883a 	mov	r17,r2
   42138:	0510303a 	nor	r8,zero,r20
   4213c:	9821883a 	mov	r16,r19
   42140:	8a22703a 	and	r17,r17,r8
   42144:	8805883a 	mov	r2,r17
   42148:	8007883a 	mov	r3,r16
   4214c:	003fd706 	br	420ac <__alt_data_end+0xfffdafac>
   42150:	01a20034 	movhi	r6,34816
   42154:	01df8e34 	movhi	r7,32312
   42158:	319d6704 	addi	r6,r6,30108
   4215c:	39f90f04 	addi	r7,r7,-7108
   42160:	00448340 	call	44834 <__adddf3>
   42164:	000d883a 	mov	r6,zero
   42168:	000f883a 	mov	r7,zero
   4216c:	1009883a 	mov	r4,r2
   42170:	180b883a 	mov	r5,r3
   42174:	0045a500 	call	45a50 <__gedf2>
   42178:	00bfc40e 	bge	zero,r2,4208c <__alt_data_end+0xfffdaf8c>
   4217c:	80000c16 	blt	r16,zero,421b0 <ceil+0x1cc>
   42180:	8460b03a 	or	r16,r16,r17
   42184:	0023883a 	mov	r17,zero
   42188:	80000526 	beq	r16,zero,421a0 <ceil+0x1bc>
   4218c:	040ffc34 	movhi	r16,16368
   42190:	003fbe06 	br	4208c <__alt_data_end+0xfffdaf8c>
   42194:	200d883a 	mov	r6,r4
   42198:	00448340 	call	44834 <__adddf3>
   4219c:	003fc306 	br	420ac <__alt_data_end+0xfffdafac>
   421a0:	0021883a 	mov	r16,zero
   421a4:	003fb906 	br	4208c <__alt_data_end+0xfffdaf8c>
   421a8:	1023883a 	mov	r17,r2
   421ac:	003fe206 	br	42138 <__alt_data_end+0xfffdb038>
   421b0:	0023883a 	mov	r17,zero
   421b4:	04200034 	movhi	r16,32768
   421b8:	003fb406 	br	4208c <__alt_data_end+0xfffdaf8c>
   421bc:	84c00044 	addi	r19,r16,1
   421c0:	003fdd06 	br	42138 <__alt_data_end+0xfffdb038>

000421c4 <round>:
   421c4:	289ffc2c 	andhi	r2,r5,32752
   421c8:	1005d53a 	srai	r2,r2,20
   421cc:	024004c4 	movi	r9,19
   421d0:	2807883a 	mov	r3,r5
   421d4:	123f0044 	addi	r8,r2,-1023
   421d8:	200d883a 	mov	r6,r4
   421dc:	280f883a 	mov	r7,r5
   421e0:	4a000916 	blt	r9,r8,42208 <round+0x44>
   421e4:	40002516 	blt	r8,zero,4227c <round+0xb8>
   421e8:	00800434 	movhi	r2,16
   421ec:	10bfffc4 	addi	r2,r2,-1
   421f0:	1205d83a 	sra	r2,r2,r8
   421f4:	2888703a 	and	r4,r5,r2
   421f8:	2000181e 	bne	r4,zero,4225c <round+0x98>
   421fc:	3000171e 	bne	r6,zero,4225c <round+0x98>
   42200:	0005883a 	mov	r2,zero
   42204:	f800283a 	ret
   42208:	02400cc4 	movi	r9,51
   4220c:	4a00040e 	bge	r9,r8,42220 <round+0x5c>
   42210:	00810004 	movi	r2,1024
   42214:	40802126 	beq	r8,r2,4229c <round+0xd8>
   42218:	3005883a 	mov	r2,r6
   4221c:	f800283a 	ret
   42220:	013fffc4 	movi	r4,-1
   42224:	10befb44 	addi	r2,r2,-1043
   42228:	2084d83a 	srl	r2,r4,r2
   4222c:	3088703a 	and	r4,r6,r2
   42230:	20001726 	beq	r4,zero,42290 <round+0xcc>
   42234:	4a11c83a 	sub	r8,r9,r8
   42238:	02400044 	movi	r9,1
   4223c:	4a10983a 	sll	r8,r9,r8
   42240:	4191883a 	add	r8,r8,r6
   42244:	4180012e 	bgeu	r8,r6,4224c <round+0x88>
   42248:	2a47883a 	add	r3,r5,r9
   4224c:	0084303a 	nor	r2,zero,r2
   42250:	120c703a 	and	r6,r2,r8
   42254:	3005883a 	mov	r2,r6
   42258:	f800283a 	ret
   4225c:	00c00234 	movhi	r3,8
   42260:	1a07d83a 	sra	r3,r3,r8
   42264:	0084303a 	nor	r2,zero,r2
   42268:	000d883a 	mov	r6,zero
   4226c:	19c7883a 	add	r3,r3,r7
   42270:	1886703a 	and	r3,r3,r2
   42274:	3005883a 	mov	r2,r6
   42278:	f800283a 	ret
   4227c:	00bfffc4 	movi	r2,-1
   42280:	28e0002c 	andhi	r3,r5,32768
   42284:	40800c26 	beq	r8,r2,422b8 <round+0xf4>
   42288:	000d883a 	mov	r6,zero
   4228c:	003fe206 	br	42218 <__alt_data_end+0xfffdb118>
   42290:	3005883a 	mov	r2,r6
   42294:	2807883a 	mov	r3,r5
   42298:	f800283a 	ret
   4229c:	deffff04 	addi	sp,sp,-4
   422a0:	280f883a 	mov	r7,r5
   422a4:	dfc00015 	stw	ra,0(sp)
   422a8:	00448340 	call	44834 <__adddf3>
   422ac:	dfc00017 	ldw	ra,0(sp)
   422b0:	dec00104 	addi	sp,sp,4
   422b4:	f800283a 	ret
   422b8:	18cffc34 	orhi	r3,r3,16368
   422bc:	000d883a 	mov	r6,zero
   422c0:	003fd506 	br	42218 <__alt_data_end+0xfffdb118>

000422c4 <roundf>:
   422c4:	20dfe02c 	andhi	r3,r4,32640
   422c8:	1806d5fa 	srli	r3,r3,23
   422cc:	01400584 	movi	r5,22
   422d0:	2005883a 	mov	r2,r4
   422d4:	18ffe044 	addi	r3,r3,-127
   422d8:	28c00c16 	blt	r5,r3,4230c <roundf+0x48>
   422dc:	18001516 	blt	r3,zero,42334 <roundf+0x70>
   422e0:	01002034 	movhi	r4,128
   422e4:	213fffc4 	addi	r4,r4,-1
   422e8:	20c9d83a 	sra	r4,r4,r3
   422ec:	208a703a 	and	r5,r4,r2
   422f0:	28000826 	beq	r5,zero,42314 <roundf+0x50>
   422f4:	01401034 	movhi	r5,64
   422f8:	28c7d83a 	sra	r3,r5,r3
   422fc:	0108303a 	nor	r4,zero,r4
   42300:	1885883a 	add	r2,r3,r2
   42304:	2084703a 	and	r2,r4,r2
   42308:	f800283a 	ret
   4230c:	01402004 	movi	r5,128
   42310:	19400126 	beq	r3,r5,42318 <roundf+0x54>
   42314:	f800283a 	ret
   42318:	deffff04 	addi	sp,sp,-4
   4231c:	200b883a 	mov	r5,r4
   42320:	dfc00015 	stw	ra,0(sp)
   42324:	00433340 	call	43334 <__addsf3>
   42328:	dfc00017 	ldw	ra,0(sp)
   4232c:	dec00104 	addi	sp,sp,4
   42330:	f800283a 	ret
   42334:	20a0002c 	andhi	r2,r4,32768
   42338:	013fffc4 	movi	r4,-1
   4233c:	193ff51e 	bne	r3,r4,42314 <__alt_data_end+0xfffdb214>
   42340:	108fe034 	orhi	r2,r2,16256
   42344:	f800283a 	ret

00042348 <fmod>:
   42348:	deffef04 	addi	sp,sp,-68
   4234c:	dc400a15 	stw	r17,40(sp)
   42350:	04400174 	movhi	r17,5
   42354:	dd800f15 	stw	r22,60(sp)
   42358:	dd400e15 	stw	r21,56(sp)
   4235c:	dd000d15 	stw	r20,52(sp)
   42360:	dcc00c15 	stw	r19,48(sp)
   42364:	dc800b15 	stw	r18,44(sp)
   42368:	dc000915 	stw	r16,36(sp)
   4236c:	202b883a 	mov	r21,r4
   42370:	dfc01015 	stw	ra,64(sp)
   42374:	8c5e6e04 	addi	r17,r17,31160
   42378:	2829883a 	mov	r20,r5
   4237c:	3027883a 	mov	r19,r6
   42380:	3825883a 	mov	r18,r7
   42384:	004263c0 	call	4263c <__ieee754_fmod>
   42388:	89000017 	ldw	r4,0(r17)
   4238c:	1021883a 	mov	r16,r2
   42390:	00bfffc4 	movi	r2,-1
   42394:	182d883a 	mov	r22,r3
   42398:	20800426 	beq	r4,r2,423ac <fmod+0x64>
   4239c:	9809883a 	mov	r4,r19
   423a0:	900b883a 	mov	r5,r18
   423a4:	00430980 	call	43098 <__fpclassifyd>
   423a8:	10000c1e 	bne	r2,zero,423dc <fmod+0x94>
   423ac:	8005883a 	mov	r2,r16
   423b0:	b007883a 	mov	r3,r22
   423b4:	dfc01017 	ldw	ra,64(sp)
   423b8:	dd800f17 	ldw	r22,60(sp)
   423bc:	dd400e17 	ldw	r21,56(sp)
   423c0:	dd000d17 	ldw	r20,52(sp)
   423c4:	dcc00c17 	ldw	r19,48(sp)
   423c8:	dc800b17 	ldw	r18,44(sp)
   423cc:	dc400a17 	ldw	r17,40(sp)
   423d0:	dc000917 	ldw	r16,36(sp)
   423d4:	dec01104 	addi	sp,sp,68
   423d8:	f800283a 	ret
   423dc:	a809883a 	mov	r4,r21
   423e0:	a00b883a 	mov	r5,r20
   423e4:	00430980 	call	43098 <__fpclassifyd>
   423e8:	103ff026 	beq	r2,zero,423ac <__alt_data_end+0xfffdb2ac>
   423ec:	000d883a 	mov	r6,zero
   423f0:	000f883a 	mov	r7,zero
   423f4:	9809883a 	mov	r4,r19
   423f8:	900b883a 	mov	r5,r18
   423fc:	00459c80 	call	459c8 <__eqdf2>
   42400:	103fea1e 	bne	r2,zero,423ac <__alt_data_end+0xfffdb2ac>
   42404:	00800044 	movi	r2,1
   42408:	d8800015 	stw	r2,0(sp)
   4240c:	8c000017 	ldw	r16,0(r17)
   42410:	00800174 	movhi	r2,5
   42414:	1096e104 	addi	r2,r2,23428
   42418:	d8800115 	stw	r2,4(sp)
   4241c:	dd400215 	stw	r21,8(sp)
   42420:	dd000315 	stw	r20,12(sp)
   42424:	dcc00415 	stw	r19,16(sp)
   42428:	dc800515 	stw	r18,20(sp)
   4242c:	d8000815 	stw	zero,32(sp)
   42430:	80001126 	beq	r16,zero,42478 <fmod+0x130>
   42434:	000d883a 	mov	r6,zero
   42438:	000f883a 	mov	r7,zero
   4243c:	0009883a 	mov	r4,zero
   42440:	000b883a 	mov	r5,zero
   42444:	00450e00 	call	450e0 <__divdf3>
   42448:	d8800615 	stw	r2,24(sp)
   4244c:	d8c00715 	stw	r3,28(sp)
   42450:	00800084 	movi	r2,2
   42454:	80800a1e 	bne	r16,r2,42480 <fmod+0x138>
   42458:	0046fb80 	call	46fb8 <__errno>
   4245c:	00c00844 	movi	r3,33
   42460:	10c00015 	stw	r3,0(r2)
   42464:	d8800817 	ldw	r2,32(sp)
   42468:	1000091e 	bne	r2,zero,42490 <fmod+0x148>
   4246c:	d8800617 	ldw	r2,24(sp)
   42470:	d8c00717 	ldw	r3,28(sp)
   42474:	003fcf06 	br	423b4 <__alt_data_end+0xfffdb2b4>
   42478:	dd400615 	stw	r21,24(sp)
   4247c:	dd000715 	stw	r20,28(sp)
   42480:	d809883a 	mov	r4,sp
   42484:	004310c0 	call	4310c <matherr>
   42488:	103ff61e 	bne	r2,zero,42464 <__alt_data_end+0xfffdb364>
   4248c:	003ff206 	br	42458 <__alt_data_end+0xfffdb358>
   42490:	0046fb80 	call	46fb8 <__errno>
   42494:	d8c00817 	ldw	r3,32(sp)
   42498:	10c00015 	stw	r3,0(r2)
   4249c:	003ff306 	br	4246c <__alt_data_end+0xfffdb36c>

000424a0 <log>:
   424a0:	defff104 	addi	sp,sp,-60
   424a4:	dd000d15 	stw	r20,52(sp)
   424a8:	05000174 	movhi	r20,5
   424ac:	dcc00c15 	stw	r19,48(sp)
   424b0:	dc800b15 	stw	r18,44(sp)
   424b4:	dc400a15 	stw	r17,40(sp)
   424b8:	dc000915 	stw	r16,36(sp)
   424bc:	dfc00e15 	stw	ra,56(sp)
   424c0:	a51e6e04 	addi	r20,r20,31160
   424c4:	2027883a 	mov	r19,r4
   424c8:	2825883a 	mov	r18,r5
   424cc:	004297c0 	call	4297c <__ieee754_log>
   424d0:	1821883a 	mov	r16,r3
   424d4:	a0c00017 	ldw	r3,0(r20)
   424d8:	1023883a 	mov	r17,r2
   424dc:	00bfffc4 	movi	r2,-1
   424e0:	18800a26 	beq	r3,r2,4250c <log+0x6c>
   424e4:	9809883a 	mov	r4,r19
   424e8:	900b883a 	mov	r5,r18
   424ec:	00430980 	call	43098 <__fpclassifyd>
   424f0:	10000626 	beq	r2,zero,4250c <log+0x6c>
   424f4:	000d883a 	mov	r6,zero
   424f8:	000f883a 	mov	r7,zero
   424fc:	9809883a 	mov	r4,r19
   42500:	900b883a 	mov	r5,r18
   42504:	0045a500 	call	45a50 <__gedf2>
   42508:	00800a0e 	bge	zero,r2,42534 <log+0x94>
   4250c:	8805883a 	mov	r2,r17
   42510:	8007883a 	mov	r3,r16
   42514:	dfc00e17 	ldw	ra,56(sp)
   42518:	dd000d17 	ldw	r20,52(sp)
   4251c:	dcc00c17 	ldw	r19,48(sp)
   42520:	dc800b17 	ldw	r18,44(sp)
   42524:	dc400a17 	ldw	r17,40(sp)
   42528:	dc000917 	ldw	r16,36(sp)
   4252c:	dec00f04 	addi	sp,sp,60
   42530:	f800283a 	ret
   42534:	00800174 	movhi	r2,5
   42538:	a4000017 	ldw	r16,0(r20)
   4253c:	1096e304 	addi	r2,r2,23436
   42540:	d8000815 	stw	zero,32(sp)
   42544:	d8800115 	stw	r2,4(sp)
   42548:	dcc00215 	stw	r19,8(sp)
   4254c:	dc800315 	stw	r18,12(sp)
   42550:	dcc00415 	stw	r19,16(sp)
   42554:	dc800515 	stw	r18,20(sp)
   42558:	000d883a 	mov	r6,zero
   4255c:	000f883a 	mov	r7,zero
   42560:	9809883a 	mov	r4,r19
   42564:	900b883a 	mov	r5,r18
   42568:	8000101e 	bne	r16,zero,425ac <log+0x10c>
   4256c:	00b80034 	movhi	r2,57344
   42570:	d8800615 	stw	r2,24(sp)
   42574:	00b1fc34 	movhi	r2,51184
   42578:	10bfffc4 	addi	r2,r2,-1
   4257c:	d8800715 	stw	r2,28(sp)
   42580:	00459c80 	call	459c8 <__eqdf2>
   42584:	10001f1e 	bne	r2,zero,42604 <log+0x164>
   42588:	00800084 	movi	r2,2
   4258c:	d8800015 	stw	r2,0(sp)
   42590:	d809883a 	mov	r4,sp
   42594:	004310c0 	call	4310c <matherr>
   42598:	1000151e 	bne	r2,zero,425f0 <log+0x150>
   4259c:	0046fb80 	call	46fb8 <__errno>
   425a0:	00c00884 	movi	r3,34
   425a4:	10c00015 	stw	r3,0(r2)
   425a8:	00001106 	br	425f0 <log+0x150>
   425ac:	00bffc34 	movhi	r2,65520
   425b0:	d8000615 	stw	zero,24(sp)
   425b4:	d8800715 	stw	r2,28(sp)
   425b8:	00459c80 	call	459c8 <__eqdf2>
   425bc:	10001726 	beq	r2,zero,4261c <log+0x17c>
   425c0:	00800044 	movi	r2,1
   425c4:	d8800015 	stw	r2,0(sp)
   425c8:	00800084 	movi	r2,2
   425cc:	80800f1e 	bne	r16,r2,4260c <log+0x16c>
   425d0:	0046fb80 	call	46fb8 <__errno>
   425d4:	00c00844 	movi	r3,33
   425d8:	10c00015 	stw	r3,0(r2)
   425dc:	01000174 	movhi	r4,5
   425e0:	21173204 	addi	r4,r4,23752
   425e4:	00431140 	call	43114 <nan>
   425e8:	d8800615 	stw	r2,24(sp)
   425ec:	d8c00715 	stw	r3,28(sp)
   425f0:	d8800817 	ldw	r2,32(sp)
   425f4:	10000d1e 	bne	r2,zero,4262c <log+0x18c>
   425f8:	d8800617 	ldw	r2,24(sp)
   425fc:	d8c00717 	ldw	r3,28(sp)
   42600:	003fc406 	br	42514 <__alt_data_end+0xfffdb414>
   42604:	00800044 	movi	r2,1
   42608:	d8800015 	stw	r2,0(sp)
   4260c:	d809883a 	mov	r4,sp
   42610:	004310c0 	call	4310c <matherr>
   42614:	103ff11e 	bne	r2,zero,425dc <__alt_data_end+0xfffdb4dc>
   42618:	003fed06 	br	425d0 <__alt_data_end+0xfffdb4d0>
   4261c:	00800084 	movi	r2,2
   42620:	d8800015 	stw	r2,0(sp)
   42624:	80bfdd26 	beq	r16,r2,4259c <__alt_data_end+0xfffdb49c>
   42628:	003fd906 	br	42590 <__alt_data_end+0xfffdb490>
   4262c:	0046fb80 	call	46fb8 <__errno>
   42630:	d8c00817 	ldw	r3,32(sp)
   42634:	10c00015 	stw	r3,0(r2)
   42638:	003fef06 	br	425f8 <__alt_data_end+0xfffdb4f8>

0004263c <__ieee754_fmod>:
   4263c:	00a00034 	movhi	r2,32768
   42640:	10bfffc4 	addi	r2,r2,-1
   42644:	deffff04 	addi	sp,sp,-4
   42648:	3896703a 	and	r11,r7,r2
   4264c:	dfc00015 	stw	ra,0(sp)
   42650:	32c4b03a 	or	r2,r6,r11
   42654:	10001926 	beq	r2,zero,426bc <__ieee754_fmod+0x80>
   42658:	28e0002c 	andhi	r3,r5,32768
   4265c:	025ffc34 	movhi	r9,32752
   42660:	28d8f03a 	xor	r12,r5,r3
   42664:	4a7fffc4 	addi	r9,r9,-1
   42668:	4b001416 	blt	r9,r12,426bc <__ieee754_fmod+0x80>
   4266c:	0185c83a 	sub	r2,zero,r6
   42670:	1184b03a 	or	r2,r2,r6
   42674:	1004d7fa 	srli	r2,r2,31
   42678:	025ffc34 	movhi	r9,32752
   4267c:	12c4b03a 	or	r2,r2,r11
   42680:	48800e36 	bltu	r9,r2,426bc <__ieee754_fmod+0x80>
   42684:	2011883a 	mov	r8,r4
   42688:	301d883a 	mov	r14,r6
   4268c:	5b001416 	blt	r11,r12,426e0 <__ieee754_fmod+0xa4>
   42690:	62c01e16 	blt	r12,r11,4270c <__ieee754_fmod+0xd0>
   42694:	21801d36 	bltu	r4,r6,4270c <__ieee754_fmod+0xd0>
   42698:	2180111e 	bne	r4,r6,426e0 <__ieee754_fmod+0xa4>
   4269c:	1806d7fa 	srli	r3,r3,31
   426a0:	180490fa 	slli	r2,r3,3
   426a4:	00c00174 	movhi	r3,5
   426a8:	18d6e404 	addi	r3,r3,23440
   426ac:	1887883a 	add	r3,r3,r2
   426b0:	18800017 	ldw	r2,0(r3)
   426b4:	18c00117 	ldw	r3,4(r3)
   426b8:	00000606 	br	426d4 <__ieee754_fmod+0x98>
   426bc:	0045b2c0 	call	45b2c <__muldf3>
   426c0:	100d883a 	mov	r6,r2
   426c4:	180f883a 	mov	r7,r3
   426c8:	1009883a 	mov	r4,r2
   426cc:	180b883a 	mov	r5,r3
   426d0:	00450e00 	call	450e0 <__divdf3>
   426d4:	dfc00017 	ldw	ra,0(sp)
   426d8:	dec00104 	addi	sp,sp,4
   426dc:	f800283a 	ret
   426e0:	00800434 	movhi	r2,16
   426e4:	10bfffc4 	addi	r2,r2,-1
   426e8:	13000b16 	blt	r2,r12,42718 <__ieee754_fmod+0xdc>
   426ec:	6000741e 	bne	r12,zero,428c0 <__ieee754_fmod+0x284>
   426f0:	2013883a 	mov	r9,r4
   426f4:	02befb44 	movi	r10,-1043
   426f8:	0100090e 	bge	zero,r4,42720 <__ieee754_fmod+0xe4>
   426fc:	4a53883a 	add	r9,r9,r9
   42700:	52bfffc4 	addi	r10,r10,-1
   42704:	027ffd16 	blt	zero,r9,426fc <__alt_data_end+0xfffdb5fc>
   42708:	00000506 	br	42720 <__ieee754_fmod+0xe4>
   4270c:	2005883a 	mov	r2,r4
   42710:	2807883a 	mov	r3,r5
   42714:	003fef06 	br	426d4 <__alt_data_end+0xfffdb5d4>
   42718:	6015d53a 	srai	r10,r12,20
   4271c:	52bf0044 	addi	r10,r10,-1023
   42720:	00800434 	movhi	r2,16
   42724:	10bfffc4 	addi	r2,r2,-1
   42728:	12c00816 	blt	r2,r11,4274c <__ieee754_fmod+0x110>
   4272c:	58006b1e 	bne	r11,zero,428dc <__ieee754_fmod+0x2a0>
   42730:	3013883a 	mov	r9,r6
   42734:	03fefb44 	movi	r15,-1043
   42738:	0180060e 	bge	zero,r6,42754 <__ieee754_fmod+0x118>
   4273c:	4a53883a 	add	r9,r9,r9
   42740:	7bffffc4 	addi	r15,r15,-1
   42744:	027ffd16 	blt	zero,r9,4273c <__alt_data_end+0xfffdb63c>
   42748:	00000206 	br	42754 <__ieee754_fmod+0x118>
   4274c:	581fd53a 	srai	r15,r11,20
   42750:	7bff0044 	addi	r15,r15,-1023
   42754:	00bf0084 	movi	r2,-1022
   42758:	50804d16 	blt	r10,r2,42890 <__ieee754_fmod+0x254>
   4275c:	00800434 	movhi	r2,16
   42760:	10bfffc4 	addi	r2,r2,-1
   42764:	6088703a 	and	r4,r12,r2
   42768:	21000434 	orhi	r4,r4,16
   4276c:	00bf0084 	movi	r2,-1022
   42770:	78803d16 	blt	r15,r2,42868 <__ieee754_fmod+0x22c>
   42774:	02400434 	movhi	r9,16
   42778:	4a7fffc4 	addi	r9,r9,-1
   4277c:	3a4e703a 	and	r7,r7,r9
   42780:	39800434 	orhi	r6,r7,16
   42784:	53d5c83a 	sub	r10,r10,r15
   42788:	00000406 	br	4279c <__ieee754_fmod+0x160>
   4278c:	60001126 	beq	r12,zero,427d4 <__ieee754_fmod+0x198>
   42790:	4a51883a 	add	r8,r9,r9
   42794:	6ac9883a 	add	r4,r13,r11
   42798:	52bfffc4 	addi	r10,r10,-1
   4279c:	4393c83a 	sub	r9,r8,r14
   427a0:	4816d7fa 	srli	r11,r9,31
   427a4:	50001326 	beq	r10,zero,427f4 <__ieee754_fmod+0x1b8>
   427a8:	218fc83a 	sub	r7,r4,r6
   427ac:	4380012e 	bgeu	r8,r14,427b4 <__ieee754_fmod+0x178>
   427b0:	39ffffc4 	addi	r7,r7,-1
   427b4:	3a58b03a 	or	r12,r7,r9
   427b8:	39db883a 	add	r13,r7,r7
   427bc:	383ff30e 	bge	r7,zero,4278c <__alt_data_end+0xfffdb68c>
   427c0:	4004d7fa 	srli	r2,r8,31
   427c4:	2109883a 	add	r4,r4,r4
   427c8:	4211883a 	add	r8,r8,r8
   427cc:	2089883a 	add	r4,r4,r2
   427d0:	003ff106 	br	42798 <__alt_data_end+0xfffdb698>
   427d4:	1806d7fa 	srli	r3,r3,31
   427d8:	00800174 	movhi	r2,5
   427dc:	1096e404 	addi	r2,r2,23440
   427e0:	180690fa 	slli	r3,r3,3
   427e4:	10c7883a 	add	r3,r2,r3
   427e8:	18800017 	ldw	r2,0(r3)
   427ec:	18c00117 	ldw	r3,4(r3)
   427f0:	003fb806 	br	426d4 <__alt_data_end+0xfffdb5d4>
   427f4:	218dc83a 	sub	r6,r4,r6
   427f8:	43802f36 	bltu	r8,r14,428b8 <__ieee754_fmod+0x27c>
   427fc:	30004f16 	blt	r6,zero,4293c <__ieee754_fmod+0x300>
   42800:	4391c83a 	sub	r8,r8,r14
   42804:	3204b03a 	or	r2,r6,r8
   42808:	103ff226 	beq	r2,zero,427d4 <__alt_data_end+0xfffdb6d4>
   4280c:	01000434 	movhi	r4,16
   42810:	213fffc4 	addi	r4,r4,-1
   42814:	21800616 	blt	r4,r6,42830 <__ieee754_fmod+0x1f4>
   42818:	4004d7fa 	srli	r2,r8,31
   4281c:	318d883a 	add	r6,r6,r6
   42820:	4211883a 	add	r8,r8,r8
   42824:	308d883a 	add	r6,r6,r2
   42828:	7bffffc4 	addi	r15,r15,-1
   4282c:	21bffa0e 	bge	r4,r6,42818 <__alt_data_end+0xfffdb718>
   42830:	01ff0084 	movi	r7,-1022
   42834:	79c0390e 	bge	r15,r7,4291c <__ieee754_fmod+0x2e0>
   42838:	3bcfc83a 	sub	r7,r7,r15
   4283c:	00800504 	movi	r2,20
   42840:	11c04016 	blt	r2,r7,42944 <__ieee754_fmod+0x308>
   42844:	00800804 	movi	r2,32
   42848:	11c5c83a 	sub	r2,r2,r7
   4284c:	41d0d83a 	srl	r8,r8,r7
   42850:	3084983a 	sll	r2,r6,r2
   42854:	31cfd83a 	sra	r7,r6,r7
   42858:	1208b03a 	or	r4,r2,r8
   4285c:	2005883a 	mov	r2,r4
   42860:	38c6b03a 	or	r3,r7,r3
   42864:	003f9b06 	br	426d4 <__alt_data_end+0xfffdb5d4>
   42868:	13c5c83a 	sub	r2,r2,r15
   4286c:	014007c4 	movi	r5,31
   42870:	28802516 	blt	r5,r2,42908 <__ieee754_fmod+0x2cc>
   42874:	01400804 	movi	r5,32
   42878:	288bc83a 	sub	r5,r5,r2
   4287c:	314ad83a 	srl	r5,r6,r5
   42880:	588e983a 	sll	r7,r11,r2
   42884:	309c983a 	sll	r14,r6,r2
   42888:	29ccb03a 	or	r6,r5,r7
   4288c:	003fbd06 	br	42784 <__alt_data_end+0xfffdb684>
   42890:	1285c83a 	sub	r2,r2,r10
   42894:	014007c4 	movi	r5,31
   42898:	28801616 	blt	r5,r2,428f4 <__ieee754_fmod+0x2b8>
   4289c:	02400804 	movi	r9,32
   428a0:	4893c83a 	sub	r9,r9,r2
   428a4:	2252d83a 	srl	r9,r4,r9
   428a8:	608a983a 	sll	r5,r12,r2
   428ac:	2090983a 	sll	r8,r4,r2
   428b0:	4948b03a 	or	r4,r9,r5
   428b4:	003fad06 	br	4276c <__alt_data_end+0xfffdb66c>
   428b8:	31bfffc4 	addi	r6,r6,-1
   428bc:	003fcf06 	br	427fc <__alt_data_end+0xfffdb6fc>
   428c0:	601292fa 	slli	r9,r12,11
   428c4:	02bf0084 	movi	r10,-1022
   428c8:	027f950e 	bge	zero,r9,42720 <__alt_data_end+0xfffdb620>
   428cc:	4a53883a 	add	r9,r9,r9
   428d0:	52bfffc4 	addi	r10,r10,-1
   428d4:	027ffd16 	blt	zero,r9,428cc <__alt_data_end+0xfffdb7cc>
   428d8:	003f9106 	br	42720 <__alt_data_end+0xfffdb620>
   428dc:	581292fa 	slli	r9,r11,11
   428e0:	03ff0084 	movi	r15,-1022
   428e4:	4a53883a 	add	r9,r9,r9
   428e8:	7bffffc4 	addi	r15,r15,-1
   428ec:	027ffd16 	blt	zero,r9,428e4 <__alt_data_end+0xfffdb7e4>
   428f0:	003f9806 	br	42754 <__alt_data_end+0xfffdb654>
   428f4:	017ef884 	movi	r5,-1054
   428f8:	2a8bc83a 	sub	r5,r5,r10
   428fc:	2148983a 	sll	r4,r4,r5
   42900:	0011883a 	mov	r8,zero
   42904:	003f9906 	br	4276c <__alt_data_end+0xfffdb66c>
   42908:	00bef884 	movi	r2,-1054
   4290c:	13c5c83a 	sub	r2,r2,r15
   42910:	308c983a 	sll	r6,r6,r2
   42914:	001d883a 	mov	r14,zero
   42918:	003f9a06 	br	42784 <__alt_data_end+0xfffdb684>
   4291c:	7900ffc4 	addi	r4,r15,1023
   42920:	00bffc34 	movhi	r2,65520
   42924:	2008953a 	slli	r4,r4,20
   42928:	308d883a 	add	r6,r6,r2
   4292c:	30c6b03a 	or	r3,r6,r3
   42930:	4005883a 	mov	r2,r8
   42934:	1906b03a 	or	r3,r3,r4
   42938:	003f6606 	br	426d4 <__alt_data_end+0xfffdb5d4>
   4293c:	200d883a 	mov	r6,r4
   42940:	003fb006 	br	42804 <__alt_data_end+0xfffdb704>
   42944:	008007c4 	movi	r2,31
   42948:	11c00716 	blt	r2,r7,42968 <__ieee754_fmod+0x32c>
   4294c:	01000804 	movi	r4,32
   42950:	21c9c83a 	sub	r4,r4,r7
   42954:	41d0d83a 	srl	r8,r8,r7
   42958:	310c983a 	sll	r6,r6,r4
   4295c:	180f883a 	mov	r7,r3
   42960:	3208b03a 	or	r4,r6,r8
   42964:	003fbd06 	br	4285c <__alt_data_end+0xfffdb75c>
   42968:	013ef884 	movi	r4,-1054
   4296c:	23c9c83a 	sub	r4,r4,r15
   42970:	3109d83a 	sra	r4,r6,r4
   42974:	180f883a 	mov	r7,r3
   42978:	003fb806 	br	4285c <__alt_data_end+0xfffdb75c>

0004297c <__ieee754_log>:
   4297c:	defff204 	addi	sp,sp,-56
   42980:	01800434 	movhi	r6,16
   42984:	dfc00d15 	stw	ra,52(sp)
   42988:	df000c15 	stw	fp,48(sp)
   4298c:	ddc00b15 	stw	r23,44(sp)
   42990:	dd800a15 	stw	r22,40(sp)
   42994:	dd400915 	stw	r21,36(sp)
   42998:	dd000815 	stw	r20,32(sp)
   4299c:	dcc00715 	stw	r19,28(sp)
   429a0:	dc800615 	stw	r18,24(sp)
   429a4:	dc400515 	stw	r17,20(sp)
   429a8:	dc000415 	stw	r16,16(sp)
   429ac:	31bfffc4 	addi	r6,r6,-1
   429b0:	280f883a 	mov	r7,r5
   429b4:	2005883a 	mov	r2,r4
   429b8:	31404616 	blt	r6,r5,42ad4 <__ieee754_log+0x158>
   429bc:	00e00034 	movhi	r3,32768
   429c0:	18ffffc4 	addi	r3,r3,-1
   429c4:	28c6703a 	and	r3,r5,r3
   429c8:	1906b03a 	or	r3,r3,r4
   429cc:	1800f426 	beq	r3,zero,42da0 <__ieee754_log+0x424>
   429d0:	28017816 	blt	r5,zero,42fb4 <__ieee754_log+0x638>
   429d4:	01d0d434 	movhi	r7,17232
   429d8:	000d883a 	mov	r6,zero
   429dc:	0045b2c0 	call	45b2c <__muldf3>
   429e0:	015ffc34 	movhi	r5,32752
   429e4:	297fffc4 	addi	r5,r5,-1
   429e8:	180f883a 	mov	r7,r3
   429ec:	013ff284 	movi	r4,-54
   429f0:	28c03d16 	blt	r5,r3,42ae8 <__ieee754_log+0x16c>
   429f4:	04c00434 	movhi	r19,16
   429f8:	9cffffc4 	addi	r19,r19,-1
   429fc:	01400274 	movhi	r5,9
   42a00:	1cf8703a 	and	fp,r3,r19
   42a04:	2957d904 	addi	r5,r5,24420
   42a08:	1821d53a 	srai	r16,r3,20
   42a0c:	e14b883a 	add	r5,fp,r5
   42a10:	2940042c 	andhi	r5,r5,16
   42a14:	2807d53a 	srai	r3,r5,20
   42a18:	843f0044 	addi	r16,r16,-1023
   42a1c:	294ffc3c 	xorhi	r5,r5,16368
   42a20:	8121883a 	add	r16,r16,r4
   42a24:	000d883a 	mov	r6,zero
   42a28:	01cffc34 	movhi	r7,16368
   42a2c:	1009883a 	mov	r4,r2
   42a30:	2f0ab03a 	or	r5,r5,fp
   42a34:	1c21883a 	add	r16,r3,r16
   42a38:	00462440 	call	46244 <__subdf3>
   42a3c:	1025883a 	mov	r18,r2
   42a40:	e0800084 	addi	r2,fp,2
   42a44:	14e6703a 	and	r19,r2,r19
   42a48:	00800084 	movi	r2,2
   42a4c:	1823883a 	mov	r17,r3
   42a50:	000d883a 	mov	r6,zero
   42a54:	14c03416 	blt	r2,r19,42b28 <__ieee754_log+0x1ac>
   42a58:	000f883a 	mov	r7,zero
   42a5c:	9009883a 	mov	r4,r18
   42a60:	180b883a 	mov	r5,r3
   42a64:	00459c80 	call	459c8 <__eqdf2>
   42a68:	1000d31e 	bne	r2,zero,42db8 <__ieee754_log+0x43c>
   42a6c:	80015926 	beq	r16,zero,42fd4 <__ieee754_log+0x658>
   42a70:	8009883a 	mov	r4,r16
   42a74:	0046bc00 	call	46bc0 <__floatsidf>
   42a78:	01cff9b4 	movhi	r7,16358
   42a7c:	39cb9084 	addi	r7,r7,11842
   42a80:	01bfb834 	movhi	r6,65248
   42a84:	1009883a 	mov	r4,r2
   42a88:	180b883a 	mov	r5,r3
   42a8c:	1023883a 	mov	r17,r2
   42a90:	1821883a 	mov	r16,r3
   42a94:	0045b2c0 	call	45b2c <__muldf3>
   42a98:	018d5e74 	movhi	r6,13689
   42a9c:	01cf7ab4 	movhi	r7,15850
   42aa0:	8809883a 	mov	r4,r17
   42aa4:	800b883a 	mov	r5,r16
   42aa8:	318f1d84 	addi	r6,r6,15478
   42aac:	39ce7bc4 	addi	r7,r7,14831
   42ab0:	1027883a 	mov	r19,r2
   42ab4:	1825883a 	mov	r18,r3
   42ab8:	0045b2c0 	call	45b2c <__muldf3>
   42abc:	100d883a 	mov	r6,r2
   42ac0:	180f883a 	mov	r7,r3
   42ac4:	9809883a 	mov	r4,r19
   42ac8:	900b883a 	mov	r5,r18
   42acc:	00448340 	call	44834 <__adddf3>
   42ad0:	00000906 	br	42af8 <__ieee754_log+0x17c>
   42ad4:	2807883a 	mov	r3,r5
   42ad8:	015ffc34 	movhi	r5,32752
   42adc:	297fffc4 	addi	r5,r5,-1
   42ae0:	0009883a 	mov	r4,zero
   42ae4:	28ffc30e 	bge	r5,r3,429f4 <__alt_data_end+0xfffdb8f4>
   42ae8:	100d883a 	mov	r6,r2
   42aec:	1009883a 	mov	r4,r2
   42af0:	380b883a 	mov	r5,r7
   42af4:	00448340 	call	44834 <__adddf3>
   42af8:	dfc00d17 	ldw	ra,52(sp)
   42afc:	df000c17 	ldw	fp,48(sp)
   42b00:	ddc00b17 	ldw	r23,44(sp)
   42b04:	dd800a17 	ldw	r22,40(sp)
   42b08:	dd400917 	ldw	r21,36(sp)
   42b0c:	dd000817 	ldw	r20,32(sp)
   42b10:	dcc00717 	ldw	r19,28(sp)
   42b14:	dc800617 	ldw	r18,24(sp)
   42b18:	dc400517 	ldw	r17,20(sp)
   42b1c:	dc000417 	ldw	r16,16(sp)
   42b20:	dec00e04 	addi	sp,sp,56
   42b24:	f800283a 	ret
   42b28:	01d00034 	movhi	r7,16384
   42b2c:	9009883a 	mov	r4,r18
   42b30:	180b883a 	mov	r5,r3
   42b34:	00448340 	call	44834 <__adddf3>
   42b38:	100d883a 	mov	r6,r2
   42b3c:	180f883a 	mov	r7,r3
   42b40:	880b883a 	mov	r5,r17
   42b44:	9009883a 	mov	r4,r18
   42b48:	00450e00 	call	450e0 <__divdf3>
   42b4c:	8009883a 	mov	r4,r16
   42b50:	102d883a 	mov	r22,r2
   42b54:	182b883a 	mov	r21,r3
   42b58:	0046bc00 	call	46bc0 <__floatsidf>
   42b5c:	b00d883a 	mov	r6,r22
   42b60:	a80f883a 	mov	r7,r21
   42b64:	b009883a 	mov	r4,r22
   42b68:	a80b883a 	mov	r5,r21
   42b6c:	d8800015 	stw	r2,0(sp)
   42b70:	d8c00115 	stw	r3,4(sp)
   42b74:	0045b2c0 	call	45b2c <__muldf3>
   42b78:	027ffeb4 	movhi	r9,65530
   42b7c:	4a7ae184 	addi	r9,r9,-5242
   42b80:	100d883a 	mov	r6,r2
   42b84:	180f883a 	mov	r7,r3
   42b88:	1009883a 	mov	r4,r2
   42b8c:	180b883a 	mov	r5,r3
   42b90:	e26f883a 	add	r23,fp,r9
   42b94:	d8c00315 	stw	r3,12(sp)
   42b98:	d8800215 	stw	r2,8(sp)
   42b9c:	0045b2c0 	call	45b2c <__muldf3>
   42ba0:	01b7cfb4 	movhi	r6,57150
   42ba4:	01cff0f4 	movhi	r7,16323
   42ba8:	31949104 	addi	r6,r6,21060
   42bac:	39fc4484 	addi	r7,r7,-3822
   42bb0:	1009883a 	mov	r4,r2
   42bb4:	180b883a 	mov	r5,r3
   42bb8:	1029883a 	mov	r20,r2
   42bbc:	1827883a 	mov	r19,r3
   42bc0:	0045b2c0 	call	45b2c <__muldf3>
   42bc4:	01a5b2f4 	movhi	r6,38603
   42bc8:	01cff1f4 	movhi	r7,16327
   42bcc:	3180f784 	addi	r6,r6,990
   42bd0:	39d19904 	addi	r7,r7,18020
   42bd4:	1009883a 	mov	r4,r2
   42bd8:	180b883a 	mov	r5,r3
   42bdc:	00448340 	call	44834 <__adddf3>
   42be0:	a00d883a 	mov	r6,r20
   42be4:	980f883a 	mov	r7,r19
   42be8:	1009883a 	mov	r4,r2
   42bec:	180b883a 	mov	r5,r3
   42bf0:	0045b2c0 	call	45b2c <__muldf3>
   42bf4:	01a508f4 	movhi	r6,37923
   42bf8:	01cff4b4 	movhi	r7,16338
   42bfc:	31a4d644 	addi	r6,r6,-27815
   42c00:	39d24904 	addi	r7,r7,18724
   42c04:	1009883a 	mov	r4,r2
   42c08:	180b883a 	mov	r5,r3
   42c0c:	00448340 	call	44834 <__adddf3>
   42c10:	a00d883a 	mov	r6,r20
   42c14:	980f883a 	mov	r7,r19
   42c18:	1009883a 	mov	r4,r2
   42c1c:	180b883a 	mov	r5,r3
   42c20:	0045b2c0 	call	45b2c <__muldf3>
   42c24:	01955574 	movhi	r6,21845
   42c28:	01cff974 	movhi	r7,16357
   42c2c:	319564c4 	addi	r6,r6,21907
   42c30:	39d55544 	addi	r7,r7,21845
   42c34:	1009883a 	mov	r4,r2
   42c38:	180b883a 	mov	r5,r3
   42c3c:	00448340 	call	44834 <__adddf3>
   42c40:	dac00217 	ldw	r11,8(sp)
   42c44:	da800317 	ldw	r10,12(sp)
   42c48:	1009883a 	mov	r4,r2
   42c4c:	580d883a 	mov	r6,r11
   42c50:	500f883a 	mov	r7,r10
   42c54:	180b883a 	mov	r5,r3
   42c58:	0045b2c0 	call	45b2c <__muldf3>
   42c5c:	01b41e74 	movhi	r6,53369
   42c60:	01cff134 	movhi	r7,16324
   42c64:	a009883a 	mov	r4,r20
   42c68:	980b883a 	mov	r5,r19
   42c6c:	31b1a7c4 	addi	r6,r6,-14689
   42c70:	39e68244 	addi	r7,r7,-26103
   42c74:	d8c00315 	stw	r3,12(sp)
   42c78:	d8800215 	stw	r2,8(sp)
   42c7c:	0045b2c0 	call	45b2c <__muldf3>
   42c80:	018763b4 	movhi	r6,7566
   42c84:	01cff334 	movhi	r7,16332
   42c88:	319e2bc4 	addi	r6,r6,30895
   42c8c:	39dc7144 	addi	r7,r7,29125
   42c90:	1009883a 	mov	r4,r2
   42c94:	180b883a 	mov	r5,r3
   42c98:	00448340 	call	44834 <__adddf3>
   42c9c:	a00d883a 	mov	r6,r20
   42ca0:	980f883a 	mov	r7,r19
   42ca4:	1009883a 	mov	r4,r2
   42ca8:	180b883a 	mov	r5,r3
   42cac:	0045b2c0 	call	45b2c <__muldf3>
   42cb0:	01a66634 	movhi	r6,39320
   42cb4:	01cff6b4 	movhi	r7,16346
   42cb8:	31be8104 	addi	r6,r6,-1532
   42cbc:	39e66644 	addi	r7,r7,-26215
   42cc0:	1009883a 	mov	r4,r2
   42cc4:	180b883a 	mov	r5,r3
   42cc8:	00448340 	call	44834 <__adddf3>
   42ccc:	a00d883a 	mov	r6,r20
   42cd0:	980f883a 	mov	r7,r19
   42cd4:	1009883a 	mov	r4,r2
   42cd8:	180b883a 	mov	r5,r3
   42cdc:	0045b2c0 	call	45b2c <__muldf3>
   42ce0:	dac00217 	ldw	r11,8(sp)
   42ce4:	da800317 	ldw	r10,12(sp)
   42ce8:	100d883a 	mov	r6,r2
   42cec:	180f883a 	mov	r7,r3
   42cf0:	5809883a 	mov	r4,r11
   42cf4:	500b883a 	mov	r5,r10
   42cf8:	00448340 	call	44834 <__adddf3>
   42cfc:	1827883a 	mov	r19,r3
   42d00:	00c001f4 	movhi	r3,7
   42d04:	18ee1444 	addi	r3,r3,-18351
   42d08:	1f07c83a 	sub	r3,r3,fp
   42d0c:	1dd2b03a 	or	r9,r3,r23
   42d10:	1029883a 	mov	r20,r2
   42d14:	0240490e 	bge	zero,r9,42e3c <__ieee754_log+0x4c0>
   42d18:	000d883a 	mov	r6,zero
   42d1c:	01cff834 	movhi	r7,16352
   42d20:	9009883a 	mov	r4,r18
   42d24:	880b883a 	mov	r5,r17
   42d28:	0045b2c0 	call	45b2c <__muldf3>
   42d2c:	900d883a 	mov	r6,r18
   42d30:	880f883a 	mov	r7,r17
   42d34:	1009883a 	mov	r4,r2
   42d38:	180b883a 	mov	r5,r3
   42d3c:	0045b2c0 	call	45b2c <__muldf3>
   42d40:	1039883a 	mov	fp,r2
   42d44:	182f883a 	mov	r23,r3
   42d48:	8000691e 	bne	r16,zero,42ef0 <__ieee754_log+0x574>
   42d4c:	100d883a 	mov	r6,r2
   42d50:	180f883a 	mov	r7,r3
   42d54:	a009883a 	mov	r4,r20
   42d58:	980b883a 	mov	r5,r19
   42d5c:	00448340 	call	44834 <__adddf3>
   42d60:	b00d883a 	mov	r6,r22
   42d64:	a80f883a 	mov	r7,r21
   42d68:	1009883a 	mov	r4,r2
   42d6c:	180b883a 	mov	r5,r3
   42d70:	0045b2c0 	call	45b2c <__muldf3>
   42d74:	100d883a 	mov	r6,r2
   42d78:	180f883a 	mov	r7,r3
   42d7c:	e009883a 	mov	r4,fp
   42d80:	b80b883a 	mov	r5,r23
   42d84:	00462440 	call	46244 <__subdf3>
   42d88:	100d883a 	mov	r6,r2
   42d8c:	180f883a 	mov	r7,r3
   42d90:	9009883a 	mov	r4,r18
   42d94:	880b883a 	mov	r5,r17
   42d98:	00462440 	call	46244 <__subdf3>
   42d9c:	003f5606 	br	42af8 <__alt_data_end+0xfffdb9f8>
   42da0:	000d883a 	mov	r6,zero
   42da4:	000f883a 	mov	r7,zero
   42da8:	0009883a 	mov	r4,zero
   42dac:	0170d434 	movhi	r5,50000
   42db0:	00450e00 	call	450e0 <__divdf3>
   42db4:	003f5006 	br	42af8 <__alt_data_end+0xfffdb9f8>
   42db8:	01955574 	movhi	r6,21845
   42dbc:	01cff574 	movhi	r7,16341
   42dc0:	31955544 	addi	r6,r6,21845
   42dc4:	39d55544 	addi	r7,r7,21845
   42dc8:	9009883a 	mov	r4,r18
   42dcc:	880b883a 	mov	r5,r17
   42dd0:	0045b2c0 	call	45b2c <__muldf3>
   42dd4:	100d883a 	mov	r6,r2
   42dd8:	180f883a 	mov	r7,r3
   42ddc:	0009883a 	mov	r4,zero
   42de0:	014ff834 	movhi	r5,16352
   42de4:	00462440 	call	46244 <__subdf3>
   42de8:	900d883a 	mov	r6,r18
   42dec:	880f883a 	mov	r7,r17
   42df0:	9009883a 	mov	r4,r18
   42df4:	880b883a 	mov	r5,r17
   42df8:	1029883a 	mov	r20,r2
   42dfc:	1827883a 	mov	r19,r3
   42e00:	0045b2c0 	call	45b2c <__muldf3>
   42e04:	a009883a 	mov	r4,r20
   42e08:	980b883a 	mov	r5,r19
   42e0c:	100d883a 	mov	r6,r2
   42e10:	180f883a 	mov	r7,r3
   42e14:	0045b2c0 	call	45b2c <__muldf3>
   42e18:	1029883a 	mov	r20,r2
   42e1c:	1827883a 	mov	r19,r3
   42e20:	80006f1e 	bne	r16,zero,42fe0 <__ieee754_log+0x664>
   42e24:	100d883a 	mov	r6,r2
   42e28:	180f883a 	mov	r7,r3
   42e2c:	9009883a 	mov	r4,r18
   42e30:	880b883a 	mov	r5,r17
   42e34:	00462440 	call	46244 <__subdf3>
   42e38:	003f2f06 	br	42af8 <__alt_data_end+0xfffdb9f8>
   42e3c:	80008b26 	beq	r16,zero,4306c <__ieee754_log+0x6f0>
   42e40:	d9000017 	ldw	r4,0(sp)
   42e44:	d9400117 	ldw	r5,4(sp)
   42e48:	01cff9b4 	movhi	r7,16358
   42e4c:	39cb9084 	addi	r7,r7,11842
   42e50:	01bfb834 	movhi	r6,65248
   42e54:	0045b2c0 	call	45b2c <__muldf3>
   42e58:	a00d883a 	mov	r6,r20
   42e5c:	980f883a 	mov	r7,r19
   42e60:	9009883a 	mov	r4,r18
   42e64:	880b883a 	mov	r5,r17
   42e68:	1821883a 	mov	r16,r3
   42e6c:	d8800215 	stw	r2,8(sp)
   42e70:	00462440 	call	46244 <__subdf3>
   42e74:	b00d883a 	mov	r6,r22
   42e78:	a80f883a 	mov	r7,r21
   42e7c:	1009883a 	mov	r4,r2
   42e80:	180b883a 	mov	r5,r3
   42e84:	0045b2c0 	call	45b2c <__muldf3>
   42e88:	d9000017 	ldw	r4,0(sp)
   42e8c:	d9400117 	ldw	r5,4(sp)
   42e90:	018d5e74 	movhi	r6,13689
   42e94:	01cf7ab4 	movhi	r7,15850
   42e98:	318f1d84 	addi	r6,r6,15478
   42e9c:	39ce7bc4 	addi	r7,r7,14831
   42ea0:	1029883a 	mov	r20,r2
   42ea4:	1827883a 	mov	r19,r3
   42ea8:	0045b2c0 	call	45b2c <__muldf3>
   42eac:	a009883a 	mov	r4,r20
   42eb0:	980b883a 	mov	r5,r19
   42eb4:	100d883a 	mov	r6,r2
   42eb8:	180f883a 	mov	r7,r3
   42ebc:	00462440 	call	46244 <__subdf3>
   42ec0:	900d883a 	mov	r6,r18
   42ec4:	880f883a 	mov	r7,r17
   42ec8:	1009883a 	mov	r4,r2
   42ecc:	180b883a 	mov	r5,r3
   42ed0:	00462440 	call	46244 <__subdf3>
   42ed4:	da000217 	ldw	r8,8(sp)
   42ed8:	100d883a 	mov	r6,r2
   42edc:	180f883a 	mov	r7,r3
   42ee0:	4009883a 	mov	r4,r8
   42ee4:	800b883a 	mov	r5,r16
   42ee8:	00462440 	call	46244 <__subdf3>
   42eec:	003f0206 	br	42af8 <__alt_data_end+0xfffdb9f8>
   42ef0:	d9000017 	ldw	r4,0(sp)
   42ef4:	d9400117 	ldw	r5,4(sp)
   42ef8:	01cff9b4 	movhi	r7,16358
   42efc:	39cb9084 	addi	r7,r7,11842
   42f00:	01bfb834 	movhi	r6,65248
   42f04:	0045b2c0 	call	45b2c <__muldf3>
   42f08:	e00d883a 	mov	r6,fp
   42f0c:	b80f883a 	mov	r7,r23
   42f10:	a009883a 	mov	r4,r20
   42f14:	980b883a 	mov	r5,r19
   42f18:	1821883a 	mov	r16,r3
   42f1c:	d8800315 	stw	r2,12(sp)
   42f20:	00448340 	call	44834 <__adddf3>
   42f24:	b00d883a 	mov	r6,r22
   42f28:	a80f883a 	mov	r7,r21
   42f2c:	1009883a 	mov	r4,r2
   42f30:	180b883a 	mov	r5,r3
   42f34:	0045b2c0 	call	45b2c <__muldf3>
   42f38:	d9000017 	ldw	r4,0(sp)
   42f3c:	d9400117 	ldw	r5,4(sp)
   42f40:	018d5e74 	movhi	r6,13689
   42f44:	01cf7ab4 	movhi	r7,15850
   42f48:	318f1d84 	addi	r6,r6,15478
   42f4c:	39ce7bc4 	addi	r7,r7,14831
   42f50:	1029883a 	mov	r20,r2
   42f54:	1827883a 	mov	r19,r3
   42f58:	0045b2c0 	call	45b2c <__muldf3>
   42f5c:	a009883a 	mov	r4,r20
   42f60:	980b883a 	mov	r5,r19
   42f64:	100d883a 	mov	r6,r2
   42f68:	180f883a 	mov	r7,r3
   42f6c:	00448340 	call	44834 <__adddf3>
   42f70:	e009883a 	mov	r4,fp
   42f74:	b80b883a 	mov	r5,r23
   42f78:	100d883a 	mov	r6,r2
   42f7c:	180f883a 	mov	r7,r3
   42f80:	00462440 	call	46244 <__subdf3>
   42f84:	900d883a 	mov	r6,r18
   42f88:	880f883a 	mov	r7,r17
   42f8c:	1009883a 	mov	r4,r2
   42f90:	180b883a 	mov	r5,r3
   42f94:	00462440 	call	46244 <__subdf3>
   42f98:	da800317 	ldw	r10,12(sp)
   42f9c:	100d883a 	mov	r6,r2
   42fa0:	180f883a 	mov	r7,r3
   42fa4:	5009883a 	mov	r4,r10
   42fa8:	800b883a 	mov	r5,r16
   42fac:	00462440 	call	46244 <__subdf3>
   42fb0:	003ed106 	br	42af8 <__alt_data_end+0xfffdb9f8>
   42fb4:	200d883a 	mov	r6,r4
   42fb8:	00462440 	call	46244 <__subdf3>
   42fbc:	000d883a 	mov	r6,zero
   42fc0:	000f883a 	mov	r7,zero
   42fc4:	1009883a 	mov	r4,r2
   42fc8:	180b883a 	mov	r5,r3
   42fcc:	00450e00 	call	450e0 <__divdf3>
   42fd0:	003ec906 	br	42af8 <__alt_data_end+0xfffdb9f8>
   42fd4:	0005883a 	mov	r2,zero
   42fd8:	0007883a 	mov	r3,zero
   42fdc:	003ec606 	br	42af8 <__alt_data_end+0xfffdb9f8>
   42fe0:	8009883a 	mov	r4,r16
   42fe4:	0046bc00 	call	46bc0 <__floatsidf>
   42fe8:	01cff9b4 	movhi	r7,16358
   42fec:	39cb9084 	addi	r7,r7,11842
   42ff0:	01bfb834 	movhi	r6,65248
   42ff4:	1009883a 	mov	r4,r2
   42ff8:	180b883a 	mov	r5,r3
   42ffc:	102b883a 	mov	r21,r2
   43000:	1821883a 	mov	r16,r3
   43004:	0045b2c0 	call	45b2c <__muldf3>
   43008:	018d5e74 	movhi	r6,13689
   4300c:	01cf7ab4 	movhi	r7,15850
   43010:	a809883a 	mov	r4,r21
   43014:	800b883a 	mov	r5,r16
   43018:	318f1d84 	addi	r6,r6,15478
   4301c:	39ce7bc4 	addi	r7,r7,14831
   43020:	102f883a 	mov	r23,r2
   43024:	182d883a 	mov	r22,r3
   43028:	0045b2c0 	call	45b2c <__muldf3>
   4302c:	a009883a 	mov	r4,r20
   43030:	980b883a 	mov	r5,r19
   43034:	100d883a 	mov	r6,r2
   43038:	180f883a 	mov	r7,r3
   4303c:	00462440 	call	46244 <__subdf3>
   43040:	900d883a 	mov	r6,r18
   43044:	880f883a 	mov	r7,r17
   43048:	1009883a 	mov	r4,r2
   4304c:	180b883a 	mov	r5,r3
   43050:	00462440 	call	46244 <__subdf3>
   43054:	100d883a 	mov	r6,r2
   43058:	180f883a 	mov	r7,r3
   4305c:	b809883a 	mov	r4,r23
   43060:	b00b883a 	mov	r5,r22
   43064:	00462440 	call	46244 <__subdf3>
   43068:	003ea306 	br	42af8 <__alt_data_end+0xfffdb9f8>
   4306c:	a00d883a 	mov	r6,r20
   43070:	980f883a 	mov	r7,r19
   43074:	9009883a 	mov	r4,r18
   43078:	880b883a 	mov	r5,r17
   4307c:	00462440 	call	46244 <__subdf3>
   43080:	b00d883a 	mov	r6,r22
   43084:	a80f883a 	mov	r7,r21
   43088:	1009883a 	mov	r4,r2
   4308c:	180b883a 	mov	r5,r3
   43090:	0045b2c0 	call	45b2c <__muldf3>
   43094:	003f3c06 	br	42d88 <__alt_data_end+0xfffdbc88>

00043098 <__fpclassifyd>:
   43098:	00a00034 	movhi	r2,32768
   4309c:	10bfffc4 	addi	r2,r2,-1
   430a0:	2884703a 	and	r2,r5,r2
   430a4:	10000726 	beq	r2,zero,430c4 <__fpclassifyd+0x2c>
   430a8:	00fffc34 	movhi	r3,65520
   430ac:	019ff834 	movhi	r6,32736
   430b0:	28c7883a 	add	r3,r5,r3
   430b4:	31bfffc4 	addi	r6,r6,-1
   430b8:	30c00536 	bltu	r6,r3,430d0 <__fpclassifyd+0x38>
   430bc:	00800104 	movi	r2,4
   430c0:	f800283a 	ret
   430c4:	2000021e 	bne	r4,zero,430d0 <__fpclassifyd+0x38>
   430c8:	00800084 	movi	r2,2
   430cc:	f800283a 	ret
   430d0:	00dffc34 	movhi	r3,32752
   430d4:	019ff834 	movhi	r6,32736
   430d8:	28cb883a 	add	r5,r5,r3
   430dc:	31bfffc4 	addi	r6,r6,-1
   430e0:	317ff62e 	bgeu	r6,r5,430bc <__alt_data_end+0xfffdbfbc>
   430e4:	01400434 	movhi	r5,16
   430e8:	297fffc4 	addi	r5,r5,-1
   430ec:	28800236 	bltu	r5,r2,430f8 <__fpclassifyd+0x60>
   430f0:	008000c4 	movi	r2,3
   430f4:	f800283a 	ret
   430f8:	10c00226 	beq	r2,r3,43104 <__fpclassifyd+0x6c>
   430fc:	0005883a 	mov	r2,zero
   43100:	f800283a 	ret
   43104:	2005003a 	cmpeq	r2,r4,zero
   43108:	f800283a 	ret

0004310c <matherr>:
   4310c:	0005883a 	mov	r2,zero
   43110:	f800283a 	ret

00043114 <nan>:
   43114:	0005883a 	mov	r2,zero
   43118:	00dffe34 	movhi	r3,32760
   4311c:	f800283a 	ret

00043120 <__fixunssfsi>:
   43120:	defffd04 	addi	sp,sp,-12
   43124:	dc000015 	stw	r16,0(sp)
   43128:	0413c034 	movhi	r16,20224
   4312c:	800b883a 	mov	r5,r16
   43130:	dc400115 	stw	r17,4(sp)
   43134:	dfc00215 	stw	ra,8(sp)
   43138:	2023883a 	mov	r17,r4
   4313c:	0043c3c0 	call	43c3c <__gesf2>
   43140:	1000070e 	bge	r2,zero,43160 <__fixunssfsi+0x40>
   43144:	8809883a 	mov	r4,r17
   43148:	00446a00 	call	446a0 <__fixsfsi>
   4314c:	dfc00217 	ldw	ra,8(sp)
   43150:	dc400117 	ldw	r17,4(sp)
   43154:	dc000017 	ldw	r16,0(sp)
   43158:	dec00304 	addi	sp,sp,12
   4315c:	f800283a 	ret
   43160:	800b883a 	mov	r5,r16
   43164:	8809883a 	mov	r4,r17
   43168:	00441bc0 	call	441bc <__subsf3>
   4316c:	1009883a 	mov	r4,r2
   43170:	00446a00 	call	446a0 <__fixsfsi>
   43174:	00e00034 	movhi	r3,32768
   43178:	10c5883a 	add	r2,r2,r3
   4317c:	003ff306 	br	4314c <__alt_data_end+0xfffdc04c>

00043180 <__divsi3>:
   43180:	20001b16 	blt	r4,zero,431f0 <__divsi3+0x70>
   43184:	000f883a 	mov	r7,zero
   43188:	28001616 	blt	r5,zero,431e4 <__divsi3+0x64>
   4318c:	200d883a 	mov	r6,r4
   43190:	29001a2e 	bgeu	r5,r4,431fc <__divsi3+0x7c>
   43194:	00800804 	movi	r2,32
   43198:	00c00044 	movi	r3,1
   4319c:	00000106 	br	431a4 <__divsi3+0x24>
   431a0:	10000d26 	beq	r2,zero,431d8 <__divsi3+0x58>
   431a4:	294b883a 	add	r5,r5,r5
   431a8:	10bfffc4 	addi	r2,r2,-1
   431ac:	18c7883a 	add	r3,r3,r3
   431b0:	293ffb36 	bltu	r5,r4,431a0 <__alt_data_end+0xfffdc0a0>
   431b4:	0005883a 	mov	r2,zero
   431b8:	18000726 	beq	r3,zero,431d8 <__divsi3+0x58>
   431bc:	0005883a 	mov	r2,zero
   431c0:	31400236 	bltu	r6,r5,431cc <__divsi3+0x4c>
   431c4:	314dc83a 	sub	r6,r6,r5
   431c8:	10c4b03a 	or	r2,r2,r3
   431cc:	1806d07a 	srli	r3,r3,1
   431d0:	280ad07a 	srli	r5,r5,1
   431d4:	183ffa1e 	bne	r3,zero,431c0 <__alt_data_end+0xfffdc0c0>
   431d8:	38000126 	beq	r7,zero,431e0 <__divsi3+0x60>
   431dc:	0085c83a 	sub	r2,zero,r2
   431e0:	f800283a 	ret
   431e4:	014bc83a 	sub	r5,zero,r5
   431e8:	39c0005c 	xori	r7,r7,1
   431ec:	003fe706 	br	4318c <__alt_data_end+0xfffdc08c>
   431f0:	0109c83a 	sub	r4,zero,r4
   431f4:	01c00044 	movi	r7,1
   431f8:	003fe306 	br	43188 <__alt_data_end+0xfffdc088>
   431fc:	00c00044 	movi	r3,1
   43200:	003fee06 	br	431bc <__alt_data_end+0xfffdc0bc>

00043204 <__modsi3>:
   43204:	20001716 	blt	r4,zero,43264 <__modsi3+0x60>
   43208:	000f883a 	mov	r7,zero
   4320c:	2005883a 	mov	r2,r4
   43210:	28001216 	blt	r5,zero,4325c <__modsi3+0x58>
   43214:	2900162e 	bgeu	r5,r4,43270 <__modsi3+0x6c>
   43218:	01800804 	movi	r6,32
   4321c:	00c00044 	movi	r3,1
   43220:	00000106 	br	43228 <__modsi3+0x24>
   43224:	30000a26 	beq	r6,zero,43250 <__modsi3+0x4c>
   43228:	294b883a 	add	r5,r5,r5
   4322c:	31bfffc4 	addi	r6,r6,-1
   43230:	18c7883a 	add	r3,r3,r3
   43234:	293ffb36 	bltu	r5,r4,43224 <__alt_data_end+0xfffdc124>
   43238:	18000526 	beq	r3,zero,43250 <__modsi3+0x4c>
   4323c:	1806d07a 	srli	r3,r3,1
   43240:	11400136 	bltu	r2,r5,43248 <__modsi3+0x44>
   43244:	1145c83a 	sub	r2,r2,r5
   43248:	280ad07a 	srli	r5,r5,1
   4324c:	183ffb1e 	bne	r3,zero,4323c <__alt_data_end+0xfffdc13c>
   43250:	38000126 	beq	r7,zero,43258 <__modsi3+0x54>
   43254:	0085c83a 	sub	r2,zero,r2
   43258:	f800283a 	ret
   4325c:	014bc83a 	sub	r5,zero,r5
   43260:	003fec06 	br	43214 <__alt_data_end+0xfffdc114>
   43264:	0109c83a 	sub	r4,zero,r4
   43268:	01c00044 	movi	r7,1
   4326c:	003fe706 	br	4320c <__alt_data_end+0xfffdc10c>
   43270:	00c00044 	movi	r3,1
   43274:	003ff106 	br	4323c <__alt_data_end+0xfffdc13c>

00043278 <__udivsi3>:
   43278:	200d883a 	mov	r6,r4
   4327c:	2900152e 	bgeu	r5,r4,432d4 <__udivsi3+0x5c>
   43280:	28001416 	blt	r5,zero,432d4 <__udivsi3+0x5c>
   43284:	00800804 	movi	r2,32
   43288:	00c00044 	movi	r3,1
   4328c:	00000206 	br	43298 <__udivsi3+0x20>
   43290:	10000e26 	beq	r2,zero,432cc <__udivsi3+0x54>
   43294:	28000516 	blt	r5,zero,432ac <__udivsi3+0x34>
   43298:	294b883a 	add	r5,r5,r5
   4329c:	10bfffc4 	addi	r2,r2,-1
   432a0:	18c7883a 	add	r3,r3,r3
   432a4:	293ffa36 	bltu	r5,r4,43290 <__alt_data_end+0xfffdc190>
   432a8:	18000826 	beq	r3,zero,432cc <__udivsi3+0x54>
   432ac:	0005883a 	mov	r2,zero
   432b0:	31400236 	bltu	r6,r5,432bc <__udivsi3+0x44>
   432b4:	314dc83a 	sub	r6,r6,r5
   432b8:	10c4b03a 	or	r2,r2,r3
   432bc:	1806d07a 	srli	r3,r3,1
   432c0:	280ad07a 	srli	r5,r5,1
   432c4:	183ffa1e 	bne	r3,zero,432b0 <__alt_data_end+0xfffdc1b0>
   432c8:	f800283a 	ret
   432cc:	0005883a 	mov	r2,zero
   432d0:	f800283a 	ret
   432d4:	00c00044 	movi	r3,1
   432d8:	003ff406 	br	432ac <__alt_data_end+0xfffdc1ac>

000432dc <__umodsi3>:
   432dc:	2005883a 	mov	r2,r4
   432e0:	2900122e 	bgeu	r5,r4,4332c <__umodsi3+0x50>
   432e4:	28001116 	blt	r5,zero,4332c <__umodsi3+0x50>
   432e8:	01800804 	movi	r6,32
   432ec:	00c00044 	movi	r3,1
   432f0:	00000206 	br	432fc <__umodsi3+0x20>
   432f4:	30000c26 	beq	r6,zero,43328 <__umodsi3+0x4c>
   432f8:	28000516 	blt	r5,zero,43310 <__umodsi3+0x34>
   432fc:	294b883a 	add	r5,r5,r5
   43300:	31bfffc4 	addi	r6,r6,-1
   43304:	18c7883a 	add	r3,r3,r3
   43308:	293ffa36 	bltu	r5,r4,432f4 <__alt_data_end+0xfffdc1f4>
   4330c:	18000626 	beq	r3,zero,43328 <__umodsi3+0x4c>
   43310:	1806d07a 	srli	r3,r3,1
   43314:	11400136 	bltu	r2,r5,4331c <__umodsi3+0x40>
   43318:	1145c83a 	sub	r2,r2,r5
   4331c:	280ad07a 	srli	r5,r5,1
   43320:	183ffb1e 	bne	r3,zero,43310 <__alt_data_end+0xfffdc210>
   43324:	f800283a 	ret
   43328:	f800283a 	ret
   4332c:	00c00044 	movi	r3,1
   43330:	003ff706 	br	43310 <__alt_data_end+0xfffdc210>

00043334 <__addsf3>:
   43334:	defffc04 	addi	sp,sp,-16
   43338:	2004d7fa 	srli	r2,r4,31
   4333c:	280cd5fa 	srli	r6,r5,23
   43340:	dc000015 	stw	r16,0(sp)
   43344:	00c02034 	movhi	r3,128
   43348:	2020d5fa 	srli	r16,r4,23
   4334c:	280ed7fa 	srli	r7,r5,31
   43350:	18ffffc4 	addi	r3,r3,-1
   43354:	dc400115 	stw	r17,4(sp)
   43358:	1908703a 	and	r4,r3,r4
   4335c:	194a703a 	and	r5,r3,r5
   43360:	dfc00315 	stw	ra,12(sp)
   43364:	dc800215 	stw	r18,8(sp)
   43368:	14403fcc 	andi	r17,r2,255
   4336c:	84003fcc 	andi	r16,r16,255
   43370:	200890fa 	slli	r4,r4,3
   43374:	31803fcc 	andi	r6,r6,255
   43378:	280a90fa 	slli	r5,r5,3
   4337c:	89c05026 	beq	r17,r7,434c0 <__addsf3+0x18c>
   43380:	8185c83a 	sub	r2,r16,r6
   43384:	00807a0e 	bge	zero,r2,43570 <__addsf3+0x23c>
   43388:	30001e1e 	bne	r6,zero,43404 <__addsf3+0xd0>
   4338c:	28006d1e 	bne	r5,zero,43544 <__addsf3+0x210>
   43390:	208001cc 	andi	r2,r4,7
   43394:	10000426 	beq	r2,zero,433a8 <__addsf3+0x74>
   43398:	208003cc 	andi	r2,r4,15
   4339c:	00c00104 	movi	r3,4
   433a0:	10c00126 	beq	r2,r3,433a8 <__addsf3+0x74>
   433a4:	20c9883a 	add	r4,r4,r3
   433a8:	2081002c 	andhi	r2,r4,1024
   433ac:	10003926 	beq	r2,zero,43494 <__addsf3+0x160>
   433b0:	84000044 	addi	r16,r16,1
   433b4:	00803fc4 	movi	r2,255
   433b8:	80807826 	beq	r16,r2,4359c <__addsf3+0x268>
   433bc:	200891ba 	slli	r4,r4,6
   433c0:	8805883a 	mov	r2,r17
   433c4:	2008d27a 	srli	r4,r4,9
   433c8:	84003fcc 	andi	r16,r16,255
   433cc:	800695fa 	slli	r3,r16,23
   433d0:	10803fcc 	andi	r2,r2,255
   433d4:	04002034 	movhi	r16,128
   433d8:	843fffc4 	addi	r16,r16,-1
   433dc:	100497fa 	slli	r2,r2,31
   433e0:	2408703a 	and	r4,r4,r16
   433e4:	20e0b03a 	or	r16,r4,r3
   433e8:	8084b03a 	or	r2,r16,r2
   433ec:	dfc00317 	ldw	ra,12(sp)
   433f0:	dc800217 	ldw	r18,8(sp)
   433f4:	dc400117 	ldw	r17,4(sp)
   433f8:	dc000017 	ldw	r16,0(sp)
   433fc:	dec00404 	addi	sp,sp,16
   43400:	f800283a 	ret
   43404:	00c03fc4 	movi	r3,255
   43408:	80ffe126 	beq	r16,r3,43390 <__alt_data_end+0xfffdc290>
   4340c:	29410034 	orhi	r5,r5,1024
   43410:	00c006c4 	movi	r3,27
   43414:	18807516 	blt	r3,r2,435ec <__addsf3+0x2b8>
   43418:	00c00804 	movi	r3,32
   4341c:	1887c83a 	sub	r3,r3,r2
   43420:	28c6983a 	sll	r3,r5,r3
   43424:	288ad83a 	srl	r5,r5,r2
   43428:	1804c03a 	cmpne	r2,r3,zero
   4342c:	288ab03a 	or	r5,r5,r2
   43430:	2149c83a 	sub	r4,r4,r5
   43434:	2081002c 	andhi	r2,r4,1024
   43438:	10001426 	beq	r2,zero,4348c <__addsf3+0x158>
   4343c:	04810034 	movhi	r18,1024
   43440:	94bfffc4 	addi	r18,r18,-1
   43444:	24a4703a 	and	r18,r4,r18
   43448:	9009883a 	mov	r4,r18
   4344c:	0046f540 	call	46f54 <__clzsi2>
   43450:	10bffec4 	addi	r2,r2,-5
   43454:	90a4983a 	sll	r18,r18,r2
   43458:	14005416 	blt	r2,r16,435ac <__addsf3+0x278>
   4345c:	1405c83a 	sub	r2,r2,r16
   43460:	11000044 	addi	r4,r2,1
   43464:	00800804 	movi	r2,32
   43468:	1105c83a 	sub	r2,r2,r4
   4346c:	9084983a 	sll	r2,r18,r2
   43470:	9124d83a 	srl	r18,r18,r4
   43474:	0021883a 	mov	r16,zero
   43478:	1008c03a 	cmpne	r4,r2,zero
   4347c:	9108b03a 	or	r4,r18,r4
   43480:	003fc306 	br	43390 <__alt_data_end+0xfffdc290>
   43484:	1000db26 	beq	r2,zero,437f4 <__addsf3+0x4c0>
   43488:	1009883a 	mov	r4,r2
   4348c:	208001cc 	andi	r2,r4,7
   43490:	103fc11e 	bne	r2,zero,43398 <__alt_data_end+0xfffdc298>
   43494:	2006d0fa 	srli	r3,r4,3
   43498:	01003fc4 	movi	r4,255
   4349c:	8805883a 	mov	r2,r17
   434a0:	8100241e 	bne	r16,r4,43534 <__addsf3+0x200>
   434a4:	18006e26 	beq	r3,zero,43660 <__addsf3+0x32c>
   434a8:	19001034 	orhi	r4,r3,64
   434ac:	00c02034 	movhi	r3,128
   434b0:	18ffffc4 	addi	r3,r3,-1
   434b4:	043fffc4 	movi	r16,-1
   434b8:	20c8703a 	and	r4,r4,r3
   434bc:	003fc206 	br	433c8 <__alt_data_end+0xfffdc2c8>
   434c0:	8187c83a 	sub	r3,r16,r6
   434c4:	00c03e0e 	bge	zero,r3,435c0 <__addsf3+0x28c>
   434c8:	30002326 	beq	r6,zero,43558 <__addsf3+0x224>
   434cc:	01803fc4 	movi	r6,255
   434d0:	81bfaf26 	beq	r16,r6,43390 <__alt_data_end+0xfffdc290>
   434d4:	29410034 	orhi	r5,r5,1024
   434d8:	018006c4 	movi	r6,27
   434dc:	30c07416 	blt	r6,r3,436b0 <__addsf3+0x37c>
   434e0:	01800804 	movi	r6,32
   434e4:	30cdc83a 	sub	r6,r6,r3
   434e8:	298c983a 	sll	r6,r5,r6
   434ec:	28cad83a 	srl	r5,r5,r3
   434f0:	3006c03a 	cmpne	r3,r6,zero
   434f4:	28cab03a 	or	r5,r5,r3
   434f8:	2149883a 	add	r4,r4,r5
   434fc:	20c1002c 	andhi	r3,r4,1024
   43500:	183fe226 	beq	r3,zero,4348c <__alt_data_end+0xfffdc38c>
   43504:	84000044 	addi	r16,r16,1
   43508:	00c03fc4 	movi	r3,255
   4350c:	80c05426 	beq	r16,r3,43660 <__addsf3+0x32c>
   43510:	00bf0034 	movhi	r2,64512
   43514:	10bfffc4 	addi	r2,r2,-1
   43518:	20c0004c 	andi	r3,r4,1
   4351c:	2088703a 	and	r4,r4,r2
   43520:	2008d07a 	srli	r4,r4,1
   43524:	20c8b03a 	or	r4,r4,r3
   43528:	003f9906 	br	43390 <__alt_data_end+0xfffdc290>
   4352c:	0007883a 	mov	r3,zero
   43530:	0005883a 	mov	r2,zero
   43534:	01002034 	movhi	r4,128
   43538:	213fffc4 	addi	r4,r4,-1
   4353c:	1908703a 	and	r4,r3,r4
   43540:	003fa106 	br	433c8 <__alt_data_end+0xfffdc2c8>
   43544:	10bfffc4 	addi	r2,r2,-1
   43548:	103fb926 	beq	r2,zero,43430 <__alt_data_end+0xfffdc330>
   4354c:	00c03fc4 	movi	r3,255
   43550:	80ffaf1e 	bne	r16,r3,43410 <__alt_data_end+0xfffdc310>
   43554:	003f8e06 	br	43390 <__alt_data_end+0xfffdc290>
   43558:	283f8d26 	beq	r5,zero,43390 <__alt_data_end+0xfffdc290>
   4355c:	18ffffc4 	addi	r3,r3,-1
   43560:	183fe526 	beq	r3,zero,434f8 <__alt_data_end+0xfffdc3f8>
   43564:	01803fc4 	movi	r6,255
   43568:	81bfdb1e 	bne	r16,r6,434d8 <__alt_data_end+0xfffdc3d8>
   4356c:	003f8806 	br	43390 <__alt_data_end+0xfffdc290>
   43570:	1000201e 	bne	r2,zero,435f4 <__addsf3+0x2c0>
   43574:	80800044 	addi	r2,r16,1
   43578:	10803fcc 	andi	r2,r2,255
   4357c:	01800044 	movi	r6,1
   43580:	3080450e 	bge	r6,r2,43698 <__addsf3+0x364>
   43584:	2165c83a 	sub	r18,r4,r5
   43588:	90c1002c 	andhi	r3,r18,1024
   4358c:	18002b26 	beq	r3,zero,4363c <__addsf3+0x308>
   43590:	2925c83a 	sub	r18,r5,r4
   43594:	3823883a 	mov	r17,r7
   43598:	003fab06 	br	43448 <__alt_data_end+0xfffdc348>
   4359c:	8805883a 	mov	r2,r17
   435a0:	043fffc4 	movi	r16,-1
   435a4:	0009883a 	mov	r4,zero
   435a8:	003f8706 	br	433c8 <__alt_data_end+0xfffdc2c8>
   435ac:	013f0034 	movhi	r4,64512
   435b0:	213fffc4 	addi	r4,r4,-1
   435b4:	80a1c83a 	sub	r16,r16,r2
   435b8:	9108703a 	and	r4,r18,r4
   435bc:	003f7406 	br	43390 <__alt_data_end+0xfffdc290>
   435c0:	1800411e 	bne	r3,zero,436c8 <__addsf3+0x394>
   435c4:	80c00044 	addi	r3,r16,1
   435c8:	19c03fcc 	andi	r7,r3,255
   435cc:	01800044 	movi	r6,1
   435d0:	31c0260e 	bge	r6,r7,4366c <__addsf3+0x338>
   435d4:	01803fc4 	movi	r6,255
   435d8:	19802126 	beq	r3,r6,43660 <__addsf3+0x32c>
   435dc:	2149883a 	add	r4,r4,r5
   435e0:	2008d07a 	srli	r4,r4,1
   435e4:	1821883a 	mov	r16,r3
   435e8:	003f6906 	br	43390 <__alt_data_end+0xfffdc290>
   435ec:	01400044 	movi	r5,1
   435f0:	003f8f06 	br	43430 <__alt_data_end+0xfffdc330>
   435f4:	8000151e 	bne	r16,zero,4364c <__addsf3+0x318>
   435f8:	20002f26 	beq	r4,zero,436b8 <__addsf3+0x384>
   435fc:	0084303a 	nor	r2,zero,r2
   43600:	10000a26 	beq	r2,zero,4362c <__addsf3+0x2f8>
   43604:	00c03fc4 	movi	r3,255
   43608:	30c02b26 	beq	r6,r3,436b8 <__addsf3+0x384>
   4360c:	00c006c4 	movi	r3,27
   43610:	18806d16 	blt	r3,r2,437c8 <__addsf3+0x494>
   43614:	00c00804 	movi	r3,32
   43618:	1887c83a 	sub	r3,r3,r2
   4361c:	20c6983a 	sll	r3,r4,r3
   43620:	2084d83a 	srl	r2,r4,r2
   43624:	1808c03a 	cmpne	r4,r3,zero
   43628:	1108b03a 	or	r4,r2,r4
   4362c:	2909c83a 	sub	r4,r5,r4
   43630:	3021883a 	mov	r16,r6
   43634:	3823883a 	mov	r17,r7
   43638:	003f7e06 	br	43434 <__alt_data_end+0xfffdc334>
   4363c:	903f821e 	bne	r18,zero,43448 <__alt_data_end+0xfffdc348>
   43640:	0005883a 	mov	r2,zero
   43644:	0021883a 	mov	r16,zero
   43648:	003fba06 	br	43534 <__alt_data_end+0xfffdc434>
   4364c:	00c03fc4 	movi	r3,255
   43650:	30c01926 	beq	r6,r3,436b8 <__addsf3+0x384>
   43654:	0085c83a 	sub	r2,zero,r2
   43658:	21010034 	orhi	r4,r4,1024
   4365c:	003feb06 	br	4360c <__alt_data_end+0xfffdc50c>
   43660:	043fffc4 	movi	r16,-1
   43664:	0009883a 	mov	r4,zero
   43668:	003f5706 	br	433c8 <__alt_data_end+0xfffdc2c8>
   4366c:	80004a1e 	bne	r16,zero,43798 <__addsf3+0x464>
   43670:	20005926 	beq	r4,zero,437d8 <__addsf3+0x4a4>
   43674:	283f4626 	beq	r5,zero,43390 <__alt_data_end+0xfffdc290>
   43678:	2149883a 	add	r4,r4,r5
   4367c:	2081002c 	andhi	r2,r4,1024
   43680:	103f8226 	beq	r2,zero,4348c <__alt_data_end+0xfffdc38c>
   43684:	00bf0034 	movhi	r2,64512
   43688:	10bfffc4 	addi	r2,r2,-1
   4368c:	3021883a 	mov	r16,r6
   43690:	2088703a 	and	r4,r4,r2
   43694:	003f3e06 	br	43390 <__alt_data_end+0xfffdc290>
   43698:	8000121e 	bne	r16,zero,436e4 <__addsf3+0x3b0>
   4369c:	2000261e 	bne	r4,zero,43738 <__addsf3+0x404>
   436a0:	283fa226 	beq	r5,zero,4352c <__alt_data_end+0xfffdc42c>
   436a4:	2809883a 	mov	r4,r5
   436a8:	3823883a 	mov	r17,r7
   436ac:	003f3806 	br	43390 <__alt_data_end+0xfffdc290>
   436b0:	01400044 	movi	r5,1
   436b4:	003f9006 	br	434f8 <__alt_data_end+0xfffdc3f8>
   436b8:	2809883a 	mov	r4,r5
   436bc:	3021883a 	mov	r16,r6
   436c0:	3823883a 	mov	r17,r7
   436c4:	003f3206 	br	43390 <__alt_data_end+0xfffdc290>
   436c8:	80000c1e 	bne	r16,zero,436fc <__addsf3+0x3c8>
   436cc:	20002f26 	beq	r4,zero,4378c <__addsf3+0x458>
   436d0:	00c6303a 	nor	r3,zero,r3
   436d4:	18002b1e 	bne	r3,zero,43784 <__addsf3+0x450>
   436d8:	2149883a 	add	r4,r4,r5
   436dc:	3021883a 	mov	r16,r6
   436e0:	003f8606 	br	434fc <__alt_data_end+0xfffdc3fc>
   436e4:	20001b1e 	bne	r4,zero,43754 <__addsf3+0x420>
   436e8:	28003926 	beq	r5,zero,437d0 <__addsf3+0x49c>
   436ec:	2809883a 	mov	r4,r5
   436f0:	3823883a 	mov	r17,r7
   436f4:	04003fc4 	movi	r16,255
   436f8:	003f2506 	br	43390 <__alt_data_end+0xfffdc290>
   436fc:	01c03fc4 	movi	r7,255
   43700:	31c02226 	beq	r6,r7,4378c <__addsf3+0x458>
   43704:	00c7c83a 	sub	r3,zero,r3
   43708:	21010034 	orhi	r4,r4,1024
   4370c:	01c006c4 	movi	r7,27
   43710:	38c03616 	blt	r7,r3,437ec <__addsf3+0x4b8>
   43714:	01c00804 	movi	r7,32
   43718:	38cfc83a 	sub	r7,r7,r3
   4371c:	21ce983a 	sll	r7,r4,r7
   43720:	20c6d83a 	srl	r3,r4,r3
   43724:	3808c03a 	cmpne	r4,r7,zero
   43728:	1906b03a 	or	r3,r3,r4
   4372c:	1949883a 	add	r4,r3,r5
   43730:	3021883a 	mov	r16,r6
   43734:	003f7106 	br	434fc <__alt_data_end+0xfffdc3fc>
   43738:	283f1526 	beq	r5,zero,43390 <__alt_data_end+0xfffdc290>
   4373c:	2145c83a 	sub	r2,r4,r5
   43740:	10c1002c 	andhi	r3,r2,1024
   43744:	183f4f26 	beq	r3,zero,43484 <__alt_data_end+0xfffdc384>
   43748:	2909c83a 	sub	r4,r5,r4
   4374c:	3823883a 	mov	r17,r7
   43750:	003f0f06 	br	43390 <__alt_data_end+0xfffdc290>
   43754:	28001a26 	beq	r5,zero,437c0 <__addsf3+0x48c>
   43758:	2008d0fa 	srli	r4,r4,3
   4375c:	2080102c 	andhi	r2,r4,64
   43760:	10000526 	beq	r2,zero,43778 <__addsf3+0x444>
   43764:	280ad0fa 	srli	r5,r5,3
   43768:	2880102c 	andhi	r2,r5,64
   4376c:	1000021e 	bne	r2,zero,43778 <__addsf3+0x444>
   43770:	2809883a 	mov	r4,r5
   43774:	3823883a 	mov	r17,r7
   43778:	200890fa 	slli	r4,r4,3
   4377c:	04003fc4 	movi	r16,255
   43780:	003f0306 	br	43390 <__alt_data_end+0xfffdc290>
   43784:	01c03fc4 	movi	r7,255
   43788:	31ffe01e 	bne	r6,r7,4370c <__alt_data_end+0xfffdc60c>
   4378c:	2809883a 	mov	r4,r5
   43790:	3021883a 	mov	r16,r6
   43794:	003efe06 	br	43390 <__alt_data_end+0xfffdc290>
   43798:	20001126 	beq	r4,zero,437e0 <__addsf3+0x4ac>
   4379c:	28000826 	beq	r5,zero,437c0 <__addsf3+0x48c>
   437a0:	2008d0fa 	srli	r4,r4,3
   437a4:	2080102c 	andhi	r2,r4,64
   437a8:	103ff326 	beq	r2,zero,43778 <__alt_data_end+0xfffdc678>
   437ac:	280ad0fa 	srli	r5,r5,3
   437b0:	2880102c 	andhi	r2,r5,64
   437b4:	103ff01e 	bne	r2,zero,43778 <__alt_data_end+0xfffdc678>
   437b8:	2809883a 	mov	r4,r5
   437bc:	003fee06 	br	43778 <__alt_data_end+0xfffdc678>
   437c0:	04003fc4 	movi	r16,255
   437c4:	003ef206 	br	43390 <__alt_data_end+0xfffdc290>
   437c8:	01000044 	movi	r4,1
   437cc:	003f9706 	br	4362c <__alt_data_end+0xfffdc52c>
   437d0:	0005883a 	mov	r2,zero
   437d4:	003f3406 	br	434a8 <__alt_data_end+0xfffdc3a8>
   437d8:	2809883a 	mov	r4,r5
   437dc:	003eec06 	br	43390 <__alt_data_end+0xfffdc290>
   437e0:	2809883a 	mov	r4,r5
   437e4:	04003fc4 	movi	r16,255
   437e8:	003ee906 	br	43390 <__alt_data_end+0xfffdc290>
   437ec:	00c00044 	movi	r3,1
   437f0:	003fce06 	br	4372c <__alt_data_end+0xfffdc62c>
   437f4:	0005883a 	mov	r2,zero
   437f8:	003f4e06 	br	43534 <__alt_data_end+0xfffdc434>

000437fc <__divsf3>:
   437fc:	defff504 	addi	sp,sp,-44
   43800:	200cd5fa 	srli	r6,r4,23
   43804:	dcc00415 	stw	r19,16(sp)
   43808:	2026d7fa 	srli	r19,r4,31
   4380c:	00c02034 	movhi	r3,128
   43810:	dd800715 	stw	r22,28(sp)
   43814:	dd000515 	stw	r20,20(sp)
   43818:	dc800315 	stw	r18,12(sp)
   4381c:	18ffffc4 	addi	r3,r3,-1
   43820:	dfc00a15 	stw	ra,40(sp)
   43824:	df000915 	stw	fp,36(sp)
   43828:	ddc00815 	stw	r23,32(sp)
   4382c:	dd400615 	stw	r21,24(sp)
   43830:	dc400215 	stw	r17,8(sp)
   43834:	dc000115 	stw	r16,4(sp)
   43838:	35003fcc 	andi	r20,r6,255
   4383c:	1924703a 	and	r18,r3,r4
   43840:	9d803fcc 	andi	r22,r19,255
   43844:	a0005226 	beq	r20,zero,43990 <__divsf3+0x194>
   43848:	00803fc4 	movi	r2,255
   4384c:	a0802e26 	beq	r20,r2,43908 <__divsf3+0x10c>
   43850:	91002034 	orhi	r4,r18,128
   43854:	202490fa 	slli	r18,r4,3
   43858:	a53fe044 	addi	r20,r20,-127
   4385c:	0021883a 	mov	r16,zero
   43860:	002f883a 	mov	r23,zero
   43864:	280cd5fa 	srli	r6,r5,23
   43868:	282ad7fa 	srli	r21,r5,31
   4386c:	00c02034 	movhi	r3,128
   43870:	18ffffc4 	addi	r3,r3,-1
   43874:	31803fcc 	andi	r6,r6,255
   43878:	1962703a 	and	r17,r3,r5
   4387c:	af003fcc 	andi	fp,r21,255
   43880:	30004a26 	beq	r6,zero,439ac <__divsf3+0x1b0>
   43884:	00803fc4 	movi	r2,255
   43888:	30804526 	beq	r6,r2,439a0 <__divsf3+0x1a4>
   4388c:	89402034 	orhi	r5,r17,128
   43890:	282290fa 	slli	r17,r5,3
   43894:	31bfe044 	addi	r6,r6,-127
   43898:	000b883a 	mov	r5,zero
   4389c:	2c20b03a 	or	r16,r5,r16
   438a0:	802090ba 	slli	r16,r16,2
   438a4:	00800134 	movhi	r2,4
   438a8:	108e3204 	addi	r2,r2,14536
   438ac:	80a1883a 	add	r16,r16,r2
   438b0:	81000017 	ldw	r4,0(r16)
   438b4:	9d46f03a 	xor	r3,r19,r21
   438b8:	180f883a 	mov	r7,r3
   438bc:	18803fcc 	andi	r2,r3,255
   438c0:	a18dc83a 	sub	r6,r20,r6
   438c4:	2000683a 	jmp	r4
   438c8:	00043aac 	andhi	zero,zero,4330
   438cc:	00043930 	cmpltui	zero,zero,4324
   438d0:	00043aa0 	cmpeqi	zero,zero,4330
   438d4:	0004391c 	xori	zero,zero,4324
   438d8:	00043aa0 	cmpeqi	zero,zero,4330
   438dc:	00043a78 	rdprs	zero,zero,4329
   438e0:	00043aa0 	cmpeqi	zero,zero,4330
   438e4:	0004391c 	xori	zero,zero,4324
   438e8:	00043930 	cmpltui	zero,zero,4324
   438ec:	00043930 	cmpltui	zero,zero,4324
   438f0:	00043a78 	rdprs	zero,zero,4329
   438f4:	0004391c 	xori	zero,zero,4324
   438f8:	00043b8c 	andi	zero,zero,4334
   438fc:	00043b8c 	andi	zero,zero,4334
   43900:	00043b8c 	andi	zero,zero,4334
   43904:	00043b40 	call	43b4 <__alt_mem_onchip_memory2-0x3bc4c>
   43908:	9000581e 	bne	r18,zero,43a6c <__divsf3+0x270>
   4390c:	04000204 	movi	r16,8
   43910:	05c00084 	movi	r23,2
   43914:	003fd306 	br	43864 <__alt_data_end+0xfffdc764>
   43918:	0023883a 	mov	r17,zero
   4391c:	e02d883a 	mov	r22,fp
   43920:	282f883a 	mov	r23,r5
   43924:	00800084 	movi	r2,2
   43928:	b8808f1e 	bne	r23,r2,43b68 <__divsf3+0x36c>
   4392c:	b005883a 	mov	r2,r22
   43930:	11c0004c 	andi	r7,r2,1
   43934:	013fffc4 	movi	r4,-1
   43938:	000d883a 	mov	r6,zero
   4393c:	21003fcc 	andi	r4,r4,255
   43940:	200895fa 	slli	r4,r4,23
   43944:	38803fcc 	andi	r2,r7,255
   43948:	00c02034 	movhi	r3,128
   4394c:	100497fa 	slli	r2,r2,31
   43950:	18ffffc4 	addi	r3,r3,-1
   43954:	30c6703a 	and	r3,r6,r3
   43958:	1906b03a 	or	r3,r3,r4
   4395c:	1884b03a 	or	r2,r3,r2
   43960:	dfc00a17 	ldw	ra,40(sp)
   43964:	df000917 	ldw	fp,36(sp)
   43968:	ddc00817 	ldw	r23,32(sp)
   4396c:	dd800717 	ldw	r22,28(sp)
   43970:	dd400617 	ldw	r21,24(sp)
   43974:	dd000517 	ldw	r20,20(sp)
   43978:	dcc00417 	ldw	r19,16(sp)
   4397c:	dc800317 	ldw	r18,12(sp)
   43980:	dc400217 	ldw	r17,8(sp)
   43984:	dc000117 	ldw	r16,4(sp)
   43988:	dec00b04 	addi	sp,sp,44
   4398c:	f800283a 	ret
   43990:	90002b1e 	bne	r18,zero,43a40 <__divsf3+0x244>
   43994:	04000104 	movi	r16,4
   43998:	05c00044 	movi	r23,1
   4399c:	003fb106 	br	43864 <__alt_data_end+0xfffdc764>
   439a0:	8800251e 	bne	r17,zero,43a38 <__divsf3+0x23c>
   439a4:	01400084 	movi	r5,2
   439a8:	00000206 	br	439b4 <__divsf3+0x1b8>
   439ac:	88001a1e 	bne	r17,zero,43a18 <__divsf3+0x21c>
   439b0:	01400044 	movi	r5,1
   439b4:	8160b03a 	or	r16,r16,r5
   439b8:	802090ba 	slli	r16,r16,2
   439bc:	00c00134 	movhi	r3,4
   439c0:	18ce7604 	addi	r3,r3,14808
   439c4:	80e1883a 	add	r16,r16,r3
   439c8:	80c00017 	ldw	r3,0(r16)
   439cc:	9d44f03a 	xor	r2,r19,r21
   439d0:	a18dc83a 	sub	r6,r20,r6
   439d4:	1800683a 	jmp	r3
   439d8:	00043930 	cmpltui	zero,zero,4324
   439dc:	00043930 	cmpltui	zero,zero,4324
   439e0:	00043b7c 	xorhi	zero,zero,4333
   439e4:	00043918 	cmpnei	zero,zero,4324
   439e8:	00043b7c 	xorhi	zero,zero,4333
   439ec:	00043a78 	rdprs	zero,zero,4329
   439f0:	00043b7c 	xorhi	zero,zero,4333
   439f4:	00043918 	cmpnei	zero,zero,4324
   439f8:	00043930 	cmpltui	zero,zero,4324
   439fc:	00043930 	cmpltui	zero,zero,4324
   43a00:	00043a78 	rdprs	zero,zero,4329
   43a04:	00043918 	cmpnei	zero,zero,4324
   43a08:	00043b8c 	andi	zero,zero,4334
   43a0c:	00043b8c 	andi	zero,zero,4334
   43a10:	00043b8c 	andi	zero,zero,4334
   43a14:	00043ba4 	muli	zero,zero,4334
   43a18:	8809883a 	mov	r4,r17
   43a1c:	0046f540 	call	46f54 <__clzsi2>
   43a20:	10fffec4 	addi	r3,r2,-5
   43a24:	10801d84 	addi	r2,r2,118
   43a28:	88e2983a 	sll	r17,r17,r3
   43a2c:	008dc83a 	sub	r6,zero,r2
   43a30:	000b883a 	mov	r5,zero
   43a34:	003f9906 	br	4389c <__alt_data_end+0xfffdc79c>
   43a38:	014000c4 	movi	r5,3
   43a3c:	003f9706 	br	4389c <__alt_data_end+0xfffdc79c>
   43a40:	9009883a 	mov	r4,r18
   43a44:	d9400015 	stw	r5,0(sp)
   43a48:	0046f540 	call	46f54 <__clzsi2>
   43a4c:	10fffec4 	addi	r3,r2,-5
   43a50:	11801d84 	addi	r6,r2,118
   43a54:	90e4983a 	sll	r18,r18,r3
   43a58:	01a9c83a 	sub	r20,zero,r6
   43a5c:	0021883a 	mov	r16,zero
   43a60:	002f883a 	mov	r23,zero
   43a64:	d9400017 	ldw	r5,0(sp)
   43a68:	003f7e06 	br	43864 <__alt_data_end+0xfffdc764>
   43a6c:	04000304 	movi	r16,12
   43a70:	05c000c4 	movi	r23,3
   43a74:	003f7b06 	br	43864 <__alt_data_end+0xfffdc764>
   43a78:	01802034 	movhi	r6,128
   43a7c:	000f883a 	mov	r7,zero
   43a80:	31bfffc4 	addi	r6,r6,-1
   43a84:	013fffc4 	movi	r4,-1
   43a88:	003fac06 	br	4393c <__alt_data_end+0xfffdc83c>
   43a8c:	01400044 	movi	r5,1
   43a90:	2909c83a 	sub	r4,r5,r4
   43a94:	00c006c4 	movi	r3,27
   43a98:	19004b0e 	bge	r3,r4,43bc8 <__divsf3+0x3cc>
   43a9c:	114e703a 	and	r7,r2,r5
   43aa0:	0009883a 	mov	r4,zero
   43aa4:	000d883a 	mov	r6,zero
   43aa8:	003fa406 	br	4393c <__alt_data_end+0xfffdc83c>
   43aac:	9006917a 	slli	r3,r18,5
   43ab0:	8822917a 	slli	r17,r17,5
   43ab4:	1c40372e 	bgeu	r3,r17,43b94 <__divsf3+0x398>
   43ab8:	31bfffc4 	addi	r6,r6,-1
   43abc:	010006c4 	movi	r4,27
   43ac0:	000b883a 	mov	r5,zero
   43ac4:	180f883a 	mov	r7,r3
   43ac8:	294b883a 	add	r5,r5,r5
   43acc:	18c7883a 	add	r3,r3,r3
   43ad0:	38000116 	blt	r7,zero,43ad8 <__divsf3+0x2dc>
   43ad4:	1c400236 	bltu	r3,r17,43ae0 <__divsf3+0x2e4>
   43ad8:	1c47c83a 	sub	r3,r3,r17
   43adc:	29400054 	ori	r5,r5,1
   43ae0:	213fffc4 	addi	r4,r4,-1
   43ae4:	203ff71e 	bne	r4,zero,43ac4 <__alt_data_end+0xfffdc9c4>
   43ae8:	1806c03a 	cmpne	r3,r3,zero
   43aec:	1962b03a 	or	r17,r3,r5
   43af0:	31001fc4 	addi	r4,r6,127
   43af4:	013fe50e 	bge	zero,r4,43a8c <__alt_data_end+0xfffdc98c>
   43af8:	88c001cc 	andi	r3,r17,7
   43afc:	18000426 	beq	r3,zero,43b10 <__divsf3+0x314>
   43b00:	88c003cc 	andi	r3,r17,15
   43b04:	01400104 	movi	r5,4
   43b08:	19400126 	beq	r3,r5,43b10 <__divsf3+0x314>
   43b0c:	8963883a 	add	r17,r17,r5
   43b10:	88c2002c 	andhi	r3,r17,2048
   43b14:	18000426 	beq	r3,zero,43b28 <__divsf3+0x32c>
   43b18:	00fe0034 	movhi	r3,63488
   43b1c:	18ffffc4 	addi	r3,r3,-1
   43b20:	31002004 	addi	r4,r6,128
   43b24:	88e2703a 	and	r17,r17,r3
   43b28:	00c03f84 	movi	r3,254
   43b2c:	193f8016 	blt	r3,r4,43930 <__alt_data_end+0xfffdc830>
   43b30:	880c91ba 	slli	r6,r17,6
   43b34:	11c0004c 	andi	r7,r2,1
   43b38:	300cd27a 	srli	r6,r6,9
   43b3c:	003f7f06 	br	4393c <__alt_data_end+0xfffdc83c>
   43b40:	9080102c 	andhi	r2,r18,64
   43b44:	10000226 	beq	r2,zero,43b50 <__divsf3+0x354>
   43b48:	8880102c 	andhi	r2,r17,64
   43b4c:	10001826 	beq	r2,zero,43bb0 <__divsf3+0x3b4>
   43b50:	00802034 	movhi	r2,128
   43b54:	91801034 	orhi	r6,r18,64
   43b58:	10bfffc4 	addi	r2,r2,-1
   43b5c:	980f883a 	mov	r7,r19
   43b60:	308c703a 	and	r6,r6,r2
   43b64:	003fc706 	br	43a84 <__alt_data_end+0xfffdc984>
   43b68:	008000c4 	movi	r2,3
   43b6c:	b8802d26 	beq	r23,r2,43c24 <__divsf3+0x428>
   43b70:	00c00044 	movi	r3,1
   43b74:	b005883a 	mov	r2,r22
   43b78:	b8ffdd1e 	bne	r23,r3,43af0 <__alt_data_end+0xfffdc9f0>
   43b7c:	11c0004c 	andi	r7,r2,1
   43b80:	0009883a 	mov	r4,zero
   43b84:	000d883a 	mov	r6,zero
   43b88:	003f6c06 	br	4393c <__alt_data_end+0xfffdc83c>
   43b8c:	9023883a 	mov	r17,r18
   43b90:	003f6406 	br	43924 <__alt_data_end+0xfffdc824>
   43b94:	1c47c83a 	sub	r3,r3,r17
   43b98:	01000684 	movi	r4,26
   43b9c:	01400044 	movi	r5,1
   43ba0:	003fc806 	br	43ac4 <__alt_data_end+0xfffdc9c4>
   43ba4:	9080102c 	andhi	r2,r18,64
   43ba8:	103fe926 	beq	r2,zero,43b50 <__alt_data_end+0xfffdca50>
   43bac:	0023883a 	mov	r17,zero
   43bb0:	00802034 	movhi	r2,128
   43bb4:	89801034 	orhi	r6,r17,64
   43bb8:	10bfffc4 	addi	r2,r2,-1
   43bbc:	a80f883a 	mov	r7,r21
   43bc0:	308c703a 	and	r6,r6,r2
   43bc4:	003faf06 	br	43a84 <__alt_data_end+0xfffdc984>
   43bc8:	01c00804 	movi	r7,32
   43bcc:	390fc83a 	sub	r7,r7,r4
   43bd0:	89ce983a 	sll	r7,r17,r7
   43bd4:	890ad83a 	srl	r5,r17,r4
   43bd8:	380ec03a 	cmpne	r7,r7,zero
   43bdc:	29cab03a 	or	r5,r5,r7
   43be0:	28c001cc 	andi	r3,r5,7
   43be4:	18000426 	beq	r3,zero,43bf8 <__divsf3+0x3fc>
   43be8:	28c003cc 	andi	r3,r5,15
   43bec:	01000104 	movi	r4,4
   43bf0:	19000126 	beq	r3,r4,43bf8 <__divsf3+0x3fc>
   43bf4:	290b883a 	add	r5,r5,r4
   43bf8:	28c1002c 	andhi	r3,r5,1024
   43bfc:	18000426 	beq	r3,zero,43c10 <__divsf3+0x414>
   43c00:	11c0004c 	andi	r7,r2,1
   43c04:	01000044 	movi	r4,1
   43c08:	000d883a 	mov	r6,zero
   43c0c:	003f4b06 	br	4393c <__alt_data_end+0xfffdc83c>
   43c10:	280a91ba 	slli	r5,r5,6
   43c14:	11c0004c 	andi	r7,r2,1
   43c18:	0009883a 	mov	r4,zero
   43c1c:	280cd27a 	srli	r6,r5,9
   43c20:	003f4606 	br	4393c <__alt_data_end+0xfffdc83c>
   43c24:	00802034 	movhi	r2,128
   43c28:	89801034 	orhi	r6,r17,64
   43c2c:	10bfffc4 	addi	r2,r2,-1
   43c30:	b00f883a 	mov	r7,r22
   43c34:	308c703a 	and	r6,r6,r2
   43c38:	003f9206 	br	43a84 <__alt_data_end+0xfffdc984>

00043c3c <__gesf2>:
   43c3c:	2004d5fa 	srli	r2,r4,23
   43c40:	2806d5fa 	srli	r3,r5,23
   43c44:	01802034 	movhi	r6,128
   43c48:	31bfffc4 	addi	r6,r6,-1
   43c4c:	10803fcc 	andi	r2,r2,255
   43c50:	01c03fc4 	movi	r7,255
   43c54:	3110703a 	and	r8,r6,r4
   43c58:	18c03fcc 	andi	r3,r3,255
   43c5c:	314c703a 	and	r6,r6,r5
   43c60:	2008d7fa 	srli	r4,r4,31
   43c64:	280ad7fa 	srli	r5,r5,31
   43c68:	11c01926 	beq	r2,r7,43cd0 <__gesf2+0x94>
   43c6c:	01c03fc4 	movi	r7,255
   43c70:	19c00f26 	beq	r3,r7,43cb0 <__gesf2+0x74>
   43c74:	1000061e 	bne	r2,zero,43c90 <__gesf2+0x54>
   43c78:	400f003a 	cmpeq	r7,r8,zero
   43c7c:	1800071e 	bne	r3,zero,43c9c <__gesf2+0x60>
   43c80:	3000061e 	bne	r6,zero,43c9c <__gesf2+0x60>
   43c84:	0005883a 	mov	r2,zero
   43c88:	40000e1e 	bne	r8,zero,43cc4 <__gesf2+0x88>
   43c8c:	f800283a 	ret
   43c90:	18000a1e 	bne	r3,zero,43cbc <__gesf2+0x80>
   43c94:	30000b26 	beq	r6,zero,43cc4 <__gesf2+0x88>
   43c98:	000f883a 	mov	r7,zero
   43c9c:	29403fcc 	andi	r5,r5,255
   43ca0:	38000726 	beq	r7,zero,43cc0 <__gesf2+0x84>
   43ca4:	28000826 	beq	r5,zero,43cc8 <__gesf2+0x8c>
   43ca8:	00800044 	movi	r2,1
   43cac:	f800283a 	ret
   43cb0:	303ff026 	beq	r6,zero,43c74 <__alt_data_end+0xfffdcb74>
   43cb4:	00bfff84 	movi	r2,-2
   43cb8:	f800283a 	ret
   43cbc:	29403fcc 	andi	r5,r5,255
   43cc0:	21400526 	beq	r4,r5,43cd8 <__gesf2+0x9c>
   43cc4:	203ff826 	beq	r4,zero,43ca8 <__alt_data_end+0xfffdcba8>
   43cc8:	00bfffc4 	movi	r2,-1
   43ccc:	f800283a 	ret
   43cd0:	403fe626 	beq	r8,zero,43c6c <__alt_data_end+0xfffdcb6c>
   43cd4:	003ff706 	br	43cb4 <__alt_data_end+0xfffdcbb4>
   43cd8:	18bffa16 	blt	r3,r2,43cc4 <__alt_data_end+0xfffdcbc4>
   43cdc:	10c00216 	blt	r2,r3,43ce8 <__gesf2+0xac>
   43ce0:	323ff836 	bltu	r6,r8,43cc4 <__alt_data_end+0xfffdcbc4>
   43ce4:	4180022e 	bgeu	r8,r6,43cf0 <__gesf2+0xb4>
   43ce8:	203fef1e 	bne	r4,zero,43ca8 <__alt_data_end+0xfffdcba8>
   43cec:	003ff606 	br	43cc8 <__alt_data_end+0xfffdcbc8>
   43cf0:	0005883a 	mov	r2,zero
   43cf4:	f800283a 	ret

00043cf8 <__lesf2>:
   43cf8:	2004d5fa 	srli	r2,r4,23
   43cfc:	280cd5fa 	srli	r6,r5,23
   43d00:	00c02034 	movhi	r3,128
   43d04:	18ffffc4 	addi	r3,r3,-1
   43d08:	10803fcc 	andi	r2,r2,255
   43d0c:	01c03fc4 	movi	r7,255
   43d10:	1910703a 	and	r8,r3,r4
   43d14:	31803fcc 	andi	r6,r6,255
   43d18:	1946703a 	and	r3,r3,r5
   43d1c:	2008d7fa 	srli	r4,r4,31
   43d20:	280ad7fa 	srli	r5,r5,31
   43d24:	11c01b26 	beq	r2,r7,43d94 <__lesf2+0x9c>
   43d28:	01c03fc4 	movi	r7,255
   43d2c:	31c01126 	beq	r6,r7,43d74 <__lesf2+0x7c>
   43d30:	1000071e 	bne	r2,zero,43d50 <__lesf2+0x58>
   43d34:	400f003a 	cmpeq	r7,r8,zero
   43d38:	21003fcc 	andi	r4,r4,255
   43d3c:	3000081e 	bne	r6,zero,43d60 <__lesf2+0x68>
   43d40:	1800071e 	bne	r3,zero,43d60 <__lesf2+0x68>
   43d44:	0005883a 	mov	r2,zero
   43d48:	40000f1e 	bne	r8,zero,43d88 <__lesf2+0x90>
   43d4c:	f800283a 	ret
   43d50:	21003fcc 	andi	r4,r4,255
   43d54:	30000a1e 	bne	r6,zero,43d80 <__lesf2+0x88>
   43d58:	18000b26 	beq	r3,zero,43d88 <__lesf2+0x90>
   43d5c:	000f883a 	mov	r7,zero
   43d60:	29403fcc 	andi	r5,r5,255
   43d64:	38000726 	beq	r7,zero,43d84 <__lesf2+0x8c>
   43d68:	28000826 	beq	r5,zero,43d8c <__lesf2+0x94>
   43d6c:	00800044 	movi	r2,1
   43d70:	f800283a 	ret
   43d74:	183fee26 	beq	r3,zero,43d30 <__alt_data_end+0xfffdcc30>
   43d78:	00800084 	movi	r2,2
   43d7c:	f800283a 	ret
   43d80:	29403fcc 	andi	r5,r5,255
   43d84:	21400626 	beq	r4,r5,43da0 <__lesf2+0xa8>
   43d88:	203ff826 	beq	r4,zero,43d6c <__alt_data_end+0xfffdcc6c>
   43d8c:	00bfffc4 	movi	r2,-1
   43d90:	f800283a 	ret
   43d94:	403fe426 	beq	r8,zero,43d28 <__alt_data_end+0xfffdcc28>
   43d98:	00800084 	movi	r2,2
   43d9c:	f800283a 	ret
   43da0:	30bff916 	blt	r6,r2,43d88 <__alt_data_end+0xfffdcc88>
   43da4:	11800216 	blt	r2,r6,43db0 <__lesf2+0xb8>
   43da8:	1a3ff736 	bltu	r3,r8,43d88 <__alt_data_end+0xfffdcc88>
   43dac:	40c0022e 	bgeu	r8,r3,43db8 <__lesf2+0xc0>
   43db0:	203fee1e 	bne	r4,zero,43d6c <__alt_data_end+0xfffdcc6c>
   43db4:	003ff506 	br	43d8c <__alt_data_end+0xfffdcc8c>
   43db8:	0005883a 	mov	r2,zero
   43dbc:	f800283a 	ret

00043dc0 <__mulsf3>:
   43dc0:	defff504 	addi	sp,sp,-44
   43dc4:	dc000115 	stw	r16,4(sp)
   43dc8:	2020d5fa 	srli	r16,r4,23
   43dcc:	dd400615 	stw	r21,24(sp)
   43dd0:	202ad7fa 	srli	r21,r4,31
   43dd4:	dc800315 	stw	r18,12(sp)
   43dd8:	04802034 	movhi	r18,128
   43ddc:	df000915 	stw	fp,36(sp)
   43de0:	dd000515 	stw	r20,20(sp)
   43de4:	94bfffc4 	addi	r18,r18,-1
   43de8:	dfc00a15 	stw	ra,40(sp)
   43dec:	ddc00815 	stw	r23,32(sp)
   43df0:	dd800715 	stw	r22,28(sp)
   43df4:	dcc00415 	stw	r19,16(sp)
   43df8:	dc400215 	stw	r17,8(sp)
   43dfc:	84003fcc 	andi	r16,r16,255
   43e00:	9124703a 	and	r18,r18,r4
   43e04:	a829883a 	mov	r20,r21
   43e08:	af003fcc 	andi	fp,r21,255
   43e0c:	80005426 	beq	r16,zero,43f60 <__mulsf3+0x1a0>
   43e10:	00803fc4 	movi	r2,255
   43e14:	80802f26 	beq	r16,r2,43ed4 <__mulsf3+0x114>
   43e18:	91002034 	orhi	r4,r18,128
   43e1c:	202490fa 	slli	r18,r4,3
   43e20:	843fe044 	addi	r16,r16,-127
   43e24:	0023883a 	mov	r17,zero
   43e28:	002f883a 	mov	r23,zero
   43e2c:	2804d5fa 	srli	r2,r5,23
   43e30:	282cd7fa 	srli	r22,r5,31
   43e34:	01002034 	movhi	r4,128
   43e38:	213fffc4 	addi	r4,r4,-1
   43e3c:	10803fcc 	andi	r2,r2,255
   43e40:	2166703a 	and	r19,r4,r5
   43e44:	b1803fcc 	andi	r6,r22,255
   43e48:	10004c26 	beq	r2,zero,43f7c <__mulsf3+0x1bc>
   43e4c:	00c03fc4 	movi	r3,255
   43e50:	10c04726 	beq	r2,r3,43f70 <__mulsf3+0x1b0>
   43e54:	99002034 	orhi	r4,r19,128
   43e58:	202690fa 	slli	r19,r4,3
   43e5c:	10bfe044 	addi	r2,r2,-127
   43e60:	0007883a 	mov	r3,zero
   43e64:	80a1883a 	add	r16,r16,r2
   43e68:	010003c4 	movi	r4,15
   43e6c:	1c44b03a 	or	r2,r3,r17
   43e70:	b56af03a 	xor	r21,r22,r21
   43e74:	81c00044 	addi	r7,r16,1
   43e78:	20806b36 	bltu	r4,r2,44028 <__mulsf3+0x268>
   43e7c:	100490ba 	slli	r2,r2,2
   43e80:	01000134 	movhi	r4,4
   43e84:	210fa504 	addi	r4,r4,16020
   43e88:	1105883a 	add	r2,r2,r4
   43e8c:	10800017 	ldw	r2,0(r2)
   43e90:	1000683a 	jmp	r2
   43e94:	00044028 	cmpgeui	zero,zero,4352
   43e98:	00043ee8 	cmpgeui	zero,zero,4347
   43e9c:	00043ee8 	cmpgeui	zero,zero,4347
   43ea0:	00043ee4 	muli	zero,zero,4347
   43ea4:	0004400c 	andi	zero,zero,4352
   43ea8:	0004400c 	andi	zero,zero,4352
   43eac:	00043ff8 	rdprs	zero,zero,4351
   43eb0:	00043ee4 	muli	zero,zero,4347
   43eb4:	0004400c 	andi	zero,zero,4352
   43eb8:	00043ff8 	rdprs	zero,zero,4351
   43ebc:	0004400c 	andi	zero,zero,4352
   43ec0:	00043ee4 	muli	zero,zero,4347
   43ec4:	00044018 	cmpnei	zero,zero,4352
   43ec8:	00044018 	cmpnei	zero,zero,4352
   43ecc:	00044018 	cmpnei	zero,zero,4352
   43ed0:	000440f4 	movhi	zero,4355
   43ed4:	90003b1e 	bne	r18,zero,43fc4 <__mulsf3+0x204>
   43ed8:	04400204 	movi	r17,8
   43edc:	05c00084 	movi	r23,2
   43ee0:	003fd206 	br	43e2c <__alt_data_end+0xfffdcd2c>
   43ee4:	302b883a 	mov	r21,r6
   43ee8:	00800084 	movi	r2,2
   43eec:	18802626 	beq	r3,r2,43f88 <__mulsf3+0x1c8>
   43ef0:	008000c4 	movi	r2,3
   43ef4:	1880ab26 	beq	r3,r2,441a4 <__mulsf3+0x3e4>
   43ef8:	00800044 	movi	r2,1
   43efc:	1880a21e 	bne	r3,r2,44188 <__mulsf3+0x3c8>
   43f00:	a829883a 	mov	r20,r21
   43f04:	0007883a 	mov	r3,zero
   43f08:	0009883a 	mov	r4,zero
   43f0c:	18803fcc 	andi	r2,r3,255
   43f10:	100695fa 	slli	r3,r2,23
   43f14:	a0803fcc 	andi	r2,r20,255
   43f18:	100a97fa 	slli	r5,r2,31
   43f1c:	00802034 	movhi	r2,128
   43f20:	10bfffc4 	addi	r2,r2,-1
   43f24:	2084703a 	and	r2,r4,r2
   43f28:	10c4b03a 	or	r2,r2,r3
   43f2c:	1144b03a 	or	r2,r2,r5
   43f30:	dfc00a17 	ldw	ra,40(sp)
   43f34:	df000917 	ldw	fp,36(sp)
   43f38:	ddc00817 	ldw	r23,32(sp)
   43f3c:	dd800717 	ldw	r22,28(sp)
   43f40:	dd400617 	ldw	r21,24(sp)
   43f44:	dd000517 	ldw	r20,20(sp)
   43f48:	dcc00417 	ldw	r19,16(sp)
   43f4c:	dc800317 	ldw	r18,12(sp)
   43f50:	dc400217 	ldw	r17,8(sp)
   43f54:	dc000117 	ldw	r16,4(sp)
   43f58:	dec00b04 	addi	sp,sp,44
   43f5c:	f800283a 	ret
   43f60:	90000d1e 	bne	r18,zero,43f98 <__mulsf3+0x1d8>
   43f64:	04400104 	movi	r17,4
   43f68:	05c00044 	movi	r23,1
   43f6c:	003faf06 	br	43e2c <__alt_data_end+0xfffdcd2c>
   43f70:	9806c03a 	cmpne	r3,r19,zero
   43f74:	18c00084 	addi	r3,r3,2
   43f78:	003fba06 	br	43e64 <__alt_data_end+0xfffdcd64>
   43f7c:	9800141e 	bne	r19,zero,43fd0 <__mulsf3+0x210>
   43f80:	00c00044 	movi	r3,1
   43f84:	003fb706 	br	43e64 <__alt_data_end+0xfffdcd64>
   43f88:	a829883a 	mov	r20,r21
   43f8c:	00ffffc4 	movi	r3,-1
   43f90:	0009883a 	mov	r4,zero
   43f94:	003fdd06 	br	43f0c <__alt_data_end+0xfffdce0c>
   43f98:	9009883a 	mov	r4,r18
   43f9c:	d9400015 	stw	r5,0(sp)
   43fa0:	0046f540 	call	46f54 <__clzsi2>
   43fa4:	10fffec4 	addi	r3,r2,-5
   43fa8:	10801d84 	addi	r2,r2,118
   43fac:	90e4983a 	sll	r18,r18,r3
   43fb0:	00a1c83a 	sub	r16,zero,r2
   43fb4:	0023883a 	mov	r17,zero
   43fb8:	002f883a 	mov	r23,zero
   43fbc:	d9400017 	ldw	r5,0(sp)
   43fc0:	003f9a06 	br	43e2c <__alt_data_end+0xfffdcd2c>
   43fc4:	04400304 	movi	r17,12
   43fc8:	05c000c4 	movi	r23,3
   43fcc:	003f9706 	br	43e2c <__alt_data_end+0xfffdcd2c>
   43fd0:	9809883a 	mov	r4,r19
   43fd4:	d9800015 	stw	r6,0(sp)
   43fd8:	0046f540 	call	46f54 <__clzsi2>
   43fdc:	10fffec4 	addi	r3,r2,-5
   43fe0:	10801d84 	addi	r2,r2,118
   43fe4:	98e6983a 	sll	r19,r19,r3
   43fe8:	0085c83a 	sub	r2,zero,r2
   43fec:	0007883a 	mov	r3,zero
   43ff0:	d9800017 	ldw	r6,0(sp)
   43ff4:	003f9b06 	br	43e64 <__alt_data_end+0xfffdcd64>
   43ff8:	01002034 	movhi	r4,128
   43ffc:	0029883a 	mov	r20,zero
   44000:	213fffc4 	addi	r4,r4,-1
   44004:	00ffffc4 	movi	r3,-1
   44008:	003fc006 	br	43f0c <__alt_data_end+0xfffdce0c>
   4400c:	9027883a 	mov	r19,r18
   44010:	b807883a 	mov	r3,r23
   44014:	003fb406 	br	43ee8 <__alt_data_end+0xfffdcde8>
   44018:	9027883a 	mov	r19,r18
   4401c:	e02b883a 	mov	r21,fp
   44020:	b807883a 	mov	r3,r23
   44024:	003fb006 	br	43ee8 <__alt_data_end+0xfffdcde8>
   44028:	9004d43a 	srli	r2,r18,16
   4402c:	9810d43a 	srli	r8,r19,16
   44030:	94bfffcc 	andi	r18,r18,65535
   44034:	993fffcc 	andi	r4,r19,65535
   44038:	910d383a 	mul	r6,r18,r4
   4403c:	20a7383a 	mul	r19,r4,r2
   44040:	9225383a 	mul	r18,r18,r8
   44044:	3006d43a 	srli	r3,r6,16
   44048:	1211383a 	mul	r8,r2,r8
   4404c:	94e5883a 	add	r18,r18,r19
   44050:	1c87883a 	add	r3,r3,r18
   44054:	1cc0022e 	bgeu	r3,r19,44060 <__mulsf3+0x2a0>
   44058:	00800074 	movhi	r2,1
   4405c:	4091883a 	add	r8,r8,r2
   44060:	1804943a 	slli	r2,r3,16
   44064:	31bfffcc 	andi	r6,r6,65535
   44068:	1806d43a 	srli	r3,r3,16
   4406c:	1185883a 	add	r2,r2,r6
   44070:	102691ba 	slli	r19,r2,6
   44074:	1a07883a 	add	r3,r3,r8
   44078:	1004d6ba 	srli	r2,r2,26
   4407c:	180891ba 	slli	r4,r3,6
   44080:	9826c03a 	cmpne	r19,r19,zero
   44084:	9884b03a 	or	r2,r19,r2
   44088:	1126b03a 	or	r19,r2,r4
   4408c:	9882002c 	andhi	r2,r19,2048
   44090:	10000426 	beq	r2,zero,440a4 <__mulsf3+0x2e4>
   44094:	9804d07a 	srli	r2,r19,1
   44098:	9900004c 	andi	r4,r19,1
   4409c:	3821883a 	mov	r16,r7
   440a0:	1126b03a 	or	r19,r2,r4
   440a4:	80c01fc4 	addi	r3,r16,127
   440a8:	00c0210e 	bge	zero,r3,44130 <__mulsf3+0x370>
   440ac:	988001cc 	andi	r2,r19,7
   440b0:	10000426 	beq	r2,zero,440c4 <__mulsf3+0x304>
   440b4:	988003cc 	andi	r2,r19,15
   440b8:	01000104 	movi	r4,4
   440bc:	11000126 	beq	r2,r4,440c4 <__mulsf3+0x304>
   440c0:	9927883a 	add	r19,r19,r4
   440c4:	9882002c 	andhi	r2,r19,2048
   440c8:	10000426 	beq	r2,zero,440dc <__mulsf3+0x31c>
   440cc:	00be0034 	movhi	r2,63488
   440d0:	10bfffc4 	addi	r2,r2,-1
   440d4:	80c02004 	addi	r3,r16,128
   440d8:	98a6703a 	and	r19,r19,r2
   440dc:	00803f84 	movi	r2,254
   440e0:	10ffa916 	blt	r2,r3,43f88 <__alt_data_end+0xfffdce88>
   440e4:	980891ba 	slli	r4,r19,6
   440e8:	a829883a 	mov	r20,r21
   440ec:	2008d27a 	srli	r4,r4,9
   440f0:	003f8606 	br	43f0c <__alt_data_end+0xfffdce0c>
   440f4:	9080102c 	andhi	r2,r18,64
   440f8:	10000826 	beq	r2,zero,4411c <__mulsf3+0x35c>
   440fc:	9880102c 	andhi	r2,r19,64
   44100:	1000061e 	bne	r2,zero,4411c <__mulsf3+0x35c>
   44104:	00802034 	movhi	r2,128
   44108:	99001034 	orhi	r4,r19,64
   4410c:	10bfffc4 	addi	r2,r2,-1
   44110:	b029883a 	mov	r20,r22
   44114:	2088703a 	and	r4,r4,r2
   44118:	003fba06 	br	44004 <__alt_data_end+0xfffdcf04>
   4411c:	00802034 	movhi	r2,128
   44120:	91001034 	orhi	r4,r18,64
   44124:	10bfffc4 	addi	r2,r2,-1
   44128:	2088703a 	and	r4,r4,r2
   4412c:	003fb506 	br	44004 <__alt_data_end+0xfffdcf04>
   44130:	00800044 	movi	r2,1
   44134:	10c7c83a 	sub	r3,r2,r3
   44138:	008006c4 	movi	r2,27
   4413c:	10ff7016 	blt	r2,r3,43f00 <__alt_data_end+0xfffdce00>
   44140:	00800804 	movi	r2,32
   44144:	10c5c83a 	sub	r2,r2,r3
   44148:	9884983a 	sll	r2,r19,r2
   4414c:	98c6d83a 	srl	r3,r19,r3
   44150:	1004c03a 	cmpne	r2,r2,zero
   44154:	1884b03a 	or	r2,r3,r2
   44158:	10c001cc 	andi	r3,r2,7
   4415c:	18000426 	beq	r3,zero,44170 <__mulsf3+0x3b0>
   44160:	10c003cc 	andi	r3,r2,15
   44164:	01000104 	movi	r4,4
   44168:	19000126 	beq	r3,r4,44170 <__mulsf3+0x3b0>
   4416c:	1105883a 	add	r2,r2,r4
   44170:	10c1002c 	andhi	r3,r2,1024
   44174:	18000626 	beq	r3,zero,44190 <__mulsf3+0x3d0>
   44178:	a829883a 	mov	r20,r21
   4417c:	00c00044 	movi	r3,1
   44180:	0009883a 	mov	r4,zero
   44184:	003f6106 	br	43f0c <__alt_data_end+0xfffdce0c>
   44188:	3821883a 	mov	r16,r7
   4418c:	003fc506 	br	440a4 <__alt_data_end+0xfffdcfa4>
   44190:	100491ba 	slli	r2,r2,6
   44194:	a829883a 	mov	r20,r21
   44198:	0007883a 	mov	r3,zero
   4419c:	1008d27a 	srli	r4,r2,9
   441a0:	003f5a06 	br	43f0c <__alt_data_end+0xfffdce0c>
   441a4:	00802034 	movhi	r2,128
   441a8:	99001034 	orhi	r4,r19,64
   441ac:	10bfffc4 	addi	r2,r2,-1
   441b0:	a829883a 	mov	r20,r21
   441b4:	2088703a 	and	r4,r4,r2
   441b8:	003f9206 	br	44004 <__alt_data_end+0xfffdcf04>

000441bc <__subsf3>:
   441bc:	defffc04 	addi	sp,sp,-16
   441c0:	280cd5fa 	srli	r6,r5,23
   441c4:	dc000015 	stw	r16,0(sp)
   441c8:	01c02034 	movhi	r7,128
   441cc:	2020d5fa 	srli	r16,r4,23
   441d0:	39ffffc4 	addi	r7,r7,-1
   441d4:	3906703a 	and	r3,r7,r4
   441d8:	dc400115 	stw	r17,4(sp)
   441dc:	394e703a 	and	r7,r7,r5
   441e0:	2022d7fa 	srli	r17,r4,31
   441e4:	dfc00315 	stw	ra,12(sp)
   441e8:	dc800215 	stw	r18,8(sp)
   441ec:	31803fcc 	andi	r6,r6,255
   441f0:	01003fc4 	movi	r4,255
   441f4:	84003fcc 	andi	r16,r16,255
   441f8:	180690fa 	slli	r3,r3,3
   441fc:	2804d7fa 	srli	r2,r5,31
   44200:	380e90fa 	slli	r7,r7,3
   44204:	31006d26 	beq	r6,r4,443bc <__subsf3+0x200>
   44208:	1080005c 	xori	r2,r2,1
   4420c:	8189c83a 	sub	r4,r16,r6
   44210:	14404f26 	beq	r2,r17,44350 <__subsf3+0x194>
   44214:	0100770e 	bge	zero,r4,443f4 <__subsf3+0x238>
   44218:	30001e1e 	bne	r6,zero,44294 <__subsf3+0xd8>
   4421c:	38006a1e 	bne	r7,zero,443c8 <__subsf3+0x20c>
   44220:	188001cc 	andi	r2,r3,7
   44224:	10000426 	beq	r2,zero,44238 <__subsf3+0x7c>
   44228:	188003cc 	andi	r2,r3,15
   4422c:	01000104 	movi	r4,4
   44230:	11000126 	beq	r2,r4,44238 <__subsf3+0x7c>
   44234:	1907883a 	add	r3,r3,r4
   44238:	1881002c 	andhi	r2,r3,1024
   4423c:	10003926 	beq	r2,zero,44324 <__subsf3+0x168>
   44240:	84000044 	addi	r16,r16,1
   44244:	00803fc4 	movi	r2,255
   44248:	80807526 	beq	r16,r2,44420 <__subsf3+0x264>
   4424c:	180691ba 	slli	r3,r3,6
   44250:	8880004c 	andi	r2,r17,1
   44254:	180ad27a 	srli	r5,r3,9
   44258:	84003fcc 	andi	r16,r16,255
   4425c:	800695fa 	slli	r3,r16,23
   44260:	10803fcc 	andi	r2,r2,255
   44264:	01002034 	movhi	r4,128
   44268:	213fffc4 	addi	r4,r4,-1
   4426c:	100497fa 	slli	r2,r2,31
   44270:	2920703a 	and	r16,r5,r4
   44274:	80e0b03a 	or	r16,r16,r3
   44278:	8084b03a 	or	r2,r16,r2
   4427c:	dfc00317 	ldw	ra,12(sp)
   44280:	dc800217 	ldw	r18,8(sp)
   44284:	dc400117 	ldw	r17,4(sp)
   44288:	dc000017 	ldw	r16,0(sp)
   4428c:	dec00404 	addi	sp,sp,16
   44290:	f800283a 	ret
   44294:	00803fc4 	movi	r2,255
   44298:	80bfe126 	beq	r16,r2,44220 <__alt_data_end+0xfffdd120>
   4429c:	39c10034 	orhi	r7,r7,1024
   442a0:	008006c4 	movi	r2,27
   442a4:	11007416 	blt	r2,r4,44478 <__subsf3+0x2bc>
   442a8:	00800804 	movi	r2,32
   442ac:	1105c83a 	sub	r2,r2,r4
   442b0:	3884983a 	sll	r2,r7,r2
   442b4:	390ed83a 	srl	r7,r7,r4
   442b8:	1008c03a 	cmpne	r4,r2,zero
   442bc:	390eb03a 	or	r7,r7,r4
   442c0:	19c7c83a 	sub	r3,r3,r7
   442c4:	1881002c 	andhi	r2,r3,1024
   442c8:	10001426 	beq	r2,zero,4431c <__subsf3+0x160>
   442cc:	04810034 	movhi	r18,1024
   442d0:	94bfffc4 	addi	r18,r18,-1
   442d4:	1ca4703a 	and	r18,r3,r18
   442d8:	9009883a 	mov	r4,r18
   442dc:	0046f540 	call	46f54 <__clzsi2>
   442e0:	10bffec4 	addi	r2,r2,-5
   442e4:	90a4983a 	sll	r18,r18,r2
   442e8:	14005116 	blt	r2,r16,44430 <__subsf3+0x274>
   442ec:	1405c83a 	sub	r2,r2,r16
   442f0:	10c00044 	addi	r3,r2,1
   442f4:	00800804 	movi	r2,32
   442f8:	10c5c83a 	sub	r2,r2,r3
   442fc:	9084983a 	sll	r2,r18,r2
   44300:	90e4d83a 	srl	r18,r18,r3
   44304:	0021883a 	mov	r16,zero
   44308:	1006c03a 	cmpne	r3,r2,zero
   4430c:	90c6b03a 	or	r3,r18,r3
   44310:	003fc306 	br	44220 <__alt_data_end+0xfffdd120>
   44314:	2000e026 	beq	r4,zero,44698 <__subsf3+0x4dc>
   44318:	2007883a 	mov	r3,r4
   4431c:	188001cc 	andi	r2,r3,7
   44320:	103fc11e 	bne	r2,zero,44228 <__alt_data_end+0xfffdd128>
   44324:	180ad0fa 	srli	r5,r3,3
   44328:	00c03fc4 	movi	r3,255
   4432c:	8880004c 	andi	r2,r17,1
   44330:	80c0031e 	bne	r16,r3,44340 <__subsf3+0x184>
   44334:	28006d26 	beq	r5,zero,444ec <__subsf3+0x330>
   44338:	29401034 	orhi	r5,r5,64
   4433c:	043fffc4 	movi	r16,-1
   44340:	00c02034 	movhi	r3,128
   44344:	18ffffc4 	addi	r3,r3,-1
   44348:	28ca703a 	and	r5,r5,r3
   4434c:	003fc206 	br	44258 <__alt_data_end+0xfffdd158>
   44350:	01003c0e 	bge	zero,r4,44444 <__subsf3+0x288>
   44354:	30002126 	beq	r6,zero,443dc <__subsf3+0x220>
   44358:	01403fc4 	movi	r5,255
   4435c:	817fb026 	beq	r16,r5,44220 <__alt_data_end+0xfffdd120>
   44360:	39c10034 	orhi	r7,r7,1024
   44364:	014006c4 	movi	r5,27
   44368:	29007416 	blt	r5,r4,4453c <__subsf3+0x380>
   4436c:	01400804 	movi	r5,32
   44370:	290bc83a 	sub	r5,r5,r4
   44374:	394a983a 	sll	r5,r7,r5
   44378:	390ed83a 	srl	r7,r7,r4
   4437c:	2808c03a 	cmpne	r4,r5,zero
   44380:	390eb03a 	or	r7,r7,r4
   44384:	19c7883a 	add	r3,r3,r7
   44388:	1901002c 	andhi	r4,r3,1024
   4438c:	20003826 	beq	r4,zero,44470 <__subsf3+0x2b4>
   44390:	84000044 	addi	r16,r16,1
   44394:	01003fc4 	movi	r4,255
   44398:	81005426 	beq	r16,r4,444ec <__subsf3+0x330>
   4439c:	1023883a 	mov	r17,r2
   443a0:	00bf0034 	movhi	r2,64512
   443a4:	10bfffc4 	addi	r2,r2,-1
   443a8:	1900004c 	andi	r4,r3,1
   443ac:	1886703a 	and	r3,r3,r2
   443b0:	1806d07a 	srli	r3,r3,1
   443b4:	1906b03a 	or	r3,r3,r4
   443b8:	003f9906 	br	44220 <__alt_data_end+0xfffdd120>
   443bc:	383f9226 	beq	r7,zero,44208 <__alt_data_end+0xfffdd108>
   443c0:	10803fcc 	andi	r2,r2,255
   443c4:	003f9106 	br	4420c <__alt_data_end+0xfffdd10c>
   443c8:	213fffc4 	addi	r4,r4,-1
   443cc:	203fbc26 	beq	r4,zero,442c0 <__alt_data_end+0xfffdd1c0>
   443d0:	00803fc4 	movi	r2,255
   443d4:	80bfb21e 	bne	r16,r2,442a0 <__alt_data_end+0xfffdd1a0>
   443d8:	003f9106 	br	44220 <__alt_data_end+0xfffdd120>
   443dc:	383f9026 	beq	r7,zero,44220 <__alt_data_end+0xfffdd120>
   443e0:	213fffc4 	addi	r4,r4,-1
   443e4:	203fe726 	beq	r4,zero,44384 <__alt_data_end+0xfffdd284>
   443e8:	01403fc4 	movi	r5,255
   443ec:	817fdd1e 	bne	r16,r5,44364 <__alt_data_end+0xfffdd264>
   443f0:	003f8b06 	br	44220 <__alt_data_end+0xfffdd120>
   443f4:	2000221e 	bne	r4,zero,44480 <__subsf3+0x2c4>
   443f8:	81000044 	addi	r4,r16,1
   443fc:	21003fcc 	andi	r4,r4,255
   44400:	01400044 	movi	r5,1
   44404:	2900470e 	bge	r5,r4,44524 <__subsf3+0x368>
   44408:	19e5c83a 	sub	r18,r3,r7
   4440c:	9141002c 	andhi	r5,r18,1024
   44410:	28002d26 	beq	r5,zero,444c8 <__subsf3+0x30c>
   44414:	38e5c83a 	sub	r18,r7,r3
   44418:	1023883a 	mov	r17,r2
   4441c:	003fae06 	br	442d8 <__alt_data_end+0xfffdd1d8>
   44420:	8880004c 	andi	r2,r17,1
   44424:	043fffc4 	movi	r16,-1
   44428:	000b883a 	mov	r5,zero
   4442c:	003f8a06 	br	44258 <__alt_data_end+0xfffdd158>
   44430:	00ff0034 	movhi	r3,64512
   44434:	18ffffc4 	addi	r3,r3,-1
   44438:	80a1c83a 	sub	r16,r16,r2
   4443c:	90c6703a 	and	r3,r18,r3
   44440:	003f7706 	br	44220 <__alt_data_end+0xfffdd120>
   44444:	2000431e 	bne	r4,zero,44554 <__subsf3+0x398>
   44448:	81000044 	addi	r4,r16,1
   4444c:	21803fcc 	andi	r6,r4,255
   44450:	01400044 	movi	r5,1
   44454:	2980280e 	bge	r5,r6,444f8 <__subsf3+0x33c>
   44458:	01403fc4 	movi	r5,255
   4445c:	21402326 	beq	r4,r5,444ec <__subsf3+0x330>
   44460:	19c7883a 	add	r3,r3,r7
   44464:	1806d07a 	srli	r3,r3,1
   44468:	2021883a 	mov	r16,r4
   4446c:	003f6c06 	br	44220 <__alt_data_end+0xfffdd120>
   44470:	1023883a 	mov	r17,r2
   44474:	003fa906 	br	4431c <__alt_data_end+0xfffdd21c>
   44478:	01c00044 	movi	r7,1
   4447c:	003f9006 	br	442c0 <__alt_data_end+0xfffdd1c0>
   44480:	8000151e 	bne	r16,zero,444d8 <__subsf3+0x31c>
   44484:	18002f26 	beq	r3,zero,44544 <__subsf3+0x388>
   44488:	0108303a 	nor	r4,zero,r4
   4448c:	20000a26 	beq	r4,zero,444b8 <__subsf3+0x2fc>
   44490:	01403fc4 	movi	r5,255
   44494:	31402b26 	beq	r6,r5,44544 <__subsf3+0x388>
   44498:	014006c4 	movi	r5,27
   4449c:	29006e16 	blt	r5,r4,44658 <__subsf3+0x49c>
   444a0:	01400804 	movi	r5,32
   444a4:	290bc83a 	sub	r5,r5,r4
   444a8:	194a983a 	sll	r5,r3,r5
   444ac:	1908d83a 	srl	r4,r3,r4
   444b0:	2806c03a 	cmpne	r3,r5,zero
   444b4:	20c6b03a 	or	r3,r4,r3
   444b8:	38c7c83a 	sub	r3,r7,r3
   444bc:	3021883a 	mov	r16,r6
   444c0:	1023883a 	mov	r17,r2
   444c4:	003f7f06 	br	442c4 <__alt_data_end+0xfffdd1c4>
   444c8:	903f831e 	bne	r18,zero,442d8 <__alt_data_end+0xfffdd1d8>
   444cc:	0005883a 	mov	r2,zero
   444d0:	0021883a 	mov	r16,zero
   444d4:	003f9a06 	br	44340 <__alt_data_end+0xfffdd240>
   444d8:	01403fc4 	movi	r5,255
   444dc:	31401926 	beq	r6,r5,44544 <__subsf3+0x388>
   444e0:	0109c83a 	sub	r4,zero,r4
   444e4:	18c10034 	orhi	r3,r3,1024
   444e8:	003feb06 	br	44498 <__alt_data_end+0xfffdd398>
   444ec:	043fffc4 	movi	r16,-1
   444f0:	000b883a 	mov	r5,zero
   444f4:	003f5806 	br	44258 <__alt_data_end+0xfffdd158>
   444f8:	8000481e 	bne	r16,zero,4461c <__subsf3+0x460>
   444fc:	18006226 	beq	r3,zero,44688 <__subsf3+0x4cc>
   44500:	383f4726 	beq	r7,zero,44220 <__alt_data_end+0xfffdd120>
   44504:	19c7883a 	add	r3,r3,r7
   44508:	1881002c 	andhi	r2,r3,1024
   4450c:	103f8326 	beq	r2,zero,4431c <__alt_data_end+0xfffdd21c>
   44510:	00bf0034 	movhi	r2,64512
   44514:	10bfffc4 	addi	r2,r2,-1
   44518:	2821883a 	mov	r16,r5
   4451c:	1886703a 	and	r3,r3,r2
   44520:	003f3f06 	br	44220 <__alt_data_end+0xfffdd120>
   44524:	80001c1e 	bne	r16,zero,44598 <__subsf3+0x3dc>
   44528:	1800261e 	bne	r3,zero,445c4 <__subsf3+0x408>
   4452c:	38004c26 	beq	r7,zero,44660 <__subsf3+0x4a4>
   44530:	3807883a 	mov	r3,r7
   44534:	1023883a 	mov	r17,r2
   44538:	003f3906 	br	44220 <__alt_data_end+0xfffdd120>
   4453c:	01c00044 	movi	r7,1
   44540:	003f9006 	br	44384 <__alt_data_end+0xfffdd284>
   44544:	3807883a 	mov	r3,r7
   44548:	3021883a 	mov	r16,r6
   4454c:	1023883a 	mov	r17,r2
   44550:	003f3306 	br	44220 <__alt_data_end+0xfffdd120>
   44554:	8000161e 	bne	r16,zero,445b0 <__subsf3+0x3f4>
   44558:	18002d26 	beq	r3,zero,44610 <__subsf3+0x454>
   4455c:	0108303a 	nor	r4,zero,r4
   44560:	20000a26 	beq	r4,zero,4458c <__subsf3+0x3d0>
   44564:	01403fc4 	movi	r5,255
   44568:	31402926 	beq	r6,r5,44610 <__subsf3+0x454>
   4456c:	014006c4 	movi	r5,27
   44570:	29004716 	blt	r5,r4,44690 <__subsf3+0x4d4>
   44574:	01400804 	movi	r5,32
   44578:	290bc83a 	sub	r5,r5,r4
   4457c:	194a983a 	sll	r5,r3,r5
   44580:	1908d83a 	srl	r4,r3,r4
   44584:	2806c03a 	cmpne	r3,r5,zero
   44588:	20c6b03a 	or	r3,r4,r3
   4458c:	19c7883a 	add	r3,r3,r7
   44590:	3021883a 	mov	r16,r6
   44594:	003f7c06 	br	44388 <__alt_data_end+0xfffdd288>
   44598:	1800111e 	bne	r3,zero,445e0 <__subsf3+0x424>
   4459c:	38003326 	beq	r7,zero,4466c <__subsf3+0x4b0>
   445a0:	3807883a 	mov	r3,r7
   445a4:	1023883a 	mov	r17,r2
   445a8:	04003fc4 	movi	r16,255
   445ac:	003f1c06 	br	44220 <__alt_data_end+0xfffdd120>
   445b0:	01403fc4 	movi	r5,255
   445b4:	31401626 	beq	r6,r5,44610 <__subsf3+0x454>
   445b8:	0109c83a 	sub	r4,zero,r4
   445bc:	18c10034 	orhi	r3,r3,1024
   445c0:	003fea06 	br	4456c <__alt_data_end+0xfffdd46c>
   445c4:	383f1626 	beq	r7,zero,44220 <__alt_data_end+0xfffdd120>
   445c8:	19c9c83a 	sub	r4,r3,r7
   445cc:	2141002c 	andhi	r5,r4,1024
   445d0:	283f5026 	beq	r5,zero,44314 <__alt_data_end+0xfffdd214>
   445d4:	38c7c83a 	sub	r3,r7,r3
   445d8:	1023883a 	mov	r17,r2
   445dc:	003f1006 	br	44220 <__alt_data_end+0xfffdd120>
   445e0:	38001b26 	beq	r7,zero,44650 <__subsf3+0x494>
   445e4:	1806d0fa 	srli	r3,r3,3
   445e8:	1900102c 	andhi	r4,r3,64
   445ec:	20000526 	beq	r4,zero,44604 <__subsf3+0x448>
   445f0:	380ed0fa 	srli	r7,r7,3
   445f4:	3900102c 	andhi	r4,r7,64
   445f8:	2000021e 	bne	r4,zero,44604 <__subsf3+0x448>
   445fc:	3807883a 	mov	r3,r7
   44600:	1023883a 	mov	r17,r2
   44604:	180690fa 	slli	r3,r3,3
   44608:	04003fc4 	movi	r16,255
   4460c:	003f0406 	br	44220 <__alt_data_end+0xfffdd120>
   44610:	3807883a 	mov	r3,r7
   44614:	3021883a 	mov	r16,r6
   44618:	003f0106 	br	44220 <__alt_data_end+0xfffdd120>
   4461c:	18001726 	beq	r3,zero,4467c <__subsf3+0x4c0>
   44620:	38000b26 	beq	r7,zero,44650 <__subsf3+0x494>
   44624:	1806d0fa 	srli	r3,r3,3
   44628:	1900102c 	andhi	r4,r3,64
   4462c:	20000426 	beq	r4,zero,44640 <__subsf3+0x484>
   44630:	380ed0fa 	srli	r7,r7,3
   44634:	3900102c 	andhi	r4,r7,64
   44638:	2000011e 	bne	r4,zero,44640 <__subsf3+0x484>
   4463c:	3807883a 	mov	r3,r7
   44640:	180690fa 	slli	r3,r3,3
   44644:	1023883a 	mov	r17,r2
   44648:	04003fc4 	movi	r16,255
   4464c:	003ef406 	br	44220 <__alt_data_end+0xfffdd120>
   44650:	04003fc4 	movi	r16,255
   44654:	003ef206 	br	44220 <__alt_data_end+0xfffdd120>
   44658:	00c00044 	movi	r3,1
   4465c:	003f9606 	br	444b8 <__alt_data_end+0xfffdd3b8>
   44660:	000b883a 	mov	r5,zero
   44664:	0005883a 	mov	r2,zero
   44668:	003f3506 	br	44340 <__alt_data_end+0xfffdd240>
   4466c:	01402034 	movhi	r5,128
   44670:	297fffc4 	addi	r5,r5,-1
   44674:	0005883a 	mov	r2,zero
   44678:	003f2f06 	br	44338 <__alt_data_end+0xfffdd238>
   4467c:	3807883a 	mov	r3,r7
   44680:	04003fc4 	movi	r16,255
   44684:	003ee606 	br	44220 <__alt_data_end+0xfffdd120>
   44688:	3807883a 	mov	r3,r7
   4468c:	003ee406 	br	44220 <__alt_data_end+0xfffdd120>
   44690:	00c00044 	movi	r3,1
   44694:	003fbd06 	br	4458c <__alt_data_end+0xfffdd48c>
   44698:	0005883a 	mov	r2,zero
   4469c:	003f2806 	br	44340 <__alt_data_end+0xfffdd240>

000446a0 <__fixsfsi>:
   446a0:	200ad5fa 	srli	r5,r4,23
   446a4:	00c02034 	movhi	r3,128
   446a8:	18ffffc4 	addi	r3,r3,-1
   446ac:	29403fcc 	andi	r5,r5,255
   446b0:	00801f84 	movi	r2,126
   446b4:	1906703a 	and	r3,r3,r4
   446b8:	2008d7fa 	srli	r4,r4,31
   446bc:	11400e0e 	bge	r2,r5,446f8 <__fixsfsi+0x58>
   446c0:	00802744 	movi	r2,157
   446c4:	11400816 	blt	r2,r5,446e8 <__fixsfsi+0x48>
   446c8:	00802544 	movi	r2,149
   446cc:	18c02034 	orhi	r3,r3,128
   446d0:	11400b0e 	bge	r2,r5,44700 <__fixsfsi+0x60>
   446d4:	28bfda84 	addi	r2,r5,-150
   446d8:	1884983a 	sll	r2,r3,r2
   446dc:	20000726 	beq	r4,zero,446fc <__fixsfsi+0x5c>
   446e0:	0085c83a 	sub	r2,zero,r2
   446e4:	f800283a 	ret
   446e8:	00a00034 	movhi	r2,32768
   446ec:	10bfffc4 	addi	r2,r2,-1
   446f0:	2085883a 	add	r2,r4,r2
   446f4:	f800283a 	ret
   446f8:	0005883a 	mov	r2,zero
   446fc:	f800283a 	ret
   44700:	00802584 	movi	r2,150
   44704:	1145c83a 	sub	r2,r2,r5
   44708:	1884d83a 	srl	r2,r3,r2
   4470c:	003ff306 	br	446dc <__alt_data_end+0xfffdd5dc>

00044710 <__floatsisf>:
   44710:	defffd04 	addi	sp,sp,-12
   44714:	dfc00215 	stw	ra,8(sp)
   44718:	dc400115 	stw	r17,4(sp)
   4471c:	dc000015 	stw	r16,0(sp)
   44720:	20003526 	beq	r4,zero,447f8 <__floatsisf+0xe8>
   44724:	2021883a 	mov	r16,r4
   44728:	2022d7fa 	srli	r17,r4,31
   4472c:	20003616 	blt	r4,zero,44808 <__floatsisf+0xf8>
   44730:	8009883a 	mov	r4,r16
   44734:	0046f540 	call	46f54 <__clzsi2>
   44738:	00c02784 	movi	r3,158
   4473c:	1887c83a 	sub	r3,r3,r2
   44740:	01002584 	movi	r4,150
   44744:	20c01416 	blt	r4,r3,44798 <__floatsisf+0x88>
   44748:	20c9c83a 	sub	r4,r4,r3
   4474c:	8120983a 	sll	r16,r16,r4
   44750:	00802034 	movhi	r2,128
   44754:	10bfffc4 	addi	r2,r2,-1
   44758:	8809883a 	mov	r4,r17
   4475c:	80a0703a 	and	r16,r16,r2
   44760:	18803fcc 	andi	r2,r3,255
   44764:	100695fa 	slli	r3,r2,23
   44768:	20803fcc 	andi	r2,r4,255
   4476c:	100897fa 	slli	r4,r2,31
   44770:	00802034 	movhi	r2,128
   44774:	10bfffc4 	addi	r2,r2,-1
   44778:	8084703a 	and	r2,r16,r2
   4477c:	10c4b03a 	or	r2,r2,r3
   44780:	1104b03a 	or	r2,r2,r4
   44784:	dfc00217 	ldw	ra,8(sp)
   44788:	dc400117 	ldw	r17,4(sp)
   4478c:	dc000017 	ldw	r16,0(sp)
   44790:	dec00304 	addi	sp,sp,12
   44794:	f800283a 	ret
   44798:	01002644 	movi	r4,153
   4479c:	20c01c16 	blt	r4,r3,44810 <__floatsisf+0x100>
   447a0:	20c9c83a 	sub	r4,r4,r3
   447a4:	8120983a 	sll	r16,r16,r4
   447a8:	013f0034 	movhi	r4,64512
   447ac:	213fffc4 	addi	r4,r4,-1
   447b0:	814001cc 	andi	r5,r16,7
   447b4:	8108703a 	and	r4,r16,r4
   447b8:	28000426 	beq	r5,zero,447cc <__floatsisf+0xbc>
   447bc:	840003cc 	andi	r16,r16,15
   447c0:	01400104 	movi	r5,4
   447c4:	81400126 	beq	r16,r5,447cc <__floatsisf+0xbc>
   447c8:	2149883a 	add	r4,r4,r5
   447cc:	2141002c 	andhi	r5,r4,1024
   447d0:	28000526 	beq	r5,zero,447e8 <__floatsisf+0xd8>
   447d4:	00c027c4 	movi	r3,159
   447d8:	1887c83a 	sub	r3,r3,r2
   447dc:	00bf0034 	movhi	r2,64512
   447e0:	10bfffc4 	addi	r2,r2,-1
   447e4:	2088703a 	and	r4,r4,r2
   447e8:	202091ba 	slli	r16,r4,6
   447ec:	8809883a 	mov	r4,r17
   447f0:	8020d27a 	srli	r16,r16,9
   447f4:	003fda06 	br	44760 <__alt_data_end+0xfffdd660>
   447f8:	0009883a 	mov	r4,zero
   447fc:	0007883a 	mov	r3,zero
   44800:	0021883a 	mov	r16,zero
   44804:	003fd606 	br	44760 <__alt_data_end+0xfffdd660>
   44808:	0121c83a 	sub	r16,zero,r4
   4480c:	003fc806 	br	44730 <__alt_data_end+0xfffdd630>
   44810:	01002e44 	movi	r4,185
   44814:	20c9c83a 	sub	r4,r4,r3
   44818:	01400144 	movi	r5,5
   4481c:	8108983a 	sll	r4,r16,r4
   44820:	288bc83a 	sub	r5,r5,r2
   44824:	8160d83a 	srl	r16,r16,r5
   44828:	2008c03a 	cmpne	r4,r4,zero
   4482c:	8120b03a 	or	r16,r16,r4
   44830:	003fdd06 	br	447a8 <__alt_data_end+0xfffdd6a8>

00044834 <__adddf3>:
   44834:	02c00434 	movhi	r11,16
   44838:	5affffc4 	addi	r11,r11,-1
   4483c:	2806d7fa 	srli	r3,r5,31
   44840:	2ad4703a 	and	r10,r5,r11
   44844:	3ad2703a 	and	r9,r7,r11
   44848:	3804d53a 	srli	r2,r7,20
   4484c:	3018d77a 	srli	r12,r6,29
   44850:	280ad53a 	srli	r5,r5,20
   44854:	501490fa 	slli	r10,r10,3
   44858:	2010d77a 	srli	r8,r4,29
   4485c:	481290fa 	slli	r9,r9,3
   44860:	380ed7fa 	srli	r7,r7,31
   44864:	defffb04 	addi	sp,sp,-20
   44868:	dc800215 	stw	r18,8(sp)
   4486c:	dc400115 	stw	r17,4(sp)
   44870:	dc000015 	stw	r16,0(sp)
   44874:	dfc00415 	stw	ra,16(sp)
   44878:	dcc00315 	stw	r19,12(sp)
   4487c:	1c803fcc 	andi	r18,r3,255
   44880:	2c01ffcc 	andi	r16,r5,2047
   44884:	5210b03a 	or	r8,r10,r8
   44888:	202290fa 	slli	r17,r4,3
   4488c:	1081ffcc 	andi	r2,r2,2047
   44890:	4b12b03a 	or	r9,r9,r12
   44894:	300c90fa 	slli	r6,r6,3
   44898:	91c07526 	beq	r18,r7,44a70 <__adddf3+0x23c>
   4489c:	8087c83a 	sub	r3,r16,r2
   448a0:	00c0ab0e 	bge	zero,r3,44b50 <__adddf3+0x31c>
   448a4:	10002a1e 	bne	r2,zero,44950 <__adddf3+0x11c>
   448a8:	4984b03a 	or	r2,r9,r6
   448ac:	1000961e 	bne	r2,zero,44b08 <__adddf3+0x2d4>
   448b0:	888001cc 	andi	r2,r17,7
   448b4:	10000726 	beq	r2,zero,448d4 <__adddf3+0xa0>
   448b8:	888003cc 	andi	r2,r17,15
   448bc:	00c00104 	movi	r3,4
   448c0:	10c00426 	beq	r2,r3,448d4 <__adddf3+0xa0>
   448c4:	88c7883a 	add	r3,r17,r3
   448c8:	1c63803a 	cmpltu	r17,r3,r17
   448cc:	4451883a 	add	r8,r8,r17
   448d0:	1823883a 	mov	r17,r3
   448d4:	4080202c 	andhi	r2,r8,128
   448d8:	10005926 	beq	r2,zero,44a40 <__adddf3+0x20c>
   448dc:	84000044 	addi	r16,r16,1
   448e0:	0081ffc4 	movi	r2,2047
   448e4:	8080ba26 	beq	r16,r2,44bd0 <__adddf3+0x39c>
   448e8:	00bfe034 	movhi	r2,65408
   448ec:	10bfffc4 	addi	r2,r2,-1
   448f0:	4090703a 	and	r8,r8,r2
   448f4:	4004977a 	slli	r2,r8,29
   448f8:	4010927a 	slli	r8,r8,9
   448fc:	8822d0fa 	srli	r17,r17,3
   44900:	8401ffcc 	andi	r16,r16,2047
   44904:	4010d33a 	srli	r8,r8,12
   44908:	9007883a 	mov	r3,r18
   4490c:	1444b03a 	or	r2,r2,r17
   44910:	8401ffcc 	andi	r16,r16,2047
   44914:	8020953a 	slli	r16,r16,20
   44918:	18c03fcc 	andi	r3,r3,255
   4491c:	01000434 	movhi	r4,16
   44920:	213fffc4 	addi	r4,r4,-1
   44924:	180697fa 	slli	r3,r3,31
   44928:	4110703a 	and	r8,r8,r4
   4492c:	4410b03a 	or	r8,r8,r16
   44930:	40c6b03a 	or	r3,r8,r3
   44934:	dfc00417 	ldw	ra,16(sp)
   44938:	dcc00317 	ldw	r19,12(sp)
   4493c:	dc800217 	ldw	r18,8(sp)
   44940:	dc400117 	ldw	r17,4(sp)
   44944:	dc000017 	ldw	r16,0(sp)
   44948:	dec00504 	addi	sp,sp,20
   4494c:	f800283a 	ret
   44950:	0081ffc4 	movi	r2,2047
   44954:	80bfd626 	beq	r16,r2,448b0 <__alt_data_end+0xfffdd7b0>
   44958:	4a402034 	orhi	r9,r9,128
   4495c:	00800e04 	movi	r2,56
   44960:	10c09f16 	blt	r2,r3,44be0 <__adddf3+0x3ac>
   44964:	008007c4 	movi	r2,31
   44968:	10c0c216 	blt	r2,r3,44c74 <__adddf3+0x440>
   4496c:	00800804 	movi	r2,32
   44970:	10c5c83a 	sub	r2,r2,r3
   44974:	488a983a 	sll	r5,r9,r2
   44978:	30c8d83a 	srl	r4,r6,r3
   4497c:	3084983a 	sll	r2,r6,r2
   44980:	48c6d83a 	srl	r3,r9,r3
   44984:	290cb03a 	or	r6,r5,r4
   44988:	1004c03a 	cmpne	r2,r2,zero
   4498c:	308cb03a 	or	r6,r6,r2
   44990:	898dc83a 	sub	r6,r17,r6
   44994:	89a3803a 	cmpltu	r17,r17,r6
   44998:	40d1c83a 	sub	r8,r8,r3
   4499c:	4451c83a 	sub	r8,r8,r17
   449a0:	3023883a 	mov	r17,r6
   449a4:	4080202c 	andhi	r2,r8,128
   449a8:	10002326 	beq	r2,zero,44a38 <__adddf3+0x204>
   449ac:	04c02034 	movhi	r19,128
   449b0:	9cffffc4 	addi	r19,r19,-1
   449b4:	44e6703a 	and	r19,r8,r19
   449b8:	98007626 	beq	r19,zero,44b94 <__adddf3+0x360>
   449bc:	9809883a 	mov	r4,r19
   449c0:	0046f540 	call	46f54 <__clzsi2>
   449c4:	10fffe04 	addi	r3,r2,-8
   449c8:	010007c4 	movi	r4,31
   449cc:	20c07716 	blt	r4,r3,44bac <__adddf3+0x378>
   449d0:	00800804 	movi	r2,32
   449d4:	10c5c83a 	sub	r2,r2,r3
   449d8:	8884d83a 	srl	r2,r17,r2
   449dc:	98d0983a 	sll	r8,r19,r3
   449e0:	88e2983a 	sll	r17,r17,r3
   449e4:	1204b03a 	or	r2,r2,r8
   449e8:	1c007416 	blt	r3,r16,44bbc <__adddf3+0x388>
   449ec:	1c21c83a 	sub	r16,r3,r16
   449f0:	82000044 	addi	r8,r16,1
   449f4:	00c007c4 	movi	r3,31
   449f8:	1a009116 	blt	r3,r8,44c40 <__adddf3+0x40c>
   449fc:	00c00804 	movi	r3,32
   44a00:	1a07c83a 	sub	r3,r3,r8
   44a04:	8a08d83a 	srl	r4,r17,r8
   44a08:	88e2983a 	sll	r17,r17,r3
   44a0c:	10c6983a 	sll	r3,r2,r3
   44a10:	1210d83a 	srl	r8,r2,r8
   44a14:	8804c03a 	cmpne	r2,r17,zero
   44a18:	1906b03a 	or	r3,r3,r4
   44a1c:	18a2b03a 	or	r17,r3,r2
   44a20:	0021883a 	mov	r16,zero
   44a24:	003fa206 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44a28:	1890b03a 	or	r8,r3,r2
   44a2c:	40017d26 	beq	r8,zero,45024 <__adddf3+0x7f0>
   44a30:	1011883a 	mov	r8,r2
   44a34:	1823883a 	mov	r17,r3
   44a38:	888001cc 	andi	r2,r17,7
   44a3c:	103f9e1e 	bne	r2,zero,448b8 <__alt_data_end+0xfffdd7b8>
   44a40:	4004977a 	slli	r2,r8,29
   44a44:	8822d0fa 	srli	r17,r17,3
   44a48:	4010d0fa 	srli	r8,r8,3
   44a4c:	9007883a 	mov	r3,r18
   44a50:	1444b03a 	or	r2,r2,r17
   44a54:	0101ffc4 	movi	r4,2047
   44a58:	81002426 	beq	r16,r4,44aec <__adddf3+0x2b8>
   44a5c:	8120703a 	and	r16,r16,r4
   44a60:	01000434 	movhi	r4,16
   44a64:	213fffc4 	addi	r4,r4,-1
   44a68:	4110703a 	and	r8,r8,r4
   44a6c:	003fa806 	br	44910 <__alt_data_end+0xfffdd810>
   44a70:	8089c83a 	sub	r4,r16,r2
   44a74:	01005e0e 	bge	zero,r4,44bf0 <__adddf3+0x3bc>
   44a78:	10002b26 	beq	r2,zero,44b28 <__adddf3+0x2f4>
   44a7c:	0081ffc4 	movi	r2,2047
   44a80:	80bf8b26 	beq	r16,r2,448b0 <__alt_data_end+0xfffdd7b0>
   44a84:	4a402034 	orhi	r9,r9,128
   44a88:	00800e04 	movi	r2,56
   44a8c:	1100a40e 	bge	r2,r4,44d20 <__adddf3+0x4ec>
   44a90:	498cb03a 	or	r6,r9,r6
   44a94:	300ac03a 	cmpne	r5,r6,zero
   44a98:	0013883a 	mov	r9,zero
   44a9c:	2c4b883a 	add	r5,r5,r17
   44aa0:	2c63803a 	cmpltu	r17,r5,r17
   44aa4:	4a11883a 	add	r8,r9,r8
   44aa8:	8a11883a 	add	r8,r17,r8
   44aac:	2823883a 	mov	r17,r5
   44ab0:	4080202c 	andhi	r2,r8,128
   44ab4:	103fe026 	beq	r2,zero,44a38 <__alt_data_end+0xfffdd938>
   44ab8:	84000044 	addi	r16,r16,1
   44abc:	0081ffc4 	movi	r2,2047
   44ac0:	8080d226 	beq	r16,r2,44e0c <__adddf3+0x5d8>
   44ac4:	00bfe034 	movhi	r2,65408
   44ac8:	10bfffc4 	addi	r2,r2,-1
   44acc:	4090703a 	and	r8,r8,r2
   44ad0:	880ad07a 	srli	r5,r17,1
   44ad4:	400897fa 	slli	r4,r8,31
   44ad8:	88c0004c 	andi	r3,r17,1
   44adc:	28e2b03a 	or	r17,r5,r3
   44ae0:	4010d07a 	srli	r8,r8,1
   44ae4:	2462b03a 	or	r17,r4,r17
   44ae8:	003f7106 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44aec:	4088b03a 	or	r4,r8,r2
   44af0:	20014526 	beq	r4,zero,45008 <__adddf3+0x7d4>
   44af4:	01000434 	movhi	r4,16
   44af8:	42000234 	orhi	r8,r8,8
   44afc:	213fffc4 	addi	r4,r4,-1
   44b00:	4110703a 	and	r8,r8,r4
   44b04:	003f8206 	br	44910 <__alt_data_end+0xfffdd810>
   44b08:	18ffffc4 	addi	r3,r3,-1
   44b0c:	1800491e 	bne	r3,zero,44c34 <__adddf3+0x400>
   44b10:	898bc83a 	sub	r5,r17,r6
   44b14:	8963803a 	cmpltu	r17,r17,r5
   44b18:	4251c83a 	sub	r8,r8,r9
   44b1c:	4451c83a 	sub	r8,r8,r17
   44b20:	2823883a 	mov	r17,r5
   44b24:	003f9f06 	br	449a4 <__alt_data_end+0xfffdd8a4>
   44b28:	4984b03a 	or	r2,r9,r6
   44b2c:	103f6026 	beq	r2,zero,448b0 <__alt_data_end+0xfffdd7b0>
   44b30:	213fffc4 	addi	r4,r4,-1
   44b34:	2000931e 	bne	r4,zero,44d84 <__adddf3+0x550>
   44b38:	898d883a 	add	r6,r17,r6
   44b3c:	3463803a 	cmpltu	r17,r6,r17
   44b40:	4251883a 	add	r8,r8,r9
   44b44:	8a11883a 	add	r8,r17,r8
   44b48:	3023883a 	mov	r17,r6
   44b4c:	003fd806 	br	44ab0 <__alt_data_end+0xfffdd9b0>
   44b50:	1800541e 	bne	r3,zero,44ca4 <__adddf3+0x470>
   44b54:	80800044 	addi	r2,r16,1
   44b58:	1081ffcc 	andi	r2,r2,2047
   44b5c:	00c00044 	movi	r3,1
   44b60:	1880a00e 	bge	r3,r2,44de4 <__adddf3+0x5b0>
   44b64:	8989c83a 	sub	r4,r17,r6
   44b68:	8905803a 	cmpltu	r2,r17,r4
   44b6c:	4267c83a 	sub	r19,r8,r9
   44b70:	98a7c83a 	sub	r19,r19,r2
   44b74:	9880202c 	andhi	r2,r19,128
   44b78:	10006326 	beq	r2,zero,44d08 <__adddf3+0x4d4>
   44b7c:	3463c83a 	sub	r17,r6,r17
   44b80:	4a07c83a 	sub	r3,r9,r8
   44b84:	344d803a 	cmpltu	r6,r6,r17
   44b88:	19a7c83a 	sub	r19,r3,r6
   44b8c:	3825883a 	mov	r18,r7
   44b90:	983f8a1e 	bne	r19,zero,449bc <__alt_data_end+0xfffdd8bc>
   44b94:	8809883a 	mov	r4,r17
   44b98:	0046f540 	call	46f54 <__clzsi2>
   44b9c:	10800804 	addi	r2,r2,32
   44ba0:	10fffe04 	addi	r3,r2,-8
   44ba4:	010007c4 	movi	r4,31
   44ba8:	20ff890e 	bge	r4,r3,449d0 <__alt_data_end+0xfffdd8d0>
   44bac:	10bff604 	addi	r2,r2,-40
   44bb0:	8884983a 	sll	r2,r17,r2
   44bb4:	0023883a 	mov	r17,zero
   44bb8:	1c3f8c0e 	bge	r3,r16,449ec <__alt_data_end+0xfffdd8ec>
   44bbc:	023fe034 	movhi	r8,65408
   44bc0:	423fffc4 	addi	r8,r8,-1
   44bc4:	80e1c83a 	sub	r16,r16,r3
   44bc8:	1210703a 	and	r8,r2,r8
   44bcc:	003f3806 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44bd0:	9007883a 	mov	r3,r18
   44bd4:	0011883a 	mov	r8,zero
   44bd8:	0005883a 	mov	r2,zero
   44bdc:	003f4c06 	br	44910 <__alt_data_end+0xfffdd810>
   44be0:	498cb03a 	or	r6,r9,r6
   44be4:	300cc03a 	cmpne	r6,r6,zero
   44be8:	0007883a 	mov	r3,zero
   44bec:	003f6806 	br	44990 <__alt_data_end+0xfffdd890>
   44bf0:	20009c1e 	bne	r4,zero,44e64 <__adddf3+0x630>
   44bf4:	80800044 	addi	r2,r16,1
   44bf8:	1141ffcc 	andi	r5,r2,2047
   44bfc:	01000044 	movi	r4,1
   44c00:	2140670e 	bge	r4,r5,44da0 <__adddf3+0x56c>
   44c04:	0101ffc4 	movi	r4,2047
   44c08:	11007f26 	beq	r2,r4,44e08 <__adddf3+0x5d4>
   44c0c:	898d883a 	add	r6,r17,r6
   44c10:	4247883a 	add	r3,r8,r9
   44c14:	3451803a 	cmpltu	r8,r6,r17
   44c18:	40d1883a 	add	r8,r8,r3
   44c1c:	402297fa 	slli	r17,r8,31
   44c20:	300cd07a 	srli	r6,r6,1
   44c24:	4010d07a 	srli	r8,r8,1
   44c28:	1021883a 	mov	r16,r2
   44c2c:	89a2b03a 	or	r17,r17,r6
   44c30:	003f1f06 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44c34:	0081ffc4 	movi	r2,2047
   44c38:	80bf481e 	bne	r16,r2,4495c <__alt_data_end+0xfffdd85c>
   44c3c:	003f1c06 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44c40:	843ff844 	addi	r16,r16,-31
   44c44:	01000804 	movi	r4,32
   44c48:	1406d83a 	srl	r3,r2,r16
   44c4c:	41005026 	beq	r8,r4,44d90 <__adddf3+0x55c>
   44c50:	01001004 	movi	r4,64
   44c54:	2211c83a 	sub	r8,r4,r8
   44c58:	1204983a 	sll	r2,r2,r8
   44c5c:	88a2b03a 	or	r17,r17,r2
   44c60:	8822c03a 	cmpne	r17,r17,zero
   44c64:	1c62b03a 	or	r17,r3,r17
   44c68:	0011883a 	mov	r8,zero
   44c6c:	0021883a 	mov	r16,zero
   44c70:	003f7106 	br	44a38 <__alt_data_end+0xfffdd938>
   44c74:	193ff804 	addi	r4,r3,-32
   44c78:	00800804 	movi	r2,32
   44c7c:	4908d83a 	srl	r4,r9,r4
   44c80:	18804526 	beq	r3,r2,44d98 <__adddf3+0x564>
   44c84:	00801004 	movi	r2,64
   44c88:	10c5c83a 	sub	r2,r2,r3
   44c8c:	4886983a 	sll	r3,r9,r2
   44c90:	198cb03a 	or	r6,r3,r6
   44c94:	300cc03a 	cmpne	r6,r6,zero
   44c98:	218cb03a 	or	r6,r4,r6
   44c9c:	0007883a 	mov	r3,zero
   44ca0:	003f3b06 	br	44990 <__alt_data_end+0xfffdd890>
   44ca4:	80002a26 	beq	r16,zero,44d50 <__adddf3+0x51c>
   44ca8:	0101ffc4 	movi	r4,2047
   44cac:	11006826 	beq	r2,r4,44e50 <__adddf3+0x61c>
   44cb0:	00c7c83a 	sub	r3,zero,r3
   44cb4:	42002034 	orhi	r8,r8,128
   44cb8:	01000e04 	movi	r4,56
   44cbc:	20c07c16 	blt	r4,r3,44eb0 <__adddf3+0x67c>
   44cc0:	010007c4 	movi	r4,31
   44cc4:	20c0da16 	blt	r4,r3,45030 <__adddf3+0x7fc>
   44cc8:	01000804 	movi	r4,32
   44ccc:	20c9c83a 	sub	r4,r4,r3
   44cd0:	4114983a 	sll	r10,r8,r4
   44cd4:	88cad83a 	srl	r5,r17,r3
   44cd8:	8908983a 	sll	r4,r17,r4
   44cdc:	40c6d83a 	srl	r3,r8,r3
   44ce0:	5162b03a 	or	r17,r10,r5
   44ce4:	2008c03a 	cmpne	r4,r4,zero
   44ce8:	8922b03a 	or	r17,r17,r4
   44cec:	3463c83a 	sub	r17,r6,r17
   44cf0:	48c7c83a 	sub	r3,r9,r3
   44cf4:	344d803a 	cmpltu	r6,r6,r17
   44cf8:	1991c83a 	sub	r8,r3,r6
   44cfc:	1021883a 	mov	r16,r2
   44d00:	3825883a 	mov	r18,r7
   44d04:	003f2706 	br	449a4 <__alt_data_end+0xfffdd8a4>
   44d08:	24d0b03a 	or	r8,r4,r19
   44d0c:	40001b1e 	bne	r8,zero,44d7c <__adddf3+0x548>
   44d10:	0005883a 	mov	r2,zero
   44d14:	0007883a 	mov	r3,zero
   44d18:	0021883a 	mov	r16,zero
   44d1c:	003f4d06 	br	44a54 <__alt_data_end+0xfffdd954>
   44d20:	008007c4 	movi	r2,31
   44d24:	11003c16 	blt	r2,r4,44e18 <__adddf3+0x5e4>
   44d28:	00800804 	movi	r2,32
   44d2c:	1105c83a 	sub	r2,r2,r4
   44d30:	488e983a 	sll	r7,r9,r2
   44d34:	310ad83a 	srl	r5,r6,r4
   44d38:	3084983a 	sll	r2,r6,r2
   44d3c:	4912d83a 	srl	r9,r9,r4
   44d40:	394ab03a 	or	r5,r7,r5
   44d44:	1004c03a 	cmpne	r2,r2,zero
   44d48:	288ab03a 	or	r5,r5,r2
   44d4c:	003f5306 	br	44a9c <__alt_data_end+0xfffdd99c>
   44d50:	4448b03a 	or	r4,r8,r17
   44d54:	20003e26 	beq	r4,zero,44e50 <__adddf3+0x61c>
   44d58:	00c6303a 	nor	r3,zero,r3
   44d5c:	18003a1e 	bne	r3,zero,44e48 <__adddf3+0x614>
   44d60:	3463c83a 	sub	r17,r6,r17
   44d64:	4a07c83a 	sub	r3,r9,r8
   44d68:	344d803a 	cmpltu	r6,r6,r17
   44d6c:	1991c83a 	sub	r8,r3,r6
   44d70:	1021883a 	mov	r16,r2
   44d74:	3825883a 	mov	r18,r7
   44d78:	003f0a06 	br	449a4 <__alt_data_end+0xfffdd8a4>
   44d7c:	2023883a 	mov	r17,r4
   44d80:	003f0d06 	br	449b8 <__alt_data_end+0xfffdd8b8>
   44d84:	0081ffc4 	movi	r2,2047
   44d88:	80bf3f1e 	bne	r16,r2,44a88 <__alt_data_end+0xfffdd988>
   44d8c:	003ec806 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44d90:	0005883a 	mov	r2,zero
   44d94:	003fb106 	br	44c5c <__alt_data_end+0xfffddb5c>
   44d98:	0007883a 	mov	r3,zero
   44d9c:	003fbc06 	br	44c90 <__alt_data_end+0xfffddb90>
   44da0:	4444b03a 	or	r2,r8,r17
   44da4:	8000871e 	bne	r16,zero,44fc4 <__adddf3+0x790>
   44da8:	1000ba26 	beq	r2,zero,45094 <__adddf3+0x860>
   44dac:	4984b03a 	or	r2,r9,r6
   44db0:	103ebf26 	beq	r2,zero,448b0 <__alt_data_end+0xfffdd7b0>
   44db4:	8985883a 	add	r2,r17,r6
   44db8:	4247883a 	add	r3,r8,r9
   44dbc:	1451803a 	cmpltu	r8,r2,r17
   44dc0:	40d1883a 	add	r8,r8,r3
   44dc4:	40c0202c 	andhi	r3,r8,128
   44dc8:	1023883a 	mov	r17,r2
   44dcc:	183f1a26 	beq	r3,zero,44a38 <__alt_data_end+0xfffdd938>
   44dd0:	00bfe034 	movhi	r2,65408
   44dd4:	10bfffc4 	addi	r2,r2,-1
   44dd8:	2021883a 	mov	r16,r4
   44ddc:	4090703a 	and	r8,r8,r2
   44de0:	003eb306 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44de4:	4444b03a 	or	r2,r8,r17
   44de8:	8000291e 	bne	r16,zero,44e90 <__adddf3+0x65c>
   44dec:	10004b1e 	bne	r2,zero,44f1c <__adddf3+0x6e8>
   44df0:	4990b03a 	or	r8,r9,r6
   44df4:	40008b26 	beq	r8,zero,45024 <__adddf3+0x7f0>
   44df8:	4811883a 	mov	r8,r9
   44dfc:	3023883a 	mov	r17,r6
   44e00:	3825883a 	mov	r18,r7
   44e04:	003eaa06 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44e08:	1021883a 	mov	r16,r2
   44e0c:	0011883a 	mov	r8,zero
   44e10:	0005883a 	mov	r2,zero
   44e14:	003f0f06 	br	44a54 <__alt_data_end+0xfffdd954>
   44e18:	217ff804 	addi	r5,r4,-32
   44e1c:	00800804 	movi	r2,32
   44e20:	494ad83a 	srl	r5,r9,r5
   44e24:	20807d26 	beq	r4,r2,4501c <__adddf3+0x7e8>
   44e28:	00801004 	movi	r2,64
   44e2c:	1109c83a 	sub	r4,r2,r4
   44e30:	4912983a 	sll	r9,r9,r4
   44e34:	498cb03a 	or	r6,r9,r6
   44e38:	300cc03a 	cmpne	r6,r6,zero
   44e3c:	298ab03a 	or	r5,r5,r6
   44e40:	0013883a 	mov	r9,zero
   44e44:	003f1506 	br	44a9c <__alt_data_end+0xfffdd99c>
   44e48:	0101ffc4 	movi	r4,2047
   44e4c:	113f9a1e 	bne	r2,r4,44cb8 <__alt_data_end+0xfffddbb8>
   44e50:	4811883a 	mov	r8,r9
   44e54:	3023883a 	mov	r17,r6
   44e58:	1021883a 	mov	r16,r2
   44e5c:	3825883a 	mov	r18,r7
   44e60:	003e9306 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44e64:	8000161e 	bne	r16,zero,44ec0 <__adddf3+0x68c>
   44e68:	444ab03a 	or	r5,r8,r17
   44e6c:	28005126 	beq	r5,zero,44fb4 <__adddf3+0x780>
   44e70:	0108303a 	nor	r4,zero,r4
   44e74:	20004d1e 	bne	r4,zero,44fac <__adddf3+0x778>
   44e78:	89a3883a 	add	r17,r17,r6
   44e7c:	4253883a 	add	r9,r8,r9
   44e80:	898d803a 	cmpltu	r6,r17,r6
   44e84:	3251883a 	add	r8,r6,r9
   44e88:	1021883a 	mov	r16,r2
   44e8c:	003f0806 	br	44ab0 <__alt_data_end+0xfffdd9b0>
   44e90:	1000301e 	bne	r2,zero,44f54 <__adddf3+0x720>
   44e94:	4984b03a 	or	r2,r9,r6
   44e98:	10007126 	beq	r2,zero,45060 <__adddf3+0x82c>
   44e9c:	4811883a 	mov	r8,r9
   44ea0:	3023883a 	mov	r17,r6
   44ea4:	3825883a 	mov	r18,r7
   44ea8:	0401ffc4 	movi	r16,2047
   44eac:	003e8006 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44eb0:	4462b03a 	or	r17,r8,r17
   44eb4:	8822c03a 	cmpne	r17,r17,zero
   44eb8:	0007883a 	mov	r3,zero
   44ebc:	003f8b06 	br	44cec <__alt_data_end+0xfffddbec>
   44ec0:	0141ffc4 	movi	r5,2047
   44ec4:	11403b26 	beq	r2,r5,44fb4 <__adddf3+0x780>
   44ec8:	0109c83a 	sub	r4,zero,r4
   44ecc:	42002034 	orhi	r8,r8,128
   44ed0:	01400e04 	movi	r5,56
   44ed4:	29006716 	blt	r5,r4,45074 <__adddf3+0x840>
   44ed8:	014007c4 	movi	r5,31
   44edc:	29007016 	blt	r5,r4,450a0 <__adddf3+0x86c>
   44ee0:	01400804 	movi	r5,32
   44ee4:	290bc83a 	sub	r5,r5,r4
   44ee8:	4154983a 	sll	r10,r8,r5
   44eec:	890ed83a 	srl	r7,r17,r4
   44ef0:	894a983a 	sll	r5,r17,r5
   44ef4:	4108d83a 	srl	r4,r8,r4
   44ef8:	51e2b03a 	or	r17,r10,r7
   44efc:	280ac03a 	cmpne	r5,r5,zero
   44f00:	8962b03a 	or	r17,r17,r5
   44f04:	89a3883a 	add	r17,r17,r6
   44f08:	2253883a 	add	r9,r4,r9
   44f0c:	898d803a 	cmpltu	r6,r17,r6
   44f10:	3251883a 	add	r8,r6,r9
   44f14:	1021883a 	mov	r16,r2
   44f18:	003ee506 	br	44ab0 <__alt_data_end+0xfffdd9b0>
   44f1c:	4984b03a 	or	r2,r9,r6
   44f20:	103e6326 	beq	r2,zero,448b0 <__alt_data_end+0xfffdd7b0>
   44f24:	8987c83a 	sub	r3,r17,r6
   44f28:	88c9803a 	cmpltu	r4,r17,r3
   44f2c:	4245c83a 	sub	r2,r8,r9
   44f30:	1105c83a 	sub	r2,r2,r4
   44f34:	1100202c 	andhi	r4,r2,128
   44f38:	203ebb26 	beq	r4,zero,44a28 <__alt_data_end+0xfffdd928>
   44f3c:	3463c83a 	sub	r17,r6,r17
   44f40:	4a07c83a 	sub	r3,r9,r8
   44f44:	344d803a 	cmpltu	r6,r6,r17
   44f48:	1991c83a 	sub	r8,r3,r6
   44f4c:	3825883a 	mov	r18,r7
   44f50:	003e5706 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44f54:	4984b03a 	or	r2,r9,r6
   44f58:	10002e26 	beq	r2,zero,45014 <__adddf3+0x7e0>
   44f5c:	4004d0fa 	srli	r2,r8,3
   44f60:	8822d0fa 	srli	r17,r17,3
   44f64:	4010977a 	slli	r8,r8,29
   44f68:	10c0022c 	andhi	r3,r2,8
   44f6c:	4462b03a 	or	r17,r8,r17
   44f70:	18000826 	beq	r3,zero,44f94 <__adddf3+0x760>
   44f74:	4808d0fa 	srli	r4,r9,3
   44f78:	20c0022c 	andhi	r3,r4,8
   44f7c:	1800051e 	bne	r3,zero,44f94 <__adddf3+0x760>
   44f80:	300cd0fa 	srli	r6,r6,3
   44f84:	4806977a 	slli	r3,r9,29
   44f88:	2005883a 	mov	r2,r4
   44f8c:	3825883a 	mov	r18,r7
   44f90:	19a2b03a 	or	r17,r3,r6
   44f94:	8810d77a 	srli	r8,r17,29
   44f98:	100490fa 	slli	r2,r2,3
   44f9c:	882290fa 	slli	r17,r17,3
   44fa0:	0401ffc4 	movi	r16,2047
   44fa4:	4090b03a 	or	r8,r8,r2
   44fa8:	003e4106 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44fac:	0141ffc4 	movi	r5,2047
   44fb0:	117fc71e 	bne	r2,r5,44ed0 <__alt_data_end+0xfffdddd0>
   44fb4:	4811883a 	mov	r8,r9
   44fb8:	3023883a 	mov	r17,r6
   44fbc:	1021883a 	mov	r16,r2
   44fc0:	003e3b06 	br	448b0 <__alt_data_end+0xfffdd7b0>
   44fc4:	10002f26 	beq	r2,zero,45084 <__adddf3+0x850>
   44fc8:	4984b03a 	or	r2,r9,r6
   44fcc:	10001126 	beq	r2,zero,45014 <__adddf3+0x7e0>
   44fd0:	4004d0fa 	srli	r2,r8,3
   44fd4:	8822d0fa 	srli	r17,r17,3
   44fd8:	4010977a 	slli	r8,r8,29
   44fdc:	10c0022c 	andhi	r3,r2,8
   44fe0:	4462b03a 	or	r17,r8,r17
   44fe4:	183feb26 	beq	r3,zero,44f94 <__alt_data_end+0xfffdde94>
   44fe8:	4808d0fa 	srli	r4,r9,3
   44fec:	20c0022c 	andhi	r3,r4,8
   44ff0:	183fe81e 	bne	r3,zero,44f94 <__alt_data_end+0xfffdde94>
   44ff4:	300cd0fa 	srli	r6,r6,3
   44ff8:	4806977a 	slli	r3,r9,29
   44ffc:	2005883a 	mov	r2,r4
   45000:	19a2b03a 	or	r17,r3,r6
   45004:	003fe306 	br	44f94 <__alt_data_end+0xfffdde94>
   45008:	0011883a 	mov	r8,zero
   4500c:	0005883a 	mov	r2,zero
   45010:	003e3f06 	br	44910 <__alt_data_end+0xfffdd810>
   45014:	0401ffc4 	movi	r16,2047
   45018:	003e2506 	br	448b0 <__alt_data_end+0xfffdd7b0>
   4501c:	0013883a 	mov	r9,zero
   45020:	003f8406 	br	44e34 <__alt_data_end+0xfffddd34>
   45024:	0005883a 	mov	r2,zero
   45028:	0007883a 	mov	r3,zero
   4502c:	003e8906 	br	44a54 <__alt_data_end+0xfffdd954>
   45030:	197ff804 	addi	r5,r3,-32
   45034:	01000804 	movi	r4,32
   45038:	414ad83a 	srl	r5,r8,r5
   4503c:	19002426 	beq	r3,r4,450d0 <__adddf3+0x89c>
   45040:	01001004 	movi	r4,64
   45044:	20c7c83a 	sub	r3,r4,r3
   45048:	40c6983a 	sll	r3,r8,r3
   4504c:	1c46b03a 	or	r3,r3,r17
   45050:	1806c03a 	cmpne	r3,r3,zero
   45054:	28e2b03a 	or	r17,r5,r3
   45058:	0007883a 	mov	r3,zero
   4505c:	003f2306 	br	44cec <__alt_data_end+0xfffddbec>
   45060:	0007883a 	mov	r3,zero
   45064:	5811883a 	mov	r8,r11
   45068:	00bfffc4 	movi	r2,-1
   4506c:	0401ffc4 	movi	r16,2047
   45070:	003e7806 	br	44a54 <__alt_data_end+0xfffdd954>
   45074:	4462b03a 	or	r17,r8,r17
   45078:	8822c03a 	cmpne	r17,r17,zero
   4507c:	0009883a 	mov	r4,zero
   45080:	003fa006 	br	44f04 <__alt_data_end+0xfffdde04>
   45084:	4811883a 	mov	r8,r9
   45088:	3023883a 	mov	r17,r6
   4508c:	0401ffc4 	movi	r16,2047
   45090:	003e0706 	br	448b0 <__alt_data_end+0xfffdd7b0>
   45094:	4811883a 	mov	r8,r9
   45098:	3023883a 	mov	r17,r6
   4509c:	003e0406 	br	448b0 <__alt_data_end+0xfffdd7b0>
   450a0:	21fff804 	addi	r7,r4,-32
   450a4:	01400804 	movi	r5,32
   450a8:	41ced83a 	srl	r7,r8,r7
   450ac:	21400a26 	beq	r4,r5,450d8 <__adddf3+0x8a4>
   450b0:	01401004 	movi	r5,64
   450b4:	2909c83a 	sub	r4,r5,r4
   450b8:	4108983a 	sll	r4,r8,r4
   450bc:	2448b03a 	or	r4,r4,r17
   450c0:	2008c03a 	cmpne	r4,r4,zero
   450c4:	3922b03a 	or	r17,r7,r4
   450c8:	0009883a 	mov	r4,zero
   450cc:	003f8d06 	br	44f04 <__alt_data_end+0xfffdde04>
   450d0:	0007883a 	mov	r3,zero
   450d4:	003fdd06 	br	4504c <__alt_data_end+0xfffddf4c>
   450d8:	0009883a 	mov	r4,zero
   450dc:	003ff706 	br	450bc <__alt_data_end+0xfffddfbc>

000450e0 <__divdf3>:
   450e0:	defff204 	addi	sp,sp,-56
   450e4:	dd400915 	stw	r21,36(sp)
   450e8:	282ad53a 	srli	r21,r5,20
   450ec:	dd000815 	stw	r20,32(sp)
   450f0:	2828d7fa 	srli	r20,r5,31
   450f4:	dc000415 	stw	r16,16(sp)
   450f8:	04000434 	movhi	r16,16
   450fc:	df000c15 	stw	fp,48(sp)
   45100:	843fffc4 	addi	r16,r16,-1
   45104:	dfc00d15 	stw	ra,52(sp)
   45108:	ddc00b15 	stw	r23,44(sp)
   4510c:	dd800a15 	stw	r22,40(sp)
   45110:	dcc00715 	stw	r19,28(sp)
   45114:	dc800615 	stw	r18,24(sp)
   45118:	dc400515 	stw	r17,20(sp)
   4511c:	ad41ffcc 	andi	r21,r21,2047
   45120:	2c20703a 	and	r16,r5,r16
   45124:	a7003fcc 	andi	fp,r20,255
   45128:	a8006126 	beq	r21,zero,452b0 <__divdf3+0x1d0>
   4512c:	0081ffc4 	movi	r2,2047
   45130:	2025883a 	mov	r18,r4
   45134:	a8803726 	beq	r21,r2,45214 <__divdf3+0x134>
   45138:	80800434 	orhi	r2,r16,16
   4513c:	100490fa 	slli	r2,r2,3
   45140:	2020d77a 	srli	r16,r4,29
   45144:	202490fa 	slli	r18,r4,3
   45148:	ad7f0044 	addi	r21,r21,-1023
   4514c:	80a0b03a 	or	r16,r16,r2
   45150:	0027883a 	mov	r19,zero
   45154:	0013883a 	mov	r9,zero
   45158:	3804d53a 	srli	r2,r7,20
   4515c:	382cd7fa 	srli	r22,r7,31
   45160:	04400434 	movhi	r17,16
   45164:	8c7fffc4 	addi	r17,r17,-1
   45168:	1081ffcc 	andi	r2,r2,2047
   4516c:	3011883a 	mov	r8,r6
   45170:	3c62703a 	and	r17,r7,r17
   45174:	b5c03fcc 	andi	r23,r22,255
   45178:	10006c26 	beq	r2,zero,4532c <__divdf3+0x24c>
   4517c:	00c1ffc4 	movi	r3,2047
   45180:	10c06426 	beq	r2,r3,45314 <__divdf3+0x234>
   45184:	88c00434 	orhi	r3,r17,16
   45188:	180690fa 	slli	r3,r3,3
   4518c:	3022d77a 	srli	r17,r6,29
   45190:	301090fa 	slli	r8,r6,3
   45194:	10bf0044 	addi	r2,r2,-1023
   45198:	88e2b03a 	or	r17,r17,r3
   4519c:	000f883a 	mov	r7,zero
   451a0:	a58cf03a 	xor	r6,r20,r22
   451a4:	3cc8b03a 	or	r4,r7,r19
   451a8:	a8abc83a 	sub	r21,r21,r2
   451ac:	008003c4 	movi	r2,15
   451b0:	3007883a 	mov	r3,r6
   451b4:	34c03fcc 	andi	r19,r6,255
   451b8:	11009036 	bltu	r2,r4,453fc <__divdf3+0x31c>
   451bc:	200890ba 	slli	r4,r4,2
   451c0:	00800134 	movhi	r2,4
   451c4:	10947504 	addi	r2,r2,20948
   451c8:	2089883a 	add	r4,r4,r2
   451cc:	20800017 	ldw	r2,0(r4)
   451d0:	1000683a 	jmp	r2
   451d4:	000453fc 	xorhi	zero,zero,4431
   451d8:	0004524c 	andi	zero,zero,4425
   451dc:	000453ec 	andhi	zero,zero,4431
   451e0:	00045240 	call	4524 <__alt_mem_onchip_memory2-0x3badc>
   451e4:	000453ec 	andhi	zero,zero,4431
   451e8:	000453c0 	call	453c <__alt_mem_onchip_memory2-0x3bac4>
   451ec:	000453ec 	andhi	zero,zero,4431
   451f0:	00045240 	call	4524 <__alt_mem_onchip_memory2-0x3badc>
   451f4:	0004524c 	andi	zero,zero,4425
   451f8:	0004524c 	andi	zero,zero,4425
   451fc:	000453c0 	call	453c <__alt_mem_onchip_memory2-0x3bac4>
   45200:	00045240 	call	4524 <__alt_mem_onchip_memory2-0x3badc>
   45204:	00045230 	cmpltui	zero,zero,4424
   45208:	00045230 	cmpltui	zero,zero,4424
   4520c:	00045230 	cmpltui	zero,zero,4424
   45210:	000456e0 	cmpeqi	zero,zero,4443
   45214:	2404b03a 	or	r2,r4,r16
   45218:	1000661e 	bne	r2,zero,453b4 <__divdf3+0x2d4>
   4521c:	04c00204 	movi	r19,8
   45220:	0021883a 	mov	r16,zero
   45224:	0025883a 	mov	r18,zero
   45228:	02400084 	movi	r9,2
   4522c:	003fca06 	br	45158 <__alt_data_end+0xfffde058>
   45230:	8023883a 	mov	r17,r16
   45234:	9011883a 	mov	r8,r18
   45238:	e02f883a 	mov	r23,fp
   4523c:	480f883a 	mov	r7,r9
   45240:	00800084 	movi	r2,2
   45244:	3881311e 	bne	r7,r2,4570c <__divdf3+0x62c>
   45248:	b827883a 	mov	r19,r23
   4524c:	98c0004c 	andi	r3,r19,1
   45250:	0081ffc4 	movi	r2,2047
   45254:	000b883a 	mov	r5,zero
   45258:	0025883a 	mov	r18,zero
   4525c:	1004953a 	slli	r2,r2,20
   45260:	18c03fcc 	andi	r3,r3,255
   45264:	04400434 	movhi	r17,16
   45268:	8c7fffc4 	addi	r17,r17,-1
   4526c:	180697fa 	slli	r3,r3,31
   45270:	2c4a703a 	and	r5,r5,r17
   45274:	288ab03a 	or	r5,r5,r2
   45278:	28c6b03a 	or	r3,r5,r3
   4527c:	9005883a 	mov	r2,r18
   45280:	dfc00d17 	ldw	ra,52(sp)
   45284:	df000c17 	ldw	fp,48(sp)
   45288:	ddc00b17 	ldw	r23,44(sp)
   4528c:	dd800a17 	ldw	r22,40(sp)
   45290:	dd400917 	ldw	r21,36(sp)
   45294:	dd000817 	ldw	r20,32(sp)
   45298:	dcc00717 	ldw	r19,28(sp)
   4529c:	dc800617 	ldw	r18,24(sp)
   452a0:	dc400517 	ldw	r17,20(sp)
   452a4:	dc000417 	ldw	r16,16(sp)
   452a8:	dec00e04 	addi	sp,sp,56
   452ac:	f800283a 	ret
   452b0:	2404b03a 	or	r2,r4,r16
   452b4:	2027883a 	mov	r19,r4
   452b8:	10003926 	beq	r2,zero,453a0 <__divdf3+0x2c0>
   452bc:	80012e26 	beq	r16,zero,45778 <__divdf3+0x698>
   452c0:	8009883a 	mov	r4,r16
   452c4:	d9800315 	stw	r6,12(sp)
   452c8:	d9c00215 	stw	r7,8(sp)
   452cc:	0046f540 	call	46f54 <__clzsi2>
   452d0:	d9800317 	ldw	r6,12(sp)
   452d4:	d9c00217 	ldw	r7,8(sp)
   452d8:	113ffd44 	addi	r4,r2,-11
   452dc:	00c00704 	movi	r3,28
   452e0:	19012116 	blt	r3,r4,45768 <__divdf3+0x688>
   452e4:	00c00744 	movi	r3,29
   452e8:	147ffe04 	addi	r17,r2,-8
   452ec:	1907c83a 	sub	r3,r3,r4
   452f0:	8460983a 	sll	r16,r16,r17
   452f4:	98c6d83a 	srl	r3,r19,r3
   452f8:	9c64983a 	sll	r18,r19,r17
   452fc:	1c20b03a 	or	r16,r3,r16
   45300:	1080fcc4 	addi	r2,r2,1011
   45304:	00abc83a 	sub	r21,zero,r2
   45308:	0027883a 	mov	r19,zero
   4530c:	0013883a 	mov	r9,zero
   45310:	003f9106 	br	45158 <__alt_data_end+0xfffde058>
   45314:	3446b03a 	or	r3,r6,r17
   45318:	18001f1e 	bne	r3,zero,45398 <__divdf3+0x2b8>
   4531c:	0023883a 	mov	r17,zero
   45320:	0011883a 	mov	r8,zero
   45324:	01c00084 	movi	r7,2
   45328:	003f9d06 	br	451a0 <__alt_data_end+0xfffde0a0>
   4532c:	3446b03a 	or	r3,r6,r17
   45330:	18001526 	beq	r3,zero,45388 <__divdf3+0x2a8>
   45334:	88011b26 	beq	r17,zero,457a4 <__divdf3+0x6c4>
   45338:	8809883a 	mov	r4,r17
   4533c:	d9800315 	stw	r6,12(sp)
   45340:	da400115 	stw	r9,4(sp)
   45344:	0046f540 	call	46f54 <__clzsi2>
   45348:	d9800317 	ldw	r6,12(sp)
   4534c:	da400117 	ldw	r9,4(sp)
   45350:	113ffd44 	addi	r4,r2,-11
   45354:	00c00704 	movi	r3,28
   45358:	19010e16 	blt	r3,r4,45794 <__divdf3+0x6b4>
   4535c:	00c00744 	movi	r3,29
   45360:	123ffe04 	addi	r8,r2,-8
   45364:	1907c83a 	sub	r3,r3,r4
   45368:	8a22983a 	sll	r17,r17,r8
   4536c:	30c6d83a 	srl	r3,r6,r3
   45370:	3210983a 	sll	r8,r6,r8
   45374:	1c62b03a 	or	r17,r3,r17
   45378:	1080fcc4 	addi	r2,r2,1011
   4537c:	0085c83a 	sub	r2,zero,r2
   45380:	000f883a 	mov	r7,zero
   45384:	003f8606 	br	451a0 <__alt_data_end+0xfffde0a0>
   45388:	0023883a 	mov	r17,zero
   4538c:	0011883a 	mov	r8,zero
   45390:	01c00044 	movi	r7,1
   45394:	003f8206 	br	451a0 <__alt_data_end+0xfffde0a0>
   45398:	01c000c4 	movi	r7,3
   4539c:	003f8006 	br	451a0 <__alt_data_end+0xfffde0a0>
   453a0:	04c00104 	movi	r19,4
   453a4:	0021883a 	mov	r16,zero
   453a8:	0025883a 	mov	r18,zero
   453ac:	02400044 	movi	r9,1
   453b0:	003f6906 	br	45158 <__alt_data_end+0xfffde058>
   453b4:	04c00304 	movi	r19,12
   453b8:	024000c4 	movi	r9,3
   453bc:	003f6606 	br	45158 <__alt_data_end+0xfffde058>
   453c0:	01400434 	movhi	r5,16
   453c4:	0007883a 	mov	r3,zero
   453c8:	297fffc4 	addi	r5,r5,-1
   453cc:	04bfffc4 	movi	r18,-1
   453d0:	0081ffc4 	movi	r2,2047
   453d4:	003fa106 	br	4525c <__alt_data_end+0xfffde15c>
   453d8:	00c00044 	movi	r3,1
   453dc:	1887c83a 	sub	r3,r3,r2
   453e0:	01000e04 	movi	r4,56
   453e4:	20c1210e 	bge	r4,r3,4586c <__divdf3+0x78c>
   453e8:	98c0004c 	andi	r3,r19,1
   453ec:	0005883a 	mov	r2,zero
   453f0:	000b883a 	mov	r5,zero
   453f4:	0025883a 	mov	r18,zero
   453f8:	003f9806 	br	4525c <__alt_data_end+0xfffde15c>
   453fc:	8c00fd36 	bltu	r17,r16,457f4 <__divdf3+0x714>
   45400:	8440fb26 	beq	r16,r17,457f0 <__divdf3+0x710>
   45404:	8007883a 	mov	r3,r16
   45408:	ad7fffc4 	addi	r21,r21,-1
   4540c:	0021883a 	mov	r16,zero
   45410:	4004d63a 	srli	r2,r8,24
   45414:	8822923a 	slli	r17,r17,8
   45418:	1809883a 	mov	r4,r3
   4541c:	402c923a 	slli	r22,r8,8
   45420:	88b8b03a 	or	fp,r17,r2
   45424:	e028d43a 	srli	r20,fp,16
   45428:	d8c00015 	stw	r3,0(sp)
   4542c:	e5ffffcc 	andi	r23,fp,65535
   45430:	a00b883a 	mov	r5,r20
   45434:	00432780 	call	43278 <__udivsi3>
   45438:	d8c00017 	ldw	r3,0(sp)
   4543c:	a00b883a 	mov	r5,r20
   45440:	d8800315 	stw	r2,12(sp)
   45444:	1809883a 	mov	r4,r3
   45448:	00432dc0 	call	432dc <__umodsi3>
   4544c:	d9800317 	ldw	r6,12(sp)
   45450:	1006943a 	slli	r3,r2,16
   45454:	9004d43a 	srli	r2,r18,16
   45458:	b9a3383a 	mul	r17,r23,r6
   4545c:	10c4b03a 	or	r2,r2,r3
   45460:	1440062e 	bgeu	r2,r17,4547c <__divdf3+0x39c>
   45464:	1705883a 	add	r2,r2,fp
   45468:	30ffffc4 	addi	r3,r6,-1
   4546c:	1700ee36 	bltu	r2,fp,45828 <__divdf3+0x748>
   45470:	1440ed2e 	bgeu	r2,r17,45828 <__divdf3+0x748>
   45474:	31bfff84 	addi	r6,r6,-2
   45478:	1705883a 	add	r2,r2,fp
   4547c:	1463c83a 	sub	r17,r2,r17
   45480:	a00b883a 	mov	r5,r20
   45484:	8809883a 	mov	r4,r17
   45488:	d9800315 	stw	r6,12(sp)
   4548c:	00432780 	call	43278 <__udivsi3>
   45490:	a00b883a 	mov	r5,r20
   45494:	8809883a 	mov	r4,r17
   45498:	d8800215 	stw	r2,8(sp)
   4549c:	00432dc0 	call	432dc <__umodsi3>
   454a0:	d9c00217 	ldw	r7,8(sp)
   454a4:	1004943a 	slli	r2,r2,16
   454a8:	94bfffcc 	andi	r18,r18,65535
   454ac:	b9d1383a 	mul	r8,r23,r7
   454b0:	90a4b03a 	or	r18,r18,r2
   454b4:	d9800317 	ldw	r6,12(sp)
   454b8:	9200062e 	bgeu	r18,r8,454d4 <__divdf3+0x3f4>
   454bc:	9725883a 	add	r18,r18,fp
   454c0:	38bfffc4 	addi	r2,r7,-1
   454c4:	9700d636 	bltu	r18,fp,45820 <__divdf3+0x740>
   454c8:	9200d52e 	bgeu	r18,r8,45820 <__divdf3+0x740>
   454cc:	39ffff84 	addi	r7,r7,-2
   454d0:	9725883a 	add	r18,r18,fp
   454d4:	3004943a 	slli	r2,r6,16
   454d8:	b012d43a 	srli	r9,r22,16
   454dc:	b1bfffcc 	andi	r6,r22,65535
   454e0:	11e2b03a 	or	r17,r2,r7
   454e4:	8806d43a 	srli	r3,r17,16
   454e8:	893fffcc 	andi	r4,r17,65535
   454ec:	218b383a 	mul	r5,r4,r6
   454f0:	30c5383a 	mul	r2,r6,r3
   454f4:	2249383a 	mul	r4,r4,r9
   454f8:	280ed43a 	srli	r7,r5,16
   454fc:	9225c83a 	sub	r18,r18,r8
   45500:	2089883a 	add	r4,r4,r2
   45504:	3909883a 	add	r4,r7,r4
   45508:	1a47383a 	mul	r3,r3,r9
   4550c:	2080022e 	bgeu	r4,r2,45518 <__divdf3+0x438>
   45510:	00800074 	movhi	r2,1
   45514:	1887883a 	add	r3,r3,r2
   45518:	2004d43a 	srli	r2,r4,16
   4551c:	2008943a 	slli	r4,r4,16
   45520:	297fffcc 	andi	r5,r5,65535
   45524:	10c7883a 	add	r3,r2,r3
   45528:	2149883a 	add	r4,r4,r5
   4552c:	90c0a536 	bltu	r18,r3,457c4 <__divdf3+0x6e4>
   45530:	90c0bf26 	beq	r18,r3,45830 <__divdf3+0x750>
   45534:	90c7c83a 	sub	r3,r18,r3
   45538:	810fc83a 	sub	r7,r16,r4
   4553c:	81e5803a 	cmpltu	r18,r16,r7
   45540:	1ca5c83a 	sub	r18,r3,r18
   45544:	e480c126 	beq	fp,r18,4584c <__divdf3+0x76c>
   45548:	a00b883a 	mov	r5,r20
   4554c:	9009883a 	mov	r4,r18
   45550:	d9800315 	stw	r6,12(sp)
   45554:	d9c00215 	stw	r7,8(sp)
   45558:	da400115 	stw	r9,4(sp)
   4555c:	00432780 	call	43278 <__udivsi3>
   45560:	a00b883a 	mov	r5,r20
   45564:	9009883a 	mov	r4,r18
   45568:	d8800015 	stw	r2,0(sp)
   4556c:	00432dc0 	call	432dc <__umodsi3>
   45570:	d9c00217 	ldw	r7,8(sp)
   45574:	da000017 	ldw	r8,0(sp)
   45578:	1006943a 	slli	r3,r2,16
   4557c:	3804d43a 	srli	r2,r7,16
   45580:	ba21383a 	mul	r16,r23,r8
   45584:	d9800317 	ldw	r6,12(sp)
   45588:	10c4b03a 	or	r2,r2,r3
   4558c:	da400117 	ldw	r9,4(sp)
   45590:	1400062e 	bgeu	r2,r16,455ac <__divdf3+0x4cc>
   45594:	1705883a 	add	r2,r2,fp
   45598:	40ffffc4 	addi	r3,r8,-1
   4559c:	1700ad36 	bltu	r2,fp,45854 <__divdf3+0x774>
   455a0:	1400ac2e 	bgeu	r2,r16,45854 <__divdf3+0x774>
   455a4:	423fff84 	addi	r8,r8,-2
   455a8:	1705883a 	add	r2,r2,fp
   455ac:	1421c83a 	sub	r16,r2,r16
   455b0:	a00b883a 	mov	r5,r20
   455b4:	8009883a 	mov	r4,r16
   455b8:	d9800315 	stw	r6,12(sp)
   455bc:	d9c00215 	stw	r7,8(sp)
   455c0:	da000015 	stw	r8,0(sp)
   455c4:	da400115 	stw	r9,4(sp)
   455c8:	00432780 	call	43278 <__udivsi3>
   455cc:	8009883a 	mov	r4,r16
   455d0:	a00b883a 	mov	r5,r20
   455d4:	1025883a 	mov	r18,r2
   455d8:	00432dc0 	call	432dc <__umodsi3>
   455dc:	d9c00217 	ldw	r7,8(sp)
   455e0:	1004943a 	slli	r2,r2,16
   455e4:	bcaf383a 	mul	r23,r23,r18
   455e8:	393fffcc 	andi	r4,r7,65535
   455ec:	2088b03a 	or	r4,r4,r2
   455f0:	d9800317 	ldw	r6,12(sp)
   455f4:	da000017 	ldw	r8,0(sp)
   455f8:	da400117 	ldw	r9,4(sp)
   455fc:	25c0062e 	bgeu	r4,r23,45618 <__divdf3+0x538>
   45600:	2709883a 	add	r4,r4,fp
   45604:	90bfffc4 	addi	r2,r18,-1
   45608:	27009436 	bltu	r4,fp,4585c <__divdf3+0x77c>
   4560c:	25c0932e 	bgeu	r4,r23,4585c <__divdf3+0x77c>
   45610:	94bfff84 	addi	r18,r18,-2
   45614:	2709883a 	add	r4,r4,fp
   45618:	4004943a 	slli	r2,r8,16
   4561c:	25efc83a 	sub	r23,r4,r23
   45620:	1490b03a 	or	r8,r2,r18
   45624:	4008d43a 	srli	r4,r8,16
   45628:	40ffffcc 	andi	r3,r8,65535
   4562c:	30c5383a 	mul	r2,r6,r3
   45630:	1a47383a 	mul	r3,r3,r9
   45634:	310d383a 	mul	r6,r6,r4
   45638:	100ad43a 	srli	r5,r2,16
   4563c:	4913383a 	mul	r9,r9,r4
   45640:	1987883a 	add	r3,r3,r6
   45644:	28c7883a 	add	r3,r5,r3
   45648:	1980022e 	bgeu	r3,r6,45654 <__divdf3+0x574>
   4564c:	01000074 	movhi	r4,1
   45650:	4913883a 	add	r9,r9,r4
   45654:	1808d43a 	srli	r4,r3,16
   45658:	1806943a 	slli	r3,r3,16
   4565c:	10bfffcc 	andi	r2,r2,65535
   45660:	2253883a 	add	r9,r4,r9
   45664:	1887883a 	add	r3,r3,r2
   45668:	ba403836 	bltu	r23,r9,4574c <__divdf3+0x66c>
   4566c:	ba403626 	beq	r23,r9,45748 <__divdf3+0x668>
   45670:	42000054 	ori	r8,r8,1
   45674:	a880ffc4 	addi	r2,r21,1023
   45678:	00bf570e 	bge	zero,r2,453d8 <__alt_data_end+0xfffde2d8>
   4567c:	40c001cc 	andi	r3,r8,7
   45680:	18000726 	beq	r3,zero,456a0 <__divdf3+0x5c0>
   45684:	40c003cc 	andi	r3,r8,15
   45688:	01000104 	movi	r4,4
   4568c:	19000426 	beq	r3,r4,456a0 <__divdf3+0x5c0>
   45690:	4107883a 	add	r3,r8,r4
   45694:	1a11803a 	cmpltu	r8,r3,r8
   45698:	8a23883a 	add	r17,r17,r8
   4569c:	1811883a 	mov	r8,r3
   456a0:	88c0402c 	andhi	r3,r17,256
   456a4:	18000426 	beq	r3,zero,456b8 <__divdf3+0x5d8>
   456a8:	00ffc034 	movhi	r3,65280
   456ac:	18ffffc4 	addi	r3,r3,-1
   456b0:	a8810004 	addi	r2,r21,1024
   456b4:	88e2703a 	and	r17,r17,r3
   456b8:	00c1ff84 	movi	r3,2046
   456bc:	18bee316 	blt	r3,r2,4524c <__alt_data_end+0xfffde14c>
   456c0:	8824977a 	slli	r18,r17,29
   456c4:	4010d0fa 	srli	r8,r8,3
   456c8:	8822927a 	slli	r17,r17,9
   456cc:	1081ffcc 	andi	r2,r2,2047
   456d0:	9224b03a 	or	r18,r18,r8
   456d4:	880ad33a 	srli	r5,r17,12
   456d8:	98c0004c 	andi	r3,r19,1
   456dc:	003edf06 	br	4525c <__alt_data_end+0xfffde15c>
   456e0:	8080022c 	andhi	r2,r16,8
   456e4:	10001226 	beq	r2,zero,45730 <__divdf3+0x650>
   456e8:	8880022c 	andhi	r2,r17,8
   456ec:	1000101e 	bne	r2,zero,45730 <__divdf3+0x650>
   456f0:	00800434 	movhi	r2,16
   456f4:	89400234 	orhi	r5,r17,8
   456f8:	10bfffc4 	addi	r2,r2,-1
   456fc:	b007883a 	mov	r3,r22
   45700:	288a703a 	and	r5,r5,r2
   45704:	4025883a 	mov	r18,r8
   45708:	003f3106 	br	453d0 <__alt_data_end+0xfffde2d0>
   4570c:	008000c4 	movi	r2,3
   45710:	3880a626 	beq	r7,r2,459ac <__divdf3+0x8cc>
   45714:	00800044 	movi	r2,1
   45718:	3880521e 	bne	r7,r2,45864 <__divdf3+0x784>
   4571c:	b807883a 	mov	r3,r23
   45720:	0005883a 	mov	r2,zero
   45724:	000b883a 	mov	r5,zero
   45728:	0025883a 	mov	r18,zero
   4572c:	003ecb06 	br	4525c <__alt_data_end+0xfffde15c>
   45730:	00800434 	movhi	r2,16
   45734:	81400234 	orhi	r5,r16,8
   45738:	10bfffc4 	addi	r2,r2,-1
   4573c:	a007883a 	mov	r3,r20
   45740:	288a703a 	and	r5,r5,r2
   45744:	003f2206 	br	453d0 <__alt_data_end+0xfffde2d0>
   45748:	183fca26 	beq	r3,zero,45674 <__alt_data_end+0xfffde574>
   4574c:	e5ef883a 	add	r23,fp,r23
   45750:	40bfffc4 	addi	r2,r8,-1
   45754:	bf00392e 	bgeu	r23,fp,4583c <__divdf3+0x75c>
   45758:	1011883a 	mov	r8,r2
   4575c:	ba7fc41e 	bne	r23,r9,45670 <__alt_data_end+0xfffde570>
   45760:	b0ffc31e 	bne	r22,r3,45670 <__alt_data_end+0xfffde570>
   45764:	003fc306 	br	45674 <__alt_data_end+0xfffde574>
   45768:	143ff604 	addi	r16,r2,-40
   4576c:	9c20983a 	sll	r16,r19,r16
   45770:	0025883a 	mov	r18,zero
   45774:	003ee206 	br	45300 <__alt_data_end+0xfffde200>
   45778:	d9800315 	stw	r6,12(sp)
   4577c:	d9c00215 	stw	r7,8(sp)
   45780:	0046f540 	call	46f54 <__clzsi2>
   45784:	10800804 	addi	r2,r2,32
   45788:	d9c00217 	ldw	r7,8(sp)
   4578c:	d9800317 	ldw	r6,12(sp)
   45790:	003ed106 	br	452d8 <__alt_data_end+0xfffde1d8>
   45794:	147ff604 	addi	r17,r2,-40
   45798:	3462983a 	sll	r17,r6,r17
   4579c:	0011883a 	mov	r8,zero
   457a0:	003ef506 	br	45378 <__alt_data_end+0xfffde278>
   457a4:	3009883a 	mov	r4,r6
   457a8:	d9800315 	stw	r6,12(sp)
   457ac:	da400115 	stw	r9,4(sp)
   457b0:	0046f540 	call	46f54 <__clzsi2>
   457b4:	10800804 	addi	r2,r2,32
   457b8:	da400117 	ldw	r9,4(sp)
   457bc:	d9800317 	ldw	r6,12(sp)
   457c0:	003ee306 	br	45350 <__alt_data_end+0xfffde250>
   457c4:	85a1883a 	add	r16,r16,r22
   457c8:	8585803a 	cmpltu	r2,r16,r22
   457cc:	1705883a 	add	r2,r2,fp
   457d0:	14a5883a 	add	r18,r2,r18
   457d4:	88bfffc4 	addi	r2,r17,-1
   457d8:	e4800c2e 	bgeu	fp,r18,4580c <__divdf3+0x72c>
   457dc:	90c03e36 	bltu	r18,r3,458d8 <__divdf3+0x7f8>
   457e0:	1c806926 	beq	r3,r18,45988 <__divdf3+0x8a8>
   457e4:	90c7c83a 	sub	r3,r18,r3
   457e8:	1023883a 	mov	r17,r2
   457ec:	003f5206 	br	45538 <__alt_data_end+0xfffde438>
   457f0:	923f0436 	bltu	r18,r8,45404 <__alt_data_end+0xfffde304>
   457f4:	800897fa 	slli	r4,r16,31
   457f8:	9004d07a 	srli	r2,r18,1
   457fc:	8006d07a 	srli	r3,r16,1
   45800:	902097fa 	slli	r16,r18,31
   45804:	20a4b03a 	or	r18,r4,r2
   45808:	003f0106 	br	45410 <__alt_data_end+0xfffde310>
   4580c:	e4bff51e 	bne	fp,r18,457e4 <__alt_data_end+0xfffde6e4>
   45810:	85bff22e 	bgeu	r16,r22,457dc <__alt_data_end+0xfffde6dc>
   45814:	e0c7c83a 	sub	r3,fp,r3
   45818:	1023883a 	mov	r17,r2
   4581c:	003f4606 	br	45538 <__alt_data_end+0xfffde438>
   45820:	100f883a 	mov	r7,r2
   45824:	003f2b06 	br	454d4 <__alt_data_end+0xfffde3d4>
   45828:	180d883a 	mov	r6,r3
   4582c:	003f1306 	br	4547c <__alt_data_end+0xfffde37c>
   45830:	813fe436 	bltu	r16,r4,457c4 <__alt_data_end+0xfffde6c4>
   45834:	0007883a 	mov	r3,zero
   45838:	003f3f06 	br	45538 <__alt_data_end+0xfffde438>
   4583c:	ba402c36 	bltu	r23,r9,458f0 <__divdf3+0x810>
   45840:	4dc05426 	beq	r9,r23,45994 <__divdf3+0x8b4>
   45844:	1011883a 	mov	r8,r2
   45848:	003f8906 	br	45670 <__alt_data_end+0xfffde570>
   4584c:	023fffc4 	movi	r8,-1
   45850:	003f8806 	br	45674 <__alt_data_end+0xfffde574>
   45854:	1811883a 	mov	r8,r3
   45858:	003f5406 	br	455ac <__alt_data_end+0xfffde4ac>
   4585c:	1025883a 	mov	r18,r2
   45860:	003f6d06 	br	45618 <__alt_data_end+0xfffde518>
   45864:	b827883a 	mov	r19,r23
   45868:	003f8206 	br	45674 <__alt_data_end+0xfffde574>
   4586c:	010007c4 	movi	r4,31
   45870:	20c02616 	blt	r4,r3,4590c <__divdf3+0x82c>
   45874:	00800804 	movi	r2,32
   45878:	10c5c83a 	sub	r2,r2,r3
   4587c:	888a983a 	sll	r5,r17,r2
   45880:	40c8d83a 	srl	r4,r8,r3
   45884:	4084983a 	sll	r2,r8,r2
   45888:	88e2d83a 	srl	r17,r17,r3
   4588c:	2906b03a 	or	r3,r5,r4
   45890:	1004c03a 	cmpne	r2,r2,zero
   45894:	1886b03a 	or	r3,r3,r2
   45898:	188001cc 	andi	r2,r3,7
   4589c:	10000726 	beq	r2,zero,458bc <__divdf3+0x7dc>
   458a0:	188003cc 	andi	r2,r3,15
   458a4:	01000104 	movi	r4,4
   458a8:	11000426 	beq	r2,r4,458bc <__divdf3+0x7dc>
   458ac:	1805883a 	mov	r2,r3
   458b0:	10c00104 	addi	r3,r2,4
   458b4:	1885803a 	cmpltu	r2,r3,r2
   458b8:	88a3883a 	add	r17,r17,r2
   458bc:	8880202c 	andhi	r2,r17,128
   458c0:	10002726 	beq	r2,zero,45960 <__divdf3+0x880>
   458c4:	98c0004c 	andi	r3,r19,1
   458c8:	00800044 	movi	r2,1
   458cc:	000b883a 	mov	r5,zero
   458d0:	0025883a 	mov	r18,zero
   458d4:	003e6106 	br	4525c <__alt_data_end+0xfffde15c>
   458d8:	85a1883a 	add	r16,r16,r22
   458dc:	8585803a 	cmpltu	r2,r16,r22
   458e0:	1705883a 	add	r2,r2,fp
   458e4:	14a5883a 	add	r18,r2,r18
   458e8:	8c7fff84 	addi	r17,r17,-2
   458ec:	003f1106 	br	45534 <__alt_data_end+0xfffde434>
   458f0:	b589883a 	add	r4,r22,r22
   458f4:	25ad803a 	cmpltu	r22,r4,r22
   458f8:	b739883a 	add	fp,r22,fp
   458fc:	40bfff84 	addi	r2,r8,-2
   45900:	bf2f883a 	add	r23,r23,fp
   45904:	202d883a 	mov	r22,r4
   45908:	003f9306 	br	45758 <__alt_data_end+0xfffde658>
   4590c:	013ff844 	movi	r4,-31
   45910:	2085c83a 	sub	r2,r4,r2
   45914:	8888d83a 	srl	r4,r17,r2
   45918:	00800804 	movi	r2,32
   4591c:	18802126 	beq	r3,r2,459a4 <__divdf3+0x8c4>
   45920:	00801004 	movi	r2,64
   45924:	10c5c83a 	sub	r2,r2,r3
   45928:	8884983a 	sll	r2,r17,r2
   4592c:	1204b03a 	or	r2,r2,r8
   45930:	1004c03a 	cmpne	r2,r2,zero
   45934:	2084b03a 	or	r2,r4,r2
   45938:	144001cc 	andi	r17,r2,7
   4593c:	88000d1e 	bne	r17,zero,45974 <__divdf3+0x894>
   45940:	000b883a 	mov	r5,zero
   45944:	1024d0fa 	srli	r18,r2,3
   45948:	98c0004c 	andi	r3,r19,1
   4594c:	0005883a 	mov	r2,zero
   45950:	9464b03a 	or	r18,r18,r17
   45954:	003e4106 	br	4525c <__alt_data_end+0xfffde15c>
   45958:	1007883a 	mov	r3,r2
   4595c:	0023883a 	mov	r17,zero
   45960:	880a927a 	slli	r5,r17,9
   45964:	1805883a 	mov	r2,r3
   45968:	8822977a 	slli	r17,r17,29
   4596c:	280ad33a 	srli	r5,r5,12
   45970:	003ff406 	br	45944 <__alt_data_end+0xfffde844>
   45974:	10c003cc 	andi	r3,r2,15
   45978:	01000104 	movi	r4,4
   4597c:	193ff626 	beq	r3,r4,45958 <__alt_data_end+0xfffde858>
   45980:	0023883a 	mov	r17,zero
   45984:	003fca06 	br	458b0 <__alt_data_end+0xfffde7b0>
   45988:	813fd336 	bltu	r16,r4,458d8 <__alt_data_end+0xfffde7d8>
   4598c:	1023883a 	mov	r17,r2
   45990:	003fa806 	br	45834 <__alt_data_end+0xfffde734>
   45994:	b0ffd636 	bltu	r22,r3,458f0 <__alt_data_end+0xfffde7f0>
   45998:	1011883a 	mov	r8,r2
   4599c:	b0ff341e 	bne	r22,r3,45670 <__alt_data_end+0xfffde570>
   459a0:	003f3406 	br	45674 <__alt_data_end+0xfffde574>
   459a4:	0005883a 	mov	r2,zero
   459a8:	003fe006 	br	4592c <__alt_data_end+0xfffde82c>
   459ac:	00800434 	movhi	r2,16
   459b0:	89400234 	orhi	r5,r17,8
   459b4:	10bfffc4 	addi	r2,r2,-1
   459b8:	b807883a 	mov	r3,r23
   459bc:	288a703a 	and	r5,r5,r2
   459c0:	4025883a 	mov	r18,r8
   459c4:	003e8206 	br	453d0 <__alt_data_end+0xfffde2d0>

000459c8 <__eqdf2>:
   459c8:	2804d53a 	srli	r2,r5,20
   459cc:	3806d53a 	srli	r3,r7,20
   459d0:	02000434 	movhi	r8,16
   459d4:	423fffc4 	addi	r8,r8,-1
   459d8:	1081ffcc 	andi	r2,r2,2047
   459dc:	0281ffc4 	movi	r10,2047
   459e0:	2a12703a 	and	r9,r5,r8
   459e4:	18c1ffcc 	andi	r3,r3,2047
   459e8:	3a10703a 	and	r8,r7,r8
   459ec:	280ad7fa 	srli	r5,r5,31
   459f0:	380ed7fa 	srli	r7,r7,31
   459f4:	12801026 	beq	r2,r10,45a38 <__eqdf2+0x70>
   459f8:	0281ffc4 	movi	r10,2047
   459fc:	1a800a26 	beq	r3,r10,45a28 <__eqdf2+0x60>
   45a00:	10c00226 	beq	r2,r3,45a0c <__eqdf2+0x44>
   45a04:	00800044 	movi	r2,1
   45a08:	f800283a 	ret
   45a0c:	4a3ffd1e 	bne	r9,r8,45a04 <__alt_data_end+0xfffde904>
   45a10:	21bffc1e 	bne	r4,r6,45a04 <__alt_data_end+0xfffde904>
   45a14:	29c00c26 	beq	r5,r7,45a48 <__eqdf2+0x80>
   45a18:	103ffa1e 	bne	r2,zero,45a04 <__alt_data_end+0xfffde904>
   45a1c:	2244b03a 	or	r2,r4,r9
   45a20:	1004c03a 	cmpne	r2,r2,zero
   45a24:	f800283a 	ret
   45a28:	3214b03a 	or	r10,r6,r8
   45a2c:	503ff426 	beq	r10,zero,45a00 <__alt_data_end+0xfffde900>
   45a30:	00800044 	movi	r2,1
   45a34:	f800283a 	ret
   45a38:	2254b03a 	or	r10,r4,r9
   45a3c:	503fee26 	beq	r10,zero,459f8 <__alt_data_end+0xfffde8f8>
   45a40:	00800044 	movi	r2,1
   45a44:	f800283a 	ret
   45a48:	0005883a 	mov	r2,zero
   45a4c:	f800283a 	ret

00045a50 <__gedf2>:
   45a50:	2804d53a 	srli	r2,r5,20
   45a54:	3806d53a 	srli	r3,r7,20
   45a58:	02000434 	movhi	r8,16
   45a5c:	423fffc4 	addi	r8,r8,-1
   45a60:	1081ffcc 	andi	r2,r2,2047
   45a64:	0241ffc4 	movi	r9,2047
   45a68:	2a14703a 	and	r10,r5,r8
   45a6c:	18c1ffcc 	andi	r3,r3,2047
   45a70:	3a10703a 	and	r8,r7,r8
   45a74:	280ad7fa 	srli	r5,r5,31
   45a78:	380ed7fa 	srli	r7,r7,31
   45a7c:	12401d26 	beq	r2,r9,45af4 <__gedf2+0xa4>
   45a80:	0241ffc4 	movi	r9,2047
   45a84:	1a401226 	beq	r3,r9,45ad0 <__gedf2+0x80>
   45a88:	1000081e 	bne	r2,zero,45aac <__gedf2+0x5c>
   45a8c:	2296b03a 	or	r11,r4,r10
   45a90:	5813003a 	cmpeq	r9,r11,zero
   45a94:	1800091e 	bne	r3,zero,45abc <__gedf2+0x6c>
   45a98:	3218b03a 	or	r12,r6,r8
   45a9c:	6000071e 	bne	r12,zero,45abc <__gedf2+0x6c>
   45aa0:	0005883a 	mov	r2,zero
   45aa4:	5800101e 	bne	r11,zero,45ae8 <__gedf2+0x98>
   45aa8:	f800283a 	ret
   45aac:	18000c1e 	bne	r3,zero,45ae0 <__gedf2+0x90>
   45ab0:	3212b03a 	or	r9,r6,r8
   45ab4:	48000c26 	beq	r9,zero,45ae8 <__gedf2+0x98>
   45ab8:	0013883a 	mov	r9,zero
   45abc:	39c03fcc 	andi	r7,r7,255
   45ac0:	48000826 	beq	r9,zero,45ae4 <__gedf2+0x94>
   45ac4:	38000926 	beq	r7,zero,45aec <__gedf2+0x9c>
   45ac8:	00800044 	movi	r2,1
   45acc:	f800283a 	ret
   45ad0:	3212b03a 	or	r9,r6,r8
   45ad4:	483fec26 	beq	r9,zero,45a88 <__alt_data_end+0xfffde988>
   45ad8:	00bfff84 	movi	r2,-2
   45adc:	f800283a 	ret
   45ae0:	39c03fcc 	andi	r7,r7,255
   45ae4:	29c00626 	beq	r5,r7,45b00 <__gedf2+0xb0>
   45ae8:	283ff726 	beq	r5,zero,45ac8 <__alt_data_end+0xfffde9c8>
   45aec:	00bfffc4 	movi	r2,-1
   45af0:	f800283a 	ret
   45af4:	2292b03a 	or	r9,r4,r10
   45af8:	483fe126 	beq	r9,zero,45a80 <__alt_data_end+0xfffde980>
   45afc:	003ff606 	br	45ad8 <__alt_data_end+0xfffde9d8>
   45b00:	18bff916 	blt	r3,r2,45ae8 <__alt_data_end+0xfffde9e8>
   45b04:	10c00316 	blt	r2,r3,45b14 <__gedf2+0xc4>
   45b08:	42bff736 	bltu	r8,r10,45ae8 <__alt_data_end+0xfffde9e8>
   45b0c:	52000326 	beq	r10,r8,45b1c <__gedf2+0xcc>
   45b10:	5200042e 	bgeu	r10,r8,45b24 <__gedf2+0xd4>
   45b14:	283fec1e 	bne	r5,zero,45ac8 <__alt_data_end+0xfffde9c8>
   45b18:	003ff406 	br	45aec <__alt_data_end+0xfffde9ec>
   45b1c:	313ff236 	bltu	r6,r4,45ae8 <__alt_data_end+0xfffde9e8>
   45b20:	21bffc36 	bltu	r4,r6,45b14 <__alt_data_end+0xfffdea14>
   45b24:	0005883a 	mov	r2,zero
   45b28:	f800283a 	ret

00045b2c <__muldf3>:
   45b2c:	defff304 	addi	sp,sp,-52
   45b30:	2804d53a 	srli	r2,r5,20
   45b34:	dd800915 	stw	r22,36(sp)
   45b38:	282cd7fa 	srli	r22,r5,31
   45b3c:	dc000315 	stw	r16,12(sp)
   45b40:	04000434 	movhi	r16,16
   45b44:	dd400815 	stw	r21,32(sp)
   45b48:	dc800515 	stw	r18,20(sp)
   45b4c:	843fffc4 	addi	r16,r16,-1
   45b50:	dfc00c15 	stw	ra,48(sp)
   45b54:	df000b15 	stw	fp,44(sp)
   45b58:	ddc00a15 	stw	r23,40(sp)
   45b5c:	dd000715 	stw	r20,28(sp)
   45b60:	dcc00615 	stw	r19,24(sp)
   45b64:	dc400415 	stw	r17,16(sp)
   45b68:	1481ffcc 	andi	r18,r2,2047
   45b6c:	2c20703a 	and	r16,r5,r16
   45b70:	b02b883a 	mov	r21,r22
   45b74:	b2403fcc 	andi	r9,r22,255
   45b78:	90006026 	beq	r18,zero,45cfc <__muldf3+0x1d0>
   45b7c:	0081ffc4 	movi	r2,2047
   45b80:	2029883a 	mov	r20,r4
   45b84:	90803626 	beq	r18,r2,45c60 <__muldf3+0x134>
   45b88:	80800434 	orhi	r2,r16,16
   45b8c:	100490fa 	slli	r2,r2,3
   45b90:	2020d77a 	srli	r16,r4,29
   45b94:	202890fa 	slli	r20,r4,3
   45b98:	94bf0044 	addi	r18,r18,-1023
   45b9c:	80a0b03a 	or	r16,r16,r2
   45ba0:	0027883a 	mov	r19,zero
   45ba4:	0039883a 	mov	fp,zero
   45ba8:	3804d53a 	srli	r2,r7,20
   45bac:	382ed7fa 	srli	r23,r7,31
   45bb0:	04400434 	movhi	r17,16
   45bb4:	8c7fffc4 	addi	r17,r17,-1
   45bb8:	1081ffcc 	andi	r2,r2,2047
   45bbc:	3011883a 	mov	r8,r6
   45bc0:	3c62703a 	and	r17,r7,r17
   45bc4:	ba803fcc 	andi	r10,r23,255
   45bc8:	10006d26 	beq	r2,zero,45d80 <__muldf3+0x254>
   45bcc:	00c1ffc4 	movi	r3,2047
   45bd0:	10c06526 	beq	r2,r3,45d68 <__muldf3+0x23c>
   45bd4:	88c00434 	orhi	r3,r17,16
   45bd8:	180690fa 	slli	r3,r3,3
   45bdc:	3022d77a 	srli	r17,r6,29
   45be0:	301090fa 	slli	r8,r6,3
   45be4:	10bf0044 	addi	r2,r2,-1023
   45be8:	88e2b03a 	or	r17,r17,r3
   45bec:	000b883a 	mov	r5,zero
   45bf0:	9085883a 	add	r2,r18,r2
   45bf4:	2cc8b03a 	or	r4,r5,r19
   45bf8:	00c003c4 	movi	r3,15
   45bfc:	bdacf03a 	xor	r22,r23,r22
   45c00:	12c00044 	addi	r11,r2,1
   45c04:	19009936 	bltu	r3,r4,45e6c <__muldf3+0x340>
   45c08:	200890ba 	slli	r4,r4,2
   45c0c:	00c00134 	movhi	r3,4
   45c10:	18d70804 	addi	r3,r3,23584
   45c14:	20c9883a 	add	r4,r4,r3
   45c18:	20c00017 	ldw	r3,0(r4)
   45c1c:	1800683a 	jmp	r3
   45c20:	00045e6c 	andhi	zero,zero,4473
   45c24:	00045c80 	call	45c8 <__alt_mem_onchip_memory2-0x3ba38>
   45c28:	00045c80 	call	45c8 <__alt_mem_onchip_memory2-0x3ba38>
   45c2c:	00045c7c 	xorhi	zero,zero,4465
   45c30:	00045e48 	cmpgei	zero,zero,4473
   45c34:	00045e48 	cmpgei	zero,zero,4473
   45c38:	00045e30 	cmpltui	zero,zero,4472
   45c3c:	00045c7c 	xorhi	zero,zero,4465
   45c40:	00045e48 	cmpgei	zero,zero,4473
   45c44:	00045e30 	cmpltui	zero,zero,4472
   45c48:	00045e48 	cmpgei	zero,zero,4473
   45c4c:	00045c7c 	xorhi	zero,zero,4465
   45c50:	00045e58 	cmpnei	zero,zero,4473
   45c54:	00045e58 	cmpnei	zero,zero,4473
   45c58:	00045e58 	cmpnei	zero,zero,4473
   45c5c:	00046074 	movhi	zero,4481
   45c60:	2404b03a 	or	r2,r4,r16
   45c64:	10006f1e 	bne	r2,zero,45e24 <__muldf3+0x2f8>
   45c68:	04c00204 	movi	r19,8
   45c6c:	0021883a 	mov	r16,zero
   45c70:	0029883a 	mov	r20,zero
   45c74:	07000084 	movi	fp,2
   45c78:	003fcb06 	br	45ba8 <__alt_data_end+0xfffdeaa8>
   45c7c:	502d883a 	mov	r22,r10
   45c80:	00800084 	movi	r2,2
   45c84:	28805726 	beq	r5,r2,45de4 <__muldf3+0x2b8>
   45c88:	008000c4 	movi	r2,3
   45c8c:	28816626 	beq	r5,r2,46228 <__muldf3+0x6fc>
   45c90:	00800044 	movi	r2,1
   45c94:	2881411e 	bne	r5,r2,4619c <__muldf3+0x670>
   45c98:	b02b883a 	mov	r21,r22
   45c9c:	0005883a 	mov	r2,zero
   45ca0:	000b883a 	mov	r5,zero
   45ca4:	0029883a 	mov	r20,zero
   45ca8:	1004953a 	slli	r2,r2,20
   45cac:	a8c03fcc 	andi	r3,r21,255
   45cb0:	04400434 	movhi	r17,16
   45cb4:	8c7fffc4 	addi	r17,r17,-1
   45cb8:	180697fa 	slli	r3,r3,31
   45cbc:	2c4a703a 	and	r5,r5,r17
   45cc0:	288ab03a 	or	r5,r5,r2
   45cc4:	28c6b03a 	or	r3,r5,r3
   45cc8:	a005883a 	mov	r2,r20
   45ccc:	dfc00c17 	ldw	ra,48(sp)
   45cd0:	df000b17 	ldw	fp,44(sp)
   45cd4:	ddc00a17 	ldw	r23,40(sp)
   45cd8:	dd800917 	ldw	r22,36(sp)
   45cdc:	dd400817 	ldw	r21,32(sp)
   45ce0:	dd000717 	ldw	r20,28(sp)
   45ce4:	dcc00617 	ldw	r19,24(sp)
   45ce8:	dc800517 	ldw	r18,20(sp)
   45cec:	dc400417 	ldw	r17,16(sp)
   45cf0:	dc000317 	ldw	r16,12(sp)
   45cf4:	dec00d04 	addi	sp,sp,52
   45cf8:	f800283a 	ret
   45cfc:	2404b03a 	or	r2,r4,r16
   45d00:	2027883a 	mov	r19,r4
   45d04:	10004226 	beq	r2,zero,45e10 <__muldf3+0x2e4>
   45d08:	8000fc26 	beq	r16,zero,460fc <__muldf3+0x5d0>
   45d0c:	8009883a 	mov	r4,r16
   45d10:	d9800215 	stw	r6,8(sp)
   45d14:	d9c00015 	stw	r7,0(sp)
   45d18:	da400115 	stw	r9,4(sp)
   45d1c:	0046f540 	call	46f54 <__clzsi2>
   45d20:	d9800217 	ldw	r6,8(sp)
   45d24:	d9c00017 	ldw	r7,0(sp)
   45d28:	da400117 	ldw	r9,4(sp)
   45d2c:	113ffd44 	addi	r4,r2,-11
   45d30:	00c00704 	movi	r3,28
   45d34:	1900ed16 	blt	r3,r4,460ec <__muldf3+0x5c0>
   45d38:	00c00744 	movi	r3,29
   45d3c:	147ffe04 	addi	r17,r2,-8
   45d40:	1907c83a 	sub	r3,r3,r4
   45d44:	8460983a 	sll	r16,r16,r17
   45d48:	98c6d83a 	srl	r3,r19,r3
   45d4c:	9c68983a 	sll	r20,r19,r17
   45d50:	1c20b03a 	or	r16,r3,r16
   45d54:	1080fcc4 	addi	r2,r2,1011
   45d58:	00a5c83a 	sub	r18,zero,r2
   45d5c:	0027883a 	mov	r19,zero
   45d60:	0039883a 	mov	fp,zero
   45d64:	003f9006 	br	45ba8 <__alt_data_end+0xfffdeaa8>
   45d68:	3446b03a 	or	r3,r6,r17
   45d6c:	1800261e 	bne	r3,zero,45e08 <__muldf3+0x2dc>
   45d70:	0023883a 	mov	r17,zero
   45d74:	0011883a 	mov	r8,zero
   45d78:	01400084 	movi	r5,2
   45d7c:	003f9c06 	br	45bf0 <__alt_data_end+0xfffdeaf0>
   45d80:	3446b03a 	or	r3,r6,r17
   45d84:	18001c26 	beq	r3,zero,45df8 <__muldf3+0x2cc>
   45d88:	8800ce26 	beq	r17,zero,460c4 <__muldf3+0x598>
   45d8c:	8809883a 	mov	r4,r17
   45d90:	d9800215 	stw	r6,8(sp)
   45d94:	da400115 	stw	r9,4(sp)
   45d98:	da800015 	stw	r10,0(sp)
   45d9c:	0046f540 	call	46f54 <__clzsi2>
   45da0:	d9800217 	ldw	r6,8(sp)
   45da4:	da400117 	ldw	r9,4(sp)
   45da8:	da800017 	ldw	r10,0(sp)
   45dac:	113ffd44 	addi	r4,r2,-11
   45db0:	00c00704 	movi	r3,28
   45db4:	1900bf16 	blt	r3,r4,460b4 <__muldf3+0x588>
   45db8:	00c00744 	movi	r3,29
   45dbc:	123ffe04 	addi	r8,r2,-8
   45dc0:	1907c83a 	sub	r3,r3,r4
   45dc4:	8a22983a 	sll	r17,r17,r8
   45dc8:	30c6d83a 	srl	r3,r6,r3
   45dcc:	3210983a 	sll	r8,r6,r8
   45dd0:	1c62b03a 	or	r17,r3,r17
   45dd4:	1080fcc4 	addi	r2,r2,1011
   45dd8:	0085c83a 	sub	r2,zero,r2
   45ddc:	000b883a 	mov	r5,zero
   45de0:	003f8306 	br	45bf0 <__alt_data_end+0xfffdeaf0>
   45de4:	b02b883a 	mov	r21,r22
   45de8:	0081ffc4 	movi	r2,2047
   45dec:	000b883a 	mov	r5,zero
   45df0:	0029883a 	mov	r20,zero
   45df4:	003fac06 	br	45ca8 <__alt_data_end+0xfffdeba8>
   45df8:	0023883a 	mov	r17,zero
   45dfc:	0011883a 	mov	r8,zero
   45e00:	01400044 	movi	r5,1
   45e04:	003f7a06 	br	45bf0 <__alt_data_end+0xfffdeaf0>
   45e08:	014000c4 	movi	r5,3
   45e0c:	003f7806 	br	45bf0 <__alt_data_end+0xfffdeaf0>
   45e10:	04c00104 	movi	r19,4
   45e14:	0021883a 	mov	r16,zero
   45e18:	0029883a 	mov	r20,zero
   45e1c:	07000044 	movi	fp,1
   45e20:	003f6106 	br	45ba8 <__alt_data_end+0xfffdeaa8>
   45e24:	04c00304 	movi	r19,12
   45e28:	070000c4 	movi	fp,3
   45e2c:	003f5e06 	br	45ba8 <__alt_data_end+0xfffdeaa8>
   45e30:	01400434 	movhi	r5,16
   45e34:	002b883a 	mov	r21,zero
   45e38:	297fffc4 	addi	r5,r5,-1
   45e3c:	053fffc4 	movi	r20,-1
   45e40:	0081ffc4 	movi	r2,2047
   45e44:	003f9806 	br	45ca8 <__alt_data_end+0xfffdeba8>
   45e48:	8023883a 	mov	r17,r16
   45e4c:	a011883a 	mov	r8,r20
   45e50:	e00b883a 	mov	r5,fp
   45e54:	003f8a06 	br	45c80 <__alt_data_end+0xfffdeb80>
   45e58:	8023883a 	mov	r17,r16
   45e5c:	a011883a 	mov	r8,r20
   45e60:	482d883a 	mov	r22,r9
   45e64:	e00b883a 	mov	r5,fp
   45e68:	003f8506 	br	45c80 <__alt_data_end+0xfffdeb80>
   45e6c:	a00ad43a 	srli	r5,r20,16
   45e70:	401ad43a 	srli	r13,r8,16
   45e74:	a53fffcc 	andi	r20,r20,65535
   45e78:	423fffcc 	andi	r8,r8,65535
   45e7c:	4519383a 	mul	r12,r8,r20
   45e80:	4147383a 	mul	r3,r8,r5
   45e84:	6d09383a 	mul	r4,r13,r20
   45e88:	600cd43a 	srli	r6,r12,16
   45e8c:	2b5d383a 	mul	r14,r5,r13
   45e90:	20c9883a 	add	r4,r4,r3
   45e94:	310d883a 	add	r6,r6,r4
   45e98:	30c0022e 	bgeu	r6,r3,45ea4 <__muldf3+0x378>
   45e9c:	00c00074 	movhi	r3,1
   45ea0:	70dd883a 	add	r14,r14,r3
   45ea4:	8826d43a 	srli	r19,r17,16
   45ea8:	8bffffcc 	andi	r15,r17,65535
   45eac:	7d23383a 	mul	r17,r15,r20
   45eb0:	7949383a 	mul	r4,r15,r5
   45eb4:	9d29383a 	mul	r20,r19,r20
   45eb8:	8814d43a 	srli	r10,r17,16
   45ebc:	3012943a 	slli	r9,r6,16
   45ec0:	a129883a 	add	r20,r20,r4
   45ec4:	633fffcc 	andi	r12,r12,65535
   45ec8:	5515883a 	add	r10,r10,r20
   45ecc:	3006d43a 	srli	r3,r6,16
   45ed0:	4b13883a 	add	r9,r9,r12
   45ed4:	2ccb383a 	mul	r5,r5,r19
   45ed8:	5100022e 	bgeu	r10,r4,45ee4 <__muldf3+0x3b8>
   45edc:	01000074 	movhi	r4,1
   45ee0:	290b883a 	add	r5,r5,r4
   45ee4:	802ad43a 	srli	r21,r16,16
   45ee8:	843fffcc 	andi	r16,r16,65535
   45eec:	440d383a 	mul	r6,r8,r16
   45ef0:	4565383a 	mul	r18,r8,r21
   45ef4:	8349383a 	mul	r4,r16,r13
   45ef8:	500e943a 	slli	r7,r10,16
   45efc:	3010d43a 	srli	r8,r6,16
   45f00:	5028d43a 	srli	r20,r10,16
   45f04:	2489883a 	add	r4,r4,r18
   45f08:	8abfffcc 	andi	r10,r17,65535
   45f0c:	3a95883a 	add	r10,r7,r10
   45f10:	4119883a 	add	r12,r8,r4
   45f14:	a169883a 	add	r20,r20,r5
   45f18:	1a87883a 	add	r3,r3,r10
   45f1c:	6d5b383a 	mul	r13,r13,r21
   45f20:	6480022e 	bgeu	r12,r18,45f2c <__muldf3+0x400>
   45f24:	01000074 	movhi	r4,1
   45f28:	691b883a 	add	r13,r13,r4
   45f2c:	7c25383a 	mul	r18,r15,r16
   45f30:	7d4b383a 	mul	r5,r15,r21
   45f34:	84cf383a 	mul	r7,r16,r19
   45f38:	901ed43a 	srli	r15,r18,16
   45f3c:	6008d43a 	srli	r4,r12,16
   45f40:	6010943a 	slli	r8,r12,16
   45f44:	394f883a 	add	r7,r7,r5
   45f48:	333fffcc 	andi	r12,r6,65535
   45f4c:	79df883a 	add	r15,r15,r7
   45f50:	235b883a 	add	r13,r4,r13
   45f54:	9d63383a 	mul	r17,r19,r21
   45f58:	4309883a 	add	r4,r8,r12
   45f5c:	7940022e 	bgeu	r15,r5,45f68 <__muldf3+0x43c>
   45f60:	01400074 	movhi	r5,1
   45f64:	8963883a 	add	r17,r17,r5
   45f68:	780a943a 	slli	r5,r15,16
   45f6c:	91bfffcc 	andi	r6,r18,65535
   45f70:	70c7883a 	add	r3,r14,r3
   45f74:	298d883a 	add	r6,r5,r6
   45f78:	1a8f803a 	cmpltu	r7,r3,r10
   45f7c:	350b883a 	add	r5,r6,r20
   45f80:	20c7883a 	add	r3,r4,r3
   45f84:	3955883a 	add	r10,r7,r5
   45f88:	1909803a 	cmpltu	r4,r3,r4
   45f8c:	6a91883a 	add	r8,r13,r10
   45f90:	780cd43a 	srli	r6,r15,16
   45f94:	2219883a 	add	r12,r4,r8
   45f98:	2d0b803a 	cmpltu	r5,r5,r20
   45f9c:	51cf803a 	cmpltu	r7,r10,r7
   45fa0:	29ceb03a 	or	r7,r5,r7
   45fa4:	4351803a 	cmpltu	r8,r8,r13
   45fa8:	610b803a 	cmpltu	r5,r12,r4
   45fac:	4148b03a 	or	r4,r8,r5
   45fb0:	398f883a 	add	r7,r7,r6
   45fb4:	3909883a 	add	r4,r7,r4
   45fb8:	1810927a 	slli	r8,r3,9
   45fbc:	2449883a 	add	r4,r4,r17
   45fc0:	2008927a 	slli	r4,r4,9
   45fc4:	6022d5fa 	srli	r17,r12,23
   45fc8:	1806d5fa 	srli	r3,r3,23
   45fcc:	4252b03a 	or	r9,r8,r9
   45fd0:	600a927a 	slli	r5,r12,9
   45fd4:	4810c03a 	cmpne	r8,r9,zero
   45fd8:	2462b03a 	or	r17,r4,r17
   45fdc:	40c6b03a 	or	r3,r8,r3
   45fe0:	8900402c 	andhi	r4,r17,256
   45fe4:	1950b03a 	or	r8,r3,r5
   45fe8:	20000726 	beq	r4,zero,46008 <__muldf3+0x4dc>
   45fec:	4006d07a 	srli	r3,r8,1
   45ff0:	880497fa 	slli	r2,r17,31
   45ff4:	4200004c 	andi	r8,r8,1
   45ff8:	8822d07a 	srli	r17,r17,1
   45ffc:	1a10b03a 	or	r8,r3,r8
   46000:	1210b03a 	or	r8,r2,r8
   46004:	5805883a 	mov	r2,r11
   46008:	1140ffc4 	addi	r5,r2,1023
   4600c:	0140440e 	bge	zero,r5,46120 <__muldf3+0x5f4>
   46010:	40c001cc 	andi	r3,r8,7
   46014:	18000726 	beq	r3,zero,46034 <__muldf3+0x508>
   46018:	40c003cc 	andi	r3,r8,15
   4601c:	01000104 	movi	r4,4
   46020:	19000426 	beq	r3,r4,46034 <__muldf3+0x508>
   46024:	4107883a 	add	r3,r8,r4
   46028:	1a11803a 	cmpltu	r8,r3,r8
   4602c:	8a23883a 	add	r17,r17,r8
   46030:	1811883a 	mov	r8,r3
   46034:	88c0402c 	andhi	r3,r17,256
   46038:	18000426 	beq	r3,zero,4604c <__muldf3+0x520>
   4603c:	11410004 	addi	r5,r2,1024
   46040:	00bfc034 	movhi	r2,65280
   46044:	10bfffc4 	addi	r2,r2,-1
   46048:	88a2703a 	and	r17,r17,r2
   4604c:	0081ff84 	movi	r2,2046
   46050:	117f6416 	blt	r2,r5,45de4 <__alt_data_end+0xfffdece4>
   46054:	8828977a 	slli	r20,r17,29
   46058:	4010d0fa 	srli	r8,r8,3
   4605c:	8822927a 	slli	r17,r17,9
   46060:	2881ffcc 	andi	r2,r5,2047
   46064:	a228b03a 	or	r20,r20,r8
   46068:	880ad33a 	srli	r5,r17,12
   4606c:	b02b883a 	mov	r21,r22
   46070:	003f0d06 	br	45ca8 <__alt_data_end+0xfffdeba8>
   46074:	8080022c 	andhi	r2,r16,8
   46078:	10000926 	beq	r2,zero,460a0 <__muldf3+0x574>
   4607c:	8880022c 	andhi	r2,r17,8
   46080:	1000071e 	bne	r2,zero,460a0 <__muldf3+0x574>
   46084:	00800434 	movhi	r2,16
   46088:	89400234 	orhi	r5,r17,8
   4608c:	10bfffc4 	addi	r2,r2,-1
   46090:	b82b883a 	mov	r21,r23
   46094:	288a703a 	and	r5,r5,r2
   46098:	4029883a 	mov	r20,r8
   4609c:	003f6806 	br	45e40 <__alt_data_end+0xfffded40>
   460a0:	00800434 	movhi	r2,16
   460a4:	81400234 	orhi	r5,r16,8
   460a8:	10bfffc4 	addi	r2,r2,-1
   460ac:	288a703a 	and	r5,r5,r2
   460b0:	003f6306 	br	45e40 <__alt_data_end+0xfffded40>
   460b4:	147ff604 	addi	r17,r2,-40
   460b8:	3462983a 	sll	r17,r6,r17
   460bc:	0011883a 	mov	r8,zero
   460c0:	003f4406 	br	45dd4 <__alt_data_end+0xfffdecd4>
   460c4:	3009883a 	mov	r4,r6
   460c8:	d9800215 	stw	r6,8(sp)
   460cc:	da400115 	stw	r9,4(sp)
   460d0:	da800015 	stw	r10,0(sp)
   460d4:	0046f540 	call	46f54 <__clzsi2>
   460d8:	10800804 	addi	r2,r2,32
   460dc:	da800017 	ldw	r10,0(sp)
   460e0:	da400117 	ldw	r9,4(sp)
   460e4:	d9800217 	ldw	r6,8(sp)
   460e8:	003f3006 	br	45dac <__alt_data_end+0xfffdecac>
   460ec:	143ff604 	addi	r16,r2,-40
   460f0:	9c20983a 	sll	r16,r19,r16
   460f4:	0029883a 	mov	r20,zero
   460f8:	003f1606 	br	45d54 <__alt_data_end+0xfffdec54>
   460fc:	d9800215 	stw	r6,8(sp)
   46100:	d9c00015 	stw	r7,0(sp)
   46104:	da400115 	stw	r9,4(sp)
   46108:	0046f540 	call	46f54 <__clzsi2>
   4610c:	10800804 	addi	r2,r2,32
   46110:	da400117 	ldw	r9,4(sp)
   46114:	d9c00017 	ldw	r7,0(sp)
   46118:	d9800217 	ldw	r6,8(sp)
   4611c:	003f0306 	br	45d2c <__alt_data_end+0xfffdec2c>
   46120:	00c00044 	movi	r3,1
   46124:	1947c83a 	sub	r3,r3,r5
   46128:	00800e04 	movi	r2,56
   4612c:	10feda16 	blt	r2,r3,45c98 <__alt_data_end+0xfffdeb98>
   46130:	008007c4 	movi	r2,31
   46134:	10c01b16 	blt	r2,r3,461a4 <__muldf3+0x678>
   46138:	00800804 	movi	r2,32
   4613c:	10c5c83a 	sub	r2,r2,r3
   46140:	888a983a 	sll	r5,r17,r2
   46144:	40c8d83a 	srl	r4,r8,r3
   46148:	4084983a 	sll	r2,r8,r2
   4614c:	88e2d83a 	srl	r17,r17,r3
   46150:	2906b03a 	or	r3,r5,r4
   46154:	1004c03a 	cmpne	r2,r2,zero
   46158:	1886b03a 	or	r3,r3,r2
   4615c:	188001cc 	andi	r2,r3,7
   46160:	10000726 	beq	r2,zero,46180 <__muldf3+0x654>
   46164:	188003cc 	andi	r2,r3,15
   46168:	01000104 	movi	r4,4
   4616c:	11000426 	beq	r2,r4,46180 <__muldf3+0x654>
   46170:	1805883a 	mov	r2,r3
   46174:	10c00104 	addi	r3,r2,4
   46178:	1885803a 	cmpltu	r2,r3,r2
   4617c:	88a3883a 	add	r17,r17,r2
   46180:	8880202c 	andhi	r2,r17,128
   46184:	10001c26 	beq	r2,zero,461f8 <__muldf3+0x6cc>
   46188:	b02b883a 	mov	r21,r22
   4618c:	00800044 	movi	r2,1
   46190:	000b883a 	mov	r5,zero
   46194:	0029883a 	mov	r20,zero
   46198:	003ec306 	br	45ca8 <__alt_data_end+0xfffdeba8>
   4619c:	5805883a 	mov	r2,r11
   461a0:	003f9906 	br	46008 <__alt_data_end+0xfffdef08>
   461a4:	00bff844 	movi	r2,-31
   461a8:	1145c83a 	sub	r2,r2,r5
   461ac:	8888d83a 	srl	r4,r17,r2
   461b0:	00800804 	movi	r2,32
   461b4:	18801a26 	beq	r3,r2,46220 <__muldf3+0x6f4>
   461b8:	00801004 	movi	r2,64
   461bc:	10c5c83a 	sub	r2,r2,r3
   461c0:	8884983a 	sll	r2,r17,r2
   461c4:	1204b03a 	or	r2,r2,r8
   461c8:	1004c03a 	cmpne	r2,r2,zero
   461cc:	2084b03a 	or	r2,r4,r2
   461d0:	144001cc 	andi	r17,r2,7
   461d4:	88000d1e 	bne	r17,zero,4620c <__muldf3+0x6e0>
   461d8:	000b883a 	mov	r5,zero
   461dc:	1028d0fa 	srli	r20,r2,3
   461e0:	b02b883a 	mov	r21,r22
   461e4:	0005883a 	mov	r2,zero
   461e8:	a468b03a 	or	r20,r20,r17
   461ec:	003eae06 	br	45ca8 <__alt_data_end+0xfffdeba8>
   461f0:	1007883a 	mov	r3,r2
   461f4:	0023883a 	mov	r17,zero
   461f8:	880a927a 	slli	r5,r17,9
   461fc:	1805883a 	mov	r2,r3
   46200:	8822977a 	slli	r17,r17,29
   46204:	280ad33a 	srli	r5,r5,12
   46208:	003ff406 	br	461dc <__alt_data_end+0xfffdf0dc>
   4620c:	10c003cc 	andi	r3,r2,15
   46210:	01000104 	movi	r4,4
   46214:	193ff626 	beq	r3,r4,461f0 <__alt_data_end+0xfffdf0f0>
   46218:	0023883a 	mov	r17,zero
   4621c:	003fd506 	br	46174 <__alt_data_end+0xfffdf074>
   46220:	0005883a 	mov	r2,zero
   46224:	003fe706 	br	461c4 <__alt_data_end+0xfffdf0c4>
   46228:	00800434 	movhi	r2,16
   4622c:	89400234 	orhi	r5,r17,8
   46230:	10bfffc4 	addi	r2,r2,-1
   46234:	b02b883a 	mov	r21,r22
   46238:	288a703a 	and	r5,r5,r2
   4623c:	4029883a 	mov	r20,r8
   46240:	003eff06 	br	45e40 <__alt_data_end+0xfffded40>

00046244 <__subdf3>:
   46244:	02000434 	movhi	r8,16
   46248:	423fffc4 	addi	r8,r8,-1
   4624c:	defffb04 	addi	sp,sp,-20
   46250:	2a14703a 	and	r10,r5,r8
   46254:	3812d53a 	srli	r9,r7,20
   46258:	3a10703a 	and	r8,r7,r8
   4625c:	2006d77a 	srli	r3,r4,29
   46260:	3004d77a 	srli	r2,r6,29
   46264:	dc000015 	stw	r16,0(sp)
   46268:	501490fa 	slli	r10,r10,3
   4626c:	2820d53a 	srli	r16,r5,20
   46270:	401090fa 	slli	r8,r8,3
   46274:	dc800215 	stw	r18,8(sp)
   46278:	dc400115 	stw	r17,4(sp)
   4627c:	dfc00415 	stw	ra,16(sp)
   46280:	202290fa 	slli	r17,r4,3
   46284:	dcc00315 	stw	r19,12(sp)
   46288:	4a41ffcc 	andi	r9,r9,2047
   4628c:	0101ffc4 	movi	r4,2047
   46290:	2824d7fa 	srli	r18,r5,31
   46294:	8401ffcc 	andi	r16,r16,2047
   46298:	50c6b03a 	or	r3,r10,r3
   4629c:	380ed7fa 	srli	r7,r7,31
   462a0:	408ab03a 	or	r5,r8,r2
   462a4:	300c90fa 	slli	r6,r6,3
   462a8:	49009626 	beq	r9,r4,46504 <__subdf3+0x2c0>
   462ac:	39c0005c 	xori	r7,r7,1
   462b0:	8245c83a 	sub	r2,r16,r9
   462b4:	3c807426 	beq	r7,r18,46488 <__subdf3+0x244>
   462b8:	0080af0e 	bge	zero,r2,46578 <__subdf3+0x334>
   462bc:	48002a1e 	bne	r9,zero,46368 <__subdf3+0x124>
   462c0:	2988b03a 	or	r4,r5,r6
   462c4:	20009a1e 	bne	r4,zero,46530 <__subdf3+0x2ec>
   462c8:	888001cc 	andi	r2,r17,7
   462cc:	10000726 	beq	r2,zero,462ec <__subdf3+0xa8>
   462d0:	888003cc 	andi	r2,r17,15
   462d4:	01000104 	movi	r4,4
   462d8:	11000426 	beq	r2,r4,462ec <__subdf3+0xa8>
   462dc:	890b883a 	add	r5,r17,r4
   462e0:	2c63803a 	cmpltu	r17,r5,r17
   462e4:	1c47883a 	add	r3,r3,r17
   462e8:	2823883a 	mov	r17,r5
   462ec:	1880202c 	andhi	r2,r3,128
   462f0:	10005926 	beq	r2,zero,46458 <__subdf3+0x214>
   462f4:	84000044 	addi	r16,r16,1
   462f8:	0081ffc4 	movi	r2,2047
   462fc:	8080be26 	beq	r16,r2,465f8 <__subdf3+0x3b4>
   46300:	017fe034 	movhi	r5,65408
   46304:	297fffc4 	addi	r5,r5,-1
   46308:	1946703a 	and	r3,r3,r5
   4630c:	1804977a 	slli	r2,r3,29
   46310:	1806927a 	slli	r3,r3,9
   46314:	8822d0fa 	srli	r17,r17,3
   46318:	8401ffcc 	andi	r16,r16,2047
   4631c:	180ad33a 	srli	r5,r3,12
   46320:	9100004c 	andi	r4,r18,1
   46324:	1444b03a 	or	r2,r2,r17
   46328:	80c1ffcc 	andi	r3,r16,2047
   4632c:	1820953a 	slli	r16,r3,20
   46330:	20c03fcc 	andi	r3,r4,255
   46334:	180897fa 	slli	r4,r3,31
   46338:	00c00434 	movhi	r3,16
   4633c:	18ffffc4 	addi	r3,r3,-1
   46340:	28c6703a 	and	r3,r5,r3
   46344:	1c06b03a 	or	r3,r3,r16
   46348:	1906b03a 	or	r3,r3,r4
   4634c:	dfc00417 	ldw	ra,16(sp)
   46350:	dcc00317 	ldw	r19,12(sp)
   46354:	dc800217 	ldw	r18,8(sp)
   46358:	dc400117 	ldw	r17,4(sp)
   4635c:	dc000017 	ldw	r16,0(sp)
   46360:	dec00504 	addi	sp,sp,20
   46364:	f800283a 	ret
   46368:	0101ffc4 	movi	r4,2047
   4636c:	813fd626 	beq	r16,r4,462c8 <__alt_data_end+0xfffdf1c8>
   46370:	29402034 	orhi	r5,r5,128
   46374:	01000e04 	movi	r4,56
   46378:	2080a316 	blt	r4,r2,46608 <__subdf3+0x3c4>
   4637c:	010007c4 	movi	r4,31
   46380:	2080c616 	blt	r4,r2,4669c <__subdf3+0x458>
   46384:	01000804 	movi	r4,32
   46388:	2089c83a 	sub	r4,r4,r2
   4638c:	2910983a 	sll	r8,r5,r4
   46390:	308ed83a 	srl	r7,r6,r2
   46394:	3108983a 	sll	r4,r6,r4
   46398:	2884d83a 	srl	r2,r5,r2
   4639c:	41ccb03a 	or	r6,r8,r7
   463a0:	2008c03a 	cmpne	r4,r4,zero
   463a4:	310cb03a 	or	r6,r6,r4
   463a8:	898dc83a 	sub	r6,r17,r6
   463ac:	89a3803a 	cmpltu	r17,r17,r6
   463b0:	1887c83a 	sub	r3,r3,r2
   463b4:	1c47c83a 	sub	r3,r3,r17
   463b8:	3023883a 	mov	r17,r6
   463bc:	1880202c 	andhi	r2,r3,128
   463c0:	10002326 	beq	r2,zero,46450 <__subdf3+0x20c>
   463c4:	04c02034 	movhi	r19,128
   463c8:	9cffffc4 	addi	r19,r19,-1
   463cc:	1ce6703a 	and	r19,r3,r19
   463d0:	98007a26 	beq	r19,zero,465bc <__subdf3+0x378>
   463d4:	9809883a 	mov	r4,r19
   463d8:	0046f540 	call	46f54 <__clzsi2>
   463dc:	113ffe04 	addi	r4,r2,-8
   463e0:	00c007c4 	movi	r3,31
   463e4:	19007b16 	blt	r3,r4,465d4 <__subdf3+0x390>
   463e8:	00800804 	movi	r2,32
   463ec:	1105c83a 	sub	r2,r2,r4
   463f0:	8884d83a 	srl	r2,r17,r2
   463f4:	9906983a 	sll	r3,r19,r4
   463f8:	8922983a 	sll	r17,r17,r4
   463fc:	10c4b03a 	or	r2,r2,r3
   46400:	24007816 	blt	r4,r16,465e4 <__subdf3+0x3a0>
   46404:	2421c83a 	sub	r16,r4,r16
   46408:	80c00044 	addi	r3,r16,1
   4640c:	010007c4 	movi	r4,31
   46410:	20c09516 	blt	r4,r3,46668 <__subdf3+0x424>
   46414:	01400804 	movi	r5,32
   46418:	28cbc83a 	sub	r5,r5,r3
   4641c:	88c8d83a 	srl	r4,r17,r3
   46420:	8962983a 	sll	r17,r17,r5
   46424:	114a983a 	sll	r5,r2,r5
   46428:	10c6d83a 	srl	r3,r2,r3
   4642c:	8804c03a 	cmpne	r2,r17,zero
   46430:	290ab03a 	or	r5,r5,r4
   46434:	28a2b03a 	or	r17,r5,r2
   46438:	0021883a 	mov	r16,zero
   4643c:	003fa206 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46440:	2090b03a 	or	r8,r4,r2
   46444:	40018e26 	beq	r8,zero,46a80 <__subdf3+0x83c>
   46448:	1007883a 	mov	r3,r2
   4644c:	2023883a 	mov	r17,r4
   46450:	888001cc 	andi	r2,r17,7
   46454:	103f9e1e 	bne	r2,zero,462d0 <__alt_data_end+0xfffdf1d0>
   46458:	1804977a 	slli	r2,r3,29
   4645c:	8822d0fa 	srli	r17,r17,3
   46460:	1810d0fa 	srli	r8,r3,3
   46464:	9100004c 	andi	r4,r18,1
   46468:	1444b03a 	or	r2,r2,r17
   4646c:	00c1ffc4 	movi	r3,2047
   46470:	80c02826 	beq	r16,r3,46514 <__subdf3+0x2d0>
   46474:	01400434 	movhi	r5,16
   46478:	297fffc4 	addi	r5,r5,-1
   4647c:	80e0703a 	and	r16,r16,r3
   46480:	414a703a 	and	r5,r8,r5
   46484:	003fa806 	br	46328 <__alt_data_end+0xfffdf228>
   46488:	0080630e 	bge	zero,r2,46618 <__subdf3+0x3d4>
   4648c:	48003026 	beq	r9,zero,46550 <__subdf3+0x30c>
   46490:	0101ffc4 	movi	r4,2047
   46494:	813f8c26 	beq	r16,r4,462c8 <__alt_data_end+0xfffdf1c8>
   46498:	29402034 	orhi	r5,r5,128
   4649c:	01000e04 	movi	r4,56
   464a0:	2080a90e 	bge	r4,r2,46748 <__subdf3+0x504>
   464a4:	298cb03a 	or	r6,r5,r6
   464a8:	3012c03a 	cmpne	r9,r6,zero
   464ac:	0005883a 	mov	r2,zero
   464b0:	4c53883a 	add	r9,r9,r17
   464b4:	4c63803a 	cmpltu	r17,r9,r17
   464b8:	10c7883a 	add	r3,r2,r3
   464bc:	88c7883a 	add	r3,r17,r3
   464c0:	4823883a 	mov	r17,r9
   464c4:	1880202c 	andhi	r2,r3,128
   464c8:	1000d026 	beq	r2,zero,4680c <__subdf3+0x5c8>
   464cc:	84000044 	addi	r16,r16,1
   464d0:	0081ffc4 	movi	r2,2047
   464d4:	8080fe26 	beq	r16,r2,468d0 <__subdf3+0x68c>
   464d8:	00bfe034 	movhi	r2,65408
   464dc:	10bfffc4 	addi	r2,r2,-1
   464e0:	1886703a 	and	r3,r3,r2
   464e4:	880ad07a 	srli	r5,r17,1
   464e8:	180497fa 	slli	r2,r3,31
   464ec:	8900004c 	andi	r4,r17,1
   464f0:	2922b03a 	or	r17,r5,r4
   464f4:	1806d07a 	srli	r3,r3,1
   464f8:	1462b03a 	or	r17,r2,r17
   464fc:	3825883a 	mov	r18,r7
   46500:	003f7106 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46504:	2984b03a 	or	r2,r5,r6
   46508:	103f6826 	beq	r2,zero,462ac <__alt_data_end+0xfffdf1ac>
   4650c:	39c03fcc 	andi	r7,r7,255
   46510:	003f6706 	br	462b0 <__alt_data_end+0xfffdf1b0>
   46514:	4086b03a 	or	r3,r8,r2
   46518:	18015226 	beq	r3,zero,46a64 <__subdf3+0x820>
   4651c:	00c00434 	movhi	r3,16
   46520:	41400234 	orhi	r5,r8,8
   46524:	18ffffc4 	addi	r3,r3,-1
   46528:	28ca703a 	and	r5,r5,r3
   4652c:	003f7e06 	br	46328 <__alt_data_end+0xfffdf228>
   46530:	10bfffc4 	addi	r2,r2,-1
   46534:	1000491e 	bne	r2,zero,4665c <__subdf3+0x418>
   46538:	898fc83a 	sub	r7,r17,r6
   4653c:	89e3803a 	cmpltu	r17,r17,r7
   46540:	1947c83a 	sub	r3,r3,r5
   46544:	1c47c83a 	sub	r3,r3,r17
   46548:	3823883a 	mov	r17,r7
   4654c:	003f9b06 	br	463bc <__alt_data_end+0xfffdf2bc>
   46550:	2988b03a 	or	r4,r5,r6
   46554:	203f5c26 	beq	r4,zero,462c8 <__alt_data_end+0xfffdf1c8>
   46558:	10bfffc4 	addi	r2,r2,-1
   4655c:	1000931e 	bne	r2,zero,467ac <__subdf3+0x568>
   46560:	898d883a 	add	r6,r17,r6
   46564:	3463803a 	cmpltu	r17,r6,r17
   46568:	1947883a 	add	r3,r3,r5
   4656c:	88c7883a 	add	r3,r17,r3
   46570:	3023883a 	mov	r17,r6
   46574:	003fd306 	br	464c4 <__alt_data_end+0xfffdf3c4>
   46578:	1000541e 	bne	r2,zero,466cc <__subdf3+0x488>
   4657c:	80800044 	addi	r2,r16,1
   46580:	1081ffcc 	andi	r2,r2,2047
   46584:	01000044 	movi	r4,1
   46588:	2080a20e 	bge	r4,r2,46814 <__subdf3+0x5d0>
   4658c:	8989c83a 	sub	r4,r17,r6
   46590:	8905803a 	cmpltu	r2,r17,r4
   46594:	1967c83a 	sub	r19,r3,r5
   46598:	98a7c83a 	sub	r19,r19,r2
   4659c:	9880202c 	andhi	r2,r19,128
   465a0:	10006326 	beq	r2,zero,46730 <__subdf3+0x4ec>
   465a4:	3463c83a 	sub	r17,r6,r17
   465a8:	28c7c83a 	sub	r3,r5,r3
   465ac:	344d803a 	cmpltu	r6,r6,r17
   465b0:	19a7c83a 	sub	r19,r3,r6
   465b4:	3825883a 	mov	r18,r7
   465b8:	983f861e 	bne	r19,zero,463d4 <__alt_data_end+0xfffdf2d4>
   465bc:	8809883a 	mov	r4,r17
   465c0:	0046f540 	call	46f54 <__clzsi2>
   465c4:	10800804 	addi	r2,r2,32
   465c8:	113ffe04 	addi	r4,r2,-8
   465cc:	00c007c4 	movi	r3,31
   465d0:	193f850e 	bge	r3,r4,463e8 <__alt_data_end+0xfffdf2e8>
   465d4:	10bff604 	addi	r2,r2,-40
   465d8:	8884983a 	sll	r2,r17,r2
   465dc:	0023883a 	mov	r17,zero
   465e0:	243f880e 	bge	r4,r16,46404 <__alt_data_end+0xfffdf304>
   465e4:	00ffe034 	movhi	r3,65408
   465e8:	18ffffc4 	addi	r3,r3,-1
   465ec:	8121c83a 	sub	r16,r16,r4
   465f0:	10c6703a 	and	r3,r2,r3
   465f4:	003f3406 	br	462c8 <__alt_data_end+0xfffdf1c8>
   465f8:	9100004c 	andi	r4,r18,1
   465fc:	000b883a 	mov	r5,zero
   46600:	0005883a 	mov	r2,zero
   46604:	003f4806 	br	46328 <__alt_data_end+0xfffdf228>
   46608:	298cb03a 	or	r6,r5,r6
   4660c:	300cc03a 	cmpne	r6,r6,zero
   46610:	0005883a 	mov	r2,zero
   46614:	003f6406 	br	463a8 <__alt_data_end+0xfffdf2a8>
   46618:	10009a1e 	bne	r2,zero,46884 <__subdf3+0x640>
   4661c:	82400044 	addi	r9,r16,1
   46620:	4881ffcc 	andi	r2,r9,2047
   46624:	02800044 	movi	r10,1
   46628:	5080670e 	bge	r10,r2,467c8 <__subdf3+0x584>
   4662c:	0081ffc4 	movi	r2,2047
   46630:	4880af26 	beq	r9,r2,468f0 <__subdf3+0x6ac>
   46634:	898d883a 	add	r6,r17,r6
   46638:	1945883a 	add	r2,r3,r5
   4663c:	3447803a 	cmpltu	r3,r6,r17
   46640:	1887883a 	add	r3,r3,r2
   46644:	182297fa 	slli	r17,r3,31
   46648:	300cd07a 	srli	r6,r6,1
   4664c:	1806d07a 	srli	r3,r3,1
   46650:	4821883a 	mov	r16,r9
   46654:	89a2b03a 	or	r17,r17,r6
   46658:	003f1b06 	br	462c8 <__alt_data_end+0xfffdf1c8>
   4665c:	0101ffc4 	movi	r4,2047
   46660:	813f441e 	bne	r16,r4,46374 <__alt_data_end+0xfffdf274>
   46664:	003f1806 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46668:	843ff844 	addi	r16,r16,-31
   4666c:	01400804 	movi	r5,32
   46670:	1408d83a 	srl	r4,r2,r16
   46674:	19405026 	beq	r3,r5,467b8 <__subdf3+0x574>
   46678:	01401004 	movi	r5,64
   4667c:	28c7c83a 	sub	r3,r5,r3
   46680:	10c4983a 	sll	r2,r2,r3
   46684:	88a2b03a 	or	r17,r17,r2
   46688:	8822c03a 	cmpne	r17,r17,zero
   4668c:	2462b03a 	or	r17,r4,r17
   46690:	0007883a 	mov	r3,zero
   46694:	0021883a 	mov	r16,zero
   46698:	003f6d06 	br	46450 <__alt_data_end+0xfffdf350>
   4669c:	11fff804 	addi	r7,r2,-32
   466a0:	01000804 	movi	r4,32
   466a4:	29ced83a 	srl	r7,r5,r7
   466a8:	11004526 	beq	r2,r4,467c0 <__subdf3+0x57c>
   466ac:	01001004 	movi	r4,64
   466b0:	2089c83a 	sub	r4,r4,r2
   466b4:	2904983a 	sll	r2,r5,r4
   466b8:	118cb03a 	or	r6,r2,r6
   466bc:	300cc03a 	cmpne	r6,r6,zero
   466c0:	398cb03a 	or	r6,r7,r6
   466c4:	0005883a 	mov	r2,zero
   466c8:	003f3706 	br	463a8 <__alt_data_end+0xfffdf2a8>
   466cc:	80002a26 	beq	r16,zero,46778 <__subdf3+0x534>
   466d0:	0101ffc4 	movi	r4,2047
   466d4:	49006626 	beq	r9,r4,46870 <__subdf3+0x62c>
   466d8:	0085c83a 	sub	r2,zero,r2
   466dc:	18c02034 	orhi	r3,r3,128
   466e0:	01000e04 	movi	r4,56
   466e4:	20807e16 	blt	r4,r2,468e0 <__subdf3+0x69c>
   466e8:	010007c4 	movi	r4,31
   466ec:	2080e716 	blt	r4,r2,46a8c <__subdf3+0x848>
   466f0:	01000804 	movi	r4,32
   466f4:	2089c83a 	sub	r4,r4,r2
   466f8:	1914983a 	sll	r10,r3,r4
   466fc:	8890d83a 	srl	r8,r17,r2
   46700:	8908983a 	sll	r4,r17,r4
   46704:	1884d83a 	srl	r2,r3,r2
   46708:	5222b03a 	or	r17,r10,r8
   4670c:	2006c03a 	cmpne	r3,r4,zero
   46710:	88e2b03a 	or	r17,r17,r3
   46714:	3463c83a 	sub	r17,r6,r17
   46718:	2885c83a 	sub	r2,r5,r2
   4671c:	344d803a 	cmpltu	r6,r6,r17
   46720:	1187c83a 	sub	r3,r2,r6
   46724:	4821883a 	mov	r16,r9
   46728:	3825883a 	mov	r18,r7
   4672c:	003f2306 	br	463bc <__alt_data_end+0xfffdf2bc>
   46730:	24d0b03a 	or	r8,r4,r19
   46734:	40001b1e 	bne	r8,zero,467a4 <__subdf3+0x560>
   46738:	0005883a 	mov	r2,zero
   4673c:	0009883a 	mov	r4,zero
   46740:	0021883a 	mov	r16,zero
   46744:	003f4906 	br	4646c <__alt_data_end+0xfffdf36c>
   46748:	010007c4 	movi	r4,31
   4674c:	20803a16 	blt	r4,r2,46838 <__subdf3+0x5f4>
   46750:	01000804 	movi	r4,32
   46754:	2089c83a 	sub	r4,r4,r2
   46758:	2912983a 	sll	r9,r5,r4
   4675c:	3090d83a 	srl	r8,r6,r2
   46760:	3108983a 	sll	r4,r6,r4
   46764:	2884d83a 	srl	r2,r5,r2
   46768:	4a12b03a 	or	r9,r9,r8
   4676c:	2008c03a 	cmpne	r4,r4,zero
   46770:	4912b03a 	or	r9,r9,r4
   46774:	003f4e06 	br	464b0 <__alt_data_end+0xfffdf3b0>
   46778:	1c48b03a 	or	r4,r3,r17
   4677c:	20003c26 	beq	r4,zero,46870 <__subdf3+0x62c>
   46780:	0084303a 	nor	r2,zero,r2
   46784:	1000381e 	bne	r2,zero,46868 <__subdf3+0x624>
   46788:	3463c83a 	sub	r17,r6,r17
   4678c:	28c5c83a 	sub	r2,r5,r3
   46790:	344d803a 	cmpltu	r6,r6,r17
   46794:	1187c83a 	sub	r3,r2,r6
   46798:	4821883a 	mov	r16,r9
   4679c:	3825883a 	mov	r18,r7
   467a0:	003f0606 	br	463bc <__alt_data_end+0xfffdf2bc>
   467a4:	2023883a 	mov	r17,r4
   467a8:	003f0906 	br	463d0 <__alt_data_end+0xfffdf2d0>
   467ac:	0101ffc4 	movi	r4,2047
   467b0:	813f3a1e 	bne	r16,r4,4649c <__alt_data_end+0xfffdf39c>
   467b4:	003ec406 	br	462c8 <__alt_data_end+0xfffdf1c8>
   467b8:	0005883a 	mov	r2,zero
   467bc:	003fb106 	br	46684 <__alt_data_end+0xfffdf584>
   467c0:	0005883a 	mov	r2,zero
   467c4:	003fbc06 	br	466b8 <__alt_data_end+0xfffdf5b8>
   467c8:	1c44b03a 	or	r2,r3,r17
   467cc:	80008e1e 	bne	r16,zero,46a08 <__subdf3+0x7c4>
   467d0:	1000c826 	beq	r2,zero,46af4 <__subdf3+0x8b0>
   467d4:	2984b03a 	or	r2,r5,r6
   467d8:	103ebb26 	beq	r2,zero,462c8 <__alt_data_end+0xfffdf1c8>
   467dc:	8989883a 	add	r4,r17,r6
   467e0:	1945883a 	add	r2,r3,r5
   467e4:	2447803a 	cmpltu	r3,r4,r17
   467e8:	1887883a 	add	r3,r3,r2
   467ec:	1880202c 	andhi	r2,r3,128
   467f0:	2023883a 	mov	r17,r4
   467f4:	103f1626 	beq	r2,zero,46450 <__alt_data_end+0xfffdf350>
   467f8:	00bfe034 	movhi	r2,65408
   467fc:	10bfffc4 	addi	r2,r2,-1
   46800:	5021883a 	mov	r16,r10
   46804:	1886703a 	and	r3,r3,r2
   46808:	003eaf06 	br	462c8 <__alt_data_end+0xfffdf1c8>
   4680c:	3825883a 	mov	r18,r7
   46810:	003f0f06 	br	46450 <__alt_data_end+0xfffdf350>
   46814:	1c44b03a 	or	r2,r3,r17
   46818:	8000251e 	bne	r16,zero,468b0 <__subdf3+0x66c>
   4681c:	1000661e 	bne	r2,zero,469b8 <__subdf3+0x774>
   46820:	2990b03a 	or	r8,r5,r6
   46824:	40009626 	beq	r8,zero,46a80 <__subdf3+0x83c>
   46828:	2807883a 	mov	r3,r5
   4682c:	3023883a 	mov	r17,r6
   46830:	3825883a 	mov	r18,r7
   46834:	003ea406 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46838:	127ff804 	addi	r9,r2,-32
   4683c:	01000804 	movi	r4,32
   46840:	2a52d83a 	srl	r9,r5,r9
   46844:	11008c26 	beq	r2,r4,46a78 <__subdf3+0x834>
   46848:	01001004 	movi	r4,64
   4684c:	2085c83a 	sub	r2,r4,r2
   46850:	2884983a 	sll	r2,r5,r2
   46854:	118cb03a 	or	r6,r2,r6
   46858:	300cc03a 	cmpne	r6,r6,zero
   4685c:	4992b03a 	or	r9,r9,r6
   46860:	0005883a 	mov	r2,zero
   46864:	003f1206 	br	464b0 <__alt_data_end+0xfffdf3b0>
   46868:	0101ffc4 	movi	r4,2047
   4686c:	493f9c1e 	bne	r9,r4,466e0 <__alt_data_end+0xfffdf5e0>
   46870:	2807883a 	mov	r3,r5
   46874:	3023883a 	mov	r17,r6
   46878:	4821883a 	mov	r16,r9
   4687c:	3825883a 	mov	r18,r7
   46880:	003e9106 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46884:	80001f1e 	bne	r16,zero,46904 <__subdf3+0x6c0>
   46888:	1c48b03a 	or	r4,r3,r17
   4688c:	20005a26 	beq	r4,zero,469f8 <__subdf3+0x7b4>
   46890:	0084303a 	nor	r2,zero,r2
   46894:	1000561e 	bne	r2,zero,469f0 <__subdf3+0x7ac>
   46898:	89a3883a 	add	r17,r17,r6
   4689c:	1945883a 	add	r2,r3,r5
   468a0:	898d803a 	cmpltu	r6,r17,r6
   468a4:	3087883a 	add	r3,r6,r2
   468a8:	4821883a 	mov	r16,r9
   468ac:	003f0506 	br	464c4 <__alt_data_end+0xfffdf3c4>
   468b0:	10002b1e 	bne	r2,zero,46960 <__subdf3+0x71c>
   468b4:	2984b03a 	or	r2,r5,r6
   468b8:	10008026 	beq	r2,zero,46abc <__subdf3+0x878>
   468bc:	2807883a 	mov	r3,r5
   468c0:	3023883a 	mov	r17,r6
   468c4:	3825883a 	mov	r18,r7
   468c8:	0401ffc4 	movi	r16,2047
   468cc:	003e7e06 	br	462c8 <__alt_data_end+0xfffdf1c8>
   468d0:	3809883a 	mov	r4,r7
   468d4:	0011883a 	mov	r8,zero
   468d8:	0005883a 	mov	r2,zero
   468dc:	003ee306 	br	4646c <__alt_data_end+0xfffdf36c>
   468e0:	1c62b03a 	or	r17,r3,r17
   468e4:	8822c03a 	cmpne	r17,r17,zero
   468e8:	0005883a 	mov	r2,zero
   468ec:	003f8906 	br	46714 <__alt_data_end+0xfffdf614>
   468f0:	3809883a 	mov	r4,r7
   468f4:	4821883a 	mov	r16,r9
   468f8:	0011883a 	mov	r8,zero
   468fc:	0005883a 	mov	r2,zero
   46900:	003eda06 	br	4646c <__alt_data_end+0xfffdf36c>
   46904:	0101ffc4 	movi	r4,2047
   46908:	49003b26 	beq	r9,r4,469f8 <__subdf3+0x7b4>
   4690c:	0085c83a 	sub	r2,zero,r2
   46910:	18c02034 	orhi	r3,r3,128
   46914:	01000e04 	movi	r4,56
   46918:	20806e16 	blt	r4,r2,46ad4 <__subdf3+0x890>
   4691c:	010007c4 	movi	r4,31
   46920:	20807716 	blt	r4,r2,46b00 <__subdf3+0x8bc>
   46924:	01000804 	movi	r4,32
   46928:	2089c83a 	sub	r4,r4,r2
   4692c:	1914983a 	sll	r10,r3,r4
   46930:	8890d83a 	srl	r8,r17,r2
   46934:	8908983a 	sll	r4,r17,r4
   46938:	1884d83a 	srl	r2,r3,r2
   4693c:	5222b03a 	or	r17,r10,r8
   46940:	2006c03a 	cmpne	r3,r4,zero
   46944:	88e2b03a 	or	r17,r17,r3
   46948:	89a3883a 	add	r17,r17,r6
   4694c:	1145883a 	add	r2,r2,r5
   46950:	898d803a 	cmpltu	r6,r17,r6
   46954:	3087883a 	add	r3,r6,r2
   46958:	4821883a 	mov	r16,r9
   4695c:	003ed906 	br	464c4 <__alt_data_end+0xfffdf3c4>
   46960:	2984b03a 	or	r2,r5,r6
   46964:	10004226 	beq	r2,zero,46a70 <__subdf3+0x82c>
   46968:	1808d0fa 	srli	r4,r3,3
   4696c:	8822d0fa 	srli	r17,r17,3
   46970:	1806977a 	slli	r3,r3,29
   46974:	2080022c 	andhi	r2,r4,8
   46978:	1c62b03a 	or	r17,r3,r17
   4697c:	10000826 	beq	r2,zero,469a0 <__subdf3+0x75c>
   46980:	2812d0fa 	srli	r9,r5,3
   46984:	4880022c 	andhi	r2,r9,8
   46988:	1000051e 	bne	r2,zero,469a0 <__subdf3+0x75c>
   4698c:	300cd0fa 	srli	r6,r6,3
   46990:	2804977a 	slli	r2,r5,29
   46994:	4809883a 	mov	r4,r9
   46998:	3825883a 	mov	r18,r7
   4699c:	11a2b03a 	or	r17,r2,r6
   469a0:	8806d77a 	srli	r3,r17,29
   469a4:	200890fa 	slli	r4,r4,3
   469a8:	882290fa 	slli	r17,r17,3
   469ac:	0401ffc4 	movi	r16,2047
   469b0:	1906b03a 	or	r3,r3,r4
   469b4:	003e4406 	br	462c8 <__alt_data_end+0xfffdf1c8>
   469b8:	2984b03a 	or	r2,r5,r6
   469bc:	103e4226 	beq	r2,zero,462c8 <__alt_data_end+0xfffdf1c8>
   469c0:	8989c83a 	sub	r4,r17,r6
   469c4:	8911803a 	cmpltu	r8,r17,r4
   469c8:	1945c83a 	sub	r2,r3,r5
   469cc:	1205c83a 	sub	r2,r2,r8
   469d0:	1200202c 	andhi	r8,r2,128
   469d4:	403e9a26 	beq	r8,zero,46440 <__alt_data_end+0xfffdf340>
   469d8:	3463c83a 	sub	r17,r6,r17
   469dc:	28c5c83a 	sub	r2,r5,r3
   469e0:	344d803a 	cmpltu	r6,r6,r17
   469e4:	1187c83a 	sub	r3,r2,r6
   469e8:	3825883a 	mov	r18,r7
   469ec:	003e3606 	br	462c8 <__alt_data_end+0xfffdf1c8>
   469f0:	0101ffc4 	movi	r4,2047
   469f4:	493fc71e 	bne	r9,r4,46914 <__alt_data_end+0xfffdf814>
   469f8:	2807883a 	mov	r3,r5
   469fc:	3023883a 	mov	r17,r6
   46a00:	4821883a 	mov	r16,r9
   46a04:	003e3006 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46a08:	10003626 	beq	r2,zero,46ae4 <__subdf3+0x8a0>
   46a0c:	2984b03a 	or	r2,r5,r6
   46a10:	10001726 	beq	r2,zero,46a70 <__subdf3+0x82c>
   46a14:	1808d0fa 	srli	r4,r3,3
   46a18:	8822d0fa 	srli	r17,r17,3
   46a1c:	1806977a 	slli	r3,r3,29
   46a20:	2080022c 	andhi	r2,r4,8
   46a24:	1c62b03a 	or	r17,r3,r17
   46a28:	10000726 	beq	r2,zero,46a48 <__subdf3+0x804>
   46a2c:	2812d0fa 	srli	r9,r5,3
   46a30:	4880022c 	andhi	r2,r9,8
   46a34:	1000041e 	bne	r2,zero,46a48 <__subdf3+0x804>
   46a38:	300cd0fa 	srli	r6,r6,3
   46a3c:	2804977a 	slli	r2,r5,29
   46a40:	4809883a 	mov	r4,r9
   46a44:	11a2b03a 	or	r17,r2,r6
   46a48:	8806d77a 	srli	r3,r17,29
   46a4c:	200890fa 	slli	r4,r4,3
   46a50:	882290fa 	slli	r17,r17,3
   46a54:	3825883a 	mov	r18,r7
   46a58:	1906b03a 	or	r3,r3,r4
   46a5c:	0401ffc4 	movi	r16,2047
   46a60:	003e1906 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46a64:	000b883a 	mov	r5,zero
   46a68:	0005883a 	mov	r2,zero
   46a6c:	003e2e06 	br	46328 <__alt_data_end+0xfffdf228>
   46a70:	0401ffc4 	movi	r16,2047
   46a74:	003e1406 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46a78:	0005883a 	mov	r2,zero
   46a7c:	003f7506 	br	46854 <__alt_data_end+0xfffdf754>
   46a80:	0005883a 	mov	r2,zero
   46a84:	0009883a 	mov	r4,zero
   46a88:	003e7806 	br	4646c <__alt_data_end+0xfffdf36c>
   46a8c:	123ff804 	addi	r8,r2,-32
   46a90:	01000804 	movi	r4,32
   46a94:	1a10d83a 	srl	r8,r3,r8
   46a98:	11002526 	beq	r2,r4,46b30 <__subdf3+0x8ec>
   46a9c:	01001004 	movi	r4,64
   46aa0:	2085c83a 	sub	r2,r4,r2
   46aa4:	1884983a 	sll	r2,r3,r2
   46aa8:	1444b03a 	or	r2,r2,r17
   46aac:	1004c03a 	cmpne	r2,r2,zero
   46ab0:	40a2b03a 	or	r17,r8,r2
   46ab4:	0005883a 	mov	r2,zero
   46ab8:	003f1606 	br	46714 <__alt_data_end+0xfffdf614>
   46abc:	02000434 	movhi	r8,16
   46ac0:	0009883a 	mov	r4,zero
   46ac4:	423fffc4 	addi	r8,r8,-1
   46ac8:	00bfffc4 	movi	r2,-1
   46acc:	0401ffc4 	movi	r16,2047
   46ad0:	003e6606 	br	4646c <__alt_data_end+0xfffdf36c>
   46ad4:	1c62b03a 	or	r17,r3,r17
   46ad8:	8822c03a 	cmpne	r17,r17,zero
   46adc:	0005883a 	mov	r2,zero
   46ae0:	003f9906 	br	46948 <__alt_data_end+0xfffdf848>
   46ae4:	2807883a 	mov	r3,r5
   46ae8:	3023883a 	mov	r17,r6
   46aec:	0401ffc4 	movi	r16,2047
   46af0:	003df506 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46af4:	2807883a 	mov	r3,r5
   46af8:	3023883a 	mov	r17,r6
   46afc:	003df206 	br	462c8 <__alt_data_end+0xfffdf1c8>
   46b00:	123ff804 	addi	r8,r2,-32
   46b04:	01000804 	movi	r4,32
   46b08:	1a10d83a 	srl	r8,r3,r8
   46b0c:	11000a26 	beq	r2,r4,46b38 <__subdf3+0x8f4>
   46b10:	01001004 	movi	r4,64
   46b14:	2085c83a 	sub	r2,r4,r2
   46b18:	1884983a 	sll	r2,r3,r2
   46b1c:	1444b03a 	or	r2,r2,r17
   46b20:	1004c03a 	cmpne	r2,r2,zero
   46b24:	40a2b03a 	or	r17,r8,r2
   46b28:	0005883a 	mov	r2,zero
   46b2c:	003f8606 	br	46948 <__alt_data_end+0xfffdf848>
   46b30:	0005883a 	mov	r2,zero
   46b34:	003fdc06 	br	46aa8 <__alt_data_end+0xfffdf9a8>
   46b38:	0005883a 	mov	r2,zero
   46b3c:	003ff706 	br	46b1c <__alt_data_end+0xfffdfa1c>

00046b40 <__fixdfsi>:
   46b40:	280cd53a 	srli	r6,r5,20
   46b44:	00c00434 	movhi	r3,16
   46b48:	18ffffc4 	addi	r3,r3,-1
   46b4c:	3181ffcc 	andi	r6,r6,2047
   46b50:	01c0ff84 	movi	r7,1022
   46b54:	28c6703a 	and	r3,r5,r3
   46b58:	280ad7fa 	srli	r5,r5,31
   46b5c:	3980120e 	bge	r7,r6,46ba8 <__fixdfsi+0x68>
   46b60:	00810744 	movi	r2,1053
   46b64:	11800c16 	blt	r2,r6,46b98 <__fixdfsi+0x58>
   46b68:	00810cc4 	movi	r2,1075
   46b6c:	1185c83a 	sub	r2,r2,r6
   46b70:	01c007c4 	movi	r7,31
   46b74:	18c00434 	orhi	r3,r3,16
   46b78:	38800d16 	blt	r7,r2,46bb0 <__fixdfsi+0x70>
   46b7c:	31befb44 	addi	r6,r6,-1043
   46b80:	2084d83a 	srl	r2,r4,r2
   46b84:	1986983a 	sll	r3,r3,r6
   46b88:	1884b03a 	or	r2,r3,r2
   46b8c:	28000726 	beq	r5,zero,46bac <__fixdfsi+0x6c>
   46b90:	0085c83a 	sub	r2,zero,r2
   46b94:	f800283a 	ret
   46b98:	00a00034 	movhi	r2,32768
   46b9c:	10bfffc4 	addi	r2,r2,-1
   46ba0:	2885883a 	add	r2,r5,r2
   46ba4:	f800283a 	ret
   46ba8:	0005883a 	mov	r2,zero
   46bac:	f800283a 	ret
   46bb0:	008104c4 	movi	r2,1043
   46bb4:	1185c83a 	sub	r2,r2,r6
   46bb8:	1884d83a 	srl	r2,r3,r2
   46bbc:	003ff306 	br	46b8c <__alt_data_end+0xfffdfa8c>

00046bc0 <__floatsidf>:
   46bc0:	defffd04 	addi	sp,sp,-12
   46bc4:	dfc00215 	stw	ra,8(sp)
   46bc8:	dc400115 	stw	r17,4(sp)
   46bcc:	dc000015 	stw	r16,0(sp)
   46bd0:	20002b26 	beq	r4,zero,46c80 <__floatsidf+0xc0>
   46bd4:	2023883a 	mov	r17,r4
   46bd8:	2020d7fa 	srli	r16,r4,31
   46bdc:	20002d16 	blt	r4,zero,46c94 <__floatsidf+0xd4>
   46be0:	8809883a 	mov	r4,r17
   46be4:	0046f540 	call	46f54 <__clzsi2>
   46be8:	01410784 	movi	r5,1054
   46bec:	288bc83a 	sub	r5,r5,r2
   46bf0:	01010cc4 	movi	r4,1075
   46bf4:	2149c83a 	sub	r4,r4,r5
   46bf8:	00c007c4 	movi	r3,31
   46bfc:	1900160e 	bge	r3,r4,46c58 <__floatsidf+0x98>
   46c00:	00c104c4 	movi	r3,1043
   46c04:	1947c83a 	sub	r3,r3,r5
   46c08:	88c6983a 	sll	r3,r17,r3
   46c0c:	00800434 	movhi	r2,16
   46c10:	10bfffc4 	addi	r2,r2,-1
   46c14:	1886703a 	and	r3,r3,r2
   46c18:	2941ffcc 	andi	r5,r5,2047
   46c1c:	800d883a 	mov	r6,r16
   46c20:	0005883a 	mov	r2,zero
   46c24:	280a953a 	slli	r5,r5,20
   46c28:	31803fcc 	andi	r6,r6,255
   46c2c:	01000434 	movhi	r4,16
   46c30:	300c97fa 	slli	r6,r6,31
   46c34:	213fffc4 	addi	r4,r4,-1
   46c38:	1906703a 	and	r3,r3,r4
   46c3c:	1946b03a 	or	r3,r3,r5
   46c40:	1986b03a 	or	r3,r3,r6
   46c44:	dfc00217 	ldw	ra,8(sp)
   46c48:	dc400117 	ldw	r17,4(sp)
   46c4c:	dc000017 	ldw	r16,0(sp)
   46c50:	dec00304 	addi	sp,sp,12
   46c54:	f800283a 	ret
   46c58:	00c002c4 	movi	r3,11
   46c5c:	1887c83a 	sub	r3,r3,r2
   46c60:	88c6d83a 	srl	r3,r17,r3
   46c64:	8904983a 	sll	r2,r17,r4
   46c68:	01000434 	movhi	r4,16
   46c6c:	213fffc4 	addi	r4,r4,-1
   46c70:	2941ffcc 	andi	r5,r5,2047
   46c74:	1906703a 	and	r3,r3,r4
   46c78:	800d883a 	mov	r6,r16
   46c7c:	003fe906 	br	46c24 <__alt_data_end+0xfffdfb24>
   46c80:	000d883a 	mov	r6,zero
   46c84:	000b883a 	mov	r5,zero
   46c88:	0007883a 	mov	r3,zero
   46c8c:	0005883a 	mov	r2,zero
   46c90:	003fe406 	br	46c24 <__alt_data_end+0xfffdfb24>
   46c94:	0123c83a 	sub	r17,zero,r4
   46c98:	003fd106 	br	46be0 <__alt_data_end+0xfffdfae0>

00046c9c <__extendsfdf2>:
   46c9c:	200ad5fa 	srli	r5,r4,23
   46ca0:	defffd04 	addi	sp,sp,-12
   46ca4:	dc400115 	stw	r17,4(sp)
   46ca8:	29403fcc 	andi	r5,r5,255
   46cac:	29800044 	addi	r6,r5,1
   46cb0:	04402034 	movhi	r17,128
   46cb4:	dc000015 	stw	r16,0(sp)
   46cb8:	8c7fffc4 	addi	r17,r17,-1
   46cbc:	dfc00215 	stw	ra,8(sp)
   46cc0:	31803fcc 	andi	r6,r6,255
   46cc4:	00800044 	movi	r2,1
   46cc8:	8922703a 	and	r17,r17,r4
   46ccc:	2020d7fa 	srli	r16,r4,31
   46cd0:	1180110e 	bge	r2,r6,46d18 <__extendsfdf2+0x7c>
   46cd4:	880cd0fa 	srli	r6,r17,3
   46cd8:	8822977a 	slli	r17,r17,29
   46cdc:	2940e004 	addi	r5,r5,896
   46ce0:	2941ffcc 	andi	r5,r5,2047
   46ce4:	2804953a 	slli	r2,r5,20
   46ce8:	01400434 	movhi	r5,16
   46cec:	800697fa 	slli	r3,r16,31
   46cf0:	297fffc4 	addi	r5,r5,-1
   46cf4:	314a703a 	and	r5,r6,r5
   46cf8:	288ab03a 	or	r5,r5,r2
   46cfc:	28c6b03a 	or	r3,r5,r3
   46d00:	8805883a 	mov	r2,r17
   46d04:	dfc00217 	ldw	ra,8(sp)
   46d08:	dc400117 	ldw	r17,4(sp)
   46d0c:	dc000017 	ldw	r16,0(sp)
   46d10:	dec00304 	addi	sp,sp,12
   46d14:	f800283a 	ret
   46d18:	2800111e 	bne	r5,zero,46d60 <__extendsfdf2+0xc4>
   46d1c:	88001c26 	beq	r17,zero,46d90 <__extendsfdf2+0xf4>
   46d20:	8809883a 	mov	r4,r17
   46d24:	0046f540 	call	46f54 <__clzsi2>
   46d28:	00c00284 	movi	r3,10
   46d2c:	18801b16 	blt	r3,r2,46d9c <__extendsfdf2+0x100>
   46d30:	018002c4 	movi	r6,11
   46d34:	308dc83a 	sub	r6,r6,r2
   46d38:	11000544 	addi	r4,r2,21
   46d3c:	8986d83a 	srl	r3,r17,r6
   46d40:	8922983a 	sll	r17,r17,r4
   46d44:	0180e244 	movi	r6,905
   46d48:	01400434 	movhi	r5,16
   46d4c:	3085c83a 	sub	r2,r6,r2
   46d50:	297fffc4 	addi	r5,r5,-1
   46d54:	194c703a 	and	r6,r3,r5
   46d58:	1141ffcc 	andi	r5,r2,2047
   46d5c:	003fe006 	br	46ce0 <__alt_data_end+0xfffdfbe0>
   46d60:	88000826 	beq	r17,zero,46d84 <__extendsfdf2+0xe8>
   46d64:	880cd0fa 	srli	r6,r17,3
   46d68:	00800434 	movhi	r2,16
   46d6c:	10bfffc4 	addi	r2,r2,-1
   46d70:	31800234 	orhi	r6,r6,8
   46d74:	8822977a 	slli	r17,r17,29
   46d78:	308c703a 	and	r6,r6,r2
   46d7c:	0141ffc4 	movi	r5,2047
   46d80:	003fd706 	br	46ce0 <__alt_data_end+0xfffdfbe0>
   46d84:	0141ffc4 	movi	r5,2047
   46d88:	000d883a 	mov	r6,zero
   46d8c:	003fd406 	br	46ce0 <__alt_data_end+0xfffdfbe0>
   46d90:	000b883a 	mov	r5,zero
   46d94:	000d883a 	mov	r6,zero
   46d98:	003fd106 	br	46ce0 <__alt_data_end+0xfffdfbe0>
   46d9c:	11bffd44 	addi	r6,r2,-11
   46da0:	8986983a 	sll	r3,r17,r6
   46da4:	0023883a 	mov	r17,zero
   46da8:	003fe606 	br	46d44 <__alt_data_end+0xfffdfc44>

00046dac <__truncdfsf2>:
   46dac:	2810d53a 	srli	r8,r5,20
   46db0:	01c00434 	movhi	r7,16
   46db4:	39ffffc4 	addi	r7,r7,-1
   46db8:	29ce703a 	and	r7,r5,r7
   46dbc:	4201ffcc 	andi	r8,r8,2047
   46dc0:	380e90fa 	slli	r7,r7,3
   46dc4:	200cd77a 	srli	r6,r4,29
   46dc8:	42400044 	addi	r9,r8,1
   46dcc:	4a41ffcc 	andi	r9,r9,2047
   46dd0:	00c00044 	movi	r3,1
   46dd4:	280ad7fa 	srli	r5,r5,31
   46dd8:	31ceb03a 	or	r7,r6,r7
   46ddc:	200490fa 	slli	r2,r4,3
   46de0:	1a40230e 	bge	r3,r9,46e70 <__truncdfsf2+0xc4>
   46de4:	40ff2004 	addi	r3,r8,-896
   46de8:	01803f84 	movi	r6,254
   46dec:	30c01516 	blt	r6,r3,46e44 <__truncdfsf2+0x98>
   46df0:	00c0380e 	bge	zero,r3,46ed4 <__truncdfsf2+0x128>
   46df4:	200c91ba 	slli	r6,r4,6
   46df8:	380e90fa 	slli	r7,r7,3
   46dfc:	1004d77a 	srli	r2,r2,29
   46e00:	300cc03a 	cmpne	r6,r6,zero
   46e04:	31ccb03a 	or	r6,r6,r7
   46e08:	308cb03a 	or	r6,r6,r2
   46e0c:	308001cc 	andi	r2,r6,7
   46e10:	10000426 	beq	r2,zero,46e24 <__truncdfsf2+0x78>
   46e14:	308003cc 	andi	r2,r6,15
   46e18:	01000104 	movi	r4,4
   46e1c:	11000126 	beq	r2,r4,46e24 <__truncdfsf2+0x78>
   46e20:	31800104 	addi	r6,r6,4
   46e24:	3081002c 	andhi	r2,r6,1024
   46e28:	10001626 	beq	r2,zero,46e84 <__truncdfsf2+0xd8>
   46e2c:	18c00044 	addi	r3,r3,1
   46e30:	00803fc4 	movi	r2,255
   46e34:	18800326 	beq	r3,r2,46e44 <__truncdfsf2+0x98>
   46e38:	300c91ba 	slli	r6,r6,6
   46e3c:	300cd27a 	srli	r6,r6,9
   46e40:	00000206 	br	46e4c <__truncdfsf2+0xa0>
   46e44:	00ffffc4 	movi	r3,-1
   46e48:	000d883a 	mov	r6,zero
   46e4c:	18c03fcc 	andi	r3,r3,255
   46e50:	180895fa 	slli	r4,r3,23
   46e54:	00c02034 	movhi	r3,128
   46e58:	280a97fa 	slli	r5,r5,31
   46e5c:	18ffffc4 	addi	r3,r3,-1
   46e60:	30c6703a 	and	r3,r6,r3
   46e64:	1906b03a 	or	r3,r3,r4
   46e68:	1944b03a 	or	r2,r3,r5
   46e6c:	f800283a 	ret
   46e70:	40000b1e 	bne	r8,zero,46ea0 <__truncdfsf2+0xf4>
   46e74:	388cb03a 	or	r6,r7,r2
   46e78:	0007883a 	mov	r3,zero
   46e7c:	30000426 	beq	r6,zero,46e90 <__truncdfsf2+0xe4>
   46e80:	01800144 	movi	r6,5
   46e84:	00803fc4 	movi	r2,255
   46e88:	300cd0fa 	srli	r6,r6,3
   46e8c:	18800a26 	beq	r3,r2,46eb8 <__truncdfsf2+0x10c>
   46e90:	00802034 	movhi	r2,128
   46e94:	10bfffc4 	addi	r2,r2,-1
   46e98:	308c703a 	and	r6,r6,r2
   46e9c:	003feb06 	br	46e4c <__alt_data_end+0xfffdfd4c>
   46ea0:	3888b03a 	or	r4,r7,r2
   46ea4:	203fe726 	beq	r4,zero,46e44 <__alt_data_end+0xfffdfd44>
   46ea8:	380c90fa 	slli	r6,r7,3
   46eac:	00c03fc4 	movi	r3,255
   46eb0:	31808034 	orhi	r6,r6,512
   46eb4:	003fd506 	br	46e0c <__alt_data_end+0xfffdfd0c>
   46eb8:	303fe226 	beq	r6,zero,46e44 <__alt_data_end+0xfffdfd44>
   46ebc:	00802034 	movhi	r2,128
   46ec0:	31801034 	orhi	r6,r6,64
   46ec4:	10bfffc4 	addi	r2,r2,-1
   46ec8:	00ffffc4 	movi	r3,-1
   46ecc:	308c703a 	and	r6,r6,r2
   46ed0:	003fde06 	br	46e4c <__alt_data_end+0xfffdfd4c>
   46ed4:	013ffa44 	movi	r4,-23
   46ed8:	19000e16 	blt	r3,r4,46f14 <__truncdfsf2+0x168>
   46edc:	01000784 	movi	r4,30
   46ee0:	20c9c83a 	sub	r4,r4,r3
   46ee4:	018007c4 	movi	r6,31
   46ee8:	39c02034 	orhi	r7,r7,128
   46eec:	31000b16 	blt	r6,r4,46f1c <__truncdfsf2+0x170>
   46ef0:	423f2084 	addi	r8,r8,-894
   46ef4:	120c983a 	sll	r6,r2,r8
   46ef8:	3a0e983a 	sll	r7,r7,r8
   46efc:	1104d83a 	srl	r2,r2,r4
   46f00:	300cc03a 	cmpne	r6,r6,zero
   46f04:	31ceb03a 	or	r7,r6,r7
   46f08:	388cb03a 	or	r6,r7,r2
   46f0c:	0007883a 	mov	r3,zero
   46f10:	003fbe06 	br	46e0c <__alt_data_end+0xfffdfd0c>
   46f14:	0007883a 	mov	r3,zero
   46f18:	003fd906 	br	46e80 <__alt_data_end+0xfffdfd80>
   46f1c:	01bfff84 	movi	r6,-2
   46f20:	30cdc83a 	sub	r6,r6,r3
   46f24:	00c00804 	movi	r3,32
   46f28:	398cd83a 	srl	r6,r7,r6
   46f2c:	20c00726 	beq	r4,r3,46f4c <__truncdfsf2+0x1a0>
   46f30:	423f2884 	addi	r8,r8,-862
   46f34:	3a0e983a 	sll	r7,r7,r8
   46f38:	3884b03a 	or	r2,r7,r2
   46f3c:	1004c03a 	cmpne	r2,r2,zero
   46f40:	118cb03a 	or	r6,r2,r6
   46f44:	0007883a 	mov	r3,zero
   46f48:	003fb006 	br	46e0c <__alt_data_end+0xfffdfd0c>
   46f4c:	000f883a 	mov	r7,zero
   46f50:	003ff906 	br	46f38 <__alt_data_end+0xfffdfe38>

00046f54 <__clzsi2>:
   46f54:	00bfffd4 	movui	r2,65535
   46f58:	11000536 	bltu	r2,r4,46f70 <__clzsi2+0x1c>
   46f5c:	00803fc4 	movi	r2,255
   46f60:	11000f36 	bltu	r2,r4,46fa0 <__clzsi2+0x4c>
   46f64:	00800804 	movi	r2,32
   46f68:	0007883a 	mov	r3,zero
   46f6c:	00000506 	br	46f84 <__clzsi2+0x30>
   46f70:	00804034 	movhi	r2,256
   46f74:	10bfffc4 	addi	r2,r2,-1
   46f78:	11000c2e 	bgeu	r2,r4,46fac <__clzsi2+0x58>
   46f7c:	00800204 	movi	r2,8
   46f80:	00c00604 	movi	r3,24
   46f84:	20c8d83a 	srl	r4,r4,r3
   46f88:	00c00174 	movhi	r3,5
   46f8c:	18d6e804 	addi	r3,r3,23456
   46f90:	1909883a 	add	r4,r3,r4
   46f94:	20c00003 	ldbu	r3,0(r4)
   46f98:	10c5c83a 	sub	r2,r2,r3
   46f9c:	f800283a 	ret
   46fa0:	00800604 	movi	r2,24
   46fa4:	00c00204 	movi	r3,8
   46fa8:	003ff606 	br	46f84 <__alt_data_end+0xfffdfe84>
   46fac:	00800404 	movi	r2,16
   46fb0:	1007883a 	mov	r3,r2
   46fb4:	003ff306 	br	46f84 <__alt_data_end+0xfffdfe84>

00046fb8 <__errno>:
   46fb8:	00800174 	movhi	r2,5
   46fbc:	109e7004 	addi	r2,r2,31168
   46fc0:	10800017 	ldw	r2,0(r2)
   46fc4:	f800283a 	ret

00046fc8 <_printf_r>:
   46fc8:	defffd04 	addi	sp,sp,-12
   46fcc:	2805883a 	mov	r2,r5
   46fd0:	dfc00015 	stw	ra,0(sp)
   46fd4:	d9800115 	stw	r6,4(sp)
   46fd8:	d9c00215 	stw	r7,8(sp)
   46fdc:	21400217 	ldw	r5,8(r4)
   46fe0:	d9c00104 	addi	r7,sp,4
   46fe4:	100d883a 	mov	r6,r2
   46fe8:	00471a00 	call	471a0 <___vfprintf_internal_r>
   46fec:	dfc00017 	ldw	ra,0(sp)
   46ff0:	dec00304 	addi	sp,sp,12
   46ff4:	f800283a 	ret

00046ff8 <printf>:
   46ff8:	defffc04 	addi	sp,sp,-16
   46ffc:	dfc00015 	stw	ra,0(sp)
   47000:	d9400115 	stw	r5,4(sp)
   47004:	d9800215 	stw	r6,8(sp)
   47008:	d9c00315 	stw	r7,12(sp)
   4700c:	00800174 	movhi	r2,5
   47010:	109e7004 	addi	r2,r2,31168
   47014:	10800017 	ldw	r2,0(r2)
   47018:	200b883a 	mov	r5,r4
   4701c:	d9800104 	addi	r6,sp,4
   47020:	11000217 	ldw	r4,8(r2)
   47024:	00493980 	call	49398 <__vfprintf_internal>
   47028:	dfc00017 	ldw	ra,0(sp)
   4702c:	dec00404 	addi	sp,sp,16
   47030:	f800283a 	ret

00047034 <_puts_r>:
   47034:	defff604 	addi	sp,sp,-40
   47038:	dc000715 	stw	r16,28(sp)
   4703c:	2021883a 	mov	r16,r4
   47040:	2809883a 	mov	r4,r5
   47044:	dc400815 	stw	r17,32(sp)
   47048:	dfc00915 	stw	ra,36(sp)
   4704c:	2823883a 	mov	r17,r5
   47050:	00471080 	call	47108 <strlen>
   47054:	10c00044 	addi	r3,r2,1
   47058:	d8800115 	stw	r2,4(sp)
   4705c:	00800174 	movhi	r2,5
   47060:	10972904 	addi	r2,r2,23716
   47064:	d8800215 	stw	r2,8(sp)
   47068:	00800044 	movi	r2,1
   4706c:	d8800315 	stw	r2,12(sp)
   47070:	00800084 	movi	r2,2
   47074:	dc400015 	stw	r17,0(sp)
   47078:	d8c00615 	stw	r3,24(sp)
   4707c:	dec00415 	stw	sp,16(sp)
   47080:	d8800515 	stw	r2,20(sp)
   47084:	80000226 	beq	r16,zero,47090 <_puts_r+0x5c>
   47088:	80800e17 	ldw	r2,56(r16)
   4708c:	10001426 	beq	r2,zero,470e0 <_puts_r+0xac>
   47090:	81400217 	ldw	r5,8(r16)
   47094:	2880030b 	ldhu	r2,12(r5)
   47098:	10c8000c 	andi	r3,r2,8192
   4709c:	1800061e 	bne	r3,zero,470b8 <_puts_r+0x84>
   470a0:	29001917 	ldw	r4,100(r5)
   470a4:	00f7ffc4 	movi	r3,-8193
   470a8:	10880014 	ori	r2,r2,8192
   470ac:	20c6703a 	and	r3,r4,r3
   470b0:	2880030d 	sth	r2,12(r5)
   470b4:	28c01915 	stw	r3,100(r5)
   470b8:	d9800404 	addi	r6,sp,16
   470bc:	8009883a 	mov	r4,r16
   470c0:	004b8c80 	call	4b8c8 <__sfvwrite_r>
   470c4:	1000091e 	bne	r2,zero,470ec <_puts_r+0xb8>
   470c8:	00800284 	movi	r2,10
   470cc:	dfc00917 	ldw	ra,36(sp)
   470d0:	dc400817 	ldw	r17,32(sp)
   470d4:	dc000717 	ldw	r16,28(sp)
   470d8:	dec00a04 	addi	sp,sp,40
   470dc:	f800283a 	ret
   470e0:	8009883a 	mov	r4,r16
   470e4:	004b4440 	call	4b444 <__sinit>
   470e8:	003fe906 	br	47090 <__alt_data_end+0xfffdff90>
   470ec:	00bfffc4 	movi	r2,-1
   470f0:	003ff606 	br	470cc <__alt_data_end+0xfffdffcc>

000470f4 <puts>:
   470f4:	00800174 	movhi	r2,5
   470f8:	109e7004 	addi	r2,r2,31168
   470fc:	200b883a 	mov	r5,r4
   47100:	11000017 	ldw	r4,0(r2)
   47104:	00470341 	jmpi	47034 <_puts_r>

00047108 <strlen>:
   47108:	208000cc 	andi	r2,r4,3
   4710c:	10002026 	beq	r2,zero,47190 <strlen+0x88>
   47110:	20800007 	ldb	r2,0(r4)
   47114:	10002026 	beq	r2,zero,47198 <strlen+0x90>
   47118:	2005883a 	mov	r2,r4
   4711c:	00000206 	br	47128 <strlen+0x20>
   47120:	10c00007 	ldb	r3,0(r2)
   47124:	18001826 	beq	r3,zero,47188 <strlen+0x80>
   47128:	10800044 	addi	r2,r2,1
   4712c:	10c000cc 	andi	r3,r2,3
   47130:	183ffb1e 	bne	r3,zero,47120 <__alt_data_end+0xfffe0020>
   47134:	10c00017 	ldw	r3,0(r2)
   47138:	01ffbff4 	movhi	r7,65279
   4713c:	39ffbfc4 	addi	r7,r7,-257
   47140:	00ca303a 	nor	r5,zero,r3
   47144:	01a02074 	movhi	r6,32897
   47148:	19c7883a 	add	r3,r3,r7
   4714c:	31a02004 	addi	r6,r6,-32640
   47150:	1946703a 	and	r3,r3,r5
   47154:	1986703a 	and	r3,r3,r6
   47158:	1800091e 	bne	r3,zero,47180 <strlen+0x78>
   4715c:	10800104 	addi	r2,r2,4
   47160:	10c00017 	ldw	r3,0(r2)
   47164:	19cb883a 	add	r5,r3,r7
   47168:	00c6303a 	nor	r3,zero,r3
   4716c:	28c6703a 	and	r3,r5,r3
   47170:	1986703a 	and	r3,r3,r6
   47174:	183ff926 	beq	r3,zero,4715c <__alt_data_end+0xfffe005c>
   47178:	00000106 	br	47180 <strlen+0x78>
   4717c:	10800044 	addi	r2,r2,1
   47180:	10c00007 	ldb	r3,0(r2)
   47184:	183ffd1e 	bne	r3,zero,4717c <__alt_data_end+0xfffe007c>
   47188:	1105c83a 	sub	r2,r2,r4
   4718c:	f800283a 	ret
   47190:	2005883a 	mov	r2,r4
   47194:	003fe706 	br	47134 <__alt_data_end+0xfffe0034>
   47198:	0005883a 	mov	r2,zero
   4719c:	f800283a 	ret

000471a0 <___vfprintf_internal_r>:
   471a0:	deffb804 	addi	sp,sp,-288
   471a4:	dfc04715 	stw	ra,284(sp)
   471a8:	ddc04515 	stw	r23,276(sp)
   471ac:	dd404315 	stw	r21,268(sp)
   471b0:	d9002c15 	stw	r4,176(sp)
   471b4:	282f883a 	mov	r23,r5
   471b8:	302b883a 	mov	r21,r6
   471bc:	d9c02d15 	stw	r7,180(sp)
   471c0:	df004615 	stw	fp,280(sp)
   471c4:	dd804415 	stw	r22,272(sp)
   471c8:	dd004215 	stw	r20,264(sp)
   471cc:	dcc04115 	stw	r19,260(sp)
   471d0:	dc804015 	stw	r18,256(sp)
   471d4:	dc403f15 	stw	r17,252(sp)
   471d8:	dc003e15 	stw	r16,248(sp)
   471dc:	004bfb80 	call	4bfb8 <_localeconv_r>
   471e0:	10800017 	ldw	r2,0(r2)
   471e4:	1009883a 	mov	r4,r2
   471e8:	d8803415 	stw	r2,208(sp)
   471ec:	00471080 	call	47108 <strlen>
   471f0:	d8803715 	stw	r2,220(sp)
   471f4:	d8802c17 	ldw	r2,176(sp)
   471f8:	10000226 	beq	r2,zero,47204 <___vfprintf_internal_r+0x64>
   471fc:	10800e17 	ldw	r2,56(r2)
   47200:	1000f926 	beq	r2,zero,475e8 <___vfprintf_internal_r+0x448>
   47204:	b880030b 	ldhu	r2,12(r23)
   47208:	10c8000c 	andi	r3,r2,8192
   4720c:	1800061e 	bne	r3,zero,47228 <___vfprintf_internal_r+0x88>
   47210:	b9001917 	ldw	r4,100(r23)
   47214:	00f7ffc4 	movi	r3,-8193
   47218:	10880014 	ori	r2,r2,8192
   4721c:	20c6703a 	and	r3,r4,r3
   47220:	b880030d 	sth	r2,12(r23)
   47224:	b8c01915 	stw	r3,100(r23)
   47228:	10c0020c 	andi	r3,r2,8
   4722c:	1800c126 	beq	r3,zero,47534 <___vfprintf_internal_r+0x394>
   47230:	b8c00417 	ldw	r3,16(r23)
   47234:	1800bf26 	beq	r3,zero,47534 <___vfprintf_internal_r+0x394>
   47238:	1080068c 	andi	r2,r2,26
   4723c:	00c00284 	movi	r3,10
   47240:	10c0c426 	beq	r2,r3,47554 <___vfprintf_internal_r+0x3b4>
   47244:	d8c00404 	addi	r3,sp,16
   47248:	05000174 	movhi	r20,5
   4724c:	d9001e04 	addi	r4,sp,120
   47250:	a5173a84 	addi	r20,r20,23786
   47254:	d8c01e15 	stw	r3,120(sp)
   47258:	d8002015 	stw	zero,128(sp)
   4725c:	d8001f15 	stw	zero,124(sp)
   47260:	d8003315 	stw	zero,204(sp)
   47264:	d8003615 	stw	zero,216(sp)
   47268:	d8003815 	stw	zero,224(sp)
   4726c:	1811883a 	mov	r8,r3
   47270:	d8003915 	stw	zero,228(sp)
   47274:	d8003a15 	stw	zero,232(sp)
   47278:	d8002f15 	stw	zero,188(sp)
   4727c:	d9002815 	stw	r4,160(sp)
   47280:	a8800007 	ldb	r2,0(r21)
   47284:	10027b26 	beq	r2,zero,47c74 <___vfprintf_internal_r+0xad4>
   47288:	00c00944 	movi	r3,37
   4728c:	a821883a 	mov	r16,r21
   47290:	10c0021e 	bne	r2,r3,4729c <___vfprintf_internal_r+0xfc>
   47294:	00001406 	br	472e8 <___vfprintf_internal_r+0x148>
   47298:	10c00326 	beq	r2,r3,472a8 <___vfprintf_internal_r+0x108>
   4729c:	84000044 	addi	r16,r16,1
   472a0:	80800007 	ldb	r2,0(r16)
   472a4:	103ffc1e 	bne	r2,zero,47298 <__alt_data_end+0xfffe0198>
   472a8:	8563c83a 	sub	r17,r16,r21
   472ac:	88000e26 	beq	r17,zero,472e8 <___vfprintf_internal_r+0x148>
   472b0:	d8c02017 	ldw	r3,128(sp)
   472b4:	d8801f17 	ldw	r2,124(sp)
   472b8:	45400015 	stw	r21,0(r8)
   472bc:	1c47883a 	add	r3,r3,r17
   472c0:	10800044 	addi	r2,r2,1
   472c4:	d8c02015 	stw	r3,128(sp)
   472c8:	44400115 	stw	r17,4(r8)
   472cc:	d8801f15 	stw	r2,124(sp)
   472d0:	00c001c4 	movi	r3,7
   472d4:	1880a716 	blt	r3,r2,47574 <___vfprintf_internal_r+0x3d4>
   472d8:	42000204 	addi	r8,r8,8
   472dc:	d9402f17 	ldw	r5,188(sp)
   472e0:	2c4b883a 	add	r5,r5,r17
   472e4:	d9402f15 	stw	r5,188(sp)
   472e8:	80800007 	ldb	r2,0(r16)
   472ec:	1000a826 	beq	r2,zero,47590 <___vfprintf_internal_r+0x3f0>
   472f0:	84400047 	ldb	r17,1(r16)
   472f4:	00bfffc4 	movi	r2,-1
   472f8:	85400044 	addi	r21,r16,1
   472fc:	d8002785 	stb	zero,158(sp)
   47300:	0007883a 	mov	r3,zero
   47304:	000f883a 	mov	r7,zero
   47308:	d8802915 	stw	r2,164(sp)
   4730c:	d8003115 	stw	zero,196(sp)
   47310:	0025883a 	mov	r18,zero
   47314:	01401604 	movi	r5,88
   47318:	01800244 	movi	r6,9
   4731c:	02800a84 	movi	r10,42
   47320:	02401b04 	movi	r9,108
   47324:	ad400044 	addi	r21,r21,1
   47328:	88bff804 	addi	r2,r17,-32
   4732c:	28830436 	bltu	r5,r2,47f40 <___vfprintf_internal_r+0xda0>
   47330:	100490ba 	slli	r2,r2,2
   47334:	01000134 	movhi	r4,4
   47338:	211cd204 	addi	r4,r4,29512
   4733c:	1105883a 	add	r2,r2,r4
   47340:	10800017 	ldw	r2,0(r2)
   47344:	1000683a 	jmp	r2
   47348:	00047e60 	cmpeqi	zero,zero,4601
   4734c:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47350:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47354:	00047e80 	call	47e8 <__alt_mem_onchip_memory2-0x3b818>
   47358:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   4735c:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47360:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47364:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47368:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   4736c:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47370:	000475f4 	movhi	zero,4567
   47374:	00047d9c 	xori	zero,zero,4598
   47378:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   4737c:	000474bc 	xorhi	zero,zero,4562
   47380:	0004761c 	xori	zero,zero,4568
   47384:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47388:	0004765c 	xori	zero,zero,4569
   4738c:	00047668 	cmpgeui	zero,zero,4569
   47390:	00047668 	cmpgeui	zero,zero,4569
   47394:	00047668 	cmpgeui	zero,zero,4569
   47398:	00047668 	cmpgeui	zero,zero,4569
   4739c:	00047668 	cmpgeui	zero,zero,4569
   473a0:	00047668 	cmpgeui	zero,zero,4569
   473a4:	00047668 	cmpgeui	zero,zero,4569
   473a8:	00047668 	cmpgeui	zero,zero,4569
   473ac:	00047668 	cmpgeui	zero,zero,4569
   473b0:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473b4:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473b8:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473bc:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473c0:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473c4:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473c8:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473cc:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473d0:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473d4:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473d8:	0004769c 	xori	zero,zero,4570
   473dc:	00047758 	cmpnei	zero,zero,4573
   473e0:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473e4:	00047758 	cmpnei	zero,zero,4573
   473e8:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473ec:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473f0:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473f4:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   473f8:	000477f8 	rdprs	zero,zero,4575
   473fc:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47400:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47404:	00047804 	movi	zero,4576
   47408:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   4740c:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47410:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47414:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47418:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   4741c:	00047c7c 	xorhi	zero,zero,4593
   47420:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47424:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47428:	00047cdc 	xori	zero,zero,4595
   4742c:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47430:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47434:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47438:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   4743c:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47440:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47444:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47448:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   4744c:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47450:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47454:	00047eec 	andhi	zero,zero,4603
   47458:	00047e8c 	andi	zero,zero,4602
   4745c:	00047758 	cmpnei	zero,zero,4573
   47460:	00047758 	cmpnei	zero,zero,4573
   47464:	00047758 	cmpnei	zero,zero,4573
   47468:	00047e9c 	xori	zero,zero,4602
   4746c:	00047e8c 	andi	zero,zero,4602
   47470:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47474:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47478:	00047ea8 	cmpgeui	zero,zero,4602
   4747c:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47480:	00047eb8 	rdprs	zero,zero,4602
   47484:	00047d8c 	andi	zero,zero,4598
   47488:	000474c8 	cmpgei	zero,zero,4563
   4748c:	00047dac 	andhi	zero,zero,4598
   47490:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   47494:	00047db8 	rdprs	zero,zero,4598
   47498:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   4749c:	00047e14 	movui	zero,4600
   474a0:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   474a4:	00047f40 	call	47f4 <__alt_mem_onchip_memory2-0x3b80c>
   474a8:	00047e24 	muli	zero,zero,4600
   474ac:	d9003117 	ldw	r4,196(sp)
   474b0:	d8802d15 	stw	r2,180(sp)
   474b4:	0109c83a 	sub	r4,zero,r4
   474b8:	d9003115 	stw	r4,196(sp)
   474bc:	94800114 	ori	r18,r18,4
   474c0:	ac400007 	ldb	r17,0(r21)
   474c4:	003f9706 	br	47324 <__alt_data_end+0xfffe0224>
   474c8:	00800c04 	movi	r2,48
   474cc:	d9002d17 	ldw	r4,180(sp)
   474d0:	d9402917 	ldw	r5,164(sp)
   474d4:	d8802705 	stb	r2,156(sp)
   474d8:	00801e04 	movi	r2,120
   474dc:	d8802745 	stb	r2,157(sp)
   474e0:	d8002785 	stb	zero,158(sp)
   474e4:	20c00104 	addi	r3,r4,4
   474e8:	24c00017 	ldw	r19,0(r4)
   474ec:	002d883a 	mov	r22,zero
   474f0:	90800094 	ori	r2,r18,2
   474f4:	28029a16 	blt	r5,zero,47f60 <___vfprintf_internal_r+0xdc0>
   474f8:	00bfdfc4 	movi	r2,-129
   474fc:	90a4703a 	and	r18,r18,r2
   47500:	d8c02d15 	stw	r3,180(sp)
   47504:	94800094 	ori	r18,r18,2
   47508:	9802871e 	bne	r19,zero,47f28 <___vfprintf_internal_r+0xd88>
   4750c:	00800174 	movhi	r2,5
   47510:	10973304 	addi	r2,r2,23756
   47514:	d8803915 	stw	r2,228(sp)
   47518:	04401e04 	movi	r17,120
   4751c:	d8802917 	ldw	r2,164(sp)
   47520:	0039883a 	mov	fp,zero
   47524:	1001e926 	beq	r2,zero,47ccc <___vfprintf_internal_r+0xb2c>
   47528:	0027883a 	mov	r19,zero
   4752c:	002d883a 	mov	r22,zero
   47530:	00020506 	br	47d48 <___vfprintf_internal_r+0xba8>
   47534:	d9002c17 	ldw	r4,176(sp)
   47538:	b80b883a 	mov	r5,r23
   4753c:	00494700 	call	49470 <__swsetup_r>
   47540:	1005ac1e 	bne	r2,zero,48bf4 <___vfprintf_internal_r+0x1a54>
   47544:	b880030b 	ldhu	r2,12(r23)
   47548:	00c00284 	movi	r3,10
   4754c:	1080068c 	andi	r2,r2,26
   47550:	10ff3c1e 	bne	r2,r3,47244 <__alt_data_end+0xfffe0144>
   47554:	b880038f 	ldh	r2,14(r23)
   47558:	103f3a16 	blt	r2,zero,47244 <__alt_data_end+0xfffe0144>
   4755c:	d9c02d17 	ldw	r7,180(sp)
   47560:	d9002c17 	ldw	r4,176(sp)
   47564:	a80d883a 	mov	r6,r21
   47568:	b80b883a 	mov	r5,r23
   4756c:	00493b40 	call	493b4 <__sbprintf>
   47570:	00001106 	br	475b8 <___vfprintf_internal_r+0x418>
   47574:	d9002c17 	ldw	r4,176(sp)
   47578:	d9801e04 	addi	r6,sp,120
   4757c:	b80b883a 	mov	r5,r23
   47580:	004e7280 	call	4e728 <__sprint_r>
   47584:	1000081e 	bne	r2,zero,475a8 <___vfprintf_internal_r+0x408>
   47588:	da000404 	addi	r8,sp,16
   4758c:	003f5306 	br	472dc <__alt_data_end+0xfffe01dc>
   47590:	d8802017 	ldw	r2,128(sp)
   47594:	10000426 	beq	r2,zero,475a8 <___vfprintf_internal_r+0x408>
   47598:	d9002c17 	ldw	r4,176(sp)
   4759c:	d9801e04 	addi	r6,sp,120
   475a0:	b80b883a 	mov	r5,r23
   475a4:	004e7280 	call	4e728 <__sprint_r>
   475a8:	b880030b 	ldhu	r2,12(r23)
   475ac:	1080100c 	andi	r2,r2,64
   475b0:	1005901e 	bne	r2,zero,48bf4 <___vfprintf_internal_r+0x1a54>
   475b4:	d8802f17 	ldw	r2,188(sp)
   475b8:	dfc04717 	ldw	ra,284(sp)
   475bc:	df004617 	ldw	fp,280(sp)
   475c0:	ddc04517 	ldw	r23,276(sp)
   475c4:	dd804417 	ldw	r22,272(sp)
   475c8:	dd404317 	ldw	r21,268(sp)
   475cc:	dd004217 	ldw	r20,264(sp)
   475d0:	dcc04117 	ldw	r19,260(sp)
   475d4:	dc804017 	ldw	r18,256(sp)
   475d8:	dc403f17 	ldw	r17,252(sp)
   475dc:	dc003e17 	ldw	r16,248(sp)
   475e0:	dec04804 	addi	sp,sp,288
   475e4:	f800283a 	ret
   475e8:	d9002c17 	ldw	r4,176(sp)
   475ec:	004b4440 	call	4b444 <__sinit>
   475f0:	003f0406 	br	47204 <__alt_data_end+0xfffe0104>
   475f4:	d8802d17 	ldw	r2,180(sp)
   475f8:	d9002d17 	ldw	r4,180(sp)
   475fc:	10800017 	ldw	r2,0(r2)
   47600:	d8803115 	stw	r2,196(sp)
   47604:	20800104 	addi	r2,r4,4
   47608:	d9003117 	ldw	r4,196(sp)
   4760c:	203fa716 	blt	r4,zero,474ac <__alt_data_end+0xfffe03ac>
   47610:	d8802d15 	stw	r2,180(sp)
   47614:	ac400007 	ldb	r17,0(r21)
   47618:	003f4206 	br	47324 <__alt_data_end+0xfffe0224>
   4761c:	ac400007 	ldb	r17,0(r21)
   47620:	aac00044 	addi	r11,r21,1
   47624:	8a872826 	beq	r17,r10,492c8 <___vfprintf_internal_r+0x2128>
   47628:	88bff404 	addi	r2,r17,-48
   4762c:	0009883a 	mov	r4,zero
   47630:	30867d36 	bltu	r6,r2,49028 <___vfprintf_internal_r+0x1e88>
   47634:	5c400007 	ldb	r17,0(r11)
   47638:	210002a4 	muli	r4,r4,10
   4763c:	5d400044 	addi	r21,r11,1
   47640:	a817883a 	mov	r11,r21
   47644:	2089883a 	add	r4,r4,r2
   47648:	88bff404 	addi	r2,r17,-48
   4764c:	30bff92e 	bgeu	r6,r2,47634 <__alt_data_end+0xfffe0534>
   47650:	2005c916 	blt	r4,zero,48d78 <___vfprintf_internal_r+0x1bd8>
   47654:	d9002915 	stw	r4,164(sp)
   47658:	003f3306 	br	47328 <__alt_data_end+0xfffe0228>
   4765c:	94802014 	ori	r18,r18,128
   47660:	ac400007 	ldb	r17,0(r21)
   47664:	003f2f06 	br	47324 <__alt_data_end+0xfffe0224>
   47668:	a809883a 	mov	r4,r21
   4766c:	d8003115 	stw	zero,196(sp)
   47670:	88bff404 	addi	r2,r17,-48
   47674:	0017883a 	mov	r11,zero
   47678:	24400007 	ldb	r17,0(r4)
   4767c:	5ac002a4 	muli	r11,r11,10
   47680:	ad400044 	addi	r21,r21,1
   47684:	a809883a 	mov	r4,r21
   47688:	12d7883a 	add	r11,r2,r11
   4768c:	88bff404 	addi	r2,r17,-48
   47690:	30bff92e 	bgeu	r6,r2,47678 <__alt_data_end+0xfffe0578>
   47694:	dac03115 	stw	r11,196(sp)
   47698:	003f2306 	br	47328 <__alt_data_end+0xfffe0228>
   4769c:	18c03fcc 	andi	r3,r3,255
   476a0:	18072b1e 	bne	r3,zero,49350 <___vfprintf_internal_r+0x21b0>
   476a4:	94800414 	ori	r18,r18,16
   476a8:	9080080c 	andi	r2,r18,32
   476ac:	10037b26 	beq	r2,zero,4849c <___vfprintf_internal_r+0x12fc>
   476b0:	d9402d17 	ldw	r5,180(sp)
   476b4:	28800117 	ldw	r2,4(r5)
   476b8:	2cc00017 	ldw	r19,0(r5)
   476bc:	29400204 	addi	r5,r5,8
   476c0:	d9402d15 	stw	r5,180(sp)
   476c4:	102d883a 	mov	r22,r2
   476c8:	10044b16 	blt	r2,zero,487f8 <___vfprintf_internal_r+0x1658>
   476cc:	d9402917 	ldw	r5,164(sp)
   476d0:	df002783 	ldbu	fp,158(sp)
   476d4:	2803bc16 	blt	r5,zero,485c8 <___vfprintf_internal_r+0x1428>
   476d8:	00ffdfc4 	movi	r3,-129
   476dc:	9d84b03a 	or	r2,r19,r22
   476e0:	90e4703a 	and	r18,r18,r3
   476e4:	10017726 	beq	r2,zero,47cc4 <___vfprintf_internal_r+0xb24>
   476e8:	b0038326 	beq	r22,zero,484f8 <___vfprintf_internal_r+0x1358>
   476ec:	dc402a15 	stw	r17,168(sp)
   476f0:	dc001e04 	addi	r16,sp,120
   476f4:	b023883a 	mov	r17,r22
   476f8:	402d883a 	mov	r22,r8
   476fc:	9809883a 	mov	r4,r19
   47700:	880b883a 	mov	r5,r17
   47704:	01800284 	movi	r6,10
   47708:	000f883a 	mov	r7,zero
   4770c:	0050b200 	call	50b20 <__umoddi3>
   47710:	10800c04 	addi	r2,r2,48
   47714:	843fffc4 	addi	r16,r16,-1
   47718:	9809883a 	mov	r4,r19
   4771c:	880b883a 	mov	r5,r17
   47720:	80800005 	stb	r2,0(r16)
   47724:	01800284 	movi	r6,10
   47728:	000f883a 	mov	r7,zero
   4772c:	00505a80 	call	505a8 <__udivdi3>
   47730:	1027883a 	mov	r19,r2
   47734:	10c4b03a 	or	r2,r2,r3
   47738:	1823883a 	mov	r17,r3
   4773c:	103fef1e 	bne	r2,zero,476fc <__alt_data_end+0xfffe05fc>
   47740:	d8c02817 	ldw	r3,160(sp)
   47744:	dc402a17 	ldw	r17,168(sp)
   47748:	b011883a 	mov	r8,r22
   4774c:	1c07c83a 	sub	r3,r3,r16
   47750:	d8c02e15 	stw	r3,184(sp)
   47754:	00005906 	br	478bc <___vfprintf_internal_r+0x71c>
   47758:	18c03fcc 	andi	r3,r3,255
   4775c:	1806fa1e 	bne	r3,zero,49348 <___vfprintf_internal_r+0x21a8>
   47760:	9080020c 	andi	r2,r18,8
   47764:	10048a26 	beq	r2,zero,48990 <___vfprintf_internal_r+0x17f0>
   47768:	d8c02d17 	ldw	r3,180(sp)
   4776c:	d9002d17 	ldw	r4,180(sp)
   47770:	d9402d17 	ldw	r5,180(sp)
   47774:	18c00017 	ldw	r3,0(r3)
   47778:	21000117 	ldw	r4,4(r4)
   4777c:	29400204 	addi	r5,r5,8
   47780:	d8c03615 	stw	r3,216(sp)
   47784:	d9003815 	stw	r4,224(sp)
   47788:	d9402d15 	stw	r5,180(sp)
   4778c:	d9003617 	ldw	r4,216(sp)
   47790:	d9403817 	ldw	r5,224(sp)
   47794:	da003d15 	stw	r8,244(sp)
   47798:	04000044 	movi	r16,1
   4779c:	00430980 	call	43098 <__fpclassifyd>
   477a0:	da003d17 	ldw	r8,244(sp)
   477a4:	14041f1e 	bne	r2,r16,48824 <___vfprintf_internal_r+0x1684>
   477a8:	d9003617 	ldw	r4,216(sp)
   477ac:	d9403817 	ldw	r5,224(sp)
   477b0:	000d883a 	mov	r6,zero
   477b4:	000f883a 	mov	r7,zero
   477b8:	00510580 	call	51058 <__ledf2>
   477bc:	da003d17 	ldw	r8,244(sp)
   477c0:	1005be16 	blt	r2,zero,48ebc <___vfprintf_internal_r+0x1d1c>
   477c4:	df002783 	ldbu	fp,158(sp)
   477c8:	008011c4 	movi	r2,71
   477cc:	1445330e 	bge	r2,r17,48c9c <___vfprintf_internal_r+0x1afc>
   477d0:	04000174 	movhi	r16,5
   477d4:	84172b04 	addi	r16,r16,23724
   477d8:	00c000c4 	movi	r3,3
   477dc:	00bfdfc4 	movi	r2,-129
   477e0:	d8c02a15 	stw	r3,168(sp)
   477e4:	90a4703a 	and	r18,r18,r2
   477e8:	d8c02e15 	stw	r3,184(sp)
   477ec:	d8002915 	stw	zero,164(sp)
   477f0:	d8003215 	stw	zero,200(sp)
   477f4:	00003706 	br	478d4 <___vfprintf_internal_r+0x734>
   477f8:	94800214 	ori	r18,r18,8
   477fc:	ac400007 	ldb	r17,0(r21)
   47800:	003ec806 	br	47324 <__alt_data_end+0xfffe0224>
   47804:	18c03fcc 	andi	r3,r3,255
   47808:	1806db1e 	bne	r3,zero,49378 <___vfprintf_internal_r+0x21d8>
   4780c:	94800414 	ori	r18,r18,16
   47810:	9080080c 	andi	r2,r18,32
   47814:	1002d826 	beq	r2,zero,48378 <___vfprintf_internal_r+0x11d8>
   47818:	d9402d17 	ldw	r5,180(sp)
   4781c:	d8c02917 	ldw	r3,164(sp)
   47820:	d8002785 	stb	zero,158(sp)
   47824:	28800204 	addi	r2,r5,8
   47828:	2cc00017 	ldw	r19,0(r5)
   4782c:	2d800117 	ldw	r22,4(r5)
   47830:	18048f16 	blt	r3,zero,48a70 <___vfprintf_internal_r+0x18d0>
   47834:	013fdfc4 	movi	r4,-129
   47838:	9d86b03a 	or	r3,r19,r22
   4783c:	d8802d15 	stw	r2,180(sp)
   47840:	9124703a 	and	r18,r18,r4
   47844:	1802d91e 	bne	r3,zero,483ac <___vfprintf_internal_r+0x120c>
   47848:	d8c02917 	ldw	r3,164(sp)
   4784c:	0039883a 	mov	fp,zero
   47850:	1805c326 	beq	r3,zero,48f60 <___vfprintf_internal_r+0x1dc0>
   47854:	0027883a 	mov	r19,zero
   47858:	002d883a 	mov	r22,zero
   4785c:	dc001e04 	addi	r16,sp,120
   47860:	9806d0fa 	srli	r3,r19,3
   47864:	b008977a 	slli	r4,r22,29
   47868:	b02cd0fa 	srli	r22,r22,3
   4786c:	9cc001cc 	andi	r19,r19,7
   47870:	98800c04 	addi	r2,r19,48
   47874:	843fffc4 	addi	r16,r16,-1
   47878:	20e6b03a 	or	r19,r4,r3
   4787c:	80800005 	stb	r2,0(r16)
   47880:	9d86b03a 	or	r3,r19,r22
   47884:	183ff61e 	bne	r3,zero,47860 <__alt_data_end+0xfffe0760>
   47888:	90c0004c 	andi	r3,r18,1
   4788c:	18013b26 	beq	r3,zero,47d7c <___vfprintf_internal_r+0xbdc>
   47890:	10803fcc 	andi	r2,r2,255
   47894:	1080201c 	xori	r2,r2,128
   47898:	10bfe004 	addi	r2,r2,-128
   4789c:	00c00c04 	movi	r3,48
   478a0:	10c13626 	beq	r2,r3,47d7c <___vfprintf_internal_r+0xbdc>
   478a4:	80ffffc5 	stb	r3,-1(r16)
   478a8:	d8c02817 	ldw	r3,160(sp)
   478ac:	80bfffc4 	addi	r2,r16,-1
   478b0:	1021883a 	mov	r16,r2
   478b4:	1887c83a 	sub	r3,r3,r2
   478b8:	d8c02e15 	stw	r3,184(sp)
   478bc:	d8802e17 	ldw	r2,184(sp)
   478c0:	d9002917 	ldw	r4,164(sp)
   478c4:	1100010e 	bge	r2,r4,478cc <___vfprintf_internal_r+0x72c>
   478c8:	2005883a 	mov	r2,r4
   478cc:	d8802a15 	stw	r2,168(sp)
   478d0:	d8003215 	stw	zero,200(sp)
   478d4:	e7003fcc 	andi	fp,fp,255
   478d8:	e700201c 	xori	fp,fp,128
   478dc:	e73fe004 	addi	fp,fp,-128
   478e0:	e0000326 	beq	fp,zero,478f0 <___vfprintf_internal_r+0x750>
   478e4:	d8c02a17 	ldw	r3,168(sp)
   478e8:	18c00044 	addi	r3,r3,1
   478ec:	d8c02a15 	stw	r3,168(sp)
   478f0:	90c0008c 	andi	r3,r18,2
   478f4:	d8c02b15 	stw	r3,172(sp)
   478f8:	18000326 	beq	r3,zero,47908 <___vfprintf_internal_r+0x768>
   478fc:	d8c02a17 	ldw	r3,168(sp)
   47900:	18c00084 	addi	r3,r3,2
   47904:	d8c02a15 	stw	r3,168(sp)
   47908:	90c0210c 	andi	r3,r18,132
   4790c:	d8c03015 	stw	r3,192(sp)
   47910:	1801a31e 	bne	r3,zero,47fa0 <___vfprintf_internal_r+0xe00>
   47914:	d9003117 	ldw	r4,196(sp)
   47918:	d8c02a17 	ldw	r3,168(sp)
   4791c:	20e7c83a 	sub	r19,r4,r3
   47920:	04c19f0e 	bge	zero,r19,47fa0 <___vfprintf_internal_r+0xe00>
   47924:	02400404 	movi	r9,16
   47928:	d8c02017 	ldw	r3,128(sp)
   4792c:	d8801f17 	ldw	r2,124(sp)
   47930:	4cc50d0e 	bge	r9,r19,48d68 <___vfprintf_internal_r+0x1bc8>
   47934:	01400174 	movhi	r5,5
   47938:	29573e84 	addi	r5,r5,23802
   4793c:	dc403b15 	stw	r17,236(sp)
   47940:	d9403515 	stw	r5,212(sp)
   47944:	9823883a 	mov	r17,r19
   47948:	482d883a 	mov	r22,r9
   4794c:	9027883a 	mov	r19,r18
   47950:	070001c4 	movi	fp,7
   47954:	8025883a 	mov	r18,r16
   47958:	dc002c17 	ldw	r16,176(sp)
   4795c:	00000306 	br	4796c <___vfprintf_internal_r+0x7cc>
   47960:	8c7ffc04 	addi	r17,r17,-16
   47964:	42000204 	addi	r8,r8,8
   47968:	b440130e 	bge	r22,r17,479b8 <___vfprintf_internal_r+0x818>
   4796c:	01000174 	movhi	r4,5
   47970:	18c00404 	addi	r3,r3,16
   47974:	10800044 	addi	r2,r2,1
   47978:	21173e84 	addi	r4,r4,23802
   4797c:	41000015 	stw	r4,0(r8)
   47980:	45800115 	stw	r22,4(r8)
   47984:	d8c02015 	stw	r3,128(sp)
   47988:	d8801f15 	stw	r2,124(sp)
   4798c:	e0bff40e 	bge	fp,r2,47960 <__alt_data_end+0xfffe0860>
   47990:	d9801e04 	addi	r6,sp,120
   47994:	b80b883a 	mov	r5,r23
   47998:	8009883a 	mov	r4,r16
   4799c:	004e7280 	call	4e728 <__sprint_r>
   479a0:	103f011e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   479a4:	8c7ffc04 	addi	r17,r17,-16
   479a8:	d8c02017 	ldw	r3,128(sp)
   479ac:	d8801f17 	ldw	r2,124(sp)
   479b0:	da000404 	addi	r8,sp,16
   479b4:	b47fed16 	blt	r22,r17,4796c <__alt_data_end+0xfffe086c>
   479b8:	9021883a 	mov	r16,r18
   479bc:	9825883a 	mov	r18,r19
   479c0:	8827883a 	mov	r19,r17
   479c4:	dc403b17 	ldw	r17,236(sp)
   479c8:	d9403517 	ldw	r5,212(sp)
   479cc:	98c7883a 	add	r3,r19,r3
   479d0:	10800044 	addi	r2,r2,1
   479d4:	41400015 	stw	r5,0(r8)
   479d8:	44c00115 	stw	r19,4(r8)
   479dc:	d8c02015 	stw	r3,128(sp)
   479e0:	d8801f15 	stw	r2,124(sp)
   479e4:	010001c4 	movi	r4,7
   479e8:	2082a316 	blt	r4,r2,48478 <___vfprintf_internal_r+0x12d8>
   479ec:	df002787 	ldb	fp,158(sp)
   479f0:	42000204 	addi	r8,r8,8
   479f4:	e0000c26 	beq	fp,zero,47a28 <___vfprintf_internal_r+0x888>
   479f8:	d8801f17 	ldw	r2,124(sp)
   479fc:	d9002784 	addi	r4,sp,158
   47a00:	18c00044 	addi	r3,r3,1
   47a04:	10800044 	addi	r2,r2,1
   47a08:	41000015 	stw	r4,0(r8)
   47a0c:	01000044 	movi	r4,1
   47a10:	41000115 	stw	r4,4(r8)
   47a14:	d8c02015 	stw	r3,128(sp)
   47a18:	d8801f15 	stw	r2,124(sp)
   47a1c:	010001c4 	movi	r4,7
   47a20:	20823c16 	blt	r4,r2,48314 <___vfprintf_internal_r+0x1174>
   47a24:	42000204 	addi	r8,r8,8
   47a28:	d8802b17 	ldw	r2,172(sp)
   47a2c:	10000c26 	beq	r2,zero,47a60 <___vfprintf_internal_r+0x8c0>
   47a30:	d8801f17 	ldw	r2,124(sp)
   47a34:	d9002704 	addi	r4,sp,156
   47a38:	18c00084 	addi	r3,r3,2
   47a3c:	10800044 	addi	r2,r2,1
   47a40:	41000015 	stw	r4,0(r8)
   47a44:	01000084 	movi	r4,2
   47a48:	41000115 	stw	r4,4(r8)
   47a4c:	d8c02015 	stw	r3,128(sp)
   47a50:	d8801f15 	stw	r2,124(sp)
   47a54:	010001c4 	movi	r4,7
   47a58:	20823616 	blt	r4,r2,48334 <___vfprintf_internal_r+0x1194>
   47a5c:	42000204 	addi	r8,r8,8
   47a60:	d9003017 	ldw	r4,192(sp)
   47a64:	00802004 	movi	r2,128
   47a68:	20819926 	beq	r4,r2,480d0 <___vfprintf_internal_r+0xf30>
   47a6c:	d9402917 	ldw	r5,164(sp)
   47a70:	d8802e17 	ldw	r2,184(sp)
   47a74:	28adc83a 	sub	r22,r5,r2
   47a78:	0580310e 	bge	zero,r22,47b40 <___vfprintf_internal_r+0x9a0>
   47a7c:	07000404 	movi	fp,16
   47a80:	d8801f17 	ldw	r2,124(sp)
   47a84:	e584140e 	bge	fp,r22,48ad8 <___vfprintf_internal_r+0x1938>
   47a88:	01400174 	movhi	r5,5
   47a8c:	29573a84 	addi	r5,r5,23786
   47a90:	dc402915 	stw	r17,164(sp)
   47a94:	d9402b15 	stw	r5,172(sp)
   47a98:	b023883a 	mov	r17,r22
   47a9c:	04c001c4 	movi	r19,7
   47aa0:	a82d883a 	mov	r22,r21
   47aa4:	902b883a 	mov	r21,r18
   47aa8:	8025883a 	mov	r18,r16
   47aac:	dc002c17 	ldw	r16,176(sp)
   47ab0:	00000306 	br	47ac0 <___vfprintf_internal_r+0x920>
   47ab4:	8c7ffc04 	addi	r17,r17,-16
   47ab8:	42000204 	addi	r8,r8,8
   47abc:	e440110e 	bge	fp,r17,47b04 <___vfprintf_internal_r+0x964>
   47ac0:	18c00404 	addi	r3,r3,16
   47ac4:	10800044 	addi	r2,r2,1
   47ac8:	45000015 	stw	r20,0(r8)
   47acc:	47000115 	stw	fp,4(r8)
   47ad0:	d8c02015 	stw	r3,128(sp)
   47ad4:	d8801f15 	stw	r2,124(sp)
   47ad8:	98bff60e 	bge	r19,r2,47ab4 <__alt_data_end+0xfffe09b4>
   47adc:	d9801e04 	addi	r6,sp,120
   47ae0:	b80b883a 	mov	r5,r23
   47ae4:	8009883a 	mov	r4,r16
   47ae8:	004e7280 	call	4e728 <__sprint_r>
   47aec:	103eae1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   47af0:	8c7ffc04 	addi	r17,r17,-16
   47af4:	d8c02017 	ldw	r3,128(sp)
   47af8:	d8801f17 	ldw	r2,124(sp)
   47afc:	da000404 	addi	r8,sp,16
   47b00:	e47fef16 	blt	fp,r17,47ac0 <__alt_data_end+0xfffe09c0>
   47b04:	9021883a 	mov	r16,r18
   47b08:	a825883a 	mov	r18,r21
   47b0c:	b02b883a 	mov	r21,r22
   47b10:	882d883a 	mov	r22,r17
   47b14:	dc402917 	ldw	r17,164(sp)
   47b18:	d9002b17 	ldw	r4,172(sp)
   47b1c:	1d87883a 	add	r3,r3,r22
   47b20:	10800044 	addi	r2,r2,1
   47b24:	41000015 	stw	r4,0(r8)
   47b28:	45800115 	stw	r22,4(r8)
   47b2c:	d8c02015 	stw	r3,128(sp)
   47b30:	d8801f15 	stw	r2,124(sp)
   47b34:	010001c4 	movi	r4,7
   47b38:	2081ee16 	blt	r4,r2,482f4 <___vfprintf_internal_r+0x1154>
   47b3c:	42000204 	addi	r8,r8,8
   47b40:	9080400c 	andi	r2,r18,256
   47b44:	1001181e 	bne	r2,zero,47fa8 <___vfprintf_internal_r+0xe08>
   47b48:	d9402e17 	ldw	r5,184(sp)
   47b4c:	d8801f17 	ldw	r2,124(sp)
   47b50:	44000015 	stw	r16,0(r8)
   47b54:	1947883a 	add	r3,r3,r5
   47b58:	10800044 	addi	r2,r2,1
   47b5c:	41400115 	stw	r5,4(r8)
   47b60:	d8c02015 	stw	r3,128(sp)
   47b64:	d8801f15 	stw	r2,124(sp)
   47b68:	010001c4 	movi	r4,7
   47b6c:	2081d316 	blt	r4,r2,482bc <___vfprintf_internal_r+0x111c>
   47b70:	42000204 	addi	r8,r8,8
   47b74:	9480010c 	andi	r18,r18,4
   47b78:	90003226 	beq	r18,zero,47c44 <___vfprintf_internal_r+0xaa4>
   47b7c:	d9403117 	ldw	r5,196(sp)
   47b80:	d8802a17 	ldw	r2,168(sp)
   47b84:	28a1c83a 	sub	r16,r5,r2
   47b88:	04002e0e 	bge	zero,r16,47c44 <___vfprintf_internal_r+0xaa4>
   47b8c:	04400404 	movi	r17,16
   47b90:	d8801f17 	ldw	r2,124(sp)
   47b94:	8c04a20e 	bge	r17,r16,48e20 <___vfprintf_internal_r+0x1c80>
   47b98:	01400174 	movhi	r5,5
   47b9c:	29573e84 	addi	r5,r5,23802
   47ba0:	d9403515 	stw	r5,212(sp)
   47ba4:	048001c4 	movi	r18,7
   47ba8:	dcc02c17 	ldw	r19,176(sp)
   47bac:	00000306 	br	47bbc <___vfprintf_internal_r+0xa1c>
   47bb0:	843ffc04 	addi	r16,r16,-16
   47bb4:	42000204 	addi	r8,r8,8
   47bb8:	8c00130e 	bge	r17,r16,47c08 <___vfprintf_internal_r+0xa68>
   47bbc:	01000174 	movhi	r4,5
   47bc0:	18c00404 	addi	r3,r3,16
   47bc4:	10800044 	addi	r2,r2,1
   47bc8:	21173e84 	addi	r4,r4,23802
   47bcc:	41000015 	stw	r4,0(r8)
   47bd0:	44400115 	stw	r17,4(r8)
   47bd4:	d8c02015 	stw	r3,128(sp)
   47bd8:	d8801f15 	stw	r2,124(sp)
   47bdc:	90bff40e 	bge	r18,r2,47bb0 <__alt_data_end+0xfffe0ab0>
   47be0:	d9801e04 	addi	r6,sp,120
   47be4:	b80b883a 	mov	r5,r23
   47be8:	9809883a 	mov	r4,r19
   47bec:	004e7280 	call	4e728 <__sprint_r>
   47bf0:	103e6d1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   47bf4:	843ffc04 	addi	r16,r16,-16
   47bf8:	d8c02017 	ldw	r3,128(sp)
   47bfc:	d8801f17 	ldw	r2,124(sp)
   47c00:	da000404 	addi	r8,sp,16
   47c04:	8c3fed16 	blt	r17,r16,47bbc <__alt_data_end+0xfffe0abc>
   47c08:	d9403517 	ldw	r5,212(sp)
   47c0c:	1c07883a 	add	r3,r3,r16
   47c10:	10800044 	addi	r2,r2,1
   47c14:	41400015 	stw	r5,0(r8)
   47c18:	44000115 	stw	r16,4(r8)
   47c1c:	d8c02015 	stw	r3,128(sp)
   47c20:	d8801f15 	stw	r2,124(sp)
   47c24:	010001c4 	movi	r4,7
   47c28:	2080060e 	bge	r4,r2,47c44 <___vfprintf_internal_r+0xaa4>
   47c2c:	d9002c17 	ldw	r4,176(sp)
   47c30:	d9801e04 	addi	r6,sp,120
   47c34:	b80b883a 	mov	r5,r23
   47c38:	004e7280 	call	4e728 <__sprint_r>
   47c3c:	103e5a1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   47c40:	d8c02017 	ldw	r3,128(sp)
   47c44:	d8803117 	ldw	r2,196(sp)
   47c48:	d9002a17 	ldw	r4,168(sp)
   47c4c:	1100010e 	bge	r2,r4,47c54 <___vfprintf_internal_r+0xab4>
   47c50:	2005883a 	mov	r2,r4
   47c54:	d9402f17 	ldw	r5,188(sp)
   47c58:	288b883a 	add	r5,r5,r2
   47c5c:	d9402f15 	stw	r5,188(sp)
   47c60:	18019e1e 	bne	r3,zero,482dc <___vfprintf_internal_r+0x113c>
   47c64:	a8800007 	ldb	r2,0(r21)
   47c68:	d8001f15 	stw	zero,124(sp)
   47c6c:	da000404 	addi	r8,sp,16
   47c70:	103d851e 	bne	r2,zero,47288 <__alt_data_end+0xfffe0188>
   47c74:	a821883a 	mov	r16,r21
   47c78:	003d9b06 	br	472e8 <__alt_data_end+0xfffe01e8>
   47c7c:	18c03fcc 	andi	r3,r3,255
   47c80:	1805c11e 	bne	r3,zero,49388 <___vfprintf_internal_r+0x21e8>
   47c84:	94800414 	ori	r18,r18,16
   47c88:	9080080c 	andi	r2,r18,32
   47c8c:	10020c26 	beq	r2,zero,484c0 <___vfprintf_internal_r+0x1320>
   47c90:	d8802d17 	ldw	r2,180(sp)
   47c94:	d9002917 	ldw	r4,164(sp)
   47c98:	d8002785 	stb	zero,158(sp)
   47c9c:	10c00204 	addi	r3,r2,8
   47ca0:	14c00017 	ldw	r19,0(r2)
   47ca4:	15800117 	ldw	r22,4(r2)
   47ca8:	20040f16 	blt	r4,zero,48ce8 <___vfprintf_internal_r+0x1b48>
   47cac:	013fdfc4 	movi	r4,-129
   47cb0:	9d84b03a 	or	r2,r19,r22
   47cb4:	d8c02d15 	stw	r3,180(sp)
   47cb8:	9124703a 	and	r18,r18,r4
   47cbc:	0039883a 	mov	fp,zero
   47cc0:	103e891e 	bne	r2,zero,476e8 <__alt_data_end+0xfffe05e8>
   47cc4:	d9002917 	ldw	r4,164(sp)
   47cc8:	2002c11e 	bne	r4,zero,487d0 <___vfprintf_internal_r+0x1630>
   47ccc:	d8002915 	stw	zero,164(sp)
   47cd0:	d8002e15 	stw	zero,184(sp)
   47cd4:	dc001e04 	addi	r16,sp,120
   47cd8:	003ef806 	br	478bc <__alt_data_end+0xfffe07bc>
   47cdc:	18c03fcc 	andi	r3,r3,255
   47ce0:	18059d1e 	bne	r3,zero,49358 <___vfprintf_internal_r+0x21b8>
   47ce4:	01400174 	movhi	r5,5
   47ce8:	29572e04 	addi	r5,r5,23736
   47cec:	d9403915 	stw	r5,228(sp)
   47cf0:	9080080c 	andi	r2,r18,32
   47cf4:	10005226 	beq	r2,zero,47e40 <___vfprintf_internal_r+0xca0>
   47cf8:	d8802d17 	ldw	r2,180(sp)
   47cfc:	14c00017 	ldw	r19,0(r2)
   47d00:	15800117 	ldw	r22,4(r2)
   47d04:	10800204 	addi	r2,r2,8
   47d08:	d8802d15 	stw	r2,180(sp)
   47d0c:	9080004c 	andi	r2,r18,1
   47d10:	10019026 	beq	r2,zero,48354 <___vfprintf_internal_r+0x11b4>
   47d14:	9d84b03a 	or	r2,r19,r22
   47d18:	10036926 	beq	r2,zero,48ac0 <___vfprintf_internal_r+0x1920>
   47d1c:	d8c02917 	ldw	r3,164(sp)
   47d20:	00800c04 	movi	r2,48
   47d24:	d8802705 	stb	r2,156(sp)
   47d28:	dc402745 	stb	r17,157(sp)
   47d2c:	d8002785 	stb	zero,158(sp)
   47d30:	90800094 	ori	r2,r18,2
   47d34:	18045d16 	blt	r3,zero,48eac <___vfprintf_internal_r+0x1d0c>
   47d38:	00bfdfc4 	movi	r2,-129
   47d3c:	90a4703a 	and	r18,r18,r2
   47d40:	94800094 	ori	r18,r18,2
   47d44:	0039883a 	mov	fp,zero
   47d48:	d9003917 	ldw	r4,228(sp)
   47d4c:	dc001e04 	addi	r16,sp,120
   47d50:	988003cc 	andi	r2,r19,15
   47d54:	b006973a 	slli	r3,r22,28
   47d58:	2085883a 	add	r2,r4,r2
   47d5c:	9826d13a 	srli	r19,r19,4
   47d60:	10800003 	ldbu	r2,0(r2)
   47d64:	b02cd13a 	srli	r22,r22,4
   47d68:	843fffc4 	addi	r16,r16,-1
   47d6c:	1ce6b03a 	or	r19,r3,r19
   47d70:	80800005 	stb	r2,0(r16)
   47d74:	9d84b03a 	or	r2,r19,r22
   47d78:	103ff51e 	bne	r2,zero,47d50 <__alt_data_end+0xfffe0c50>
   47d7c:	d8c02817 	ldw	r3,160(sp)
   47d80:	1c07c83a 	sub	r3,r3,r16
   47d84:	d8c02e15 	stw	r3,184(sp)
   47d88:	003ecc06 	br	478bc <__alt_data_end+0xfffe07bc>
   47d8c:	18c03fcc 	andi	r3,r3,255
   47d90:	183e9f26 	beq	r3,zero,47810 <__alt_data_end+0xfffe0710>
   47d94:	d9c02785 	stb	r7,158(sp)
   47d98:	003e9d06 	br	47810 <__alt_data_end+0xfffe0710>
   47d9c:	00c00044 	movi	r3,1
   47da0:	01c00ac4 	movi	r7,43
   47da4:	ac400007 	ldb	r17,0(r21)
   47da8:	003d5e06 	br	47324 <__alt_data_end+0xfffe0224>
   47dac:	94800814 	ori	r18,r18,32
   47db0:	ac400007 	ldb	r17,0(r21)
   47db4:	003d5b06 	br	47324 <__alt_data_end+0xfffe0224>
   47db8:	d8c02d17 	ldw	r3,180(sp)
   47dbc:	d8002785 	stb	zero,158(sp)
   47dc0:	1c000017 	ldw	r16,0(r3)
   47dc4:	1cc00104 	addi	r19,r3,4
   47dc8:	80041926 	beq	r16,zero,48e30 <___vfprintf_internal_r+0x1c90>
   47dcc:	d9002917 	ldw	r4,164(sp)
   47dd0:	2003d016 	blt	r4,zero,48d14 <___vfprintf_internal_r+0x1b74>
   47dd4:	200d883a 	mov	r6,r4
   47dd8:	000b883a 	mov	r5,zero
   47ddc:	8009883a 	mov	r4,r16
   47de0:	da003d15 	stw	r8,244(sp)
   47de4:	004c9b00 	call	4c9b0 <memchr>
   47de8:	da003d17 	ldw	r8,244(sp)
   47dec:	10045426 	beq	r2,zero,48f40 <___vfprintf_internal_r+0x1da0>
   47df0:	1405c83a 	sub	r2,r2,r16
   47df4:	d8802e15 	stw	r2,184(sp)
   47df8:	1003cc16 	blt	r2,zero,48d2c <___vfprintf_internal_r+0x1b8c>
   47dfc:	df002783 	ldbu	fp,158(sp)
   47e00:	d8802a15 	stw	r2,168(sp)
   47e04:	dcc02d15 	stw	r19,180(sp)
   47e08:	d8002915 	stw	zero,164(sp)
   47e0c:	d8003215 	stw	zero,200(sp)
   47e10:	003eb006 	br	478d4 <__alt_data_end+0xfffe07d4>
   47e14:	18c03fcc 	andi	r3,r3,255
   47e18:	183f9b26 	beq	r3,zero,47c88 <__alt_data_end+0xfffe0b88>
   47e1c:	d9c02785 	stb	r7,158(sp)
   47e20:	003f9906 	br	47c88 <__alt_data_end+0xfffe0b88>
   47e24:	18c03fcc 	andi	r3,r3,255
   47e28:	1805551e 	bne	r3,zero,49380 <___vfprintf_internal_r+0x21e0>
   47e2c:	01400174 	movhi	r5,5
   47e30:	29573304 	addi	r5,r5,23756
   47e34:	d9403915 	stw	r5,228(sp)
   47e38:	9080080c 	andi	r2,r18,32
   47e3c:	103fae1e 	bne	r2,zero,47cf8 <__alt_data_end+0xfffe0bf8>
   47e40:	9080040c 	andi	r2,r18,16
   47e44:	1002de26 	beq	r2,zero,489c0 <___vfprintf_internal_r+0x1820>
   47e48:	d8c02d17 	ldw	r3,180(sp)
   47e4c:	002d883a 	mov	r22,zero
   47e50:	1cc00017 	ldw	r19,0(r3)
   47e54:	18c00104 	addi	r3,r3,4
   47e58:	d8c02d15 	stw	r3,180(sp)
   47e5c:	003fab06 	br	47d0c <__alt_data_end+0xfffe0c0c>
   47e60:	38803fcc 	andi	r2,r7,255
   47e64:	1080201c 	xori	r2,r2,128
   47e68:	10bfe004 	addi	r2,r2,-128
   47e6c:	1002d21e 	bne	r2,zero,489b8 <___vfprintf_internal_r+0x1818>
   47e70:	00c00044 	movi	r3,1
   47e74:	01c00804 	movi	r7,32
   47e78:	ac400007 	ldb	r17,0(r21)
   47e7c:	003d2906 	br	47324 <__alt_data_end+0xfffe0224>
   47e80:	94800054 	ori	r18,r18,1
   47e84:	ac400007 	ldb	r17,0(r21)
   47e88:	003d2606 	br	47324 <__alt_data_end+0xfffe0224>
   47e8c:	18c03fcc 	andi	r3,r3,255
   47e90:	183e0526 	beq	r3,zero,476a8 <__alt_data_end+0xfffe05a8>
   47e94:	d9c02785 	stb	r7,158(sp)
   47e98:	003e0306 	br	476a8 <__alt_data_end+0xfffe05a8>
   47e9c:	94801014 	ori	r18,r18,64
   47ea0:	ac400007 	ldb	r17,0(r21)
   47ea4:	003d1f06 	br	47324 <__alt_data_end+0xfffe0224>
   47ea8:	ac400007 	ldb	r17,0(r21)
   47eac:	8a438726 	beq	r17,r9,48ccc <___vfprintf_internal_r+0x1b2c>
   47eb0:	94800414 	ori	r18,r18,16
   47eb4:	003d1b06 	br	47324 <__alt_data_end+0xfffe0224>
   47eb8:	18c03fcc 	andi	r3,r3,255
   47ebc:	1805341e 	bne	r3,zero,49390 <___vfprintf_internal_r+0x21f0>
   47ec0:	9080080c 	andi	r2,r18,32
   47ec4:	1002cd26 	beq	r2,zero,489fc <___vfprintf_internal_r+0x185c>
   47ec8:	d9402d17 	ldw	r5,180(sp)
   47ecc:	d9002f17 	ldw	r4,188(sp)
   47ed0:	28800017 	ldw	r2,0(r5)
   47ed4:	2007d7fa 	srai	r3,r4,31
   47ed8:	29400104 	addi	r5,r5,4
   47edc:	d9402d15 	stw	r5,180(sp)
   47ee0:	11000015 	stw	r4,0(r2)
   47ee4:	10c00115 	stw	r3,4(r2)
   47ee8:	003ce506 	br	47280 <__alt_data_end+0xfffe0180>
   47eec:	d8c02d17 	ldw	r3,180(sp)
   47ef0:	d9002d17 	ldw	r4,180(sp)
   47ef4:	d8002785 	stb	zero,158(sp)
   47ef8:	18800017 	ldw	r2,0(r3)
   47efc:	21000104 	addi	r4,r4,4
   47f00:	00c00044 	movi	r3,1
   47f04:	d8c02a15 	stw	r3,168(sp)
   47f08:	d8801405 	stb	r2,80(sp)
   47f0c:	d9002d15 	stw	r4,180(sp)
   47f10:	d8c02e15 	stw	r3,184(sp)
   47f14:	d8002915 	stw	zero,164(sp)
   47f18:	d8003215 	stw	zero,200(sp)
   47f1c:	dc001404 	addi	r16,sp,80
   47f20:	0039883a 	mov	fp,zero
   47f24:	003e7206 	br	478f0 <__alt_data_end+0xfffe07f0>
   47f28:	01000174 	movhi	r4,5
   47f2c:	21173304 	addi	r4,r4,23756
   47f30:	0039883a 	mov	fp,zero
   47f34:	d9003915 	stw	r4,228(sp)
   47f38:	04401e04 	movi	r17,120
   47f3c:	003f8206 	br	47d48 <__alt_data_end+0xfffe0c48>
   47f40:	18c03fcc 	andi	r3,r3,255
   47f44:	1805061e 	bne	r3,zero,49360 <___vfprintf_internal_r+0x21c0>
   47f48:	883d9126 	beq	r17,zero,47590 <__alt_data_end+0xfffe0490>
   47f4c:	00c00044 	movi	r3,1
   47f50:	d8c02a15 	stw	r3,168(sp)
   47f54:	dc401405 	stb	r17,80(sp)
   47f58:	d8002785 	stb	zero,158(sp)
   47f5c:	003fec06 	br	47f10 <__alt_data_end+0xfffe0e10>
   47f60:	01400174 	movhi	r5,5
   47f64:	29573304 	addi	r5,r5,23756
   47f68:	d9403915 	stw	r5,228(sp)
   47f6c:	d8c02d15 	stw	r3,180(sp)
   47f70:	1025883a 	mov	r18,r2
   47f74:	04401e04 	movi	r17,120
   47f78:	9d84b03a 	or	r2,r19,r22
   47f7c:	1000fc1e 	bne	r2,zero,48370 <___vfprintf_internal_r+0x11d0>
   47f80:	0039883a 	mov	fp,zero
   47f84:	00800084 	movi	r2,2
   47f88:	10803fcc 	andi	r2,r2,255
   47f8c:	00c00044 	movi	r3,1
   47f90:	10c20f26 	beq	r2,r3,487d0 <___vfprintf_internal_r+0x1630>
   47f94:	00c00084 	movi	r3,2
   47f98:	10fd6326 	beq	r2,r3,47528 <__alt_data_end+0xfffe0428>
   47f9c:	003e2d06 	br	47854 <__alt_data_end+0xfffe0754>
   47fa0:	d8c02017 	ldw	r3,128(sp)
   47fa4:	003e9306 	br	479f4 <__alt_data_end+0xfffe08f4>
   47fa8:	00801944 	movi	r2,101
   47fac:	14407e0e 	bge	r2,r17,481a8 <___vfprintf_internal_r+0x1008>
   47fb0:	d9003617 	ldw	r4,216(sp)
   47fb4:	d9403817 	ldw	r5,224(sp)
   47fb8:	000d883a 	mov	r6,zero
   47fbc:	000f883a 	mov	r7,zero
   47fc0:	d8c03c15 	stw	r3,240(sp)
   47fc4:	da003d15 	stw	r8,244(sp)
   47fc8:	00459c80 	call	459c8 <__eqdf2>
   47fcc:	d8c03c17 	ldw	r3,240(sp)
   47fd0:	da003d17 	ldw	r8,244(sp)
   47fd4:	1000f71e 	bne	r2,zero,483b4 <___vfprintf_internal_r+0x1214>
   47fd8:	d8801f17 	ldw	r2,124(sp)
   47fdc:	01000174 	movhi	r4,5
   47fe0:	21173a04 	addi	r4,r4,23784
   47fe4:	18c00044 	addi	r3,r3,1
   47fe8:	10800044 	addi	r2,r2,1
   47fec:	41000015 	stw	r4,0(r8)
   47ff0:	01000044 	movi	r4,1
   47ff4:	41000115 	stw	r4,4(r8)
   47ff8:	d8c02015 	stw	r3,128(sp)
   47ffc:	d8801f15 	stw	r2,124(sp)
   48000:	010001c4 	movi	r4,7
   48004:	2082b816 	blt	r4,r2,48ae8 <___vfprintf_internal_r+0x1948>
   48008:	42000204 	addi	r8,r8,8
   4800c:	d8802617 	ldw	r2,152(sp)
   48010:	d9403317 	ldw	r5,204(sp)
   48014:	11400216 	blt	r2,r5,48020 <___vfprintf_internal_r+0xe80>
   48018:	9080004c 	andi	r2,r18,1
   4801c:	103ed526 	beq	r2,zero,47b74 <__alt_data_end+0xfffe0a74>
   48020:	d8803717 	ldw	r2,220(sp)
   48024:	d9003417 	ldw	r4,208(sp)
   48028:	d9403717 	ldw	r5,220(sp)
   4802c:	1887883a 	add	r3,r3,r2
   48030:	d8801f17 	ldw	r2,124(sp)
   48034:	41000015 	stw	r4,0(r8)
   48038:	41400115 	stw	r5,4(r8)
   4803c:	10800044 	addi	r2,r2,1
   48040:	d8c02015 	stw	r3,128(sp)
   48044:	d8801f15 	stw	r2,124(sp)
   48048:	010001c4 	movi	r4,7
   4804c:	20832916 	blt	r4,r2,48cf4 <___vfprintf_internal_r+0x1b54>
   48050:	42000204 	addi	r8,r8,8
   48054:	d8803317 	ldw	r2,204(sp)
   48058:	143fffc4 	addi	r16,r2,-1
   4805c:	043ec50e 	bge	zero,r16,47b74 <__alt_data_end+0xfffe0a74>
   48060:	04400404 	movi	r17,16
   48064:	d8801f17 	ldw	r2,124(sp)
   48068:	8c00880e 	bge	r17,r16,4828c <___vfprintf_internal_r+0x10ec>
   4806c:	01400174 	movhi	r5,5
   48070:	29573a84 	addi	r5,r5,23786
   48074:	d9402b15 	stw	r5,172(sp)
   48078:	058001c4 	movi	r22,7
   4807c:	dcc02c17 	ldw	r19,176(sp)
   48080:	00000306 	br	48090 <___vfprintf_internal_r+0xef0>
   48084:	42000204 	addi	r8,r8,8
   48088:	843ffc04 	addi	r16,r16,-16
   4808c:	8c00820e 	bge	r17,r16,48298 <___vfprintf_internal_r+0x10f8>
   48090:	18c00404 	addi	r3,r3,16
   48094:	10800044 	addi	r2,r2,1
   48098:	45000015 	stw	r20,0(r8)
   4809c:	44400115 	stw	r17,4(r8)
   480a0:	d8c02015 	stw	r3,128(sp)
   480a4:	d8801f15 	stw	r2,124(sp)
   480a8:	b0bff60e 	bge	r22,r2,48084 <__alt_data_end+0xfffe0f84>
   480ac:	d9801e04 	addi	r6,sp,120
   480b0:	b80b883a 	mov	r5,r23
   480b4:	9809883a 	mov	r4,r19
   480b8:	004e7280 	call	4e728 <__sprint_r>
   480bc:	103d3a1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   480c0:	d8c02017 	ldw	r3,128(sp)
   480c4:	d8801f17 	ldw	r2,124(sp)
   480c8:	da000404 	addi	r8,sp,16
   480cc:	003fee06 	br	48088 <__alt_data_end+0xfffe0f88>
   480d0:	d9403117 	ldw	r5,196(sp)
   480d4:	d8802a17 	ldw	r2,168(sp)
   480d8:	28adc83a 	sub	r22,r5,r2
   480dc:	05be630e 	bge	zero,r22,47a6c <__alt_data_end+0xfffe096c>
   480e0:	07000404 	movi	fp,16
   480e4:	d8801f17 	ldw	r2,124(sp)
   480e8:	e5838f0e 	bge	fp,r22,48f28 <___vfprintf_internal_r+0x1d88>
   480ec:	01400174 	movhi	r5,5
   480f0:	29573a84 	addi	r5,r5,23786
   480f4:	dc403015 	stw	r17,192(sp)
   480f8:	d9402b15 	stw	r5,172(sp)
   480fc:	b023883a 	mov	r17,r22
   48100:	04c001c4 	movi	r19,7
   48104:	a82d883a 	mov	r22,r21
   48108:	902b883a 	mov	r21,r18
   4810c:	8025883a 	mov	r18,r16
   48110:	dc002c17 	ldw	r16,176(sp)
   48114:	00000306 	br	48124 <___vfprintf_internal_r+0xf84>
   48118:	8c7ffc04 	addi	r17,r17,-16
   4811c:	42000204 	addi	r8,r8,8
   48120:	e440110e 	bge	fp,r17,48168 <___vfprintf_internal_r+0xfc8>
   48124:	18c00404 	addi	r3,r3,16
   48128:	10800044 	addi	r2,r2,1
   4812c:	45000015 	stw	r20,0(r8)
   48130:	47000115 	stw	fp,4(r8)
   48134:	d8c02015 	stw	r3,128(sp)
   48138:	d8801f15 	stw	r2,124(sp)
   4813c:	98bff60e 	bge	r19,r2,48118 <__alt_data_end+0xfffe1018>
   48140:	d9801e04 	addi	r6,sp,120
   48144:	b80b883a 	mov	r5,r23
   48148:	8009883a 	mov	r4,r16
   4814c:	004e7280 	call	4e728 <__sprint_r>
   48150:	103d151e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48154:	8c7ffc04 	addi	r17,r17,-16
   48158:	d8c02017 	ldw	r3,128(sp)
   4815c:	d8801f17 	ldw	r2,124(sp)
   48160:	da000404 	addi	r8,sp,16
   48164:	e47fef16 	blt	fp,r17,48124 <__alt_data_end+0xfffe1024>
   48168:	9021883a 	mov	r16,r18
   4816c:	a825883a 	mov	r18,r21
   48170:	b02b883a 	mov	r21,r22
   48174:	882d883a 	mov	r22,r17
   48178:	dc403017 	ldw	r17,192(sp)
   4817c:	d9002b17 	ldw	r4,172(sp)
   48180:	1d87883a 	add	r3,r3,r22
   48184:	10800044 	addi	r2,r2,1
   48188:	41000015 	stw	r4,0(r8)
   4818c:	45800115 	stw	r22,4(r8)
   48190:	d8c02015 	stw	r3,128(sp)
   48194:	d8801f15 	stw	r2,124(sp)
   48198:	010001c4 	movi	r4,7
   4819c:	20818e16 	blt	r4,r2,487d8 <___vfprintf_internal_r+0x1638>
   481a0:	42000204 	addi	r8,r8,8
   481a4:	003e3106 	br	47a6c <__alt_data_end+0xfffe096c>
   481a8:	d9403317 	ldw	r5,204(sp)
   481ac:	00800044 	movi	r2,1
   481b0:	18c00044 	addi	r3,r3,1
   481b4:	1141530e 	bge	r2,r5,48704 <___vfprintf_internal_r+0x1564>
   481b8:	dc401f17 	ldw	r17,124(sp)
   481bc:	00800044 	movi	r2,1
   481c0:	40800115 	stw	r2,4(r8)
   481c4:	8c400044 	addi	r17,r17,1
   481c8:	44000015 	stw	r16,0(r8)
   481cc:	d8c02015 	stw	r3,128(sp)
   481d0:	dc401f15 	stw	r17,124(sp)
   481d4:	008001c4 	movi	r2,7
   481d8:	14416b16 	blt	r2,r17,48788 <___vfprintf_internal_r+0x15e8>
   481dc:	42000204 	addi	r8,r8,8
   481e0:	d8803717 	ldw	r2,220(sp)
   481e4:	d9003417 	ldw	r4,208(sp)
   481e8:	8c400044 	addi	r17,r17,1
   481ec:	10c7883a 	add	r3,r2,r3
   481f0:	40800115 	stw	r2,4(r8)
   481f4:	41000015 	stw	r4,0(r8)
   481f8:	d8c02015 	stw	r3,128(sp)
   481fc:	dc401f15 	stw	r17,124(sp)
   48200:	008001c4 	movi	r2,7
   48204:	14416916 	blt	r2,r17,487ac <___vfprintf_internal_r+0x160c>
   48208:	45800204 	addi	r22,r8,8
   4820c:	d9003617 	ldw	r4,216(sp)
   48210:	d9403817 	ldw	r5,224(sp)
   48214:	000d883a 	mov	r6,zero
   48218:	000f883a 	mov	r7,zero
   4821c:	d8c03c15 	stw	r3,240(sp)
   48220:	00459c80 	call	459c8 <__eqdf2>
   48224:	d8c03c17 	ldw	r3,240(sp)
   48228:	1000bc26 	beq	r2,zero,4851c <___vfprintf_internal_r+0x137c>
   4822c:	d9403317 	ldw	r5,204(sp)
   48230:	84000044 	addi	r16,r16,1
   48234:	8c400044 	addi	r17,r17,1
   48238:	28bfffc4 	addi	r2,r5,-1
   4823c:	1887883a 	add	r3,r3,r2
   48240:	b0800115 	stw	r2,4(r22)
   48244:	b4000015 	stw	r16,0(r22)
   48248:	d8c02015 	stw	r3,128(sp)
   4824c:	dc401f15 	stw	r17,124(sp)
   48250:	008001c4 	movi	r2,7
   48254:	14414316 	blt	r2,r17,48764 <___vfprintf_internal_r+0x15c4>
   48258:	b5800204 	addi	r22,r22,8
   4825c:	d9003a17 	ldw	r4,232(sp)
   48260:	df0022c4 	addi	fp,sp,139
   48264:	8c400044 	addi	r17,r17,1
   48268:	20c7883a 	add	r3,r4,r3
   4826c:	b7000015 	stw	fp,0(r22)
   48270:	b1000115 	stw	r4,4(r22)
   48274:	d8c02015 	stw	r3,128(sp)
   48278:	dc401f15 	stw	r17,124(sp)
   4827c:	008001c4 	movi	r2,7
   48280:	14400e16 	blt	r2,r17,482bc <___vfprintf_internal_r+0x111c>
   48284:	b2000204 	addi	r8,r22,8
   48288:	003e3a06 	br	47b74 <__alt_data_end+0xfffe0a74>
   4828c:	01000174 	movhi	r4,5
   48290:	21173a84 	addi	r4,r4,23786
   48294:	d9002b15 	stw	r4,172(sp)
   48298:	d9002b17 	ldw	r4,172(sp)
   4829c:	1c07883a 	add	r3,r3,r16
   482a0:	44000115 	stw	r16,4(r8)
   482a4:	41000015 	stw	r4,0(r8)
   482a8:	10800044 	addi	r2,r2,1
   482ac:	d8c02015 	stw	r3,128(sp)
   482b0:	d8801f15 	stw	r2,124(sp)
   482b4:	010001c4 	movi	r4,7
   482b8:	20be2d0e 	bge	r4,r2,47b70 <__alt_data_end+0xfffe0a70>
   482bc:	d9002c17 	ldw	r4,176(sp)
   482c0:	d9801e04 	addi	r6,sp,120
   482c4:	b80b883a 	mov	r5,r23
   482c8:	004e7280 	call	4e728 <__sprint_r>
   482cc:	103cb61e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   482d0:	d8c02017 	ldw	r3,128(sp)
   482d4:	da000404 	addi	r8,sp,16
   482d8:	003e2606 	br	47b74 <__alt_data_end+0xfffe0a74>
   482dc:	d9002c17 	ldw	r4,176(sp)
   482e0:	d9801e04 	addi	r6,sp,120
   482e4:	b80b883a 	mov	r5,r23
   482e8:	004e7280 	call	4e728 <__sprint_r>
   482ec:	103e5d26 	beq	r2,zero,47c64 <__alt_data_end+0xfffe0b64>
   482f0:	003cad06 	br	475a8 <__alt_data_end+0xfffe04a8>
   482f4:	d9002c17 	ldw	r4,176(sp)
   482f8:	d9801e04 	addi	r6,sp,120
   482fc:	b80b883a 	mov	r5,r23
   48300:	004e7280 	call	4e728 <__sprint_r>
   48304:	103ca81e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48308:	d8c02017 	ldw	r3,128(sp)
   4830c:	da000404 	addi	r8,sp,16
   48310:	003e0b06 	br	47b40 <__alt_data_end+0xfffe0a40>
   48314:	d9002c17 	ldw	r4,176(sp)
   48318:	d9801e04 	addi	r6,sp,120
   4831c:	b80b883a 	mov	r5,r23
   48320:	004e7280 	call	4e728 <__sprint_r>
   48324:	103ca01e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48328:	d8c02017 	ldw	r3,128(sp)
   4832c:	da000404 	addi	r8,sp,16
   48330:	003dbd06 	br	47a28 <__alt_data_end+0xfffe0928>
   48334:	d9002c17 	ldw	r4,176(sp)
   48338:	d9801e04 	addi	r6,sp,120
   4833c:	b80b883a 	mov	r5,r23
   48340:	004e7280 	call	4e728 <__sprint_r>
   48344:	103c981e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48348:	d8c02017 	ldw	r3,128(sp)
   4834c:	da000404 	addi	r8,sp,16
   48350:	003dc306 	br	47a60 <__alt_data_end+0xfffe0960>
   48354:	d8802917 	ldw	r2,164(sp)
   48358:	d8002785 	stb	zero,158(sp)
   4835c:	103f0616 	blt	r2,zero,47f78 <__alt_data_end+0xfffe0e78>
   48360:	00ffdfc4 	movi	r3,-129
   48364:	9d84b03a 	or	r2,r19,r22
   48368:	90e4703a 	and	r18,r18,r3
   4836c:	103c6b26 	beq	r2,zero,4751c <__alt_data_end+0xfffe041c>
   48370:	0039883a 	mov	fp,zero
   48374:	003e7406 	br	47d48 <__alt_data_end+0xfffe0c48>
   48378:	9080040c 	andi	r2,r18,16
   4837c:	1001b326 	beq	r2,zero,48a4c <___vfprintf_internal_r+0x18ac>
   48380:	d9002d17 	ldw	r4,180(sp)
   48384:	d9402917 	ldw	r5,164(sp)
   48388:	d8002785 	stb	zero,158(sp)
   4838c:	20800104 	addi	r2,r4,4
   48390:	24c00017 	ldw	r19,0(r4)
   48394:	002d883a 	mov	r22,zero
   48398:	2801b516 	blt	r5,zero,48a70 <___vfprintf_internal_r+0x18d0>
   4839c:	00ffdfc4 	movi	r3,-129
   483a0:	d8802d15 	stw	r2,180(sp)
   483a4:	90e4703a 	and	r18,r18,r3
   483a8:	983d2726 	beq	r19,zero,47848 <__alt_data_end+0xfffe0748>
   483ac:	0039883a 	mov	fp,zero
   483b0:	003d2a06 	br	4785c <__alt_data_end+0xfffe075c>
   483b4:	dc402617 	ldw	r17,152(sp)
   483b8:	0441d30e 	bge	zero,r17,48b08 <___vfprintf_internal_r+0x1968>
   483bc:	dc403217 	ldw	r17,200(sp)
   483c0:	d8803317 	ldw	r2,204(sp)
   483c4:	1440010e 	bge	r2,r17,483cc <___vfprintf_internal_r+0x122c>
   483c8:	1023883a 	mov	r17,r2
   483cc:	04400a0e 	bge	zero,r17,483f8 <___vfprintf_internal_r+0x1258>
   483d0:	d8801f17 	ldw	r2,124(sp)
   483d4:	1c47883a 	add	r3,r3,r17
   483d8:	44000015 	stw	r16,0(r8)
   483dc:	10800044 	addi	r2,r2,1
   483e0:	44400115 	stw	r17,4(r8)
   483e4:	d8c02015 	stw	r3,128(sp)
   483e8:	d8801f15 	stw	r2,124(sp)
   483ec:	010001c4 	movi	r4,7
   483f0:	20826516 	blt	r4,r2,48d88 <___vfprintf_internal_r+0x1be8>
   483f4:	42000204 	addi	r8,r8,8
   483f8:	88026116 	blt	r17,zero,48d80 <___vfprintf_internal_r+0x1be0>
   483fc:	d9003217 	ldw	r4,200(sp)
   48400:	2463c83a 	sub	r17,r4,r17
   48404:	04407b0e 	bge	zero,r17,485f4 <___vfprintf_internal_r+0x1454>
   48408:	05800404 	movi	r22,16
   4840c:	d8801f17 	ldw	r2,124(sp)
   48410:	b4419d0e 	bge	r22,r17,48a88 <___vfprintf_internal_r+0x18e8>
   48414:	01000174 	movhi	r4,5
   48418:	21173a84 	addi	r4,r4,23786
   4841c:	d9002b15 	stw	r4,172(sp)
   48420:	070001c4 	movi	fp,7
   48424:	dcc02c17 	ldw	r19,176(sp)
   48428:	00000306 	br	48438 <___vfprintf_internal_r+0x1298>
   4842c:	42000204 	addi	r8,r8,8
   48430:	8c7ffc04 	addi	r17,r17,-16
   48434:	b441970e 	bge	r22,r17,48a94 <___vfprintf_internal_r+0x18f4>
   48438:	18c00404 	addi	r3,r3,16
   4843c:	10800044 	addi	r2,r2,1
   48440:	45000015 	stw	r20,0(r8)
   48444:	45800115 	stw	r22,4(r8)
   48448:	d8c02015 	stw	r3,128(sp)
   4844c:	d8801f15 	stw	r2,124(sp)
   48450:	e0bff60e 	bge	fp,r2,4842c <__alt_data_end+0xfffe132c>
   48454:	d9801e04 	addi	r6,sp,120
   48458:	b80b883a 	mov	r5,r23
   4845c:	9809883a 	mov	r4,r19
   48460:	004e7280 	call	4e728 <__sprint_r>
   48464:	103c501e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48468:	d8c02017 	ldw	r3,128(sp)
   4846c:	d8801f17 	ldw	r2,124(sp)
   48470:	da000404 	addi	r8,sp,16
   48474:	003fee06 	br	48430 <__alt_data_end+0xfffe1330>
   48478:	d9002c17 	ldw	r4,176(sp)
   4847c:	d9801e04 	addi	r6,sp,120
   48480:	b80b883a 	mov	r5,r23
   48484:	004e7280 	call	4e728 <__sprint_r>
   48488:	103c471e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   4848c:	d8c02017 	ldw	r3,128(sp)
   48490:	df002787 	ldb	fp,158(sp)
   48494:	da000404 	addi	r8,sp,16
   48498:	003d5606 	br	479f4 <__alt_data_end+0xfffe08f4>
   4849c:	9080040c 	andi	r2,r18,16
   484a0:	10016126 	beq	r2,zero,48a28 <___vfprintf_internal_r+0x1888>
   484a4:	d8802d17 	ldw	r2,180(sp)
   484a8:	14c00017 	ldw	r19,0(r2)
   484ac:	10800104 	addi	r2,r2,4
   484b0:	d8802d15 	stw	r2,180(sp)
   484b4:	982dd7fa 	srai	r22,r19,31
   484b8:	b005883a 	mov	r2,r22
   484bc:	003c8206 	br	476c8 <__alt_data_end+0xfffe05c8>
   484c0:	9080040c 	andi	r2,r18,16
   484c4:	10003526 	beq	r2,zero,4859c <___vfprintf_internal_r+0x13fc>
   484c8:	d9402d17 	ldw	r5,180(sp)
   484cc:	d8c02917 	ldw	r3,164(sp)
   484d0:	d8002785 	stb	zero,158(sp)
   484d4:	28800104 	addi	r2,r5,4
   484d8:	2cc00017 	ldw	r19,0(r5)
   484dc:	002d883a 	mov	r22,zero
   484e0:	18003716 	blt	r3,zero,485c0 <___vfprintf_internal_r+0x1420>
   484e4:	00ffdfc4 	movi	r3,-129
   484e8:	d8802d15 	stw	r2,180(sp)
   484ec:	90e4703a 	and	r18,r18,r3
   484f0:	0039883a 	mov	fp,zero
   484f4:	983df326 	beq	r19,zero,47cc4 <__alt_data_end+0xfffe0bc4>
   484f8:	00800244 	movi	r2,9
   484fc:	14fc7b36 	bltu	r2,r19,476ec <__alt_data_end+0xfffe05ec>
   48500:	d8c02817 	ldw	r3,160(sp)
   48504:	dc001dc4 	addi	r16,sp,119
   48508:	9cc00c04 	addi	r19,r19,48
   4850c:	1c07c83a 	sub	r3,r3,r16
   48510:	dcc01dc5 	stb	r19,119(sp)
   48514:	d8c02e15 	stw	r3,184(sp)
   48518:	003ce806 	br	478bc <__alt_data_end+0xfffe07bc>
   4851c:	d8803317 	ldw	r2,204(sp)
   48520:	143fffc4 	addi	r16,r2,-1
   48524:	043f4d0e 	bge	zero,r16,4825c <__alt_data_end+0xfffe115c>
   48528:	07000404 	movi	fp,16
   4852c:	e400810e 	bge	fp,r16,48734 <___vfprintf_internal_r+0x1594>
   48530:	01400174 	movhi	r5,5
   48534:	29573a84 	addi	r5,r5,23786
   48538:	d9402b15 	stw	r5,172(sp)
   4853c:	01c001c4 	movi	r7,7
   48540:	dcc02c17 	ldw	r19,176(sp)
   48544:	00000306 	br	48554 <___vfprintf_internal_r+0x13b4>
   48548:	b5800204 	addi	r22,r22,8
   4854c:	843ffc04 	addi	r16,r16,-16
   48550:	e4007b0e 	bge	fp,r16,48740 <___vfprintf_internal_r+0x15a0>
   48554:	18c00404 	addi	r3,r3,16
   48558:	8c400044 	addi	r17,r17,1
   4855c:	b5000015 	stw	r20,0(r22)
   48560:	b7000115 	stw	fp,4(r22)
   48564:	d8c02015 	stw	r3,128(sp)
   48568:	dc401f15 	stw	r17,124(sp)
   4856c:	3c7ff60e 	bge	r7,r17,48548 <__alt_data_end+0xfffe1448>
   48570:	d9801e04 	addi	r6,sp,120
   48574:	b80b883a 	mov	r5,r23
   48578:	9809883a 	mov	r4,r19
   4857c:	d9c03c15 	stw	r7,240(sp)
   48580:	004e7280 	call	4e728 <__sprint_r>
   48584:	d9c03c17 	ldw	r7,240(sp)
   48588:	103c071e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   4858c:	d8c02017 	ldw	r3,128(sp)
   48590:	dc401f17 	ldw	r17,124(sp)
   48594:	dd800404 	addi	r22,sp,16
   48598:	003fec06 	br	4854c <__alt_data_end+0xfffe144c>
   4859c:	9080100c 	andi	r2,r18,64
   485a0:	d8002785 	stb	zero,158(sp)
   485a4:	10010e26 	beq	r2,zero,489e0 <___vfprintf_internal_r+0x1840>
   485a8:	d9002d17 	ldw	r4,180(sp)
   485ac:	d9402917 	ldw	r5,164(sp)
   485b0:	002d883a 	mov	r22,zero
   485b4:	20800104 	addi	r2,r4,4
   485b8:	24c0000b 	ldhu	r19,0(r4)
   485bc:	283fc90e 	bge	r5,zero,484e4 <__alt_data_end+0xfffe13e4>
   485c0:	d8802d15 	stw	r2,180(sp)
   485c4:	0039883a 	mov	fp,zero
   485c8:	9d84b03a 	or	r2,r19,r22
   485cc:	103c461e 	bne	r2,zero,476e8 <__alt_data_end+0xfffe05e8>
   485d0:	00800044 	movi	r2,1
   485d4:	003e6c06 	br	47f88 <__alt_data_end+0xfffe0e88>
   485d8:	d9002c17 	ldw	r4,176(sp)
   485dc:	d9801e04 	addi	r6,sp,120
   485e0:	b80b883a 	mov	r5,r23
   485e4:	004e7280 	call	4e728 <__sprint_r>
   485e8:	103bef1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   485ec:	d8c02017 	ldw	r3,128(sp)
   485f0:	da000404 	addi	r8,sp,16
   485f4:	d9003217 	ldw	r4,200(sp)
   485f8:	d8802617 	ldw	r2,152(sp)
   485fc:	d9403317 	ldw	r5,204(sp)
   48600:	8123883a 	add	r17,r16,r4
   48604:	11400216 	blt	r2,r5,48610 <___vfprintf_internal_r+0x1470>
   48608:	9100004c 	andi	r4,r18,1
   4860c:	20000d26 	beq	r4,zero,48644 <___vfprintf_internal_r+0x14a4>
   48610:	d9003717 	ldw	r4,220(sp)
   48614:	d9403417 	ldw	r5,208(sp)
   48618:	1907883a 	add	r3,r3,r4
   4861c:	d9001f17 	ldw	r4,124(sp)
   48620:	41400015 	stw	r5,0(r8)
   48624:	d9403717 	ldw	r5,220(sp)
   48628:	21000044 	addi	r4,r4,1
   4862c:	d8c02015 	stw	r3,128(sp)
   48630:	41400115 	stw	r5,4(r8)
   48634:	d9001f15 	stw	r4,124(sp)
   48638:	014001c4 	movi	r5,7
   4863c:	2901e816 	blt	r5,r4,48de0 <___vfprintf_internal_r+0x1c40>
   48640:	42000204 	addi	r8,r8,8
   48644:	d9003317 	ldw	r4,204(sp)
   48648:	8121883a 	add	r16,r16,r4
   4864c:	2085c83a 	sub	r2,r4,r2
   48650:	8461c83a 	sub	r16,r16,r17
   48654:	1400010e 	bge	r2,r16,4865c <___vfprintf_internal_r+0x14bc>
   48658:	1021883a 	mov	r16,r2
   4865c:	04000a0e 	bge	zero,r16,48688 <___vfprintf_internal_r+0x14e8>
   48660:	d9001f17 	ldw	r4,124(sp)
   48664:	1c07883a 	add	r3,r3,r16
   48668:	44400015 	stw	r17,0(r8)
   4866c:	21000044 	addi	r4,r4,1
   48670:	44000115 	stw	r16,4(r8)
   48674:	d8c02015 	stw	r3,128(sp)
   48678:	d9001f15 	stw	r4,124(sp)
   4867c:	014001c4 	movi	r5,7
   48680:	2901fb16 	blt	r5,r4,48e70 <___vfprintf_internal_r+0x1cd0>
   48684:	42000204 	addi	r8,r8,8
   48688:	8001f716 	blt	r16,zero,48e68 <___vfprintf_internal_r+0x1cc8>
   4868c:	1421c83a 	sub	r16,r2,r16
   48690:	043d380e 	bge	zero,r16,47b74 <__alt_data_end+0xfffe0a74>
   48694:	04400404 	movi	r17,16
   48698:	d8801f17 	ldw	r2,124(sp)
   4869c:	8c3efb0e 	bge	r17,r16,4828c <__alt_data_end+0xfffe118c>
   486a0:	01400174 	movhi	r5,5
   486a4:	29573a84 	addi	r5,r5,23786
   486a8:	d9402b15 	stw	r5,172(sp)
   486ac:	058001c4 	movi	r22,7
   486b0:	dcc02c17 	ldw	r19,176(sp)
   486b4:	00000306 	br	486c4 <___vfprintf_internal_r+0x1524>
   486b8:	42000204 	addi	r8,r8,8
   486bc:	843ffc04 	addi	r16,r16,-16
   486c0:	8c3ef50e 	bge	r17,r16,48298 <__alt_data_end+0xfffe1198>
   486c4:	18c00404 	addi	r3,r3,16
   486c8:	10800044 	addi	r2,r2,1
   486cc:	45000015 	stw	r20,0(r8)
   486d0:	44400115 	stw	r17,4(r8)
   486d4:	d8c02015 	stw	r3,128(sp)
   486d8:	d8801f15 	stw	r2,124(sp)
   486dc:	b0bff60e 	bge	r22,r2,486b8 <__alt_data_end+0xfffe15b8>
   486e0:	d9801e04 	addi	r6,sp,120
   486e4:	b80b883a 	mov	r5,r23
   486e8:	9809883a 	mov	r4,r19
   486ec:	004e7280 	call	4e728 <__sprint_r>
   486f0:	103bad1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   486f4:	d8c02017 	ldw	r3,128(sp)
   486f8:	d8801f17 	ldw	r2,124(sp)
   486fc:	da000404 	addi	r8,sp,16
   48700:	003fee06 	br	486bc <__alt_data_end+0xfffe15bc>
   48704:	9088703a 	and	r4,r18,r2
   48708:	203eab1e 	bne	r4,zero,481b8 <__alt_data_end+0xfffe10b8>
   4870c:	dc401f17 	ldw	r17,124(sp)
   48710:	40800115 	stw	r2,4(r8)
   48714:	44000015 	stw	r16,0(r8)
   48718:	8c400044 	addi	r17,r17,1
   4871c:	d8c02015 	stw	r3,128(sp)
   48720:	dc401f15 	stw	r17,124(sp)
   48724:	008001c4 	movi	r2,7
   48728:	14400e16 	blt	r2,r17,48764 <___vfprintf_internal_r+0x15c4>
   4872c:	45800204 	addi	r22,r8,8
   48730:	003eca06 	br	4825c <__alt_data_end+0xfffe115c>
   48734:	01000174 	movhi	r4,5
   48738:	21173a84 	addi	r4,r4,23786
   4873c:	d9002b15 	stw	r4,172(sp)
   48740:	d8802b17 	ldw	r2,172(sp)
   48744:	1c07883a 	add	r3,r3,r16
   48748:	8c400044 	addi	r17,r17,1
   4874c:	b0800015 	stw	r2,0(r22)
   48750:	b4000115 	stw	r16,4(r22)
   48754:	d8c02015 	stw	r3,128(sp)
   48758:	dc401f15 	stw	r17,124(sp)
   4875c:	008001c4 	movi	r2,7
   48760:	147ebd0e 	bge	r2,r17,48258 <__alt_data_end+0xfffe1158>
   48764:	d9002c17 	ldw	r4,176(sp)
   48768:	d9801e04 	addi	r6,sp,120
   4876c:	b80b883a 	mov	r5,r23
   48770:	004e7280 	call	4e728 <__sprint_r>
   48774:	103b8c1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48778:	d8c02017 	ldw	r3,128(sp)
   4877c:	dc401f17 	ldw	r17,124(sp)
   48780:	dd800404 	addi	r22,sp,16
   48784:	003eb506 	br	4825c <__alt_data_end+0xfffe115c>
   48788:	d9002c17 	ldw	r4,176(sp)
   4878c:	d9801e04 	addi	r6,sp,120
   48790:	b80b883a 	mov	r5,r23
   48794:	004e7280 	call	4e728 <__sprint_r>
   48798:	103b831e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   4879c:	d8c02017 	ldw	r3,128(sp)
   487a0:	dc401f17 	ldw	r17,124(sp)
   487a4:	da000404 	addi	r8,sp,16
   487a8:	003e8d06 	br	481e0 <__alt_data_end+0xfffe10e0>
   487ac:	d9002c17 	ldw	r4,176(sp)
   487b0:	d9801e04 	addi	r6,sp,120
   487b4:	b80b883a 	mov	r5,r23
   487b8:	004e7280 	call	4e728 <__sprint_r>
   487bc:	103b7a1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   487c0:	d8c02017 	ldw	r3,128(sp)
   487c4:	dc401f17 	ldw	r17,124(sp)
   487c8:	dd800404 	addi	r22,sp,16
   487cc:	003e8f06 	br	4820c <__alt_data_end+0xfffe110c>
   487d0:	0027883a 	mov	r19,zero
   487d4:	003f4a06 	br	48500 <__alt_data_end+0xfffe1400>
   487d8:	d9002c17 	ldw	r4,176(sp)
   487dc:	d9801e04 	addi	r6,sp,120
   487e0:	b80b883a 	mov	r5,r23
   487e4:	004e7280 	call	4e728 <__sprint_r>
   487e8:	103b6f1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   487ec:	d8c02017 	ldw	r3,128(sp)
   487f0:	da000404 	addi	r8,sp,16
   487f4:	003c9d06 	br	47a6c <__alt_data_end+0xfffe096c>
   487f8:	04e7c83a 	sub	r19,zero,r19
   487fc:	9804c03a 	cmpne	r2,r19,zero
   48800:	05adc83a 	sub	r22,zero,r22
   48804:	b0adc83a 	sub	r22,r22,r2
   48808:	d8802917 	ldw	r2,164(sp)
   4880c:	07000b44 	movi	fp,45
   48810:	df002785 	stb	fp,158(sp)
   48814:	10017b16 	blt	r2,zero,48e04 <___vfprintf_internal_r+0x1c64>
   48818:	00bfdfc4 	movi	r2,-129
   4881c:	90a4703a 	and	r18,r18,r2
   48820:	003bb106 	br	476e8 <__alt_data_end+0xfffe05e8>
   48824:	d9003617 	ldw	r4,216(sp)
   48828:	d9403817 	ldw	r5,224(sp)
   4882c:	da003d15 	stw	r8,244(sp)
   48830:	00430980 	call	43098 <__fpclassifyd>
   48834:	da003d17 	ldw	r8,244(sp)
   48838:	1000f026 	beq	r2,zero,48bfc <___vfprintf_internal_r+0x1a5c>
   4883c:	d9002917 	ldw	r4,164(sp)
   48840:	05bff7c4 	movi	r22,-33
   48844:	00bfffc4 	movi	r2,-1
   48848:	8dac703a 	and	r22,r17,r22
   4884c:	20820026 	beq	r4,r2,49050 <___vfprintf_internal_r+0x1eb0>
   48850:	008011c4 	movi	r2,71
   48854:	b081f726 	beq	r22,r2,49034 <___vfprintf_internal_r+0x1e94>
   48858:	d9003817 	ldw	r4,224(sp)
   4885c:	90c04014 	ori	r3,r18,256
   48860:	d8c02b15 	stw	r3,172(sp)
   48864:	20021516 	blt	r4,zero,490bc <___vfprintf_internal_r+0x1f1c>
   48868:	dcc03817 	ldw	r19,224(sp)
   4886c:	d8002a05 	stb	zero,168(sp)
   48870:	00801984 	movi	r2,102
   48874:	8881f926 	beq	r17,r2,4905c <___vfprintf_internal_r+0x1ebc>
   48878:	00801184 	movi	r2,70
   4887c:	88821c26 	beq	r17,r2,490f0 <___vfprintf_internal_r+0x1f50>
   48880:	00801144 	movi	r2,69
   48884:	b081ef26 	beq	r22,r2,49044 <___vfprintf_internal_r+0x1ea4>
   48888:	d8c02917 	ldw	r3,164(sp)
   4888c:	d8802104 	addi	r2,sp,132
   48890:	d8800315 	stw	r2,12(sp)
   48894:	d9403617 	ldw	r5,216(sp)
   48898:	d8802504 	addi	r2,sp,148
   4889c:	d9002c17 	ldw	r4,176(sp)
   488a0:	d8800215 	stw	r2,8(sp)
   488a4:	d8802604 	addi	r2,sp,152
   488a8:	d8c00015 	stw	r3,0(sp)
   488ac:	d8800115 	stw	r2,4(sp)
   488b0:	01c00084 	movi	r7,2
   488b4:	980d883a 	mov	r6,r19
   488b8:	d8c03c15 	stw	r3,240(sp)
   488bc:	da003d15 	stw	r8,244(sp)
   488c0:	00497c40 	call	497c4 <_dtoa_r>
   488c4:	1021883a 	mov	r16,r2
   488c8:	008019c4 	movi	r2,103
   488cc:	d8c03c17 	ldw	r3,240(sp)
   488d0:	da003d17 	ldw	r8,244(sp)
   488d4:	88817126 	beq	r17,r2,48e9c <___vfprintf_internal_r+0x1cfc>
   488d8:	008011c4 	movi	r2,71
   488dc:	88829226 	beq	r17,r2,49328 <___vfprintf_internal_r+0x2188>
   488e0:	80f9883a 	add	fp,r16,r3
   488e4:	d9003617 	ldw	r4,216(sp)
   488e8:	000d883a 	mov	r6,zero
   488ec:	000f883a 	mov	r7,zero
   488f0:	980b883a 	mov	r5,r19
   488f4:	da003d15 	stw	r8,244(sp)
   488f8:	00459c80 	call	459c8 <__eqdf2>
   488fc:	da003d17 	ldw	r8,244(sp)
   48900:	10018d26 	beq	r2,zero,48f38 <___vfprintf_internal_r+0x1d98>
   48904:	d8802117 	ldw	r2,132(sp)
   48908:	1700062e 	bgeu	r2,fp,48924 <___vfprintf_internal_r+0x1784>
   4890c:	01000c04 	movi	r4,48
   48910:	10c00044 	addi	r3,r2,1
   48914:	d8c02115 	stw	r3,132(sp)
   48918:	11000005 	stb	r4,0(r2)
   4891c:	d8802117 	ldw	r2,132(sp)
   48920:	173ffb36 	bltu	r2,fp,48910 <__alt_data_end+0xfffe1810>
   48924:	1405c83a 	sub	r2,r2,r16
   48928:	d8803315 	stw	r2,204(sp)
   4892c:	008011c4 	movi	r2,71
   48930:	b0817626 	beq	r22,r2,48f0c <___vfprintf_internal_r+0x1d6c>
   48934:	00801944 	movi	r2,101
   48938:	1442810e 	bge	r2,r17,49340 <___vfprintf_internal_r+0x21a0>
   4893c:	d8c02617 	ldw	r3,152(sp)
   48940:	00801984 	movi	r2,102
   48944:	d8c03215 	stw	r3,200(sp)
   48948:	8881fe26 	beq	r17,r2,49144 <___vfprintf_internal_r+0x1fa4>
   4894c:	d8c03217 	ldw	r3,200(sp)
   48950:	d9003317 	ldw	r4,204(sp)
   48954:	1901dd16 	blt	r3,r4,490cc <___vfprintf_internal_r+0x1f2c>
   48958:	9480004c 	andi	r18,r18,1
   4895c:	90022b1e 	bne	r18,zero,4920c <___vfprintf_internal_r+0x206c>
   48960:	1805883a 	mov	r2,r3
   48964:	18028016 	blt	r3,zero,49368 <___vfprintf_internal_r+0x21c8>
   48968:	d8c03217 	ldw	r3,200(sp)
   4896c:	044019c4 	movi	r17,103
   48970:	d8c02e15 	stw	r3,184(sp)
   48974:	df002a07 	ldb	fp,168(sp)
   48978:	e001531e 	bne	fp,zero,48ec8 <___vfprintf_internal_r+0x1d28>
   4897c:	df002783 	ldbu	fp,158(sp)
   48980:	d8802a15 	stw	r2,168(sp)
   48984:	dc802b17 	ldw	r18,172(sp)
   48988:	d8002915 	stw	zero,164(sp)
   4898c:	003bd106 	br	478d4 <__alt_data_end+0xfffe07d4>
   48990:	d8802d17 	ldw	r2,180(sp)
   48994:	d8c02d17 	ldw	r3,180(sp)
   48998:	d9002d17 	ldw	r4,180(sp)
   4899c:	10800017 	ldw	r2,0(r2)
   489a0:	18c00117 	ldw	r3,4(r3)
   489a4:	21000204 	addi	r4,r4,8
   489a8:	d8803615 	stw	r2,216(sp)
   489ac:	d8c03815 	stw	r3,224(sp)
   489b0:	d9002d15 	stw	r4,180(sp)
   489b4:	003b7506 	br	4778c <__alt_data_end+0xfffe068c>
   489b8:	ac400007 	ldb	r17,0(r21)
   489bc:	003a5906 	br	47324 <__alt_data_end+0xfffe0224>
   489c0:	9080100c 	andi	r2,r18,64
   489c4:	1000a826 	beq	r2,zero,48c68 <___vfprintf_internal_r+0x1ac8>
   489c8:	d9002d17 	ldw	r4,180(sp)
   489cc:	002d883a 	mov	r22,zero
   489d0:	24c0000b 	ldhu	r19,0(r4)
   489d4:	21000104 	addi	r4,r4,4
   489d8:	d9002d15 	stw	r4,180(sp)
   489dc:	003ccb06 	br	47d0c <__alt_data_end+0xfffe0c0c>
   489e0:	d8c02d17 	ldw	r3,180(sp)
   489e4:	d9002917 	ldw	r4,164(sp)
   489e8:	002d883a 	mov	r22,zero
   489ec:	18800104 	addi	r2,r3,4
   489f0:	1cc00017 	ldw	r19,0(r3)
   489f4:	203ebb0e 	bge	r4,zero,484e4 <__alt_data_end+0xfffe13e4>
   489f8:	003ef106 	br	485c0 <__alt_data_end+0xfffe14c0>
   489fc:	9080040c 	andi	r2,r18,16
   48a00:	1000921e 	bne	r2,zero,48c4c <___vfprintf_internal_r+0x1aac>
   48a04:	9480100c 	andi	r18,r18,64
   48a08:	90013926 	beq	r18,zero,48ef0 <___vfprintf_internal_r+0x1d50>
   48a0c:	d9002d17 	ldw	r4,180(sp)
   48a10:	d9402f17 	ldw	r5,188(sp)
   48a14:	20800017 	ldw	r2,0(r4)
   48a18:	21000104 	addi	r4,r4,4
   48a1c:	d9002d15 	stw	r4,180(sp)
   48a20:	1140000d 	sth	r5,0(r2)
   48a24:	003a1606 	br	47280 <__alt_data_end+0xfffe0180>
   48a28:	9080100c 	andi	r2,r18,64
   48a2c:	10008026 	beq	r2,zero,48c30 <___vfprintf_internal_r+0x1a90>
   48a30:	d8c02d17 	ldw	r3,180(sp)
   48a34:	1cc0000f 	ldh	r19,0(r3)
   48a38:	18c00104 	addi	r3,r3,4
   48a3c:	d8c02d15 	stw	r3,180(sp)
   48a40:	982dd7fa 	srai	r22,r19,31
   48a44:	b005883a 	mov	r2,r22
   48a48:	003b1f06 	br	476c8 <__alt_data_end+0xfffe05c8>
   48a4c:	9080100c 	andi	r2,r18,64
   48a50:	d8002785 	stb	zero,158(sp)
   48a54:	10008a1e 	bne	r2,zero,48c80 <___vfprintf_internal_r+0x1ae0>
   48a58:	d9402d17 	ldw	r5,180(sp)
   48a5c:	d8c02917 	ldw	r3,164(sp)
   48a60:	002d883a 	mov	r22,zero
   48a64:	28800104 	addi	r2,r5,4
   48a68:	2cc00017 	ldw	r19,0(r5)
   48a6c:	183e4b0e 	bge	r3,zero,4839c <__alt_data_end+0xfffe129c>
   48a70:	9d86b03a 	or	r3,r19,r22
   48a74:	d8802d15 	stw	r2,180(sp)
   48a78:	183e4c1e 	bne	r3,zero,483ac <__alt_data_end+0xfffe12ac>
   48a7c:	0039883a 	mov	fp,zero
   48a80:	0005883a 	mov	r2,zero
   48a84:	003d4006 	br	47f88 <__alt_data_end+0xfffe0e88>
   48a88:	01400174 	movhi	r5,5
   48a8c:	29573a84 	addi	r5,r5,23786
   48a90:	d9402b15 	stw	r5,172(sp)
   48a94:	d9402b17 	ldw	r5,172(sp)
   48a98:	1c47883a 	add	r3,r3,r17
   48a9c:	10800044 	addi	r2,r2,1
   48aa0:	41400015 	stw	r5,0(r8)
   48aa4:	44400115 	stw	r17,4(r8)
   48aa8:	d8c02015 	stw	r3,128(sp)
   48aac:	d8801f15 	stw	r2,124(sp)
   48ab0:	010001c4 	movi	r4,7
   48ab4:	20bec816 	blt	r4,r2,485d8 <__alt_data_end+0xfffe14d8>
   48ab8:	42000204 	addi	r8,r8,8
   48abc:	003ecd06 	br	485f4 <__alt_data_end+0xfffe14f4>
   48ac0:	d9002917 	ldw	r4,164(sp)
   48ac4:	d8002785 	stb	zero,158(sp)
   48ac8:	203d2d16 	blt	r4,zero,47f80 <__alt_data_end+0xfffe0e80>
   48acc:	00bfdfc4 	movi	r2,-129
   48ad0:	90a4703a 	and	r18,r18,r2
   48ad4:	003a9106 	br	4751c <__alt_data_end+0xfffe041c>
   48ad8:	01000174 	movhi	r4,5
   48adc:	21173a84 	addi	r4,r4,23786
   48ae0:	d9002b15 	stw	r4,172(sp)
   48ae4:	003c0c06 	br	47b18 <__alt_data_end+0xfffe0a18>
   48ae8:	d9002c17 	ldw	r4,176(sp)
   48aec:	d9801e04 	addi	r6,sp,120
   48af0:	b80b883a 	mov	r5,r23
   48af4:	004e7280 	call	4e728 <__sprint_r>
   48af8:	103aab1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48afc:	d8c02017 	ldw	r3,128(sp)
   48b00:	da000404 	addi	r8,sp,16
   48b04:	003d4106 	br	4800c <__alt_data_end+0xfffe0f0c>
   48b08:	d8801f17 	ldw	r2,124(sp)
   48b0c:	01400174 	movhi	r5,5
   48b10:	01000044 	movi	r4,1
   48b14:	18c00044 	addi	r3,r3,1
   48b18:	10800044 	addi	r2,r2,1
   48b1c:	29573a04 	addi	r5,r5,23784
   48b20:	41000115 	stw	r4,4(r8)
   48b24:	41400015 	stw	r5,0(r8)
   48b28:	d8c02015 	stw	r3,128(sp)
   48b2c:	d8801f15 	stw	r2,124(sp)
   48b30:	010001c4 	movi	r4,7
   48b34:	20805c16 	blt	r4,r2,48ca8 <___vfprintf_internal_r+0x1b08>
   48b38:	42000204 	addi	r8,r8,8
   48b3c:	8800041e 	bne	r17,zero,48b50 <___vfprintf_internal_r+0x19b0>
   48b40:	d8803317 	ldw	r2,204(sp)
   48b44:	1000021e 	bne	r2,zero,48b50 <___vfprintf_internal_r+0x19b0>
   48b48:	9080004c 	andi	r2,r18,1
   48b4c:	103c0926 	beq	r2,zero,47b74 <__alt_data_end+0xfffe0a74>
   48b50:	d9003717 	ldw	r4,220(sp)
   48b54:	d8801f17 	ldw	r2,124(sp)
   48b58:	d9403417 	ldw	r5,208(sp)
   48b5c:	20c7883a 	add	r3,r4,r3
   48b60:	10800044 	addi	r2,r2,1
   48b64:	41000115 	stw	r4,4(r8)
   48b68:	41400015 	stw	r5,0(r8)
   48b6c:	d8c02015 	stw	r3,128(sp)
   48b70:	d8801f15 	stw	r2,124(sp)
   48b74:	010001c4 	movi	r4,7
   48b78:	20812116 	blt	r4,r2,49000 <___vfprintf_internal_r+0x1e60>
   48b7c:	42000204 	addi	r8,r8,8
   48b80:	0463c83a 	sub	r17,zero,r17
   48b84:	0440730e 	bge	zero,r17,48d54 <___vfprintf_internal_r+0x1bb4>
   48b88:	05800404 	movi	r22,16
   48b8c:	b440860e 	bge	r22,r17,48da8 <___vfprintf_internal_r+0x1c08>
   48b90:	01400174 	movhi	r5,5
   48b94:	29573a84 	addi	r5,r5,23786
   48b98:	d9402b15 	stw	r5,172(sp)
   48b9c:	070001c4 	movi	fp,7
   48ba0:	dcc02c17 	ldw	r19,176(sp)
   48ba4:	00000306 	br	48bb4 <___vfprintf_internal_r+0x1a14>
   48ba8:	42000204 	addi	r8,r8,8
   48bac:	8c7ffc04 	addi	r17,r17,-16
   48bb0:	b440800e 	bge	r22,r17,48db4 <___vfprintf_internal_r+0x1c14>
   48bb4:	18c00404 	addi	r3,r3,16
   48bb8:	10800044 	addi	r2,r2,1
   48bbc:	45000015 	stw	r20,0(r8)
   48bc0:	45800115 	stw	r22,4(r8)
   48bc4:	d8c02015 	stw	r3,128(sp)
   48bc8:	d8801f15 	stw	r2,124(sp)
   48bcc:	e0bff60e 	bge	fp,r2,48ba8 <__alt_data_end+0xfffe1aa8>
   48bd0:	d9801e04 	addi	r6,sp,120
   48bd4:	b80b883a 	mov	r5,r23
   48bd8:	9809883a 	mov	r4,r19
   48bdc:	004e7280 	call	4e728 <__sprint_r>
   48be0:	103a711e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48be4:	d8c02017 	ldw	r3,128(sp)
   48be8:	d8801f17 	ldw	r2,124(sp)
   48bec:	da000404 	addi	r8,sp,16
   48bf0:	003fee06 	br	48bac <__alt_data_end+0xfffe1aac>
   48bf4:	00bfffc4 	movi	r2,-1
   48bf8:	003a6f06 	br	475b8 <__alt_data_end+0xfffe04b8>
   48bfc:	008011c4 	movi	r2,71
   48c00:	1440b816 	blt	r2,r17,48ee4 <___vfprintf_internal_r+0x1d44>
   48c04:	04000174 	movhi	r16,5
   48c08:	84172c04 	addi	r16,r16,23728
   48c0c:	00c000c4 	movi	r3,3
   48c10:	00bfdfc4 	movi	r2,-129
   48c14:	d8c02a15 	stw	r3,168(sp)
   48c18:	90a4703a 	and	r18,r18,r2
   48c1c:	df002783 	ldbu	fp,158(sp)
   48c20:	d8c02e15 	stw	r3,184(sp)
   48c24:	d8002915 	stw	zero,164(sp)
   48c28:	d8003215 	stw	zero,200(sp)
   48c2c:	003b2906 	br	478d4 <__alt_data_end+0xfffe07d4>
   48c30:	d9002d17 	ldw	r4,180(sp)
   48c34:	24c00017 	ldw	r19,0(r4)
   48c38:	21000104 	addi	r4,r4,4
   48c3c:	d9002d15 	stw	r4,180(sp)
   48c40:	982dd7fa 	srai	r22,r19,31
   48c44:	b005883a 	mov	r2,r22
   48c48:	003a9f06 	br	476c8 <__alt_data_end+0xfffe05c8>
   48c4c:	d9402d17 	ldw	r5,180(sp)
   48c50:	d8c02f17 	ldw	r3,188(sp)
   48c54:	28800017 	ldw	r2,0(r5)
   48c58:	29400104 	addi	r5,r5,4
   48c5c:	d9402d15 	stw	r5,180(sp)
   48c60:	10c00015 	stw	r3,0(r2)
   48c64:	00398606 	br	47280 <__alt_data_end+0xfffe0180>
   48c68:	d9402d17 	ldw	r5,180(sp)
   48c6c:	002d883a 	mov	r22,zero
   48c70:	2cc00017 	ldw	r19,0(r5)
   48c74:	29400104 	addi	r5,r5,4
   48c78:	d9402d15 	stw	r5,180(sp)
   48c7c:	003c2306 	br	47d0c <__alt_data_end+0xfffe0c0c>
   48c80:	d8c02d17 	ldw	r3,180(sp)
   48c84:	d9002917 	ldw	r4,164(sp)
   48c88:	002d883a 	mov	r22,zero
   48c8c:	18800104 	addi	r2,r3,4
   48c90:	1cc0000b 	ldhu	r19,0(r3)
   48c94:	203dc10e 	bge	r4,zero,4839c <__alt_data_end+0xfffe129c>
   48c98:	003f7506 	br	48a70 <__alt_data_end+0xfffe1970>
   48c9c:	04000174 	movhi	r16,5
   48ca0:	84172a04 	addi	r16,r16,23720
   48ca4:	003acc06 	br	477d8 <__alt_data_end+0xfffe06d8>
   48ca8:	d9002c17 	ldw	r4,176(sp)
   48cac:	d9801e04 	addi	r6,sp,120
   48cb0:	b80b883a 	mov	r5,r23
   48cb4:	004e7280 	call	4e728 <__sprint_r>
   48cb8:	103a3b1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48cbc:	dc402617 	ldw	r17,152(sp)
   48cc0:	d8c02017 	ldw	r3,128(sp)
   48cc4:	da000404 	addi	r8,sp,16
   48cc8:	003f9c06 	br	48b3c <__alt_data_end+0xfffe1a3c>
   48ccc:	ac400043 	ldbu	r17,1(r21)
   48cd0:	94800814 	ori	r18,r18,32
   48cd4:	ad400044 	addi	r21,r21,1
   48cd8:	8c403fcc 	andi	r17,r17,255
   48cdc:	8c40201c 	xori	r17,r17,128
   48ce0:	8c7fe004 	addi	r17,r17,-128
   48ce4:	00398f06 	br	47324 <__alt_data_end+0xfffe0224>
   48ce8:	d8c02d15 	stw	r3,180(sp)
   48cec:	0039883a 	mov	fp,zero
   48cf0:	003e3506 	br	485c8 <__alt_data_end+0xfffe14c8>
   48cf4:	d9002c17 	ldw	r4,176(sp)
   48cf8:	d9801e04 	addi	r6,sp,120
   48cfc:	b80b883a 	mov	r5,r23
   48d00:	004e7280 	call	4e728 <__sprint_r>
   48d04:	103a281e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48d08:	d8c02017 	ldw	r3,128(sp)
   48d0c:	da000404 	addi	r8,sp,16
   48d10:	003cd006 	br	48054 <__alt_data_end+0xfffe0f54>
   48d14:	8009883a 	mov	r4,r16
   48d18:	da003d15 	stw	r8,244(sp)
   48d1c:	00471080 	call	47108 <strlen>
   48d20:	d8802e15 	stw	r2,184(sp)
   48d24:	da003d17 	ldw	r8,244(sp)
   48d28:	103c340e 	bge	r2,zero,47dfc <__alt_data_end+0xfffe0cfc>
   48d2c:	0005883a 	mov	r2,zero
   48d30:	003c3206 	br	47dfc <__alt_data_end+0xfffe0cfc>
   48d34:	d9002c17 	ldw	r4,176(sp)
   48d38:	d9801e04 	addi	r6,sp,120
   48d3c:	b80b883a 	mov	r5,r23
   48d40:	004e7280 	call	4e728 <__sprint_r>
   48d44:	103a181e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48d48:	d8c02017 	ldw	r3,128(sp)
   48d4c:	d8801f17 	ldw	r2,124(sp)
   48d50:	da000404 	addi	r8,sp,16
   48d54:	d9403317 	ldw	r5,204(sp)
   48d58:	10800044 	addi	r2,r2,1
   48d5c:	44000015 	stw	r16,0(r8)
   48d60:	28c7883a 	add	r3,r5,r3
   48d64:	003b7d06 	br	47b5c <__alt_data_end+0xfffe0a5c>
   48d68:	01000174 	movhi	r4,5
   48d6c:	21173e84 	addi	r4,r4,23802
   48d70:	d9003515 	stw	r4,212(sp)
   48d74:	003b1406 	br	479c8 <__alt_data_end+0xfffe08c8>
   48d78:	013fffc4 	movi	r4,-1
   48d7c:	003a3506 	br	47654 <__alt_data_end+0xfffe0554>
   48d80:	0023883a 	mov	r17,zero
   48d84:	003d9d06 	br	483fc <__alt_data_end+0xfffe12fc>
   48d88:	d9002c17 	ldw	r4,176(sp)
   48d8c:	d9801e04 	addi	r6,sp,120
   48d90:	b80b883a 	mov	r5,r23
   48d94:	004e7280 	call	4e728 <__sprint_r>
   48d98:	103a031e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48d9c:	d8c02017 	ldw	r3,128(sp)
   48da0:	da000404 	addi	r8,sp,16
   48da4:	003d9406 	br	483f8 <__alt_data_end+0xfffe12f8>
   48da8:	01000174 	movhi	r4,5
   48dac:	21173a84 	addi	r4,r4,23786
   48db0:	d9002b15 	stw	r4,172(sp)
   48db4:	d9002b17 	ldw	r4,172(sp)
   48db8:	1c47883a 	add	r3,r3,r17
   48dbc:	10800044 	addi	r2,r2,1
   48dc0:	41000015 	stw	r4,0(r8)
   48dc4:	44400115 	stw	r17,4(r8)
   48dc8:	d8c02015 	stw	r3,128(sp)
   48dcc:	d8801f15 	stw	r2,124(sp)
   48dd0:	010001c4 	movi	r4,7
   48dd4:	20bfd716 	blt	r4,r2,48d34 <__alt_data_end+0xfffe1c34>
   48dd8:	42000204 	addi	r8,r8,8
   48ddc:	003fdd06 	br	48d54 <__alt_data_end+0xfffe1c54>
   48de0:	d9002c17 	ldw	r4,176(sp)
   48de4:	d9801e04 	addi	r6,sp,120
   48de8:	b80b883a 	mov	r5,r23
   48dec:	004e7280 	call	4e728 <__sprint_r>
   48df0:	1039ed1e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48df4:	d8802617 	ldw	r2,152(sp)
   48df8:	d8c02017 	ldw	r3,128(sp)
   48dfc:	da000404 	addi	r8,sp,16
   48e00:	003e1006 	br	48644 <__alt_data_end+0xfffe1544>
   48e04:	00800044 	movi	r2,1
   48e08:	10803fcc 	andi	r2,r2,255
   48e0c:	00c00044 	movi	r3,1
   48e10:	10fa3526 	beq	r2,r3,476e8 <__alt_data_end+0xfffe05e8>
   48e14:	00c00084 	movi	r3,2
   48e18:	10fbcb26 	beq	r2,r3,47d48 <__alt_data_end+0xfffe0c48>
   48e1c:	003a8f06 	br	4785c <__alt_data_end+0xfffe075c>
   48e20:	01000174 	movhi	r4,5
   48e24:	21173e84 	addi	r4,r4,23802
   48e28:	d9003515 	stw	r4,212(sp)
   48e2c:	003b7606 	br	47c08 <__alt_data_end+0xfffe0b08>
   48e30:	d8802917 	ldw	r2,164(sp)
   48e34:	00c00184 	movi	r3,6
   48e38:	1880012e 	bgeu	r3,r2,48e40 <___vfprintf_internal_r+0x1ca0>
   48e3c:	1805883a 	mov	r2,r3
   48e40:	d8802e15 	stw	r2,184(sp)
   48e44:	1000ef16 	blt	r2,zero,49204 <___vfprintf_internal_r+0x2064>
   48e48:	04000174 	movhi	r16,5
   48e4c:	d8802a15 	stw	r2,168(sp)
   48e50:	dcc02d15 	stw	r19,180(sp)
   48e54:	d8002915 	stw	zero,164(sp)
   48e58:	d8003215 	stw	zero,200(sp)
   48e5c:	84173804 	addi	r16,r16,23776
   48e60:	0039883a 	mov	fp,zero
   48e64:	003aa206 	br	478f0 <__alt_data_end+0xfffe07f0>
   48e68:	0021883a 	mov	r16,zero
   48e6c:	003e0706 	br	4868c <__alt_data_end+0xfffe158c>
   48e70:	d9002c17 	ldw	r4,176(sp)
   48e74:	d9801e04 	addi	r6,sp,120
   48e78:	b80b883a 	mov	r5,r23
   48e7c:	004e7280 	call	4e728 <__sprint_r>
   48e80:	1039c91e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   48e84:	d8802617 	ldw	r2,152(sp)
   48e88:	d9403317 	ldw	r5,204(sp)
   48e8c:	d8c02017 	ldw	r3,128(sp)
   48e90:	da000404 	addi	r8,sp,16
   48e94:	2885c83a 	sub	r2,r5,r2
   48e98:	003dfb06 	br	48688 <__alt_data_end+0xfffe1588>
   48e9c:	9080004c 	andi	r2,r18,1
   48ea0:	103e8f1e 	bne	r2,zero,488e0 <__alt_data_end+0xfffe17e0>
   48ea4:	d8802117 	ldw	r2,132(sp)
   48ea8:	003e9e06 	br	48924 <__alt_data_end+0xfffe1824>
   48eac:	1025883a 	mov	r18,r2
   48eb0:	0039883a 	mov	fp,zero
   48eb4:	00800084 	movi	r2,2
   48eb8:	003fd306 	br	48e08 <__alt_data_end+0xfffe1d08>
   48ebc:	07000b44 	movi	fp,45
   48ec0:	df002785 	stb	fp,158(sp)
   48ec4:	003a4006 	br	477c8 <__alt_data_end+0xfffe06c8>
   48ec8:	00c00b44 	movi	r3,45
   48ecc:	d8c02785 	stb	r3,158(sp)
   48ed0:	d8802a15 	stw	r2,168(sp)
   48ed4:	dc802b17 	ldw	r18,172(sp)
   48ed8:	d8002915 	stw	zero,164(sp)
   48edc:	07000b44 	movi	fp,45
   48ee0:	003a8006 	br	478e4 <__alt_data_end+0xfffe07e4>
   48ee4:	04000174 	movhi	r16,5
   48ee8:	84172d04 	addi	r16,r16,23732
   48eec:	003f4706 	br	48c0c <__alt_data_end+0xfffe1b0c>
   48ef0:	d8c02d17 	ldw	r3,180(sp)
   48ef4:	d9002f17 	ldw	r4,188(sp)
   48ef8:	18800017 	ldw	r2,0(r3)
   48efc:	18c00104 	addi	r3,r3,4
   48f00:	d8c02d15 	stw	r3,180(sp)
   48f04:	11000015 	stw	r4,0(r2)
   48f08:	0038dd06 	br	47280 <__alt_data_end+0xfffe0180>
   48f0c:	dd802617 	ldw	r22,152(sp)
   48f10:	00bfff44 	movi	r2,-3
   48f14:	b0801c16 	blt	r22,r2,48f88 <___vfprintf_internal_r+0x1de8>
   48f18:	d9402917 	ldw	r5,164(sp)
   48f1c:	2d801a16 	blt	r5,r22,48f88 <___vfprintf_internal_r+0x1de8>
   48f20:	dd803215 	stw	r22,200(sp)
   48f24:	003e8906 	br	4894c <__alt_data_end+0xfffe184c>
   48f28:	01000174 	movhi	r4,5
   48f2c:	21173a84 	addi	r4,r4,23786
   48f30:	d9002b15 	stw	r4,172(sp)
   48f34:	003c9106 	br	4817c <__alt_data_end+0xfffe107c>
   48f38:	e005883a 	mov	r2,fp
   48f3c:	003e7906 	br	48924 <__alt_data_end+0xfffe1824>
   48f40:	d9402917 	ldw	r5,164(sp)
   48f44:	df002783 	ldbu	fp,158(sp)
   48f48:	dcc02d15 	stw	r19,180(sp)
   48f4c:	d9402a15 	stw	r5,168(sp)
   48f50:	d9402e15 	stw	r5,184(sp)
   48f54:	d8002915 	stw	zero,164(sp)
   48f58:	d8003215 	stw	zero,200(sp)
   48f5c:	003a5d06 	br	478d4 <__alt_data_end+0xfffe07d4>
   48f60:	9080004c 	andi	r2,r18,1
   48f64:	0039883a 	mov	fp,zero
   48f68:	10000426 	beq	r2,zero,48f7c <___vfprintf_internal_r+0x1ddc>
   48f6c:	00800c04 	movi	r2,48
   48f70:	dc001dc4 	addi	r16,sp,119
   48f74:	d8801dc5 	stb	r2,119(sp)
   48f78:	003b8006 	br	47d7c <__alt_data_end+0xfffe0c7c>
   48f7c:	d8002e15 	stw	zero,184(sp)
   48f80:	dc001e04 	addi	r16,sp,120
   48f84:	003a4d06 	br	478bc <__alt_data_end+0xfffe07bc>
   48f88:	8c7fff84 	addi	r17,r17,-2
   48f8c:	b5bfffc4 	addi	r22,r22,-1
   48f90:	dd802615 	stw	r22,152(sp)
   48f94:	dc4022c5 	stb	r17,139(sp)
   48f98:	b000bf16 	blt	r22,zero,49298 <___vfprintf_internal_r+0x20f8>
   48f9c:	00800ac4 	movi	r2,43
   48fa0:	d8802305 	stb	r2,140(sp)
   48fa4:	00800244 	movi	r2,9
   48fa8:	15807016 	blt	r2,r22,4916c <___vfprintf_internal_r+0x1fcc>
   48fac:	00800c04 	movi	r2,48
   48fb0:	b5800c04 	addi	r22,r22,48
   48fb4:	d8802345 	stb	r2,141(sp)
   48fb8:	dd802385 	stb	r22,142(sp)
   48fbc:	d88023c4 	addi	r2,sp,143
   48fc0:	df0022c4 	addi	fp,sp,139
   48fc4:	d8c03317 	ldw	r3,204(sp)
   48fc8:	1739c83a 	sub	fp,r2,fp
   48fcc:	d9003317 	ldw	r4,204(sp)
   48fd0:	e0c7883a 	add	r3,fp,r3
   48fd4:	df003a15 	stw	fp,232(sp)
   48fd8:	d8c02e15 	stw	r3,184(sp)
   48fdc:	00800044 	movi	r2,1
   48fe0:	1100b30e 	bge	r2,r4,492b0 <___vfprintf_internal_r+0x2110>
   48fe4:	d8c02e17 	ldw	r3,184(sp)
   48fe8:	18c00044 	addi	r3,r3,1
   48fec:	d8c02e15 	stw	r3,184(sp)
   48ff0:	1805883a 	mov	r2,r3
   48ff4:	1800ac16 	blt	r3,zero,492a8 <___vfprintf_internal_r+0x2108>
   48ff8:	d8003215 	stw	zero,200(sp)
   48ffc:	003e5d06 	br	48974 <__alt_data_end+0xfffe1874>
   49000:	d9002c17 	ldw	r4,176(sp)
   49004:	d9801e04 	addi	r6,sp,120
   49008:	b80b883a 	mov	r5,r23
   4900c:	004e7280 	call	4e728 <__sprint_r>
   49010:	1039651e 	bne	r2,zero,475a8 <__alt_data_end+0xfffe04a8>
   49014:	dc402617 	ldw	r17,152(sp)
   49018:	d8c02017 	ldw	r3,128(sp)
   4901c:	d8801f17 	ldw	r2,124(sp)
   49020:	da000404 	addi	r8,sp,16
   49024:	003ed606 	br	48b80 <__alt_data_end+0xfffe1a80>
   49028:	582b883a 	mov	r21,r11
   4902c:	d8002915 	stw	zero,164(sp)
   49030:	0038bd06 	br	47328 <__alt_data_end+0xfffe0228>
   49034:	d8802917 	ldw	r2,164(sp)
   49038:	103e071e 	bne	r2,zero,48858 <__alt_data_end+0xfffe1758>
   4903c:	dc002915 	stw	r16,164(sp)
   49040:	003e0506 	br	48858 <__alt_data_end+0xfffe1758>
   49044:	d9002917 	ldw	r4,164(sp)
   49048:	20c00044 	addi	r3,r4,1
   4904c:	003e0f06 	br	4888c <__alt_data_end+0xfffe178c>
   49050:	01400184 	movi	r5,6
   49054:	d9402915 	stw	r5,164(sp)
   49058:	003dff06 	br	48858 <__alt_data_end+0xfffe1758>
   4905c:	d8802104 	addi	r2,sp,132
   49060:	d8800315 	stw	r2,12(sp)
   49064:	d8802504 	addi	r2,sp,148
   49068:	d8800215 	stw	r2,8(sp)
   4906c:	d8802604 	addi	r2,sp,152
   49070:	d8800115 	stw	r2,4(sp)
   49074:	d8802917 	ldw	r2,164(sp)
   49078:	d9403617 	ldw	r5,216(sp)
   4907c:	d9002c17 	ldw	r4,176(sp)
   49080:	d8800015 	stw	r2,0(sp)
   49084:	01c000c4 	movi	r7,3
   49088:	980d883a 	mov	r6,r19
   4908c:	da003d15 	stw	r8,244(sp)
   49090:	00497c40 	call	497c4 <_dtoa_r>
   49094:	d8c02917 	ldw	r3,164(sp)
   49098:	da003d17 	ldw	r8,244(sp)
   4909c:	1021883a 	mov	r16,r2
   490a0:	10f9883a 	add	fp,r2,r3
   490a4:	81000007 	ldb	r4,0(r16)
   490a8:	00800c04 	movi	r2,48
   490ac:	20805e26 	beq	r4,r2,49228 <___vfprintf_internal_r+0x2088>
   490b0:	d8c02617 	ldw	r3,152(sp)
   490b4:	e0f9883a 	add	fp,fp,r3
   490b8:	003e0a06 	br	488e4 <__alt_data_end+0xfffe17e4>
   490bc:	00c00b44 	movi	r3,45
   490c0:	24e0003c 	xorhi	r19,r4,32768
   490c4:	d8c02a05 	stb	r3,168(sp)
   490c8:	003de906 	br	48870 <__alt_data_end+0xfffe1770>
   490cc:	d8c03217 	ldw	r3,200(sp)
   490d0:	00c07a0e 	bge	zero,r3,492bc <___vfprintf_internal_r+0x211c>
   490d4:	00800044 	movi	r2,1
   490d8:	d9003317 	ldw	r4,204(sp)
   490dc:	1105883a 	add	r2,r2,r4
   490e0:	d8802e15 	stw	r2,184(sp)
   490e4:	10004e16 	blt	r2,zero,49220 <___vfprintf_internal_r+0x2080>
   490e8:	044019c4 	movi	r17,103
   490ec:	003e2106 	br	48974 <__alt_data_end+0xfffe1874>
   490f0:	d9002917 	ldw	r4,164(sp)
   490f4:	d8802104 	addi	r2,sp,132
   490f8:	d8800315 	stw	r2,12(sp)
   490fc:	d9000015 	stw	r4,0(sp)
   49100:	d8802504 	addi	r2,sp,148
   49104:	d9403617 	ldw	r5,216(sp)
   49108:	d9002c17 	ldw	r4,176(sp)
   4910c:	d8800215 	stw	r2,8(sp)
   49110:	d8802604 	addi	r2,sp,152
   49114:	d8800115 	stw	r2,4(sp)
   49118:	01c000c4 	movi	r7,3
   4911c:	980d883a 	mov	r6,r19
   49120:	da003d15 	stw	r8,244(sp)
   49124:	00497c40 	call	497c4 <_dtoa_r>
   49128:	d8c02917 	ldw	r3,164(sp)
   4912c:	da003d17 	ldw	r8,244(sp)
   49130:	1021883a 	mov	r16,r2
   49134:	00801184 	movi	r2,70
   49138:	80f9883a 	add	fp,r16,r3
   4913c:	88bfd926 	beq	r17,r2,490a4 <__alt_data_end+0xfffe1fa4>
   49140:	003de806 	br	488e4 <__alt_data_end+0xfffe17e4>
   49144:	d9002917 	ldw	r4,164(sp)
   49148:	00c04d0e 	bge	zero,r3,49280 <___vfprintf_internal_r+0x20e0>
   4914c:	2000441e 	bne	r4,zero,49260 <___vfprintf_internal_r+0x20c0>
   49150:	9480004c 	andi	r18,r18,1
   49154:	9000421e 	bne	r18,zero,49260 <___vfprintf_internal_r+0x20c0>
   49158:	1805883a 	mov	r2,r3
   4915c:	18007016 	blt	r3,zero,49320 <___vfprintf_internal_r+0x2180>
   49160:	d8c03217 	ldw	r3,200(sp)
   49164:	d8c02e15 	stw	r3,184(sp)
   49168:	003e0206 	br	48974 <__alt_data_end+0xfffe1874>
   4916c:	df0022c4 	addi	fp,sp,139
   49170:	dc002915 	stw	r16,164(sp)
   49174:	4027883a 	mov	r19,r8
   49178:	e021883a 	mov	r16,fp
   4917c:	b009883a 	mov	r4,r22
   49180:	01400284 	movi	r5,10
   49184:	00432040 	call	43204 <__modsi3>
   49188:	10800c04 	addi	r2,r2,48
   4918c:	843fffc4 	addi	r16,r16,-1
   49190:	b009883a 	mov	r4,r22
   49194:	01400284 	movi	r5,10
   49198:	80800005 	stb	r2,0(r16)
   4919c:	00431800 	call	43180 <__divsi3>
   491a0:	102d883a 	mov	r22,r2
   491a4:	00800244 	movi	r2,9
   491a8:	15bff416 	blt	r2,r22,4917c <__alt_data_end+0xfffe207c>
   491ac:	9811883a 	mov	r8,r19
   491b0:	b0800c04 	addi	r2,r22,48
   491b4:	8027883a 	mov	r19,r16
   491b8:	997fffc4 	addi	r5,r19,-1
   491bc:	98bfffc5 	stb	r2,-1(r19)
   491c0:	dc002917 	ldw	r16,164(sp)
   491c4:	2f006a2e 	bgeu	r5,fp,49370 <___vfprintf_internal_r+0x21d0>
   491c8:	d9c02384 	addi	r7,sp,142
   491cc:	3ccfc83a 	sub	r7,r7,r19
   491d0:	d9002344 	addi	r4,sp,141
   491d4:	e1cf883a 	add	r7,fp,r7
   491d8:	00000106 	br	491e0 <___vfprintf_internal_r+0x2040>
   491dc:	28800003 	ldbu	r2,0(r5)
   491e0:	20800005 	stb	r2,0(r4)
   491e4:	21000044 	addi	r4,r4,1
   491e8:	29400044 	addi	r5,r5,1
   491ec:	393ffb1e 	bne	r7,r4,491dc <__alt_data_end+0xfffe20dc>
   491f0:	d8802304 	addi	r2,sp,140
   491f4:	14c5c83a 	sub	r2,r2,r19
   491f8:	d8c02344 	addi	r3,sp,141
   491fc:	1885883a 	add	r2,r3,r2
   49200:	003f7006 	br	48fc4 <__alt_data_end+0xfffe1ec4>
   49204:	0005883a 	mov	r2,zero
   49208:	003f0f06 	br	48e48 <__alt_data_end+0xfffe1d48>
   4920c:	d8c03217 	ldw	r3,200(sp)
   49210:	18c00044 	addi	r3,r3,1
   49214:	d8c02e15 	stw	r3,184(sp)
   49218:	1805883a 	mov	r2,r3
   4921c:	183fb20e 	bge	r3,zero,490e8 <__alt_data_end+0xfffe1fe8>
   49220:	0005883a 	mov	r2,zero
   49224:	003fb006 	br	490e8 <__alt_data_end+0xfffe1fe8>
   49228:	d9003617 	ldw	r4,216(sp)
   4922c:	000d883a 	mov	r6,zero
   49230:	000f883a 	mov	r7,zero
   49234:	980b883a 	mov	r5,r19
   49238:	d8c03c15 	stw	r3,240(sp)
   4923c:	da003d15 	stw	r8,244(sp)
   49240:	00459c80 	call	459c8 <__eqdf2>
   49244:	d8c03c17 	ldw	r3,240(sp)
   49248:	da003d17 	ldw	r8,244(sp)
   4924c:	103f9826 	beq	r2,zero,490b0 <__alt_data_end+0xfffe1fb0>
   49250:	00800044 	movi	r2,1
   49254:	10c7c83a 	sub	r3,r2,r3
   49258:	d8c02615 	stw	r3,152(sp)
   4925c:	003f9506 	br	490b4 <__alt_data_end+0xfffe1fb4>
   49260:	d9002917 	ldw	r4,164(sp)
   49264:	d8c03217 	ldw	r3,200(sp)
   49268:	20800044 	addi	r2,r4,1
   4926c:	1885883a 	add	r2,r3,r2
   49270:	d8802e15 	stw	r2,184(sp)
   49274:	103dbf0e 	bge	r2,zero,48974 <__alt_data_end+0xfffe1874>
   49278:	0005883a 	mov	r2,zero
   4927c:	003dbd06 	br	48974 <__alt_data_end+0xfffe1874>
   49280:	2000211e 	bne	r4,zero,49308 <___vfprintf_internal_r+0x2168>
   49284:	9480004c 	andi	r18,r18,1
   49288:	90001f1e 	bne	r18,zero,49308 <___vfprintf_internal_r+0x2168>
   4928c:	00800044 	movi	r2,1
   49290:	d8802e15 	stw	r2,184(sp)
   49294:	003db706 	br	48974 <__alt_data_end+0xfffe1874>
   49298:	00800b44 	movi	r2,45
   4929c:	05adc83a 	sub	r22,zero,r22
   492a0:	d8802305 	stb	r2,140(sp)
   492a4:	003f3f06 	br	48fa4 <__alt_data_end+0xfffe1ea4>
   492a8:	0005883a 	mov	r2,zero
   492ac:	003f5206 	br	48ff8 <__alt_data_end+0xfffe1ef8>
   492b0:	90a4703a 	and	r18,r18,r2
   492b4:	903f4e26 	beq	r18,zero,48ff0 <__alt_data_end+0xfffe1ef0>
   492b8:	003f4a06 	br	48fe4 <__alt_data_end+0xfffe1ee4>
   492bc:	00800084 	movi	r2,2
   492c0:	10c5c83a 	sub	r2,r2,r3
   492c4:	003f8406 	br	490d8 <__alt_data_end+0xfffe1fd8>
   492c8:	d8802d17 	ldw	r2,180(sp)
   492cc:	d9002d17 	ldw	r4,180(sp)
   492d0:	ac400043 	ldbu	r17,1(r21)
   492d4:	10800017 	ldw	r2,0(r2)
   492d8:	582b883a 	mov	r21,r11
   492dc:	d8802915 	stw	r2,164(sp)
   492e0:	20800104 	addi	r2,r4,4
   492e4:	d9002917 	ldw	r4,164(sp)
   492e8:	d8802d15 	stw	r2,180(sp)
   492ec:	203e7a0e 	bge	r4,zero,48cd8 <__alt_data_end+0xfffe1bd8>
   492f0:	8c403fcc 	andi	r17,r17,255
   492f4:	00bfffc4 	movi	r2,-1
   492f8:	8c40201c 	xori	r17,r17,128
   492fc:	d8802915 	stw	r2,164(sp)
   49300:	8c7fe004 	addi	r17,r17,-128
   49304:	00380706 	br	47324 <__alt_data_end+0xfffe0224>
   49308:	d8c02917 	ldw	r3,164(sp)
   4930c:	18c00084 	addi	r3,r3,2
   49310:	d8c02e15 	stw	r3,184(sp)
   49314:	1805883a 	mov	r2,r3
   49318:	183d960e 	bge	r3,zero,48974 <__alt_data_end+0xfffe1874>
   4931c:	003fd606 	br	49278 <__alt_data_end+0xfffe2178>
   49320:	0005883a 	mov	r2,zero
   49324:	003f8e06 	br	49160 <__alt_data_end+0xfffe2060>
   49328:	9080004c 	andi	r2,r18,1
   4932c:	103f811e 	bne	r2,zero,49134 <__alt_data_end+0xfffe2034>
   49330:	d8802117 	ldw	r2,132(sp)
   49334:	1405c83a 	sub	r2,r2,r16
   49338:	d8803315 	stw	r2,204(sp)
   4933c:	b47ef326 	beq	r22,r17,48f0c <__alt_data_end+0xfffe1e0c>
   49340:	dd802617 	ldw	r22,152(sp)
   49344:	003f1106 	br	48f8c <__alt_data_end+0xfffe1e8c>
   49348:	d9c02785 	stb	r7,158(sp)
   4934c:	00390406 	br	47760 <__alt_data_end+0xfffe0660>
   49350:	d9c02785 	stb	r7,158(sp)
   49354:	0038d306 	br	476a4 <__alt_data_end+0xfffe05a4>
   49358:	d9c02785 	stb	r7,158(sp)
   4935c:	003a6106 	br	47ce4 <__alt_data_end+0xfffe0be4>
   49360:	d9c02785 	stb	r7,158(sp)
   49364:	003af806 	br	47f48 <__alt_data_end+0xfffe0e48>
   49368:	0005883a 	mov	r2,zero
   4936c:	003d7e06 	br	48968 <__alt_data_end+0xfffe1868>
   49370:	d8802344 	addi	r2,sp,141
   49374:	003f1306 	br	48fc4 <__alt_data_end+0xfffe1ec4>
   49378:	d9c02785 	stb	r7,158(sp)
   4937c:	00392306 	br	4780c <__alt_data_end+0xfffe070c>
   49380:	d9c02785 	stb	r7,158(sp)
   49384:	003aa906 	br	47e2c <__alt_data_end+0xfffe0d2c>
   49388:	d9c02785 	stb	r7,158(sp)
   4938c:	003a3d06 	br	47c84 <__alt_data_end+0xfffe0b84>
   49390:	d9c02785 	stb	r7,158(sp)
   49394:	003aca06 	br	47ec0 <__alt_data_end+0xfffe0dc0>

00049398 <__vfprintf_internal>:
   49398:	00800174 	movhi	r2,5
   4939c:	109e7004 	addi	r2,r2,31168
   493a0:	300f883a 	mov	r7,r6
   493a4:	280d883a 	mov	r6,r5
   493a8:	200b883a 	mov	r5,r4
   493ac:	11000017 	ldw	r4,0(r2)
   493b0:	00471a01 	jmpi	471a0 <___vfprintf_internal_r>

000493b4 <__sbprintf>:
   493b4:	2880030b 	ldhu	r2,12(r5)
   493b8:	2ac01917 	ldw	r11,100(r5)
   493bc:	2a80038b 	ldhu	r10,14(r5)
   493c0:	2a400717 	ldw	r9,28(r5)
   493c4:	2a000917 	ldw	r8,36(r5)
   493c8:	defee204 	addi	sp,sp,-1144
   493cc:	00c10004 	movi	r3,1024
   493d0:	dc011a15 	stw	r16,1128(sp)
   493d4:	10bfff4c 	andi	r2,r2,65533
   493d8:	2821883a 	mov	r16,r5
   493dc:	d8cb883a 	add	r5,sp,r3
   493e0:	dc811c15 	stw	r18,1136(sp)
   493e4:	dc411b15 	stw	r17,1132(sp)
   493e8:	dfc11d15 	stw	ra,1140(sp)
   493ec:	2025883a 	mov	r18,r4
   493f0:	d881030d 	sth	r2,1036(sp)
   493f4:	dac11915 	stw	r11,1124(sp)
   493f8:	da81038d 	sth	r10,1038(sp)
   493fc:	da410715 	stw	r9,1052(sp)
   49400:	da010915 	stw	r8,1060(sp)
   49404:	dec10015 	stw	sp,1024(sp)
   49408:	dec10415 	stw	sp,1040(sp)
   4940c:	d8c10215 	stw	r3,1032(sp)
   49410:	d8c10515 	stw	r3,1044(sp)
   49414:	d8010615 	stw	zero,1048(sp)
   49418:	00471a00 	call	471a0 <___vfprintf_internal_r>
   4941c:	1023883a 	mov	r17,r2
   49420:	10000416 	blt	r2,zero,49434 <__sbprintf+0x80>
   49424:	d9410004 	addi	r5,sp,1024
   49428:	9009883a 	mov	r4,r18
   4942c:	004b0680 	call	4b068 <_fflush_r>
   49430:	10000d1e 	bne	r2,zero,49468 <__sbprintf+0xb4>
   49434:	d881030b 	ldhu	r2,1036(sp)
   49438:	1080100c 	andi	r2,r2,64
   4943c:	10000326 	beq	r2,zero,4944c <__sbprintf+0x98>
   49440:	8080030b 	ldhu	r2,12(r16)
   49444:	10801014 	ori	r2,r2,64
   49448:	8080030d 	sth	r2,12(r16)
   4944c:	8805883a 	mov	r2,r17
   49450:	dfc11d17 	ldw	ra,1140(sp)
   49454:	dc811c17 	ldw	r18,1136(sp)
   49458:	dc411b17 	ldw	r17,1132(sp)
   4945c:	dc011a17 	ldw	r16,1128(sp)
   49460:	dec11e04 	addi	sp,sp,1144
   49464:	f800283a 	ret
   49468:	047fffc4 	movi	r17,-1
   4946c:	003ff106 	br	49434 <__alt_data_end+0xfffe2334>

00049470 <__swsetup_r>:
   49470:	00800174 	movhi	r2,5
   49474:	defffd04 	addi	sp,sp,-12
   49478:	109e7004 	addi	r2,r2,31168
   4947c:	dc400115 	stw	r17,4(sp)
   49480:	2023883a 	mov	r17,r4
   49484:	11000017 	ldw	r4,0(r2)
   49488:	dc000015 	stw	r16,0(sp)
   4948c:	dfc00215 	stw	ra,8(sp)
   49490:	2821883a 	mov	r16,r5
   49494:	20000226 	beq	r4,zero,494a0 <__swsetup_r+0x30>
   49498:	20800e17 	ldw	r2,56(r4)
   4949c:	10003126 	beq	r2,zero,49564 <__swsetup_r+0xf4>
   494a0:	8080030b 	ldhu	r2,12(r16)
   494a4:	10c0020c 	andi	r3,r2,8
   494a8:	1009883a 	mov	r4,r2
   494ac:	18000f26 	beq	r3,zero,494ec <__swsetup_r+0x7c>
   494b0:	80c00417 	ldw	r3,16(r16)
   494b4:	18001526 	beq	r3,zero,4950c <__swsetup_r+0x9c>
   494b8:	1100004c 	andi	r4,r2,1
   494bc:	20001c1e 	bne	r4,zero,49530 <__swsetup_r+0xc0>
   494c0:	1080008c 	andi	r2,r2,2
   494c4:	1000291e 	bne	r2,zero,4956c <__swsetup_r+0xfc>
   494c8:	80800517 	ldw	r2,20(r16)
   494cc:	80800215 	stw	r2,8(r16)
   494d0:	18001c26 	beq	r3,zero,49544 <__swsetup_r+0xd4>
   494d4:	0005883a 	mov	r2,zero
   494d8:	dfc00217 	ldw	ra,8(sp)
   494dc:	dc400117 	ldw	r17,4(sp)
   494e0:	dc000017 	ldw	r16,0(sp)
   494e4:	dec00304 	addi	sp,sp,12
   494e8:	f800283a 	ret
   494ec:	2080040c 	andi	r2,r4,16
   494f0:	10002e26 	beq	r2,zero,495ac <__swsetup_r+0x13c>
   494f4:	2080010c 	andi	r2,r4,4
   494f8:	10001e1e 	bne	r2,zero,49574 <__swsetup_r+0x104>
   494fc:	80c00417 	ldw	r3,16(r16)
   49500:	20800214 	ori	r2,r4,8
   49504:	8080030d 	sth	r2,12(r16)
   49508:	183feb1e 	bne	r3,zero,494b8 <__alt_data_end+0xfffe23b8>
   4950c:	1100a00c 	andi	r4,r2,640
   49510:	01408004 	movi	r5,512
   49514:	217fe826 	beq	r4,r5,494b8 <__alt_data_end+0xfffe23b8>
   49518:	800b883a 	mov	r5,r16
   4951c:	8809883a 	mov	r4,r17
   49520:	004bfe80 	call	4bfe8 <__smakebuf_r>
   49524:	8080030b 	ldhu	r2,12(r16)
   49528:	80c00417 	ldw	r3,16(r16)
   4952c:	003fe206 	br	494b8 <__alt_data_end+0xfffe23b8>
   49530:	80800517 	ldw	r2,20(r16)
   49534:	80000215 	stw	zero,8(r16)
   49538:	0085c83a 	sub	r2,zero,r2
   4953c:	80800615 	stw	r2,24(r16)
   49540:	183fe41e 	bne	r3,zero,494d4 <__alt_data_end+0xfffe23d4>
   49544:	80c0030b 	ldhu	r3,12(r16)
   49548:	0005883a 	mov	r2,zero
   4954c:	1900200c 	andi	r4,r3,128
   49550:	203fe126 	beq	r4,zero,494d8 <__alt_data_end+0xfffe23d8>
   49554:	18c01014 	ori	r3,r3,64
   49558:	80c0030d 	sth	r3,12(r16)
   4955c:	00bfffc4 	movi	r2,-1
   49560:	003fdd06 	br	494d8 <__alt_data_end+0xfffe23d8>
   49564:	004b4440 	call	4b444 <__sinit>
   49568:	003fcd06 	br	494a0 <__alt_data_end+0xfffe23a0>
   4956c:	0005883a 	mov	r2,zero
   49570:	003fd606 	br	494cc <__alt_data_end+0xfffe23cc>
   49574:	81400c17 	ldw	r5,48(r16)
   49578:	28000626 	beq	r5,zero,49594 <__swsetup_r+0x124>
   4957c:	80801004 	addi	r2,r16,64
   49580:	28800326 	beq	r5,r2,49590 <__swsetup_r+0x120>
   49584:	8809883a 	mov	r4,r17
   49588:	004b5b80 	call	4b5b8 <_free_r>
   4958c:	8100030b 	ldhu	r4,12(r16)
   49590:	80000c15 	stw	zero,48(r16)
   49594:	80c00417 	ldw	r3,16(r16)
   49598:	00bff6c4 	movi	r2,-37
   4959c:	1108703a 	and	r4,r2,r4
   495a0:	80000115 	stw	zero,4(r16)
   495a4:	80c00015 	stw	r3,0(r16)
   495a8:	003fd506 	br	49500 <__alt_data_end+0xfffe2400>
   495ac:	00800244 	movi	r2,9
   495b0:	88800015 	stw	r2,0(r17)
   495b4:	20801014 	ori	r2,r4,64
   495b8:	8080030d 	sth	r2,12(r16)
   495bc:	00bfffc4 	movi	r2,-1
   495c0:	003fc506 	br	494d8 <__alt_data_end+0xfffe23d8>

000495c4 <quorem>:
   495c4:	defff704 	addi	sp,sp,-36
   495c8:	dc800215 	stw	r18,8(sp)
   495cc:	20800417 	ldw	r2,16(r4)
   495d0:	2c800417 	ldw	r18,16(r5)
   495d4:	dfc00815 	stw	ra,32(sp)
   495d8:	ddc00715 	stw	r23,28(sp)
   495dc:	dd800615 	stw	r22,24(sp)
   495e0:	dd400515 	stw	r21,20(sp)
   495e4:	dd000415 	stw	r20,16(sp)
   495e8:	dcc00315 	stw	r19,12(sp)
   495ec:	dc400115 	stw	r17,4(sp)
   495f0:	dc000015 	stw	r16,0(sp)
   495f4:	14807116 	blt	r2,r18,497bc <quorem+0x1f8>
   495f8:	94bfffc4 	addi	r18,r18,-1
   495fc:	94ad883a 	add	r22,r18,r18
   49600:	b5ad883a 	add	r22,r22,r22
   49604:	2c400504 	addi	r17,r5,20
   49608:	8da9883a 	add	r20,r17,r22
   4960c:	25400504 	addi	r21,r4,20
   49610:	282f883a 	mov	r23,r5
   49614:	adad883a 	add	r22,r21,r22
   49618:	a1400017 	ldw	r5,0(r20)
   4961c:	2021883a 	mov	r16,r4
   49620:	b1000017 	ldw	r4,0(r22)
   49624:	29400044 	addi	r5,r5,1
   49628:	00432780 	call	43278 <__udivsi3>
   4962c:	1027883a 	mov	r19,r2
   49630:	10002c26 	beq	r2,zero,496e4 <quorem+0x120>
   49634:	a813883a 	mov	r9,r21
   49638:	880b883a 	mov	r5,r17
   4963c:	0009883a 	mov	r4,zero
   49640:	000d883a 	mov	r6,zero
   49644:	2a000017 	ldw	r8,0(r5)
   49648:	49c00017 	ldw	r7,0(r9)
   4964c:	29400104 	addi	r5,r5,4
   49650:	40bfffcc 	andi	r2,r8,65535
   49654:	14c5383a 	mul	r2,r2,r19
   49658:	4010d43a 	srli	r8,r8,16
   4965c:	38ffffcc 	andi	r3,r7,65535
   49660:	1105883a 	add	r2,r2,r4
   49664:	1008d43a 	srli	r4,r2,16
   49668:	44d1383a 	mul	r8,r8,r19
   4966c:	198d883a 	add	r6,r3,r6
   49670:	10ffffcc 	andi	r3,r2,65535
   49674:	30c7c83a 	sub	r3,r6,r3
   49678:	380ed43a 	srli	r7,r7,16
   4967c:	4105883a 	add	r2,r8,r4
   49680:	180dd43a 	srai	r6,r3,16
   49684:	113fffcc 	andi	r4,r2,65535
   49688:	390fc83a 	sub	r7,r7,r4
   4968c:	398d883a 	add	r6,r7,r6
   49690:	300e943a 	slli	r7,r6,16
   49694:	18ffffcc 	andi	r3,r3,65535
   49698:	1008d43a 	srli	r4,r2,16
   4969c:	38ceb03a 	or	r7,r7,r3
   496a0:	49c00015 	stw	r7,0(r9)
   496a4:	300dd43a 	srai	r6,r6,16
   496a8:	4a400104 	addi	r9,r9,4
   496ac:	a17fe52e 	bgeu	r20,r5,49644 <__alt_data_end+0xfffe2544>
   496b0:	b0800017 	ldw	r2,0(r22)
   496b4:	10000b1e 	bne	r2,zero,496e4 <quorem+0x120>
   496b8:	b0bfff04 	addi	r2,r22,-4
   496bc:	a880082e 	bgeu	r21,r2,496e0 <quorem+0x11c>
   496c0:	b0ffff17 	ldw	r3,-4(r22)
   496c4:	18000326 	beq	r3,zero,496d4 <quorem+0x110>
   496c8:	00000506 	br	496e0 <quorem+0x11c>
   496cc:	10c00017 	ldw	r3,0(r2)
   496d0:	1800031e 	bne	r3,zero,496e0 <quorem+0x11c>
   496d4:	10bfff04 	addi	r2,r2,-4
   496d8:	94bfffc4 	addi	r18,r18,-1
   496dc:	a8bffb36 	bltu	r21,r2,496cc <__alt_data_end+0xfffe25cc>
   496e0:	84800415 	stw	r18,16(r16)
   496e4:	b80b883a 	mov	r5,r23
   496e8:	8009883a 	mov	r4,r16
   496ec:	004d7280 	call	4d728 <__mcmp>
   496f0:	10002616 	blt	r2,zero,4978c <quorem+0x1c8>
   496f4:	9cc00044 	addi	r19,r19,1
   496f8:	a805883a 	mov	r2,r21
   496fc:	000b883a 	mov	r5,zero
   49700:	11000017 	ldw	r4,0(r2)
   49704:	89800017 	ldw	r6,0(r17)
   49708:	10800104 	addi	r2,r2,4
   4970c:	20ffffcc 	andi	r3,r4,65535
   49710:	194b883a 	add	r5,r3,r5
   49714:	30ffffcc 	andi	r3,r6,65535
   49718:	28c7c83a 	sub	r3,r5,r3
   4971c:	300cd43a 	srli	r6,r6,16
   49720:	2008d43a 	srli	r4,r4,16
   49724:	180bd43a 	srai	r5,r3,16
   49728:	18ffffcc 	andi	r3,r3,65535
   4972c:	2189c83a 	sub	r4,r4,r6
   49730:	2149883a 	add	r4,r4,r5
   49734:	200c943a 	slli	r6,r4,16
   49738:	8c400104 	addi	r17,r17,4
   4973c:	200bd43a 	srai	r5,r4,16
   49740:	30c6b03a 	or	r3,r6,r3
   49744:	10ffff15 	stw	r3,-4(r2)
   49748:	a47fed2e 	bgeu	r20,r17,49700 <__alt_data_end+0xfffe2600>
   4974c:	9485883a 	add	r2,r18,r18
   49750:	1085883a 	add	r2,r2,r2
   49754:	a887883a 	add	r3,r21,r2
   49758:	18800017 	ldw	r2,0(r3)
   4975c:	10000b1e 	bne	r2,zero,4978c <quorem+0x1c8>
   49760:	18bfff04 	addi	r2,r3,-4
   49764:	a880082e 	bgeu	r21,r2,49788 <quorem+0x1c4>
   49768:	18ffff17 	ldw	r3,-4(r3)
   4976c:	18000326 	beq	r3,zero,4977c <quorem+0x1b8>
   49770:	00000506 	br	49788 <quorem+0x1c4>
   49774:	10c00017 	ldw	r3,0(r2)
   49778:	1800031e 	bne	r3,zero,49788 <quorem+0x1c4>
   4977c:	10bfff04 	addi	r2,r2,-4
   49780:	94bfffc4 	addi	r18,r18,-1
   49784:	a8bffb36 	bltu	r21,r2,49774 <__alt_data_end+0xfffe2674>
   49788:	84800415 	stw	r18,16(r16)
   4978c:	9805883a 	mov	r2,r19
   49790:	dfc00817 	ldw	ra,32(sp)
   49794:	ddc00717 	ldw	r23,28(sp)
   49798:	dd800617 	ldw	r22,24(sp)
   4979c:	dd400517 	ldw	r21,20(sp)
   497a0:	dd000417 	ldw	r20,16(sp)
   497a4:	dcc00317 	ldw	r19,12(sp)
   497a8:	dc800217 	ldw	r18,8(sp)
   497ac:	dc400117 	ldw	r17,4(sp)
   497b0:	dc000017 	ldw	r16,0(sp)
   497b4:	dec00904 	addi	sp,sp,36
   497b8:	f800283a 	ret
   497bc:	0005883a 	mov	r2,zero
   497c0:	003ff306 	br	49790 <__alt_data_end+0xfffe2690>

000497c4 <_dtoa_r>:
   497c4:	20801017 	ldw	r2,64(r4)
   497c8:	deffde04 	addi	sp,sp,-136
   497cc:	df002015 	stw	fp,128(sp)
   497d0:	dcc01b15 	stw	r19,108(sp)
   497d4:	dc801a15 	stw	r18,104(sp)
   497d8:	dc401915 	stw	r17,100(sp)
   497dc:	dc001815 	stw	r16,96(sp)
   497e0:	dfc02115 	stw	ra,132(sp)
   497e4:	ddc01f15 	stw	r23,124(sp)
   497e8:	dd801e15 	stw	r22,120(sp)
   497ec:	dd401d15 	stw	r21,116(sp)
   497f0:	dd001c15 	stw	r20,112(sp)
   497f4:	d9c00315 	stw	r7,12(sp)
   497f8:	2039883a 	mov	fp,r4
   497fc:	3023883a 	mov	r17,r6
   49800:	2825883a 	mov	r18,r5
   49804:	dc002417 	ldw	r16,144(sp)
   49808:	3027883a 	mov	r19,r6
   4980c:	10000826 	beq	r2,zero,49830 <_dtoa_r+0x6c>
   49810:	21801117 	ldw	r6,68(r4)
   49814:	00c00044 	movi	r3,1
   49818:	100b883a 	mov	r5,r2
   4981c:	1986983a 	sll	r3,r3,r6
   49820:	11800115 	stw	r6,4(r2)
   49824:	10c00215 	stw	r3,8(r2)
   49828:	004cf080 	call	4cf08 <_Bfree>
   4982c:	e0001015 	stw	zero,64(fp)
   49830:	88002e16 	blt	r17,zero,498ec <_dtoa_r+0x128>
   49834:	80000015 	stw	zero,0(r16)
   49838:	889ffc2c 	andhi	r2,r17,32752
   4983c:	00dffc34 	movhi	r3,32752
   49840:	10c01c26 	beq	r2,r3,498b4 <_dtoa_r+0xf0>
   49844:	000d883a 	mov	r6,zero
   49848:	000f883a 	mov	r7,zero
   4984c:	9009883a 	mov	r4,r18
   49850:	980b883a 	mov	r5,r19
   49854:	00459c80 	call	459c8 <__eqdf2>
   49858:	10002b1e 	bne	r2,zero,49908 <_dtoa_r+0x144>
   4985c:	d9c02317 	ldw	r7,140(sp)
   49860:	00800044 	movi	r2,1
   49864:	38800015 	stw	r2,0(r7)
   49868:	d8802517 	ldw	r2,148(sp)
   4986c:	10019e26 	beq	r2,zero,49ee8 <_dtoa_r+0x724>
   49870:	d8c02517 	ldw	r3,148(sp)
   49874:	00800174 	movhi	r2,5
   49878:	10973a44 	addi	r2,r2,23785
   4987c:	18800015 	stw	r2,0(r3)
   49880:	10bfffc4 	addi	r2,r2,-1
   49884:	dfc02117 	ldw	ra,132(sp)
   49888:	df002017 	ldw	fp,128(sp)
   4988c:	ddc01f17 	ldw	r23,124(sp)
   49890:	dd801e17 	ldw	r22,120(sp)
   49894:	dd401d17 	ldw	r21,116(sp)
   49898:	dd001c17 	ldw	r20,112(sp)
   4989c:	dcc01b17 	ldw	r19,108(sp)
   498a0:	dc801a17 	ldw	r18,104(sp)
   498a4:	dc401917 	ldw	r17,100(sp)
   498a8:	dc001817 	ldw	r16,96(sp)
   498ac:	dec02204 	addi	sp,sp,136
   498b0:	f800283a 	ret
   498b4:	d8c02317 	ldw	r3,140(sp)
   498b8:	0089c3c4 	movi	r2,9999
   498bc:	18800015 	stw	r2,0(r3)
   498c0:	90017726 	beq	r18,zero,49ea0 <_dtoa_r+0x6dc>
   498c4:	00800174 	movhi	r2,5
   498c8:	10974604 	addi	r2,r2,23832
   498cc:	d9002517 	ldw	r4,148(sp)
   498d0:	203fec26 	beq	r4,zero,49884 <__alt_data_end+0xfffe2784>
   498d4:	10c000c7 	ldb	r3,3(r2)
   498d8:	1801781e 	bne	r3,zero,49ebc <_dtoa_r+0x6f8>
   498dc:	10c000c4 	addi	r3,r2,3
   498e0:	d9802517 	ldw	r6,148(sp)
   498e4:	30c00015 	stw	r3,0(r6)
   498e8:	003fe606 	br	49884 <__alt_data_end+0xfffe2784>
   498ec:	04e00034 	movhi	r19,32768
   498f0:	9cffffc4 	addi	r19,r19,-1
   498f4:	00800044 	movi	r2,1
   498f8:	8ce6703a 	and	r19,r17,r19
   498fc:	80800015 	stw	r2,0(r16)
   49900:	9823883a 	mov	r17,r19
   49904:	003fcc06 	br	49838 <__alt_data_end+0xfffe2738>
   49908:	d8800204 	addi	r2,sp,8
   4990c:	d8800015 	stw	r2,0(sp)
   49910:	d9c00104 	addi	r7,sp,4
   49914:	900b883a 	mov	r5,r18
   49918:	980d883a 	mov	r6,r19
   4991c:	e009883a 	mov	r4,fp
   49920:	8820d53a 	srli	r16,r17,20
   49924:	004daf40 	call	4daf4 <__d2b>
   49928:	d8800915 	stw	r2,36(sp)
   4992c:	8001651e 	bne	r16,zero,49ec4 <_dtoa_r+0x700>
   49930:	dd800217 	ldw	r22,8(sp)
   49934:	dc000117 	ldw	r16,4(sp)
   49938:	00800804 	movi	r2,32
   4993c:	b421883a 	add	r16,r22,r16
   49940:	80c10c84 	addi	r3,r16,1074
   49944:	10c2d10e 	bge	r2,r3,4a48c <_dtoa_r+0xcc8>
   49948:	00801004 	movi	r2,64
   4994c:	81010484 	addi	r4,r16,1042
   49950:	10c7c83a 	sub	r3,r2,r3
   49954:	9108d83a 	srl	r4,r18,r4
   49958:	88e2983a 	sll	r17,r17,r3
   4995c:	2448b03a 	or	r4,r4,r17
   49960:	005114c0 	call	5114c <__floatunsidf>
   49964:	017f8434 	movhi	r5,65040
   49968:	01800044 	movi	r6,1
   4996c:	1009883a 	mov	r4,r2
   49970:	194b883a 	add	r5,r3,r5
   49974:	843fffc4 	addi	r16,r16,-1
   49978:	d9801115 	stw	r6,68(sp)
   4997c:	000d883a 	mov	r6,zero
   49980:	01cffe34 	movhi	r7,16376
   49984:	00462440 	call	46244 <__subdf3>
   49988:	0198dbf4 	movhi	r6,25455
   4998c:	01cff4f4 	movhi	r7,16339
   49990:	3190d844 	addi	r6,r6,17249
   49994:	39e1e9c4 	addi	r7,r7,-30809
   49998:	1009883a 	mov	r4,r2
   4999c:	180b883a 	mov	r5,r3
   499a0:	0045b2c0 	call	45b2c <__muldf3>
   499a4:	01a2d874 	movhi	r6,35681
   499a8:	01cff1f4 	movhi	r7,16327
   499ac:	31b22cc4 	addi	r6,r6,-14157
   499b0:	39e28a04 	addi	r7,r7,-30168
   499b4:	180b883a 	mov	r5,r3
   499b8:	1009883a 	mov	r4,r2
   499bc:	00448340 	call	44834 <__adddf3>
   499c0:	8009883a 	mov	r4,r16
   499c4:	1029883a 	mov	r20,r2
   499c8:	1823883a 	mov	r17,r3
   499cc:	0046bc00 	call	46bc0 <__floatsidf>
   499d0:	019427f4 	movhi	r6,20639
   499d4:	01cff4f4 	movhi	r7,16339
   499d8:	319e7ec4 	addi	r6,r6,31227
   499dc:	39d104c4 	addi	r7,r7,17427
   499e0:	1009883a 	mov	r4,r2
   499e4:	180b883a 	mov	r5,r3
   499e8:	0045b2c0 	call	45b2c <__muldf3>
   499ec:	100d883a 	mov	r6,r2
   499f0:	180f883a 	mov	r7,r3
   499f4:	a009883a 	mov	r4,r20
   499f8:	880b883a 	mov	r5,r17
   499fc:	00448340 	call	44834 <__adddf3>
   49a00:	1009883a 	mov	r4,r2
   49a04:	180b883a 	mov	r5,r3
   49a08:	1029883a 	mov	r20,r2
   49a0c:	1823883a 	mov	r17,r3
   49a10:	0046b400 	call	46b40 <__fixdfsi>
   49a14:	000d883a 	mov	r6,zero
   49a18:	000f883a 	mov	r7,zero
   49a1c:	a009883a 	mov	r4,r20
   49a20:	880b883a 	mov	r5,r17
   49a24:	d8800515 	stw	r2,20(sp)
   49a28:	00510580 	call	51058 <__ledf2>
   49a2c:	10028716 	blt	r2,zero,4a44c <_dtoa_r+0xc88>
   49a30:	d8c00517 	ldw	r3,20(sp)
   49a34:	00800584 	movi	r2,22
   49a38:	10c27536 	bltu	r2,r3,4a410 <_dtoa_r+0xc4c>
   49a3c:	180490fa 	slli	r2,r3,3
   49a40:	00c00174 	movhi	r3,5
   49a44:	18d76104 	addi	r3,r3,23940
   49a48:	1885883a 	add	r2,r3,r2
   49a4c:	11000017 	ldw	r4,0(r2)
   49a50:	11400117 	ldw	r5,4(r2)
   49a54:	900d883a 	mov	r6,r18
   49a58:	980f883a 	mov	r7,r19
   49a5c:	0045a500 	call	45a50 <__gedf2>
   49a60:	00828d0e 	bge	zero,r2,4a498 <_dtoa_r+0xcd4>
   49a64:	d9000517 	ldw	r4,20(sp)
   49a68:	d8000e15 	stw	zero,56(sp)
   49a6c:	213fffc4 	addi	r4,r4,-1
   49a70:	d9000515 	stw	r4,20(sp)
   49a74:	b42dc83a 	sub	r22,r22,r16
   49a78:	b5bfffc4 	addi	r22,r22,-1
   49a7c:	b0026f16 	blt	r22,zero,4a43c <_dtoa_r+0xc78>
   49a80:	d8000815 	stw	zero,32(sp)
   49a84:	d9c00517 	ldw	r7,20(sp)
   49a88:	38026416 	blt	r7,zero,4a41c <_dtoa_r+0xc58>
   49a8c:	b1ed883a 	add	r22,r22,r7
   49a90:	d9c00d15 	stw	r7,52(sp)
   49a94:	d8000a15 	stw	zero,40(sp)
   49a98:	d9800317 	ldw	r6,12(sp)
   49a9c:	00800244 	movi	r2,9
   49aa0:	11811436 	bltu	r2,r6,49ef4 <_dtoa_r+0x730>
   49aa4:	00800144 	movi	r2,5
   49aa8:	1184e10e 	bge	r2,r6,4ae30 <_dtoa_r+0x166c>
   49aac:	31bfff04 	addi	r6,r6,-4
   49ab0:	d9800315 	stw	r6,12(sp)
   49ab4:	0023883a 	mov	r17,zero
   49ab8:	d9800317 	ldw	r6,12(sp)
   49abc:	008000c4 	movi	r2,3
   49ac0:	30836726 	beq	r6,r2,4a860 <_dtoa_r+0x109c>
   49ac4:	1183410e 	bge	r2,r6,4a7cc <_dtoa_r+0x1008>
   49ac8:	d9c00317 	ldw	r7,12(sp)
   49acc:	00800104 	movi	r2,4
   49ad0:	38827c26 	beq	r7,r2,4a4c4 <_dtoa_r+0xd00>
   49ad4:	00800144 	movi	r2,5
   49ad8:	3884c41e 	bne	r7,r2,4adec <_dtoa_r+0x1628>
   49adc:	00800044 	movi	r2,1
   49ae0:	d8800b15 	stw	r2,44(sp)
   49ae4:	d8c00517 	ldw	r3,20(sp)
   49ae8:	d9002217 	ldw	r4,136(sp)
   49aec:	1907883a 	add	r3,r3,r4
   49af0:	19800044 	addi	r6,r3,1
   49af4:	d8c00c15 	stw	r3,48(sp)
   49af8:	d9800615 	stw	r6,24(sp)
   49afc:	0183a40e 	bge	zero,r6,4a990 <_dtoa_r+0x11cc>
   49b00:	d9800617 	ldw	r6,24(sp)
   49b04:	3021883a 	mov	r16,r6
   49b08:	e0001115 	stw	zero,68(fp)
   49b0c:	008005c4 	movi	r2,23
   49b10:	1184c92e 	bgeu	r2,r6,4ae38 <_dtoa_r+0x1674>
   49b14:	00c00044 	movi	r3,1
   49b18:	00800104 	movi	r2,4
   49b1c:	1085883a 	add	r2,r2,r2
   49b20:	11000504 	addi	r4,r2,20
   49b24:	180b883a 	mov	r5,r3
   49b28:	18c00044 	addi	r3,r3,1
   49b2c:	313ffb2e 	bgeu	r6,r4,49b1c <__alt_data_end+0xfffe2a1c>
   49b30:	e1401115 	stw	r5,68(fp)
   49b34:	e009883a 	mov	r4,fp
   49b38:	004ce600 	call	4ce60 <_Balloc>
   49b3c:	d8800715 	stw	r2,28(sp)
   49b40:	e0801015 	stw	r2,64(fp)
   49b44:	00800384 	movi	r2,14
   49b48:	1400f736 	bltu	r2,r16,49f28 <_dtoa_r+0x764>
   49b4c:	8800f626 	beq	r17,zero,49f28 <_dtoa_r+0x764>
   49b50:	d9c00517 	ldw	r7,20(sp)
   49b54:	01c39a0e 	bge	zero,r7,4a9c0 <_dtoa_r+0x11fc>
   49b58:	388003cc 	andi	r2,r7,15
   49b5c:	100490fa 	slli	r2,r2,3
   49b60:	382bd13a 	srai	r21,r7,4
   49b64:	00c00174 	movhi	r3,5
   49b68:	18d76104 	addi	r3,r3,23940
   49b6c:	1885883a 	add	r2,r3,r2
   49b70:	a8c0040c 	andi	r3,r21,16
   49b74:	12400017 	ldw	r9,0(r2)
   49b78:	12000117 	ldw	r8,4(r2)
   49b7c:	18037926 	beq	r3,zero,4a964 <_dtoa_r+0x11a0>
   49b80:	00800174 	movhi	r2,5
   49b84:	10975704 	addi	r2,r2,23900
   49b88:	11800817 	ldw	r6,32(r2)
   49b8c:	11c00917 	ldw	r7,36(r2)
   49b90:	9009883a 	mov	r4,r18
   49b94:	980b883a 	mov	r5,r19
   49b98:	da001715 	stw	r8,92(sp)
   49b9c:	da401615 	stw	r9,88(sp)
   49ba0:	00450e00 	call	450e0 <__divdf3>
   49ba4:	da001717 	ldw	r8,92(sp)
   49ba8:	da401617 	ldw	r9,88(sp)
   49bac:	ad4003cc 	andi	r21,r21,15
   49bb0:	040000c4 	movi	r16,3
   49bb4:	1023883a 	mov	r17,r2
   49bb8:	1829883a 	mov	r20,r3
   49bbc:	a8001126 	beq	r21,zero,49c04 <_dtoa_r+0x440>
   49bc0:	05c00174 	movhi	r23,5
   49bc4:	bdd75704 	addi	r23,r23,23900
   49bc8:	4805883a 	mov	r2,r9
   49bcc:	4007883a 	mov	r3,r8
   49bd0:	a980004c 	andi	r6,r21,1
   49bd4:	1009883a 	mov	r4,r2
   49bd8:	a82bd07a 	srai	r21,r21,1
   49bdc:	180b883a 	mov	r5,r3
   49be0:	30000426 	beq	r6,zero,49bf4 <_dtoa_r+0x430>
   49be4:	b9800017 	ldw	r6,0(r23)
   49be8:	b9c00117 	ldw	r7,4(r23)
   49bec:	84000044 	addi	r16,r16,1
   49bf0:	0045b2c0 	call	45b2c <__muldf3>
   49bf4:	bdc00204 	addi	r23,r23,8
   49bf8:	a83ff51e 	bne	r21,zero,49bd0 <__alt_data_end+0xfffe2ad0>
   49bfc:	1013883a 	mov	r9,r2
   49c00:	1811883a 	mov	r8,r3
   49c04:	480d883a 	mov	r6,r9
   49c08:	400f883a 	mov	r7,r8
   49c0c:	8809883a 	mov	r4,r17
   49c10:	a00b883a 	mov	r5,r20
   49c14:	00450e00 	call	450e0 <__divdf3>
   49c18:	d8800f15 	stw	r2,60(sp)
   49c1c:	d8c01015 	stw	r3,64(sp)
   49c20:	d8c00e17 	ldw	r3,56(sp)
   49c24:	18000626 	beq	r3,zero,49c40 <_dtoa_r+0x47c>
   49c28:	d9000f17 	ldw	r4,60(sp)
   49c2c:	d9401017 	ldw	r5,64(sp)
   49c30:	000d883a 	mov	r6,zero
   49c34:	01cffc34 	movhi	r7,16368
   49c38:	00510580 	call	51058 <__ledf2>
   49c3c:	10040b16 	blt	r2,zero,4ac6c <_dtoa_r+0x14a8>
   49c40:	8009883a 	mov	r4,r16
   49c44:	0046bc00 	call	46bc0 <__floatsidf>
   49c48:	d9800f17 	ldw	r6,60(sp)
   49c4c:	d9c01017 	ldw	r7,64(sp)
   49c50:	1009883a 	mov	r4,r2
   49c54:	180b883a 	mov	r5,r3
   49c58:	0045b2c0 	call	45b2c <__muldf3>
   49c5c:	000d883a 	mov	r6,zero
   49c60:	01d00734 	movhi	r7,16412
   49c64:	1009883a 	mov	r4,r2
   49c68:	180b883a 	mov	r5,r3
   49c6c:	00448340 	call	44834 <__adddf3>
   49c70:	1021883a 	mov	r16,r2
   49c74:	d8800617 	ldw	r2,24(sp)
   49c78:	047f3034 	movhi	r17,64704
   49c7c:	1c63883a 	add	r17,r3,r17
   49c80:	10031826 	beq	r2,zero,4a8e4 <_dtoa_r+0x1120>
   49c84:	d8c00517 	ldw	r3,20(sp)
   49c88:	db000617 	ldw	r12,24(sp)
   49c8c:	d8c01315 	stw	r3,76(sp)
   49c90:	d9000b17 	ldw	r4,44(sp)
   49c94:	20038f26 	beq	r4,zero,4aad4 <_dtoa_r+0x1310>
   49c98:	60bfffc4 	addi	r2,r12,-1
   49c9c:	100490fa 	slli	r2,r2,3
   49ca0:	00c00174 	movhi	r3,5
   49ca4:	18d76104 	addi	r3,r3,23940
   49ca8:	1885883a 	add	r2,r3,r2
   49cac:	11800017 	ldw	r6,0(r2)
   49cb0:	11c00117 	ldw	r7,4(r2)
   49cb4:	d8800717 	ldw	r2,28(sp)
   49cb8:	0009883a 	mov	r4,zero
   49cbc:	014ff834 	movhi	r5,16352
   49cc0:	db001615 	stw	r12,88(sp)
   49cc4:	15c00044 	addi	r23,r2,1
   49cc8:	00450e00 	call	450e0 <__divdf3>
   49ccc:	800d883a 	mov	r6,r16
   49cd0:	880f883a 	mov	r7,r17
   49cd4:	1009883a 	mov	r4,r2
   49cd8:	180b883a 	mov	r5,r3
   49cdc:	00462440 	call	46244 <__subdf3>
   49ce0:	d9401017 	ldw	r5,64(sp)
   49ce4:	d9000f17 	ldw	r4,60(sp)
   49ce8:	102b883a 	mov	r21,r2
   49cec:	d8c01215 	stw	r3,72(sp)
   49cf0:	0046b400 	call	46b40 <__fixdfsi>
   49cf4:	1009883a 	mov	r4,r2
   49cf8:	1029883a 	mov	r20,r2
   49cfc:	0046bc00 	call	46bc0 <__floatsidf>
   49d00:	d9000f17 	ldw	r4,60(sp)
   49d04:	d9401017 	ldw	r5,64(sp)
   49d08:	100d883a 	mov	r6,r2
   49d0c:	180f883a 	mov	r7,r3
   49d10:	00462440 	call	46244 <__subdf3>
   49d14:	1823883a 	mov	r17,r3
   49d18:	d8c00717 	ldw	r3,28(sp)
   49d1c:	d9401217 	ldw	r5,72(sp)
   49d20:	a2000c04 	addi	r8,r20,48
   49d24:	1021883a 	mov	r16,r2
   49d28:	1a000005 	stb	r8,0(r3)
   49d2c:	800d883a 	mov	r6,r16
   49d30:	880f883a 	mov	r7,r17
   49d34:	a809883a 	mov	r4,r21
   49d38:	4029883a 	mov	r20,r8
   49d3c:	0045a500 	call	45a50 <__gedf2>
   49d40:	00841d16 	blt	zero,r2,4adb8 <_dtoa_r+0x15f4>
   49d44:	800d883a 	mov	r6,r16
   49d48:	880f883a 	mov	r7,r17
   49d4c:	0009883a 	mov	r4,zero
   49d50:	014ffc34 	movhi	r5,16368
   49d54:	00462440 	call	46244 <__subdf3>
   49d58:	d9401217 	ldw	r5,72(sp)
   49d5c:	100d883a 	mov	r6,r2
   49d60:	180f883a 	mov	r7,r3
   49d64:	a809883a 	mov	r4,r21
   49d68:	0045a500 	call	45a50 <__gedf2>
   49d6c:	db001617 	ldw	r12,88(sp)
   49d70:	00840e16 	blt	zero,r2,4adac <_dtoa_r+0x15e8>
   49d74:	00800044 	movi	r2,1
   49d78:	13006b0e 	bge	r2,r12,49f28 <_dtoa_r+0x764>
   49d7c:	d9000717 	ldw	r4,28(sp)
   49d80:	dd800f15 	stw	r22,60(sp)
   49d84:	dcc01015 	stw	r19,64(sp)
   49d88:	2319883a 	add	r12,r4,r12
   49d8c:	dcc01217 	ldw	r19,72(sp)
   49d90:	602d883a 	mov	r22,r12
   49d94:	dc801215 	stw	r18,72(sp)
   49d98:	b825883a 	mov	r18,r23
   49d9c:	00000906 	br	49dc4 <_dtoa_r+0x600>
   49da0:	00462440 	call	46244 <__subdf3>
   49da4:	a80d883a 	mov	r6,r21
   49da8:	980f883a 	mov	r7,r19
   49dac:	1009883a 	mov	r4,r2
   49db0:	180b883a 	mov	r5,r3
   49db4:	00510580 	call	51058 <__ledf2>
   49db8:	1003e816 	blt	r2,zero,4ad5c <_dtoa_r+0x1598>
   49dbc:	b825883a 	mov	r18,r23
   49dc0:	bd83e926 	beq	r23,r22,4ad68 <_dtoa_r+0x15a4>
   49dc4:	a809883a 	mov	r4,r21
   49dc8:	980b883a 	mov	r5,r19
   49dcc:	000d883a 	mov	r6,zero
   49dd0:	01d00934 	movhi	r7,16420
   49dd4:	0045b2c0 	call	45b2c <__muldf3>
   49dd8:	000d883a 	mov	r6,zero
   49ddc:	01d00934 	movhi	r7,16420
   49de0:	8009883a 	mov	r4,r16
   49de4:	880b883a 	mov	r5,r17
   49de8:	102b883a 	mov	r21,r2
   49dec:	1827883a 	mov	r19,r3
   49df0:	0045b2c0 	call	45b2c <__muldf3>
   49df4:	180b883a 	mov	r5,r3
   49df8:	1009883a 	mov	r4,r2
   49dfc:	1821883a 	mov	r16,r3
   49e00:	1023883a 	mov	r17,r2
   49e04:	0046b400 	call	46b40 <__fixdfsi>
   49e08:	1009883a 	mov	r4,r2
   49e0c:	1029883a 	mov	r20,r2
   49e10:	0046bc00 	call	46bc0 <__floatsidf>
   49e14:	8809883a 	mov	r4,r17
   49e18:	800b883a 	mov	r5,r16
   49e1c:	100d883a 	mov	r6,r2
   49e20:	180f883a 	mov	r7,r3
   49e24:	00462440 	call	46244 <__subdf3>
   49e28:	a5000c04 	addi	r20,r20,48
   49e2c:	a80d883a 	mov	r6,r21
   49e30:	980f883a 	mov	r7,r19
   49e34:	1009883a 	mov	r4,r2
   49e38:	180b883a 	mov	r5,r3
   49e3c:	95000005 	stb	r20,0(r18)
   49e40:	1021883a 	mov	r16,r2
   49e44:	1823883a 	mov	r17,r3
   49e48:	00510580 	call	51058 <__ledf2>
   49e4c:	bdc00044 	addi	r23,r23,1
   49e50:	800d883a 	mov	r6,r16
   49e54:	880f883a 	mov	r7,r17
   49e58:	0009883a 	mov	r4,zero
   49e5c:	014ffc34 	movhi	r5,16368
   49e60:	103fcf0e 	bge	r2,zero,49da0 <__alt_data_end+0xfffe2ca0>
   49e64:	d8c01317 	ldw	r3,76(sp)
   49e68:	d8c00515 	stw	r3,20(sp)
   49e6c:	d9400917 	ldw	r5,36(sp)
   49e70:	e009883a 	mov	r4,fp
   49e74:	004cf080 	call	4cf08 <_Bfree>
   49e78:	d9000517 	ldw	r4,20(sp)
   49e7c:	d9802317 	ldw	r6,140(sp)
   49e80:	d9c02517 	ldw	r7,148(sp)
   49e84:	b8000005 	stb	zero,0(r23)
   49e88:	20800044 	addi	r2,r4,1
   49e8c:	30800015 	stw	r2,0(r6)
   49e90:	3802aa26 	beq	r7,zero,4a93c <_dtoa_r+0x1178>
   49e94:	3dc00015 	stw	r23,0(r7)
   49e98:	d8800717 	ldw	r2,28(sp)
   49e9c:	003e7906 	br	49884 <__alt_data_end+0xfffe2784>
   49ea0:	00800434 	movhi	r2,16
   49ea4:	10bfffc4 	addi	r2,r2,-1
   49ea8:	88a2703a 	and	r17,r17,r2
   49eac:	883e851e 	bne	r17,zero,498c4 <__alt_data_end+0xfffe27c4>
   49eb0:	00800174 	movhi	r2,5
   49eb4:	10974304 	addi	r2,r2,23820
   49eb8:	003e8406 	br	498cc <__alt_data_end+0xfffe27cc>
   49ebc:	10c00204 	addi	r3,r2,8
   49ec0:	003e8706 	br	498e0 <__alt_data_end+0xfffe27e0>
   49ec4:	01400434 	movhi	r5,16
   49ec8:	297fffc4 	addi	r5,r5,-1
   49ecc:	994a703a 	and	r5,r19,r5
   49ed0:	9009883a 	mov	r4,r18
   49ed4:	843f0044 	addi	r16,r16,-1023
   49ed8:	294ffc34 	orhi	r5,r5,16368
   49edc:	dd800217 	ldw	r22,8(sp)
   49ee0:	d8001115 	stw	zero,68(sp)
   49ee4:	003ea506 	br	4997c <__alt_data_end+0xfffe287c>
   49ee8:	00800174 	movhi	r2,5
   49eec:	10973a04 	addi	r2,r2,23784
   49ef0:	003e6406 	br	49884 <__alt_data_end+0xfffe2784>
   49ef4:	e0001115 	stw	zero,68(fp)
   49ef8:	000b883a 	mov	r5,zero
   49efc:	e009883a 	mov	r4,fp
   49f00:	004ce600 	call	4ce60 <_Balloc>
   49f04:	01bfffc4 	movi	r6,-1
   49f08:	01c00044 	movi	r7,1
   49f0c:	d8800715 	stw	r2,28(sp)
   49f10:	d9800c15 	stw	r6,48(sp)
   49f14:	e0801015 	stw	r2,64(fp)
   49f18:	d8000315 	stw	zero,12(sp)
   49f1c:	d9c00b15 	stw	r7,44(sp)
   49f20:	d9800615 	stw	r6,24(sp)
   49f24:	d8002215 	stw	zero,136(sp)
   49f28:	d8800117 	ldw	r2,4(sp)
   49f2c:	10008916 	blt	r2,zero,4a154 <_dtoa_r+0x990>
   49f30:	d9000517 	ldw	r4,20(sp)
   49f34:	00c00384 	movi	r3,14
   49f38:	19008616 	blt	r3,r4,4a154 <_dtoa_r+0x990>
   49f3c:	200490fa 	slli	r2,r4,3
   49f40:	00c00174 	movhi	r3,5
   49f44:	d9802217 	ldw	r6,136(sp)
   49f48:	18d76104 	addi	r3,r3,23940
   49f4c:	1885883a 	add	r2,r3,r2
   49f50:	14000017 	ldw	r16,0(r2)
   49f54:	14400117 	ldw	r17,4(r2)
   49f58:	30016316 	blt	r6,zero,4a4e8 <_dtoa_r+0xd24>
   49f5c:	800d883a 	mov	r6,r16
   49f60:	880f883a 	mov	r7,r17
   49f64:	9009883a 	mov	r4,r18
   49f68:	980b883a 	mov	r5,r19
   49f6c:	00450e00 	call	450e0 <__divdf3>
   49f70:	180b883a 	mov	r5,r3
   49f74:	1009883a 	mov	r4,r2
   49f78:	0046b400 	call	46b40 <__fixdfsi>
   49f7c:	1009883a 	mov	r4,r2
   49f80:	102b883a 	mov	r21,r2
   49f84:	0046bc00 	call	46bc0 <__floatsidf>
   49f88:	800d883a 	mov	r6,r16
   49f8c:	880f883a 	mov	r7,r17
   49f90:	1009883a 	mov	r4,r2
   49f94:	180b883a 	mov	r5,r3
   49f98:	0045b2c0 	call	45b2c <__muldf3>
   49f9c:	100d883a 	mov	r6,r2
   49fa0:	180f883a 	mov	r7,r3
   49fa4:	9009883a 	mov	r4,r18
   49fa8:	980b883a 	mov	r5,r19
   49fac:	00462440 	call	46244 <__subdf3>
   49fb0:	d9c00717 	ldw	r7,28(sp)
   49fb4:	1009883a 	mov	r4,r2
   49fb8:	a8800c04 	addi	r2,r21,48
   49fbc:	38800005 	stb	r2,0(r7)
   49fc0:	3dc00044 	addi	r23,r7,1
   49fc4:	d9c00617 	ldw	r7,24(sp)
   49fc8:	01800044 	movi	r6,1
   49fcc:	180b883a 	mov	r5,r3
   49fd0:	2005883a 	mov	r2,r4
   49fd4:	39803826 	beq	r7,r6,4a0b8 <_dtoa_r+0x8f4>
   49fd8:	000d883a 	mov	r6,zero
   49fdc:	01d00934 	movhi	r7,16420
   49fe0:	0045b2c0 	call	45b2c <__muldf3>
   49fe4:	000d883a 	mov	r6,zero
   49fe8:	000f883a 	mov	r7,zero
   49fec:	1009883a 	mov	r4,r2
   49ff0:	180b883a 	mov	r5,r3
   49ff4:	1025883a 	mov	r18,r2
   49ff8:	1827883a 	mov	r19,r3
   49ffc:	00459c80 	call	459c8 <__eqdf2>
   4a000:	103f9a26 	beq	r2,zero,49e6c <__alt_data_end+0xfffe2d6c>
   4a004:	d9c00617 	ldw	r7,24(sp)
   4a008:	d8c00717 	ldw	r3,28(sp)
   4a00c:	b829883a 	mov	r20,r23
   4a010:	38bfffc4 	addi	r2,r7,-1
   4a014:	18ad883a 	add	r22,r3,r2
   4a018:	00000a06 	br	4a044 <_dtoa_r+0x880>
   4a01c:	0045b2c0 	call	45b2c <__muldf3>
   4a020:	000d883a 	mov	r6,zero
   4a024:	000f883a 	mov	r7,zero
   4a028:	1009883a 	mov	r4,r2
   4a02c:	180b883a 	mov	r5,r3
   4a030:	1025883a 	mov	r18,r2
   4a034:	1827883a 	mov	r19,r3
   4a038:	b829883a 	mov	r20,r23
   4a03c:	00459c80 	call	459c8 <__eqdf2>
   4a040:	103f8a26 	beq	r2,zero,49e6c <__alt_data_end+0xfffe2d6c>
   4a044:	800d883a 	mov	r6,r16
   4a048:	880f883a 	mov	r7,r17
   4a04c:	9009883a 	mov	r4,r18
   4a050:	980b883a 	mov	r5,r19
   4a054:	00450e00 	call	450e0 <__divdf3>
   4a058:	180b883a 	mov	r5,r3
   4a05c:	1009883a 	mov	r4,r2
   4a060:	0046b400 	call	46b40 <__fixdfsi>
   4a064:	1009883a 	mov	r4,r2
   4a068:	102b883a 	mov	r21,r2
   4a06c:	0046bc00 	call	46bc0 <__floatsidf>
   4a070:	800d883a 	mov	r6,r16
   4a074:	880f883a 	mov	r7,r17
   4a078:	1009883a 	mov	r4,r2
   4a07c:	180b883a 	mov	r5,r3
   4a080:	0045b2c0 	call	45b2c <__muldf3>
   4a084:	100d883a 	mov	r6,r2
   4a088:	180f883a 	mov	r7,r3
   4a08c:	9009883a 	mov	r4,r18
   4a090:	980b883a 	mov	r5,r19
   4a094:	00462440 	call	46244 <__subdf3>
   4a098:	aa000c04 	addi	r8,r21,48
   4a09c:	a2000005 	stb	r8,0(r20)
   4a0a0:	000d883a 	mov	r6,zero
   4a0a4:	01d00934 	movhi	r7,16420
   4a0a8:	1009883a 	mov	r4,r2
   4a0ac:	180b883a 	mov	r5,r3
   4a0b0:	a5c00044 	addi	r23,r20,1
   4a0b4:	b53fd91e 	bne	r22,r20,4a01c <__alt_data_end+0xfffe2f1c>
   4a0b8:	100d883a 	mov	r6,r2
   4a0bc:	180f883a 	mov	r7,r3
   4a0c0:	1009883a 	mov	r4,r2
   4a0c4:	180b883a 	mov	r5,r3
   4a0c8:	00448340 	call	44834 <__adddf3>
   4a0cc:	100d883a 	mov	r6,r2
   4a0d0:	180f883a 	mov	r7,r3
   4a0d4:	8009883a 	mov	r4,r16
   4a0d8:	880b883a 	mov	r5,r17
   4a0dc:	1027883a 	mov	r19,r2
   4a0e0:	1825883a 	mov	r18,r3
   4a0e4:	00510580 	call	51058 <__ledf2>
   4a0e8:	10000816 	blt	r2,zero,4a10c <_dtoa_r+0x948>
   4a0ec:	980d883a 	mov	r6,r19
   4a0f0:	900f883a 	mov	r7,r18
   4a0f4:	8009883a 	mov	r4,r16
   4a0f8:	880b883a 	mov	r5,r17
   4a0fc:	00459c80 	call	459c8 <__eqdf2>
   4a100:	103f5a1e 	bne	r2,zero,49e6c <__alt_data_end+0xfffe2d6c>
   4a104:	ad40004c 	andi	r21,r21,1
   4a108:	a83f5826 	beq	r21,zero,49e6c <__alt_data_end+0xfffe2d6c>
   4a10c:	bd3fffc3 	ldbu	r20,-1(r23)
   4a110:	b8bfffc4 	addi	r2,r23,-1
   4a114:	1007883a 	mov	r3,r2
   4a118:	01400e44 	movi	r5,57
   4a11c:	d9800717 	ldw	r6,28(sp)
   4a120:	00000506 	br	4a138 <_dtoa_r+0x974>
   4a124:	18ffffc4 	addi	r3,r3,-1
   4a128:	11824726 	beq	r2,r6,4aa48 <_dtoa_r+0x1284>
   4a12c:	1d000003 	ldbu	r20,0(r3)
   4a130:	102f883a 	mov	r23,r2
   4a134:	10bfffc4 	addi	r2,r2,-1
   4a138:	a1003fcc 	andi	r4,r20,255
   4a13c:	2100201c 	xori	r4,r4,128
   4a140:	213fe004 	addi	r4,r4,-128
   4a144:	217ff726 	beq	r4,r5,4a124 <__alt_data_end+0xfffe3024>
   4a148:	a2000044 	addi	r8,r20,1
   4a14c:	12000005 	stb	r8,0(r2)
   4a150:	003f4606 	br	49e6c <__alt_data_end+0xfffe2d6c>
   4a154:	d9000b17 	ldw	r4,44(sp)
   4a158:	2000c826 	beq	r4,zero,4a47c <_dtoa_r+0xcb8>
   4a15c:	d9800317 	ldw	r6,12(sp)
   4a160:	00c00044 	movi	r3,1
   4a164:	1980f90e 	bge	r3,r6,4a54c <_dtoa_r+0xd88>
   4a168:	d8800617 	ldw	r2,24(sp)
   4a16c:	d8c00a17 	ldw	r3,40(sp)
   4a170:	157fffc4 	addi	r21,r2,-1
   4a174:	1d41f316 	blt	r3,r21,4a944 <_dtoa_r+0x1180>
   4a178:	1d6bc83a 	sub	r21,r3,r21
   4a17c:	d9c00617 	ldw	r7,24(sp)
   4a180:	3802aa16 	blt	r7,zero,4ac2c <_dtoa_r+0x1468>
   4a184:	dd000817 	ldw	r20,32(sp)
   4a188:	d8800617 	ldw	r2,24(sp)
   4a18c:	d8c00817 	ldw	r3,32(sp)
   4a190:	01400044 	movi	r5,1
   4a194:	e009883a 	mov	r4,fp
   4a198:	1887883a 	add	r3,r3,r2
   4a19c:	d8c00815 	stw	r3,32(sp)
   4a1a0:	b0ad883a 	add	r22,r22,r2
   4a1a4:	004d26c0 	call	4d26c <__i2b>
   4a1a8:	1023883a 	mov	r17,r2
   4a1ac:	a0000826 	beq	r20,zero,4a1d0 <_dtoa_r+0xa0c>
   4a1b0:	0580070e 	bge	zero,r22,4a1d0 <_dtoa_r+0xa0c>
   4a1b4:	a005883a 	mov	r2,r20
   4a1b8:	b500b916 	blt	r22,r20,4a4a0 <_dtoa_r+0xcdc>
   4a1bc:	d9000817 	ldw	r4,32(sp)
   4a1c0:	a0a9c83a 	sub	r20,r20,r2
   4a1c4:	b0adc83a 	sub	r22,r22,r2
   4a1c8:	2089c83a 	sub	r4,r4,r2
   4a1cc:	d9000815 	stw	r4,32(sp)
   4a1d0:	d9800a17 	ldw	r6,40(sp)
   4a1d4:	0181810e 	bge	zero,r6,4a7dc <_dtoa_r+0x1018>
   4a1d8:	d9c00b17 	ldw	r7,44(sp)
   4a1dc:	3800b326 	beq	r7,zero,4a4ac <_dtoa_r+0xce8>
   4a1e0:	a800b226 	beq	r21,zero,4a4ac <_dtoa_r+0xce8>
   4a1e4:	880b883a 	mov	r5,r17
   4a1e8:	a80d883a 	mov	r6,r21
   4a1ec:	e009883a 	mov	r4,fp
   4a1f0:	004d4a00 	call	4d4a0 <__pow5mult>
   4a1f4:	d9800917 	ldw	r6,36(sp)
   4a1f8:	100b883a 	mov	r5,r2
   4a1fc:	e009883a 	mov	r4,fp
   4a200:	1023883a 	mov	r17,r2
   4a204:	004d2a80 	call	4d2a8 <__multiply>
   4a208:	1021883a 	mov	r16,r2
   4a20c:	d8800a17 	ldw	r2,40(sp)
   4a210:	d9400917 	ldw	r5,36(sp)
   4a214:	e009883a 	mov	r4,fp
   4a218:	1545c83a 	sub	r2,r2,r21
   4a21c:	d8800a15 	stw	r2,40(sp)
   4a220:	004cf080 	call	4cf08 <_Bfree>
   4a224:	d8c00a17 	ldw	r3,40(sp)
   4a228:	18009f1e 	bne	r3,zero,4a4a8 <_dtoa_r+0xce4>
   4a22c:	05c00044 	movi	r23,1
   4a230:	e009883a 	mov	r4,fp
   4a234:	b80b883a 	mov	r5,r23
   4a238:	004d26c0 	call	4d26c <__i2b>
   4a23c:	d9000d17 	ldw	r4,52(sp)
   4a240:	102b883a 	mov	r21,r2
   4a244:	2000ce26 	beq	r4,zero,4a580 <_dtoa_r+0xdbc>
   4a248:	200d883a 	mov	r6,r4
   4a24c:	100b883a 	mov	r5,r2
   4a250:	e009883a 	mov	r4,fp
   4a254:	004d4a00 	call	4d4a0 <__pow5mult>
   4a258:	d9800317 	ldw	r6,12(sp)
   4a25c:	102b883a 	mov	r21,r2
   4a260:	b981810e 	bge	r23,r6,4a868 <_dtoa_r+0x10a4>
   4a264:	0027883a 	mov	r19,zero
   4a268:	a8800417 	ldw	r2,16(r21)
   4a26c:	05c00804 	movi	r23,32
   4a270:	10800104 	addi	r2,r2,4
   4a274:	1085883a 	add	r2,r2,r2
   4a278:	1085883a 	add	r2,r2,r2
   4a27c:	a885883a 	add	r2,r21,r2
   4a280:	11000017 	ldw	r4,0(r2)
   4a284:	004d1540 	call	4d154 <__hi0bits>
   4a288:	b885c83a 	sub	r2,r23,r2
   4a28c:	1585883a 	add	r2,r2,r22
   4a290:	108007cc 	andi	r2,r2,31
   4a294:	1000b326 	beq	r2,zero,4a564 <_dtoa_r+0xda0>
   4a298:	00c00804 	movi	r3,32
   4a29c:	1887c83a 	sub	r3,r3,r2
   4a2a0:	01000104 	movi	r4,4
   4a2a4:	20c2cd0e 	bge	r4,r3,4addc <_dtoa_r+0x1618>
   4a2a8:	00c00704 	movi	r3,28
   4a2ac:	1885c83a 	sub	r2,r3,r2
   4a2b0:	d8c00817 	ldw	r3,32(sp)
   4a2b4:	a0a9883a 	add	r20,r20,r2
   4a2b8:	b0ad883a 	add	r22,r22,r2
   4a2bc:	1887883a 	add	r3,r3,r2
   4a2c0:	d8c00815 	stw	r3,32(sp)
   4a2c4:	d9800817 	ldw	r6,32(sp)
   4a2c8:	0180040e 	bge	zero,r6,4a2dc <_dtoa_r+0xb18>
   4a2cc:	800b883a 	mov	r5,r16
   4a2d0:	e009883a 	mov	r4,fp
   4a2d4:	004d5e00 	call	4d5e0 <__lshift>
   4a2d8:	1021883a 	mov	r16,r2
   4a2dc:	0580050e 	bge	zero,r22,4a2f4 <_dtoa_r+0xb30>
   4a2e0:	a80b883a 	mov	r5,r21
   4a2e4:	b00d883a 	mov	r6,r22
   4a2e8:	e009883a 	mov	r4,fp
   4a2ec:	004d5e00 	call	4d5e0 <__lshift>
   4a2f0:	102b883a 	mov	r21,r2
   4a2f4:	d9c00e17 	ldw	r7,56(sp)
   4a2f8:	3801211e 	bne	r7,zero,4a780 <_dtoa_r+0xfbc>
   4a2fc:	d9800617 	ldw	r6,24(sp)
   4a300:	0181380e 	bge	zero,r6,4a7e4 <_dtoa_r+0x1020>
   4a304:	d8c00b17 	ldw	r3,44(sp)
   4a308:	1800ab1e 	bne	r3,zero,4a5b8 <_dtoa_r+0xdf4>
   4a30c:	dc800717 	ldw	r18,28(sp)
   4a310:	dcc00617 	ldw	r19,24(sp)
   4a314:	9029883a 	mov	r20,r18
   4a318:	00000206 	br	4a324 <_dtoa_r+0xb60>
   4a31c:	004cf300 	call	4cf30 <__multadd>
   4a320:	1021883a 	mov	r16,r2
   4a324:	a80b883a 	mov	r5,r21
   4a328:	8009883a 	mov	r4,r16
   4a32c:	00495c40 	call	495c4 <quorem>
   4a330:	10800c04 	addi	r2,r2,48
   4a334:	90800005 	stb	r2,0(r18)
   4a338:	94800044 	addi	r18,r18,1
   4a33c:	9507c83a 	sub	r3,r18,r20
   4a340:	000f883a 	mov	r7,zero
   4a344:	01800284 	movi	r6,10
   4a348:	800b883a 	mov	r5,r16
   4a34c:	e009883a 	mov	r4,fp
   4a350:	1cfff216 	blt	r3,r19,4a31c <__alt_data_end+0xfffe321c>
   4a354:	1011883a 	mov	r8,r2
   4a358:	d8800617 	ldw	r2,24(sp)
   4a35c:	0082370e 	bge	zero,r2,4ac3c <_dtoa_r+0x1478>
   4a360:	d9000717 	ldw	r4,28(sp)
   4a364:	0025883a 	mov	r18,zero
   4a368:	20af883a 	add	r23,r4,r2
   4a36c:	01800044 	movi	r6,1
   4a370:	800b883a 	mov	r5,r16
   4a374:	e009883a 	mov	r4,fp
   4a378:	da001715 	stw	r8,92(sp)
   4a37c:	004d5e00 	call	4d5e0 <__lshift>
   4a380:	a80b883a 	mov	r5,r21
   4a384:	1009883a 	mov	r4,r2
   4a388:	d8800915 	stw	r2,36(sp)
   4a38c:	004d7280 	call	4d728 <__mcmp>
   4a390:	da001717 	ldw	r8,92(sp)
   4a394:	0081800e 	bge	zero,r2,4a998 <_dtoa_r+0x11d4>
   4a398:	b93fffc3 	ldbu	r4,-1(r23)
   4a39c:	b8bfffc4 	addi	r2,r23,-1
   4a3a0:	1007883a 	mov	r3,r2
   4a3a4:	01800e44 	movi	r6,57
   4a3a8:	d9c00717 	ldw	r7,28(sp)
   4a3ac:	00000506 	br	4a3c4 <_dtoa_r+0xc00>
   4a3b0:	18ffffc4 	addi	r3,r3,-1
   4a3b4:	11c12326 	beq	r2,r7,4a844 <_dtoa_r+0x1080>
   4a3b8:	19000003 	ldbu	r4,0(r3)
   4a3bc:	102f883a 	mov	r23,r2
   4a3c0:	10bfffc4 	addi	r2,r2,-1
   4a3c4:	21403fcc 	andi	r5,r4,255
   4a3c8:	2940201c 	xori	r5,r5,128
   4a3cc:	297fe004 	addi	r5,r5,-128
   4a3d0:	29bff726 	beq	r5,r6,4a3b0 <__alt_data_end+0xfffe32b0>
   4a3d4:	21000044 	addi	r4,r4,1
   4a3d8:	11000005 	stb	r4,0(r2)
   4a3dc:	a80b883a 	mov	r5,r21
   4a3e0:	e009883a 	mov	r4,fp
   4a3e4:	004cf080 	call	4cf08 <_Bfree>
   4a3e8:	883ea026 	beq	r17,zero,49e6c <__alt_data_end+0xfffe2d6c>
   4a3ec:	90000426 	beq	r18,zero,4a400 <_dtoa_r+0xc3c>
   4a3f0:	94400326 	beq	r18,r17,4a400 <_dtoa_r+0xc3c>
   4a3f4:	900b883a 	mov	r5,r18
   4a3f8:	e009883a 	mov	r4,fp
   4a3fc:	004cf080 	call	4cf08 <_Bfree>
   4a400:	880b883a 	mov	r5,r17
   4a404:	e009883a 	mov	r4,fp
   4a408:	004cf080 	call	4cf08 <_Bfree>
   4a40c:	003e9706 	br	49e6c <__alt_data_end+0xfffe2d6c>
   4a410:	01800044 	movi	r6,1
   4a414:	d9800e15 	stw	r6,56(sp)
   4a418:	003d9606 	br	49a74 <__alt_data_end+0xfffe2974>
   4a41c:	d8800817 	ldw	r2,32(sp)
   4a420:	d8c00517 	ldw	r3,20(sp)
   4a424:	d8000d15 	stw	zero,52(sp)
   4a428:	10c5c83a 	sub	r2,r2,r3
   4a42c:	00c9c83a 	sub	r4,zero,r3
   4a430:	d8800815 	stw	r2,32(sp)
   4a434:	d9000a15 	stw	r4,40(sp)
   4a438:	003d9706 	br	49a98 <__alt_data_end+0xfffe2998>
   4a43c:	05adc83a 	sub	r22,zero,r22
   4a440:	dd800815 	stw	r22,32(sp)
   4a444:	002d883a 	mov	r22,zero
   4a448:	003d8e06 	br	49a84 <__alt_data_end+0xfffe2984>
   4a44c:	d9000517 	ldw	r4,20(sp)
   4a450:	0046bc00 	call	46bc0 <__floatsidf>
   4a454:	100d883a 	mov	r6,r2
   4a458:	180f883a 	mov	r7,r3
   4a45c:	a009883a 	mov	r4,r20
   4a460:	880b883a 	mov	r5,r17
   4a464:	00459c80 	call	459c8 <__eqdf2>
   4a468:	103d7126 	beq	r2,zero,49a30 <__alt_data_end+0xfffe2930>
   4a46c:	d9c00517 	ldw	r7,20(sp)
   4a470:	39ffffc4 	addi	r7,r7,-1
   4a474:	d9c00515 	stw	r7,20(sp)
   4a478:	003d6d06 	br	49a30 <__alt_data_end+0xfffe2930>
   4a47c:	dd400a17 	ldw	r21,40(sp)
   4a480:	dd000817 	ldw	r20,32(sp)
   4a484:	0023883a 	mov	r17,zero
   4a488:	003f4806 	br	4a1ac <__alt_data_end+0xfffe30ac>
   4a48c:	10e3c83a 	sub	r17,r2,r3
   4a490:	9448983a 	sll	r4,r18,r17
   4a494:	003d3206 	br	49960 <__alt_data_end+0xfffe2860>
   4a498:	d8000e15 	stw	zero,56(sp)
   4a49c:	003d7506 	br	49a74 <__alt_data_end+0xfffe2974>
   4a4a0:	b005883a 	mov	r2,r22
   4a4a4:	003f4506 	br	4a1bc <__alt_data_end+0xfffe30bc>
   4a4a8:	dc000915 	stw	r16,36(sp)
   4a4ac:	d9800a17 	ldw	r6,40(sp)
   4a4b0:	d9400917 	ldw	r5,36(sp)
   4a4b4:	e009883a 	mov	r4,fp
   4a4b8:	004d4a00 	call	4d4a0 <__pow5mult>
   4a4bc:	1021883a 	mov	r16,r2
   4a4c0:	003f5a06 	br	4a22c <__alt_data_end+0xfffe312c>
   4a4c4:	01c00044 	movi	r7,1
   4a4c8:	d9c00b15 	stw	r7,44(sp)
   4a4cc:	d8802217 	ldw	r2,136(sp)
   4a4d0:	0081280e 	bge	zero,r2,4a974 <_dtoa_r+0x11b0>
   4a4d4:	100d883a 	mov	r6,r2
   4a4d8:	1021883a 	mov	r16,r2
   4a4dc:	d8800c15 	stw	r2,48(sp)
   4a4e0:	d8800615 	stw	r2,24(sp)
   4a4e4:	003d8806 	br	49b08 <__alt_data_end+0xfffe2a08>
   4a4e8:	d8800617 	ldw	r2,24(sp)
   4a4ec:	00be9b16 	blt	zero,r2,49f5c <__alt_data_end+0xfffe2e5c>
   4a4f0:	10010f1e 	bne	r2,zero,4a930 <_dtoa_r+0x116c>
   4a4f4:	880b883a 	mov	r5,r17
   4a4f8:	000d883a 	mov	r6,zero
   4a4fc:	01d00534 	movhi	r7,16404
   4a500:	8009883a 	mov	r4,r16
   4a504:	0045b2c0 	call	45b2c <__muldf3>
   4a508:	900d883a 	mov	r6,r18
   4a50c:	980f883a 	mov	r7,r19
   4a510:	1009883a 	mov	r4,r2
   4a514:	180b883a 	mov	r5,r3
   4a518:	0045a500 	call	45a50 <__gedf2>
   4a51c:	002b883a 	mov	r21,zero
   4a520:	0023883a 	mov	r17,zero
   4a524:	1000bf16 	blt	r2,zero,4a824 <_dtoa_r+0x1060>
   4a528:	d9802217 	ldw	r6,136(sp)
   4a52c:	ddc00717 	ldw	r23,28(sp)
   4a530:	018c303a 	nor	r6,zero,r6
   4a534:	d9800515 	stw	r6,20(sp)
   4a538:	a80b883a 	mov	r5,r21
   4a53c:	e009883a 	mov	r4,fp
   4a540:	004cf080 	call	4cf08 <_Bfree>
   4a544:	883e4926 	beq	r17,zero,49e6c <__alt_data_end+0xfffe2d6c>
   4a548:	003fad06 	br	4a400 <__alt_data_end+0xfffe3300>
   4a54c:	d9c01117 	ldw	r7,68(sp)
   4a550:	3801bc26 	beq	r7,zero,4ac44 <_dtoa_r+0x1480>
   4a554:	10810cc4 	addi	r2,r2,1075
   4a558:	dd400a17 	ldw	r21,40(sp)
   4a55c:	dd000817 	ldw	r20,32(sp)
   4a560:	003f0a06 	br	4a18c <__alt_data_end+0xfffe308c>
   4a564:	00800704 	movi	r2,28
   4a568:	d9000817 	ldw	r4,32(sp)
   4a56c:	a0a9883a 	add	r20,r20,r2
   4a570:	b0ad883a 	add	r22,r22,r2
   4a574:	2089883a 	add	r4,r4,r2
   4a578:	d9000815 	stw	r4,32(sp)
   4a57c:	003f5106 	br	4a2c4 <__alt_data_end+0xfffe31c4>
   4a580:	d8c00317 	ldw	r3,12(sp)
   4a584:	b8c1fc0e 	bge	r23,r3,4ad78 <_dtoa_r+0x15b4>
   4a588:	0027883a 	mov	r19,zero
   4a58c:	b805883a 	mov	r2,r23
   4a590:	003f3e06 	br	4a28c <__alt_data_end+0xfffe318c>
   4a594:	880b883a 	mov	r5,r17
   4a598:	e009883a 	mov	r4,fp
   4a59c:	000f883a 	mov	r7,zero
   4a5a0:	01800284 	movi	r6,10
   4a5a4:	004cf300 	call	4cf30 <__multadd>
   4a5a8:	d9000c17 	ldw	r4,48(sp)
   4a5ac:	1023883a 	mov	r17,r2
   4a5b0:	0102040e 	bge	zero,r4,4adc4 <_dtoa_r+0x1600>
   4a5b4:	d9000615 	stw	r4,24(sp)
   4a5b8:	0500050e 	bge	zero,r20,4a5d0 <_dtoa_r+0xe0c>
   4a5bc:	880b883a 	mov	r5,r17
   4a5c0:	a00d883a 	mov	r6,r20
   4a5c4:	e009883a 	mov	r4,fp
   4a5c8:	004d5e00 	call	4d5e0 <__lshift>
   4a5cc:	1023883a 	mov	r17,r2
   4a5d0:	9801241e 	bne	r19,zero,4aa64 <_dtoa_r+0x12a0>
   4a5d4:	8829883a 	mov	r20,r17
   4a5d8:	d9000617 	ldw	r4,24(sp)
   4a5dc:	dcc00717 	ldw	r19,28(sp)
   4a5e0:	9480004c 	andi	r18,r18,1
   4a5e4:	20bfffc4 	addi	r2,r4,-1
   4a5e8:	9885883a 	add	r2,r19,r2
   4a5ec:	d8800415 	stw	r2,16(sp)
   4a5f0:	dc800615 	stw	r18,24(sp)
   4a5f4:	a80b883a 	mov	r5,r21
   4a5f8:	8009883a 	mov	r4,r16
   4a5fc:	00495c40 	call	495c4 <quorem>
   4a600:	880b883a 	mov	r5,r17
   4a604:	8009883a 	mov	r4,r16
   4a608:	102f883a 	mov	r23,r2
   4a60c:	004d7280 	call	4d728 <__mcmp>
   4a610:	a80b883a 	mov	r5,r21
   4a614:	a00d883a 	mov	r6,r20
   4a618:	e009883a 	mov	r4,fp
   4a61c:	102d883a 	mov	r22,r2
   4a620:	004d7880 	call	4d788 <__mdiff>
   4a624:	1007883a 	mov	r3,r2
   4a628:	10800317 	ldw	r2,12(r2)
   4a62c:	bc800c04 	addi	r18,r23,48
   4a630:	180b883a 	mov	r5,r3
   4a634:	10004e1e 	bne	r2,zero,4a770 <_dtoa_r+0xfac>
   4a638:	8009883a 	mov	r4,r16
   4a63c:	d8c01615 	stw	r3,88(sp)
   4a640:	004d7280 	call	4d728 <__mcmp>
   4a644:	d8c01617 	ldw	r3,88(sp)
   4a648:	e009883a 	mov	r4,fp
   4a64c:	d8801615 	stw	r2,88(sp)
   4a650:	180b883a 	mov	r5,r3
   4a654:	004cf080 	call	4cf08 <_Bfree>
   4a658:	d8801617 	ldw	r2,88(sp)
   4a65c:	1000041e 	bne	r2,zero,4a670 <_dtoa_r+0xeac>
   4a660:	d9800317 	ldw	r6,12(sp)
   4a664:	3000021e 	bne	r6,zero,4a670 <_dtoa_r+0xeac>
   4a668:	d8c00617 	ldw	r3,24(sp)
   4a66c:	18003726 	beq	r3,zero,4a74c <_dtoa_r+0xf88>
   4a670:	b0002016 	blt	r22,zero,4a6f4 <_dtoa_r+0xf30>
   4a674:	b000041e 	bne	r22,zero,4a688 <_dtoa_r+0xec4>
   4a678:	d9000317 	ldw	r4,12(sp)
   4a67c:	2000021e 	bne	r4,zero,4a688 <_dtoa_r+0xec4>
   4a680:	d8c00617 	ldw	r3,24(sp)
   4a684:	18001b26 	beq	r3,zero,4a6f4 <_dtoa_r+0xf30>
   4a688:	00810716 	blt	zero,r2,4aaa8 <_dtoa_r+0x12e4>
   4a68c:	d8c00417 	ldw	r3,16(sp)
   4a690:	9d800044 	addi	r22,r19,1
   4a694:	9c800005 	stb	r18,0(r19)
   4a698:	b02f883a 	mov	r23,r22
   4a69c:	98c10626 	beq	r19,r3,4aab8 <_dtoa_r+0x12f4>
   4a6a0:	800b883a 	mov	r5,r16
   4a6a4:	000f883a 	mov	r7,zero
   4a6a8:	01800284 	movi	r6,10
   4a6ac:	e009883a 	mov	r4,fp
   4a6b0:	004cf300 	call	4cf30 <__multadd>
   4a6b4:	1021883a 	mov	r16,r2
   4a6b8:	000f883a 	mov	r7,zero
   4a6bc:	01800284 	movi	r6,10
   4a6c0:	880b883a 	mov	r5,r17
   4a6c4:	e009883a 	mov	r4,fp
   4a6c8:	8d002526 	beq	r17,r20,4a760 <_dtoa_r+0xf9c>
   4a6cc:	004cf300 	call	4cf30 <__multadd>
   4a6d0:	a00b883a 	mov	r5,r20
   4a6d4:	000f883a 	mov	r7,zero
   4a6d8:	01800284 	movi	r6,10
   4a6dc:	e009883a 	mov	r4,fp
   4a6e0:	1023883a 	mov	r17,r2
   4a6e4:	004cf300 	call	4cf30 <__multadd>
   4a6e8:	1029883a 	mov	r20,r2
   4a6ec:	b027883a 	mov	r19,r22
   4a6f0:	003fc006 	br	4a5f4 <__alt_data_end+0xfffe34f4>
   4a6f4:	9011883a 	mov	r8,r18
   4a6f8:	00800e0e 	bge	zero,r2,4a734 <_dtoa_r+0xf70>
   4a6fc:	800b883a 	mov	r5,r16
   4a700:	01800044 	movi	r6,1
   4a704:	e009883a 	mov	r4,fp
   4a708:	da001715 	stw	r8,92(sp)
   4a70c:	004d5e00 	call	4d5e0 <__lshift>
   4a710:	a80b883a 	mov	r5,r21
   4a714:	1009883a 	mov	r4,r2
   4a718:	1021883a 	mov	r16,r2
   4a71c:	004d7280 	call	4d728 <__mcmp>
   4a720:	da001717 	ldw	r8,92(sp)
   4a724:	0081960e 	bge	zero,r2,4ad80 <_dtoa_r+0x15bc>
   4a728:	00800e44 	movi	r2,57
   4a72c:	40817026 	beq	r8,r2,4acf0 <_dtoa_r+0x152c>
   4a730:	ba000c44 	addi	r8,r23,49
   4a734:	8825883a 	mov	r18,r17
   4a738:	9dc00044 	addi	r23,r19,1
   4a73c:	9a000005 	stb	r8,0(r19)
   4a740:	a023883a 	mov	r17,r20
   4a744:	dc000915 	stw	r16,36(sp)
   4a748:	003f2406 	br	4a3dc <__alt_data_end+0xfffe32dc>
   4a74c:	00800e44 	movi	r2,57
   4a750:	9011883a 	mov	r8,r18
   4a754:	90816626 	beq	r18,r2,4acf0 <_dtoa_r+0x152c>
   4a758:	05bff516 	blt	zero,r22,4a730 <__alt_data_end+0xfffe3630>
   4a75c:	003ff506 	br	4a734 <__alt_data_end+0xfffe3634>
   4a760:	004cf300 	call	4cf30 <__multadd>
   4a764:	1023883a 	mov	r17,r2
   4a768:	1029883a 	mov	r20,r2
   4a76c:	003fdf06 	br	4a6ec <__alt_data_end+0xfffe35ec>
   4a770:	e009883a 	mov	r4,fp
   4a774:	004cf080 	call	4cf08 <_Bfree>
   4a778:	00800044 	movi	r2,1
   4a77c:	003fbc06 	br	4a670 <__alt_data_end+0xfffe3570>
   4a780:	a80b883a 	mov	r5,r21
   4a784:	8009883a 	mov	r4,r16
   4a788:	004d7280 	call	4d728 <__mcmp>
   4a78c:	103edb0e 	bge	r2,zero,4a2fc <__alt_data_end+0xfffe31fc>
   4a790:	800b883a 	mov	r5,r16
   4a794:	000f883a 	mov	r7,zero
   4a798:	01800284 	movi	r6,10
   4a79c:	e009883a 	mov	r4,fp
   4a7a0:	004cf300 	call	4cf30 <__multadd>
   4a7a4:	1021883a 	mov	r16,r2
   4a7a8:	d8800517 	ldw	r2,20(sp)
   4a7ac:	d8c00b17 	ldw	r3,44(sp)
   4a7b0:	10bfffc4 	addi	r2,r2,-1
   4a7b4:	d8800515 	stw	r2,20(sp)
   4a7b8:	183f761e 	bne	r3,zero,4a594 <__alt_data_end+0xfffe3494>
   4a7bc:	d9000c17 	ldw	r4,48(sp)
   4a7c0:	0101730e 	bge	zero,r4,4ad90 <_dtoa_r+0x15cc>
   4a7c4:	d9000615 	stw	r4,24(sp)
   4a7c8:	003ed006 	br	4a30c <__alt_data_end+0xfffe320c>
   4a7cc:	00800084 	movi	r2,2
   4a7d0:	3081861e 	bne	r6,r2,4adec <_dtoa_r+0x1628>
   4a7d4:	d8000b15 	stw	zero,44(sp)
   4a7d8:	003f3c06 	br	4a4cc <__alt_data_end+0xfffe33cc>
   4a7dc:	dc000917 	ldw	r16,36(sp)
   4a7e0:	003e9206 	br	4a22c <__alt_data_end+0xfffe312c>
   4a7e4:	d9c00317 	ldw	r7,12(sp)
   4a7e8:	00800084 	movi	r2,2
   4a7ec:	11fec50e 	bge	r2,r7,4a304 <__alt_data_end+0xfffe3204>
   4a7f0:	d9000617 	ldw	r4,24(sp)
   4a7f4:	20013c1e 	bne	r4,zero,4ace8 <_dtoa_r+0x1524>
   4a7f8:	a80b883a 	mov	r5,r21
   4a7fc:	000f883a 	mov	r7,zero
   4a800:	01800144 	movi	r6,5
   4a804:	e009883a 	mov	r4,fp
   4a808:	004cf300 	call	4cf30 <__multadd>
   4a80c:	100b883a 	mov	r5,r2
   4a810:	8009883a 	mov	r4,r16
   4a814:	102b883a 	mov	r21,r2
   4a818:	004d7280 	call	4d728 <__mcmp>
   4a81c:	dc000915 	stw	r16,36(sp)
   4a820:	00bf410e 	bge	zero,r2,4a528 <__alt_data_end+0xfffe3428>
   4a824:	d9c00717 	ldw	r7,28(sp)
   4a828:	00800c44 	movi	r2,49
   4a82c:	38800005 	stb	r2,0(r7)
   4a830:	d8800517 	ldw	r2,20(sp)
   4a834:	3dc00044 	addi	r23,r7,1
   4a838:	10800044 	addi	r2,r2,1
   4a83c:	d8800515 	stw	r2,20(sp)
   4a840:	003f3d06 	br	4a538 <__alt_data_end+0xfffe3438>
   4a844:	d9800517 	ldw	r6,20(sp)
   4a848:	d9c00717 	ldw	r7,28(sp)
   4a84c:	00800c44 	movi	r2,49
   4a850:	31800044 	addi	r6,r6,1
   4a854:	d9800515 	stw	r6,20(sp)
   4a858:	38800005 	stb	r2,0(r7)
   4a85c:	003edf06 	br	4a3dc <__alt_data_end+0xfffe32dc>
   4a860:	d8000b15 	stw	zero,44(sp)
   4a864:	003c9f06 	br	49ae4 <__alt_data_end+0xfffe29e4>
   4a868:	903e7e1e 	bne	r18,zero,4a264 <__alt_data_end+0xfffe3164>
   4a86c:	00800434 	movhi	r2,16
   4a870:	10bfffc4 	addi	r2,r2,-1
   4a874:	9884703a 	and	r2,r19,r2
   4a878:	1000ea1e 	bne	r2,zero,4ac24 <_dtoa_r+0x1460>
   4a87c:	9cdffc2c 	andhi	r19,r19,32752
   4a880:	9800e826 	beq	r19,zero,4ac24 <_dtoa_r+0x1460>
   4a884:	d9c00817 	ldw	r7,32(sp)
   4a888:	b5800044 	addi	r22,r22,1
   4a88c:	04c00044 	movi	r19,1
   4a890:	39c00044 	addi	r7,r7,1
   4a894:	d9c00815 	stw	r7,32(sp)
   4a898:	d8800d17 	ldw	r2,52(sp)
   4a89c:	103e721e 	bne	r2,zero,4a268 <__alt_data_end+0xfffe3168>
   4a8a0:	00800044 	movi	r2,1
   4a8a4:	003e7906 	br	4a28c <__alt_data_end+0xfffe318c>
   4a8a8:	8009883a 	mov	r4,r16
   4a8ac:	0046bc00 	call	46bc0 <__floatsidf>
   4a8b0:	d9800f17 	ldw	r6,60(sp)
   4a8b4:	d9c01017 	ldw	r7,64(sp)
   4a8b8:	1009883a 	mov	r4,r2
   4a8bc:	180b883a 	mov	r5,r3
   4a8c0:	0045b2c0 	call	45b2c <__muldf3>
   4a8c4:	000d883a 	mov	r6,zero
   4a8c8:	01d00734 	movhi	r7,16412
   4a8cc:	1009883a 	mov	r4,r2
   4a8d0:	180b883a 	mov	r5,r3
   4a8d4:	00448340 	call	44834 <__adddf3>
   4a8d8:	047f3034 	movhi	r17,64704
   4a8dc:	1021883a 	mov	r16,r2
   4a8e0:	1c63883a 	add	r17,r3,r17
   4a8e4:	d9000f17 	ldw	r4,60(sp)
   4a8e8:	d9401017 	ldw	r5,64(sp)
   4a8ec:	000d883a 	mov	r6,zero
   4a8f0:	01d00534 	movhi	r7,16404
   4a8f4:	00462440 	call	46244 <__subdf3>
   4a8f8:	800d883a 	mov	r6,r16
   4a8fc:	880f883a 	mov	r7,r17
   4a900:	1009883a 	mov	r4,r2
   4a904:	180b883a 	mov	r5,r3
   4a908:	102b883a 	mov	r21,r2
   4a90c:	1829883a 	mov	r20,r3
   4a910:	0045a500 	call	45a50 <__gedf2>
   4a914:	00806c16 	blt	zero,r2,4aac8 <_dtoa_r+0x1304>
   4a918:	89e0003c 	xorhi	r7,r17,32768
   4a91c:	800d883a 	mov	r6,r16
   4a920:	a809883a 	mov	r4,r21
   4a924:	a00b883a 	mov	r5,r20
   4a928:	00510580 	call	51058 <__ledf2>
   4a92c:	103d7e0e 	bge	r2,zero,49f28 <__alt_data_end+0xfffe2e28>
   4a930:	002b883a 	mov	r21,zero
   4a934:	0023883a 	mov	r17,zero
   4a938:	003efb06 	br	4a528 <__alt_data_end+0xfffe3428>
   4a93c:	d8800717 	ldw	r2,28(sp)
   4a940:	003bd006 	br	49884 <__alt_data_end+0xfffe2784>
   4a944:	d9000a17 	ldw	r4,40(sp)
   4a948:	d9800d17 	ldw	r6,52(sp)
   4a94c:	dd400a15 	stw	r21,40(sp)
   4a950:	a905c83a 	sub	r2,r21,r4
   4a954:	308d883a 	add	r6,r6,r2
   4a958:	d9800d15 	stw	r6,52(sp)
   4a95c:	002b883a 	mov	r21,zero
   4a960:	003e0606 	br	4a17c <__alt_data_end+0xfffe307c>
   4a964:	9023883a 	mov	r17,r18
   4a968:	9829883a 	mov	r20,r19
   4a96c:	04000084 	movi	r16,2
   4a970:	003c9206 	br	49bbc <__alt_data_end+0xfffe2abc>
   4a974:	04000044 	movi	r16,1
   4a978:	dc000c15 	stw	r16,48(sp)
   4a97c:	dc000615 	stw	r16,24(sp)
   4a980:	dc002215 	stw	r16,136(sp)
   4a984:	e0001115 	stw	zero,68(fp)
   4a988:	000b883a 	mov	r5,zero
   4a98c:	003c6906 	br	49b34 <__alt_data_end+0xfffe2a34>
   4a990:	3021883a 	mov	r16,r6
   4a994:	003ffb06 	br	4a984 <__alt_data_end+0xfffe3884>
   4a998:	1000021e 	bne	r2,zero,4a9a4 <_dtoa_r+0x11e0>
   4a99c:	4200004c 	andi	r8,r8,1
   4a9a0:	403e7d1e 	bne	r8,zero,4a398 <__alt_data_end+0xfffe3298>
   4a9a4:	01000c04 	movi	r4,48
   4a9a8:	00000106 	br	4a9b0 <_dtoa_r+0x11ec>
   4a9ac:	102f883a 	mov	r23,r2
   4a9b0:	b8bfffc4 	addi	r2,r23,-1
   4a9b4:	10c00007 	ldb	r3,0(r2)
   4a9b8:	193ffc26 	beq	r3,r4,4a9ac <__alt_data_end+0xfffe38ac>
   4a9bc:	003e8706 	br	4a3dc <__alt_data_end+0xfffe32dc>
   4a9c0:	d8800517 	ldw	r2,20(sp)
   4a9c4:	00a3c83a 	sub	r17,zero,r2
   4a9c8:	8800a426 	beq	r17,zero,4ac5c <_dtoa_r+0x1498>
   4a9cc:	888003cc 	andi	r2,r17,15
   4a9d0:	100490fa 	slli	r2,r2,3
   4a9d4:	00c00174 	movhi	r3,5
   4a9d8:	18d76104 	addi	r3,r3,23940
   4a9dc:	1885883a 	add	r2,r3,r2
   4a9e0:	11800017 	ldw	r6,0(r2)
   4a9e4:	11c00117 	ldw	r7,4(r2)
   4a9e8:	9009883a 	mov	r4,r18
   4a9ec:	980b883a 	mov	r5,r19
   4a9f0:	8823d13a 	srai	r17,r17,4
   4a9f4:	0045b2c0 	call	45b2c <__muldf3>
   4a9f8:	d8800f15 	stw	r2,60(sp)
   4a9fc:	d8c01015 	stw	r3,64(sp)
   4aa00:	8800e826 	beq	r17,zero,4ada4 <_dtoa_r+0x15e0>
   4aa04:	05000174 	movhi	r20,5
   4aa08:	a5175704 	addi	r20,r20,23900
   4aa0c:	04000084 	movi	r16,2
   4aa10:	8980004c 	andi	r6,r17,1
   4aa14:	1009883a 	mov	r4,r2
   4aa18:	8823d07a 	srai	r17,r17,1
   4aa1c:	180b883a 	mov	r5,r3
   4aa20:	30000426 	beq	r6,zero,4aa34 <_dtoa_r+0x1270>
   4aa24:	a1800017 	ldw	r6,0(r20)
   4aa28:	a1c00117 	ldw	r7,4(r20)
   4aa2c:	84000044 	addi	r16,r16,1
   4aa30:	0045b2c0 	call	45b2c <__muldf3>
   4aa34:	a5000204 	addi	r20,r20,8
   4aa38:	883ff51e 	bne	r17,zero,4aa10 <__alt_data_end+0xfffe3910>
   4aa3c:	d8800f15 	stw	r2,60(sp)
   4aa40:	d8c01015 	stw	r3,64(sp)
   4aa44:	003c7606 	br	49c20 <__alt_data_end+0xfffe2b20>
   4aa48:	00c00c04 	movi	r3,48
   4aa4c:	10c00005 	stb	r3,0(r2)
   4aa50:	d8c00517 	ldw	r3,20(sp)
   4aa54:	bd3fffc3 	ldbu	r20,-1(r23)
   4aa58:	18c00044 	addi	r3,r3,1
   4aa5c:	d8c00515 	stw	r3,20(sp)
   4aa60:	003db906 	br	4a148 <__alt_data_end+0xfffe3048>
   4aa64:	89400117 	ldw	r5,4(r17)
   4aa68:	e009883a 	mov	r4,fp
   4aa6c:	004ce600 	call	4ce60 <_Balloc>
   4aa70:	89800417 	ldw	r6,16(r17)
   4aa74:	89400304 	addi	r5,r17,12
   4aa78:	11000304 	addi	r4,r2,12
   4aa7c:	31800084 	addi	r6,r6,2
   4aa80:	318d883a 	add	r6,r6,r6
   4aa84:	318d883a 	add	r6,r6,r6
   4aa88:	1027883a 	mov	r19,r2
   4aa8c:	004ca940 	call	4ca94 <memcpy>
   4aa90:	01800044 	movi	r6,1
   4aa94:	980b883a 	mov	r5,r19
   4aa98:	e009883a 	mov	r4,fp
   4aa9c:	004d5e00 	call	4d5e0 <__lshift>
   4aaa0:	1029883a 	mov	r20,r2
   4aaa4:	003ecc06 	br	4a5d8 <__alt_data_end+0xfffe34d8>
   4aaa8:	00800e44 	movi	r2,57
   4aaac:	90809026 	beq	r18,r2,4acf0 <_dtoa_r+0x152c>
   4aab0:	92000044 	addi	r8,r18,1
   4aab4:	003f1f06 	br	4a734 <__alt_data_end+0xfffe3634>
   4aab8:	9011883a 	mov	r8,r18
   4aabc:	8825883a 	mov	r18,r17
   4aac0:	a023883a 	mov	r17,r20
   4aac4:	003e2906 	br	4a36c <__alt_data_end+0xfffe326c>
   4aac8:	002b883a 	mov	r21,zero
   4aacc:	0023883a 	mov	r17,zero
   4aad0:	003f5406 	br	4a824 <__alt_data_end+0xfffe3724>
   4aad4:	61bfffc4 	addi	r6,r12,-1
   4aad8:	300490fa 	slli	r2,r6,3
   4aadc:	00c00174 	movhi	r3,5
   4aae0:	18d76104 	addi	r3,r3,23940
   4aae4:	1885883a 	add	r2,r3,r2
   4aae8:	11000017 	ldw	r4,0(r2)
   4aaec:	11400117 	ldw	r5,4(r2)
   4aaf0:	d8800717 	ldw	r2,28(sp)
   4aaf4:	880f883a 	mov	r7,r17
   4aaf8:	d9801215 	stw	r6,72(sp)
   4aafc:	800d883a 	mov	r6,r16
   4ab00:	db001615 	stw	r12,88(sp)
   4ab04:	15c00044 	addi	r23,r2,1
   4ab08:	0045b2c0 	call	45b2c <__muldf3>
   4ab0c:	d9401017 	ldw	r5,64(sp)
   4ab10:	d9000f17 	ldw	r4,60(sp)
   4ab14:	d8c01515 	stw	r3,84(sp)
   4ab18:	d8801415 	stw	r2,80(sp)
   4ab1c:	0046b400 	call	46b40 <__fixdfsi>
   4ab20:	1009883a 	mov	r4,r2
   4ab24:	1021883a 	mov	r16,r2
   4ab28:	0046bc00 	call	46bc0 <__floatsidf>
   4ab2c:	d9000f17 	ldw	r4,60(sp)
   4ab30:	d9401017 	ldw	r5,64(sp)
   4ab34:	100d883a 	mov	r6,r2
   4ab38:	180f883a 	mov	r7,r3
   4ab3c:	00462440 	call	46244 <__subdf3>
   4ab40:	1829883a 	mov	r20,r3
   4ab44:	d8c00717 	ldw	r3,28(sp)
   4ab48:	84000c04 	addi	r16,r16,48
   4ab4c:	1023883a 	mov	r17,r2
   4ab50:	1c000005 	stb	r16,0(r3)
   4ab54:	db001617 	ldw	r12,88(sp)
   4ab58:	00800044 	movi	r2,1
   4ab5c:	60802226 	beq	r12,r2,4abe8 <_dtoa_r+0x1424>
   4ab60:	d9c00717 	ldw	r7,28(sp)
   4ab64:	8805883a 	mov	r2,r17
   4ab68:	b82b883a 	mov	r21,r23
   4ab6c:	3b19883a 	add	r12,r7,r12
   4ab70:	6023883a 	mov	r17,r12
   4ab74:	a007883a 	mov	r3,r20
   4ab78:	dc800f15 	stw	r18,60(sp)
   4ab7c:	000d883a 	mov	r6,zero
   4ab80:	01d00934 	movhi	r7,16420
   4ab84:	1009883a 	mov	r4,r2
   4ab88:	180b883a 	mov	r5,r3
   4ab8c:	0045b2c0 	call	45b2c <__muldf3>
   4ab90:	180b883a 	mov	r5,r3
   4ab94:	1009883a 	mov	r4,r2
   4ab98:	1829883a 	mov	r20,r3
   4ab9c:	1025883a 	mov	r18,r2
   4aba0:	0046b400 	call	46b40 <__fixdfsi>
   4aba4:	1009883a 	mov	r4,r2
   4aba8:	1021883a 	mov	r16,r2
   4abac:	0046bc00 	call	46bc0 <__floatsidf>
   4abb0:	100d883a 	mov	r6,r2
   4abb4:	180f883a 	mov	r7,r3
   4abb8:	9009883a 	mov	r4,r18
   4abbc:	a00b883a 	mov	r5,r20
   4abc0:	84000c04 	addi	r16,r16,48
   4abc4:	00462440 	call	46244 <__subdf3>
   4abc8:	ad400044 	addi	r21,r21,1
   4abcc:	ac3fffc5 	stb	r16,-1(r21)
   4abd0:	ac7fea1e 	bne	r21,r17,4ab7c <__alt_data_end+0xfffe3a7c>
   4abd4:	1023883a 	mov	r17,r2
   4abd8:	d8801217 	ldw	r2,72(sp)
   4abdc:	dc800f17 	ldw	r18,60(sp)
   4abe0:	1829883a 	mov	r20,r3
   4abe4:	b8af883a 	add	r23,r23,r2
   4abe8:	d9001417 	ldw	r4,80(sp)
   4abec:	d9401517 	ldw	r5,84(sp)
   4abf0:	000d883a 	mov	r6,zero
   4abf4:	01cff834 	movhi	r7,16352
   4abf8:	00448340 	call	44834 <__adddf3>
   4abfc:	880d883a 	mov	r6,r17
   4ac00:	a00f883a 	mov	r7,r20
   4ac04:	1009883a 	mov	r4,r2
   4ac08:	180b883a 	mov	r5,r3
   4ac0c:	00510580 	call	51058 <__ledf2>
   4ac10:	10003e0e 	bge	r2,zero,4ad0c <_dtoa_r+0x1548>
   4ac14:	d9001317 	ldw	r4,76(sp)
   4ac18:	bd3fffc3 	ldbu	r20,-1(r23)
   4ac1c:	d9000515 	stw	r4,20(sp)
   4ac20:	003d3b06 	br	4a110 <__alt_data_end+0xfffe3010>
   4ac24:	0027883a 	mov	r19,zero
   4ac28:	003f1b06 	br	4a898 <__alt_data_end+0xfffe3798>
   4ac2c:	d8800817 	ldw	r2,32(sp)
   4ac30:	11e9c83a 	sub	r20,r2,r7
   4ac34:	0005883a 	mov	r2,zero
   4ac38:	003d5406 	br	4a18c <__alt_data_end+0xfffe308c>
   4ac3c:	00800044 	movi	r2,1
   4ac40:	003dc706 	br	4a360 <__alt_data_end+0xfffe3260>
   4ac44:	d8c00217 	ldw	r3,8(sp)
   4ac48:	00800d84 	movi	r2,54
   4ac4c:	dd400a17 	ldw	r21,40(sp)
   4ac50:	10c5c83a 	sub	r2,r2,r3
   4ac54:	dd000817 	ldw	r20,32(sp)
   4ac58:	003d4c06 	br	4a18c <__alt_data_end+0xfffe308c>
   4ac5c:	dc800f15 	stw	r18,60(sp)
   4ac60:	dcc01015 	stw	r19,64(sp)
   4ac64:	04000084 	movi	r16,2
   4ac68:	003bed06 	br	49c20 <__alt_data_end+0xfffe2b20>
   4ac6c:	d9000617 	ldw	r4,24(sp)
   4ac70:	203f0d26 	beq	r4,zero,4a8a8 <__alt_data_end+0xfffe37a8>
   4ac74:	d9800c17 	ldw	r6,48(sp)
   4ac78:	01bcab0e 	bge	zero,r6,49f28 <__alt_data_end+0xfffe2e28>
   4ac7c:	d9401017 	ldw	r5,64(sp)
   4ac80:	d9000f17 	ldw	r4,60(sp)
   4ac84:	000d883a 	mov	r6,zero
   4ac88:	01d00934 	movhi	r7,16420
   4ac8c:	0045b2c0 	call	45b2c <__muldf3>
   4ac90:	81000044 	addi	r4,r16,1
   4ac94:	d8800f15 	stw	r2,60(sp)
   4ac98:	d8c01015 	stw	r3,64(sp)
   4ac9c:	0046bc00 	call	46bc0 <__floatsidf>
   4aca0:	d9800f17 	ldw	r6,60(sp)
   4aca4:	d9c01017 	ldw	r7,64(sp)
   4aca8:	1009883a 	mov	r4,r2
   4acac:	180b883a 	mov	r5,r3
   4acb0:	0045b2c0 	call	45b2c <__muldf3>
   4acb4:	01d00734 	movhi	r7,16412
   4acb8:	000d883a 	mov	r6,zero
   4acbc:	1009883a 	mov	r4,r2
   4acc0:	180b883a 	mov	r5,r3
   4acc4:	00448340 	call	44834 <__adddf3>
   4acc8:	d9c00517 	ldw	r7,20(sp)
   4accc:	047f3034 	movhi	r17,64704
   4acd0:	1021883a 	mov	r16,r2
   4acd4:	39ffffc4 	addi	r7,r7,-1
   4acd8:	d9c01315 	stw	r7,76(sp)
   4acdc:	1c63883a 	add	r17,r3,r17
   4ace0:	db000c17 	ldw	r12,48(sp)
   4ace4:	003bea06 	br	49c90 <__alt_data_end+0xfffe2b90>
   4ace8:	dc000915 	stw	r16,36(sp)
   4acec:	003e0e06 	br	4a528 <__alt_data_end+0xfffe3428>
   4acf0:	01000e44 	movi	r4,57
   4acf4:	8825883a 	mov	r18,r17
   4acf8:	9dc00044 	addi	r23,r19,1
   4acfc:	99000005 	stb	r4,0(r19)
   4ad00:	a023883a 	mov	r17,r20
   4ad04:	dc000915 	stw	r16,36(sp)
   4ad08:	003da406 	br	4a39c <__alt_data_end+0xfffe329c>
   4ad0c:	d9801417 	ldw	r6,80(sp)
   4ad10:	d9c01517 	ldw	r7,84(sp)
   4ad14:	0009883a 	mov	r4,zero
   4ad18:	014ff834 	movhi	r5,16352
   4ad1c:	00462440 	call	46244 <__subdf3>
   4ad20:	880d883a 	mov	r6,r17
   4ad24:	a00f883a 	mov	r7,r20
   4ad28:	1009883a 	mov	r4,r2
   4ad2c:	180b883a 	mov	r5,r3
   4ad30:	0045a500 	call	45a50 <__gedf2>
   4ad34:	00bc7c0e 	bge	zero,r2,49f28 <__alt_data_end+0xfffe2e28>
   4ad38:	01000c04 	movi	r4,48
   4ad3c:	00000106 	br	4ad44 <_dtoa_r+0x1580>
   4ad40:	102f883a 	mov	r23,r2
   4ad44:	b8bfffc4 	addi	r2,r23,-1
   4ad48:	10c00007 	ldb	r3,0(r2)
   4ad4c:	193ffc26 	beq	r3,r4,4ad40 <__alt_data_end+0xfffe3c40>
   4ad50:	d9801317 	ldw	r6,76(sp)
   4ad54:	d9800515 	stw	r6,20(sp)
   4ad58:	003c4406 	br	49e6c <__alt_data_end+0xfffe2d6c>
   4ad5c:	d9801317 	ldw	r6,76(sp)
   4ad60:	d9800515 	stw	r6,20(sp)
   4ad64:	003cea06 	br	4a110 <__alt_data_end+0xfffe3010>
   4ad68:	dd800f17 	ldw	r22,60(sp)
   4ad6c:	dcc01017 	ldw	r19,64(sp)
   4ad70:	dc801217 	ldw	r18,72(sp)
   4ad74:	003c6c06 	br	49f28 <__alt_data_end+0xfffe2e28>
   4ad78:	903e031e 	bne	r18,zero,4a588 <__alt_data_end+0xfffe3488>
   4ad7c:	003ebb06 	br	4a86c <__alt_data_end+0xfffe376c>
   4ad80:	103e6c1e 	bne	r2,zero,4a734 <__alt_data_end+0xfffe3634>
   4ad84:	4080004c 	andi	r2,r8,1
   4ad88:	103e6a26 	beq	r2,zero,4a734 <__alt_data_end+0xfffe3634>
   4ad8c:	003e6606 	br	4a728 <__alt_data_end+0xfffe3628>
   4ad90:	d8c00317 	ldw	r3,12(sp)
   4ad94:	00800084 	movi	r2,2
   4ad98:	10c02916 	blt	r2,r3,4ae40 <_dtoa_r+0x167c>
   4ad9c:	d9000c17 	ldw	r4,48(sp)
   4ada0:	003e8806 	br	4a7c4 <__alt_data_end+0xfffe36c4>
   4ada4:	04000084 	movi	r16,2
   4ada8:	003b9d06 	br	49c20 <__alt_data_end+0xfffe2b20>
   4adac:	d9001317 	ldw	r4,76(sp)
   4adb0:	d9000515 	stw	r4,20(sp)
   4adb4:	003cd606 	br	4a110 <__alt_data_end+0xfffe3010>
   4adb8:	d8801317 	ldw	r2,76(sp)
   4adbc:	d8800515 	stw	r2,20(sp)
   4adc0:	003c2a06 	br	49e6c <__alt_data_end+0xfffe2d6c>
   4adc4:	d9800317 	ldw	r6,12(sp)
   4adc8:	00800084 	movi	r2,2
   4adcc:	11801516 	blt	r2,r6,4ae24 <_dtoa_r+0x1660>
   4add0:	d9c00c17 	ldw	r7,48(sp)
   4add4:	d9c00615 	stw	r7,24(sp)
   4add8:	003df706 	br	4a5b8 <__alt_data_end+0xfffe34b8>
   4addc:	193d3926 	beq	r3,r4,4a2c4 <__alt_data_end+0xfffe31c4>
   4ade0:	00c00f04 	movi	r3,60
   4ade4:	1885c83a 	sub	r2,r3,r2
   4ade8:	003ddf06 	br	4a568 <__alt_data_end+0xfffe3468>
   4adec:	e009883a 	mov	r4,fp
   4adf0:	e0001115 	stw	zero,68(fp)
   4adf4:	000b883a 	mov	r5,zero
   4adf8:	004ce600 	call	4ce60 <_Balloc>
   4adfc:	d8800715 	stw	r2,28(sp)
   4ae00:	d8c00717 	ldw	r3,28(sp)
   4ae04:	00bfffc4 	movi	r2,-1
   4ae08:	01000044 	movi	r4,1
   4ae0c:	d8800c15 	stw	r2,48(sp)
   4ae10:	e0c01015 	stw	r3,64(fp)
   4ae14:	d9000b15 	stw	r4,44(sp)
   4ae18:	d8800615 	stw	r2,24(sp)
   4ae1c:	d8002215 	stw	zero,136(sp)
   4ae20:	003c4106 	br	49f28 <__alt_data_end+0xfffe2e28>
   4ae24:	d8c00c17 	ldw	r3,48(sp)
   4ae28:	d8c00615 	stw	r3,24(sp)
   4ae2c:	003e7006 	br	4a7f0 <__alt_data_end+0xfffe36f0>
   4ae30:	04400044 	movi	r17,1
   4ae34:	003b2006 	br	49ab8 <__alt_data_end+0xfffe29b8>
   4ae38:	000b883a 	mov	r5,zero
   4ae3c:	003b3d06 	br	49b34 <__alt_data_end+0xfffe2a34>
   4ae40:	d8800c17 	ldw	r2,48(sp)
   4ae44:	d8800615 	stw	r2,24(sp)
   4ae48:	003e6906 	br	4a7f0 <__alt_data_end+0xfffe36f0>

0004ae4c <__sflush_r>:
   4ae4c:	2880030b 	ldhu	r2,12(r5)
   4ae50:	defffb04 	addi	sp,sp,-20
   4ae54:	dcc00315 	stw	r19,12(sp)
   4ae58:	dc400115 	stw	r17,4(sp)
   4ae5c:	dfc00415 	stw	ra,16(sp)
   4ae60:	dc800215 	stw	r18,8(sp)
   4ae64:	dc000015 	stw	r16,0(sp)
   4ae68:	10c0020c 	andi	r3,r2,8
   4ae6c:	2823883a 	mov	r17,r5
   4ae70:	2027883a 	mov	r19,r4
   4ae74:	1800311e 	bne	r3,zero,4af3c <__sflush_r+0xf0>
   4ae78:	28c00117 	ldw	r3,4(r5)
   4ae7c:	10820014 	ori	r2,r2,2048
   4ae80:	2880030d 	sth	r2,12(r5)
   4ae84:	00c04b0e 	bge	zero,r3,4afb4 <__sflush_r+0x168>
   4ae88:	8a000a17 	ldw	r8,40(r17)
   4ae8c:	40002326 	beq	r8,zero,4af1c <__sflush_r+0xd0>
   4ae90:	9c000017 	ldw	r16,0(r19)
   4ae94:	10c4000c 	andi	r3,r2,4096
   4ae98:	98000015 	stw	zero,0(r19)
   4ae9c:	18004826 	beq	r3,zero,4afc0 <__sflush_r+0x174>
   4aea0:	89801417 	ldw	r6,80(r17)
   4aea4:	10c0010c 	andi	r3,r2,4
   4aea8:	18000626 	beq	r3,zero,4aec4 <__sflush_r+0x78>
   4aeac:	88c00117 	ldw	r3,4(r17)
   4aeb0:	88800c17 	ldw	r2,48(r17)
   4aeb4:	30cdc83a 	sub	r6,r6,r3
   4aeb8:	10000226 	beq	r2,zero,4aec4 <__sflush_r+0x78>
   4aebc:	88800f17 	ldw	r2,60(r17)
   4aec0:	308dc83a 	sub	r6,r6,r2
   4aec4:	89400717 	ldw	r5,28(r17)
   4aec8:	000f883a 	mov	r7,zero
   4aecc:	9809883a 	mov	r4,r19
   4aed0:	403ee83a 	callr	r8
   4aed4:	00ffffc4 	movi	r3,-1
   4aed8:	10c04426 	beq	r2,r3,4afec <__sflush_r+0x1a0>
   4aedc:	88c0030b 	ldhu	r3,12(r17)
   4aee0:	89000417 	ldw	r4,16(r17)
   4aee4:	88000115 	stw	zero,4(r17)
   4aee8:	197dffcc 	andi	r5,r3,63487
   4aeec:	8940030d 	sth	r5,12(r17)
   4aef0:	89000015 	stw	r4,0(r17)
   4aef4:	18c4000c 	andi	r3,r3,4096
   4aef8:	18002c1e 	bne	r3,zero,4afac <__sflush_r+0x160>
   4aefc:	89400c17 	ldw	r5,48(r17)
   4af00:	9c000015 	stw	r16,0(r19)
   4af04:	28000526 	beq	r5,zero,4af1c <__sflush_r+0xd0>
   4af08:	88801004 	addi	r2,r17,64
   4af0c:	28800226 	beq	r5,r2,4af18 <__sflush_r+0xcc>
   4af10:	9809883a 	mov	r4,r19
   4af14:	004b5b80 	call	4b5b8 <_free_r>
   4af18:	88000c15 	stw	zero,48(r17)
   4af1c:	0005883a 	mov	r2,zero
   4af20:	dfc00417 	ldw	ra,16(sp)
   4af24:	dcc00317 	ldw	r19,12(sp)
   4af28:	dc800217 	ldw	r18,8(sp)
   4af2c:	dc400117 	ldw	r17,4(sp)
   4af30:	dc000017 	ldw	r16,0(sp)
   4af34:	dec00504 	addi	sp,sp,20
   4af38:	f800283a 	ret
   4af3c:	2c800417 	ldw	r18,16(r5)
   4af40:	903ff626 	beq	r18,zero,4af1c <__alt_data_end+0xfffe3e1c>
   4af44:	2c000017 	ldw	r16,0(r5)
   4af48:	108000cc 	andi	r2,r2,3
   4af4c:	2c800015 	stw	r18,0(r5)
   4af50:	84a1c83a 	sub	r16,r16,r18
   4af54:	1000131e 	bne	r2,zero,4afa4 <__sflush_r+0x158>
   4af58:	28800517 	ldw	r2,20(r5)
   4af5c:	88800215 	stw	r2,8(r17)
   4af60:	04000316 	blt	zero,r16,4af70 <__sflush_r+0x124>
   4af64:	003fed06 	br	4af1c <__alt_data_end+0xfffe3e1c>
   4af68:	90a5883a 	add	r18,r18,r2
   4af6c:	043feb0e 	bge	zero,r16,4af1c <__alt_data_end+0xfffe3e1c>
   4af70:	88800917 	ldw	r2,36(r17)
   4af74:	89400717 	ldw	r5,28(r17)
   4af78:	800f883a 	mov	r7,r16
   4af7c:	900d883a 	mov	r6,r18
   4af80:	9809883a 	mov	r4,r19
   4af84:	103ee83a 	callr	r2
   4af88:	80a1c83a 	sub	r16,r16,r2
   4af8c:	00bff616 	blt	zero,r2,4af68 <__alt_data_end+0xfffe3e68>
   4af90:	88c0030b 	ldhu	r3,12(r17)
   4af94:	00bfffc4 	movi	r2,-1
   4af98:	18c01014 	ori	r3,r3,64
   4af9c:	88c0030d 	sth	r3,12(r17)
   4afa0:	003fdf06 	br	4af20 <__alt_data_end+0xfffe3e20>
   4afa4:	0005883a 	mov	r2,zero
   4afa8:	003fec06 	br	4af5c <__alt_data_end+0xfffe3e5c>
   4afac:	88801415 	stw	r2,80(r17)
   4afb0:	003fd206 	br	4aefc <__alt_data_end+0xfffe3dfc>
   4afb4:	28c00f17 	ldw	r3,60(r5)
   4afb8:	00ffb316 	blt	zero,r3,4ae88 <__alt_data_end+0xfffe3d88>
   4afbc:	003fd706 	br	4af1c <__alt_data_end+0xfffe3e1c>
   4afc0:	89400717 	ldw	r5,28(r17)
   4afc4:	000d883a 	mov	r6,zero
   4afc8:	01c00044 	movi	r7,1
   4afcc:	9809883a 	mov	r4,r19
   4afd0:	403ee83a 	callr	r8
   4afd4:	100d883a 	mov	r6,r2
   4afd8:	00bfffc4 	movi	r2,-1
   4afdc:	30801426 	beq	r6,r2,4b030 <__sflush_r+0x1e4>
   4afe0:	8880030b 	ldhu	r2,12(r17)
   4afe4:	8a000a17 	ldw	r8,40(r17)
   4afe8:	003fae06 	br	4aea4 <__alt_data_end+0xfffe3da4>
   4afec:	98c00017 	ldw	r3,0(r19)
   4aff0:	183fba26 	beq	r3,zero,4aedc <__alt_data_end+0xfffe3ddc>
   4aff4:	01000744 	movi	r4,29
   4aff8:	19000626 	beq	r3,r4,4b014 <__sflush_r+0x1c8>
   4affc:	01000584 	movi	r4,22
   4b000:	19000426 	beq	r3,r4,4b014 <__sflush_r+0x1c8>
   4b004:	88c0030b 	ldhu	r3,12(r17)
   4b008:	18c01014 	ori	r3,r3,64
   4b00c:	88c0030d 	sth	r3,12(r17)
   4b010:	003fc306 	br	4af20 <__alt_data_end+0xfffe3e20>
   4b014:	8880030b 	ldhu	r2,12(r17)
   4b018:	88c00417 	ldw	r3,16(r17)
   4b01c:	88000115 	stw	zero,4(r17)
   4b020:	10bdffcc 	andi	r2,r2,63487
   4b024:	8880030d 	sth	r2,12(r17)
   4b028:	88c00015 	stw	r3,0(r17)
   4b02c:	003fb306 	br	4aefc <__alt_data_end+0xfffe3dfc>
   4b030:	98800017 	ldw	r2,0(r19)
   4b034:	103fea26 	beq	r2,zero,4afe0 <__alt_data_end+0xfffe3ee0>
   4b038:	00c00744 	movi	r3,29
   4b03c:	10c00226 	beq	r2,r3,4b048 <__sflush_r+0x1fc>
   4b040:	00c00584 	movi	r3,22
   4b044:	10c0031e 	bne	r2,r3,4b054 <__sflush_r+0x208>
   4b048:	9c000015 	stw	r16,0(r19)
   4b04c:	0005883a 	mov	r2,zero
   4b050:	003fb306 	br	4af20 <__alt_data_end+0xfffe3e20>
   4b054:	88c0030b 	ldhu	r3,12(r17)
   4b058:	3005883a 	mov	r2,r6
   4b05c:	18c01014 	ori	r3,r3,64
   4b060:	88c0030d 	sth	r3,12(r17)
   4b064:	003fae06 	br	4af20 <__alt_data_end+0xfffe3e20>

0004b068 <_fflush_r>:
   4b068:	defffd04 	addi	sp,sp,-12
   4b06c:	dc000115 	stw	r16,4(sp)
   4b070:	dfc00215 	stw	ra,8(sp)
   4b074:	2021883a 	mov	r16,r4
   4b078:	20000226 	beq	r4,zero,4b084 <_fflush_r+0x1c>
   4b07c:	20800e17 	ldw	r2,56(r4)
   4b080:	10000c26 	beq	r2,zero,4b0b4 <_fflush_r+0x4c>
   4b084:	2880030f 	ldh	r2,12(r5)
   4b088:	1000051e 	bne	r2,zero,4b0a0 <_fflush_r+0x38>
   4b08c:	0005883a 	mov	r2,zero
   4b090:	dfc00217 	ldw	ra,8(sp)
   4b094:	dc000117 	ldw	r16,4(sp)
   4b098:	dec00304 	addi	sp,sp,12
   4b09c:	f800283a 	ret
   4b0a0:	8009883a 	mov	r4,r16
   4b0a4:	dfc00217 	ldw	ra,8(sp)
   4b0a8:	dc000117 	ldw	r16,4(sp)
   4b0ac:	dec00304 	addi	sp,sp,12
   4b0b0:	004ae4c1 	jmpi	4ae4c <__sflush_r>
   4b0b4:	d9400015 	stw	r5,0(sp)
   4b0b8:	004b4440 	call	4b444 <__sinit>
   4b0bc:	d9400017 	ldw	r5,0(sp)
   4b0c0:	003ff006 	br	4b084 <__alt_data_end+0xfffe3f84>

0004b0c4 <fflush>:
   4b0c4:	20000526 	beq	r4,zero,4b0dc <fflush+0x18>
   4b0c8:	00800174 	movhi	r2,5
   4b0cc:	109e7004 	addi	r2,r2,31168
   4b0d0:	200b883a 	mov	r5,r4
   4b0d4:	11000017 	ldw	r4,0(r2)
   4b0d8:	004b0681 	jmpi	4b068 <_fflush_r>
   4b0dc:	00800174 	movhi	r2,5
   4b0e0:	109e6f04 	addi	r2,r2,31164
   4b0e4:	11000017 	ldw	r4,0(r2)
   4b0e8:	01400174 	movhi	r5,5
   4b0ec:	296c1a04 	addi	r5,r5,-20376
   4b0f0:	004be481 	jmpi	4be48 <_fwalk_reent>

0004b0f4 <__fp_unlock>:
   4b0f4:	0005883a 	mov	r2,zero
   4b0f8:	f800283a 	ret

0004b0fc <_cleanup_r>:
   4b0fc:	01400174 	movhi	r5,5
   4b100:	297f7b04 	addi	r5,r5,-532
   4b104:	004be481 	jmpi	4be48 <_fwalk_reent>

0004b108 <__sinit.part.1>:
   4b108:	defff704 	addi	sp,sp,-36
   4b10c:	00c00174 	movhi	r3,5
   4b110:	dfc00815 	stw	ra,32(sp)
   4b114:	ddc00715 	stw	r23,28(sp)
   4b118:	dd800615 	stw	r22,24(sp)
   4b11c:	dd400515 	stw	r21,20(sp)
   4b120:	dd000415 	stw	r20,16(sp)
   4b124:	dcc00315 	stw	r19,12(sp)
   4b128:	dc800215 	stw	r18,8(sp)
   4b12c:	dc400115 	stw	r17,4(sp)
   4b130:	dc000015 	stw	r16,0(sp)
   4b134:	18ec3f04 	addi	r3,r3,-20228
   4b138:	24000117 	ldw	r16,4(r4)
   4b13c:	20c00f15 	stw	r3,60(r4)
   4b140:	2080bb04 	addi	r2,r4,748
   4b144:	00c000c4 	movi	r3,3
   4b148:	20c0b915 	stw	r3,740(r4)
   4b14c:	2080ba15 	stw	r2,744(r4)
   4b150:	2000b815 	stw	zero,736(r4)
   4b154:	05c00204 	movi	r23,8
   4b158:	00800104 	movi	r2,4
   4b15c:	2025883a 	mov	r18,r4
   4b160:	b80d883a 	mov	r6,r23
   4b164:	81001704 	addi	r4,r16,92
   4b168:	000b883a 	mov	r5,zero
   4b16c:	80000015 	stw	zero,0(r16)
   4b170:	80000115 	stw	zero,4(r16)
   4b174:	80000215 	stw	zero,8(r16)
   4b178:	8080030d 	sth	r2,12(r16)
   4b17c:	80001915 	stw	zero,100(r16)
   4b180:	8000038d 	sth	zero,14(r16)
   4b184:	80000415 	stw	zero,16(r16)
   4b188:	80000515 	stw	zero,20(r16)
   4b18c:	80000615 	stw	zero,24(r16)
   4b190:	004cd380 	call	4cd38 <memset>
   4b194:	05800174 	movhi	r22,5
   4b198:	94400217 	ldw	r17,8(r18)
   4b19c:	05400174 	movhi	r21,5
   4b1a0:	05000174 	movhi	r20,5
   4b1a4:	04c00174 	movhi	r19,5
   4b1a8:	b5b90504 	addi	r22,r22,-7148
   4b1ac:	ad791c04 	addi	r21,r21,-7056
   4b1b0:	a5393b04 	addi	r20,r20,-6932
   4b1b4:	9cf95204 	addi	r19,r19,-6840
   4b1b8:	85800815 	stw	r22,32(r16)
   4b1bc:	85400915 	stw	r21,36(r16)
   4b1c0:	85000a15 	stw	r20,40(r16)
   4b1c4:	84c00b15 	stw	r19,44(r16)
   4b1c8:	84000715 	stw	r16,28(r16)
   4b1cc:	00800284 	movi	r2,10
   4b1d0:	8880030d 	sth	r2,12(r17)
   4b1d4:	00800044 	movi	r2,1
   4b1d8:	b80d883a 	mov	r6,r23
   4b1dc:	89001704 	addi	r4,r17,92
   4b1e0:	000b883a 	mov	r5,zero
   4b1e4:	88000015 	stw	zero,0(r17)
   4b1e8:	88000115 	stw	zero,4(r17)
   4b1ec:	88000215 	stw	zero,8(r17)
   4b1f0:	88001915 	stw	zero,100(r17)
   4b1f4:	8880038d 	sth	r2,14(r17)
   4b1f8:	88000415 	stw	zero,16(r17)
   4b1fc:	88000515 	stw	zero,20(r17)
   4b200:	88000615 	stw	zero,24(r17)
   4b204:	004cd380 	call	4cd38 <memset>
   4b208:	94000317 	ldw	r16,12(r18)
   4b20c:	00800484 	movi	r2,18
   4b210:	8c400715 	stw	r17,28(r17)
   4b214:	8d800815 	stw	r22,32(r17)
   4b218:	8d400915 	stw	r21,36(r17)
   4b21c:	8d000a15 	stw	r20,40(r17)
   4b220:	8cc00b15 	stw	r19,44(r17)
   4b224:	8080030d 	sth	r2,12(r16)
   4b228:	00800084 	movi	r2,2
   4b22c:	80000015 	stw	zero,0(r16)
   4b230:	80000115 	stw	zero,4(r16)
   4b234:	80000215 	stw	zero,8(r16)
   4b238:	80001915 	stw	zero,100(r16)
   4b23c:	8080038d 	sth	r2,14(r16)
   4b240:	80000415 	stw	zero,16(r16)
   4b244:	80000515 	stw	zero,20(r16)
   4b248:	80000615 	stw	zero,24(r16)
   4b24c:	b80d883a 	mov	r6,r23
   4b250:	000b883a 	mov	r5,zero
   4b254:	81001704 	addi	r4,r16,92
   4b258:	004cd380 	call	4cd38 <memset>
   4b25c:	00800044 	movi	r2,1
   4b260:	84000715 	stw	r16,28(r16)
   4b264:	85800815 	stw	r22,32(r16)
   4b268:	85400915 	stw	r21,36(r16)
   4b26c:	85000a15 	stw	r20,40(r16)
   4b270:	84c00b15 	stw	r19,44(r16)
   4b274:	90800e15 	stw	r2,56(r18)
   4b278:	dfc00817 	ldw	ra,32(sp)
   4b27c:	ddc00717 	ldw	r23,28(sp)
   4b280:	dd800617 	ldw	r22,24(sp)
   4b284:	dd400517 	ldw	r21,20(sp)
   4b288:	dd000417 	ldw	r20,16(sp)
   4b28c:	dcc00317 	ldw	r19,12(sp)
   4b290:	dc800217 	ldw	r18,8(sp)
   4b294:	dc400117 	ldw	r17,4(sp)
   4b298:	dc000017 	ldw	r16,0(sp)
   4b29c:	dec00904 	addi	sp,sp,36
   4b2a0:	f800283a 	ret

0004b2a4 <__fp_lock>:
   4b2a4:	0005883a 	mov	r2,zero
   4b2a8:	f800283a 	ret

0004b2ac <__sfmoreglue>:
   4b2ac:	defffc04 	addi	sp,sp,-16
   4b2b0:	dc400115 	stw	r17,4(sp)
   4b2b4:	2c7fffc4 	addi	r17,r5,-1
   4b2b8:	8c401a24 	muli	r17,r17,104
   4b2bc:	dc800215 	stw	r18,8(sp)
   4b2c0:	2825883a 	mov	r18,r5
   4b2c4:	89401d04 	addi	r5,r17,116
   4b2c8:	dc000015 	stw	r16,0(sp)
   4b2cc:	dfc00315 	stw	ra,12(sp)
   4b2d0:	004c1a40 	call	4c1a4 <_malloc_r>
   4b2d4:	1021883a 	mov	r16,r2
   4b2d8:	10000726 	beq	r2,zero,4b2f8 <__sfmoreglue+0x4c>
   4b2dc:	11000304 	addi	r4,r2,12
   4b2e0:	10000015 	stw	zero,0(r2)
   4b2e4:	14800115 	stw	r18,4(r2)
   4b2e8:	11000215 	stw	r4,8(r2)
   4b2ec:	89801a04 	addi	r6,r17,104
   4b2f0:	000b883a 	mov	r5,zero
   4b2f4:	004cd380 	call	4cd38 <memset>
   4b2f8:	8005883a 	mov	r2,r16
   4b2fc:	dfc00317 	ldw	ra,12(sp)
   4b300:	dc800217 	ldw	r18,8(sp)
   4b304:	dc400117 	ldw	r17,4(sp)
   4b308:	dc000017 	ldw	r16,0(sp)
   4b30c:	dec00404 	addi	sp,sp,16
   4b310:	f800283a 	ret

0004b314 <__sfp>:
   4b314:	defffb04 	addi	sp,sp,-20
   4b318:	dc000015 	stw	r16,0(sp)
   4b31c:	04000174 	movhi	r16,5
   4b320:	841e6f04 	addi	r16,r16,31164
   4b324:	dcc00315 	stw	r19,12(sp)
   4b328:	2027883a 	mov	r19,r4
   4b32c:	81000017 	ldw	r4,0(r16)
   4b330:	dfc00415 	stw	ra,16(sp)
   4b334:	dc800215 	stw	r18,8(sp)
   4b338:	20800e17 	ldw	r2,56(r4)
   4b33c:	dc400115 	stw	r17,4(sp)
   4b340:	1000021e 	bne	r2,zero,4b34c <__sfp+0x38>
   4b344:	004b1080 	call	4b108 <__sinit.part.1>
   4b348:	81000017 	ldw	r4,0(r16)
   4b34c:	2480b804 	addi	r18,r4,736
   4b350:	047fffc4 	movi	r17,-1
   4b354:	91000117 	ldw	r4,4(r18)
   4b358:	94000217 	ldw	r16,8(r18)
   4b35c:	213fffc4 	addi	r4,r4,-1
   4b360:	20000a16 	blt	r4,zero,4b38c <__sfp+0x78>
   4b364:	8080030f 	ldh	r2,12(r16)
   4b368:	10000c26 	beq	r2,zero,4b39c <__sfp+0x88>
   4b36c:	80c01d04 	addi	r3,r16,116
   4b370:	00000206 	br	4b37c <__sfp+0x68>
   4b374:	18bfe60f 	ldh	r2,-104(r3)
   4b378:	10000826 	beq	r2,zero,4b39c <__sfp+0x88>
   4b37c:	213fffc4 	addi	r4,r4,-1
   4b380:	1c3ffd04 	addi	r16,r3,-12
   4b384:	18c01a04 	addi	r3,r3,104
   4b388:	247ffa1e 	bne	r4,r17,4b374 <__alt_data_end+0xfffe4274>
   4b38c:	90800017 	ldw	r2,0(r18)
   4b390:	10001d26 	beq	r2,zero,4b408 <__sfp+0xf4>
   4b394:	1025883a 	mov	r18,r2
   4b398:	003fee06 	br	4b354 <__alt_data_end+0xfffe4254>
   4b39c:	00bfffc4 	movi	r2,-1
   4b3a0:	8080038d 	sth	r2,14(r16)
   4b3a4:	00800044 	movi	r2,1
   4b3a8:	8080030d 	sth	r2,12(r16)
   4b3ac:	80001915 	stw	zero,100(r16)
   4b3b0:	80000015 	stw	zero,0(r16)
   4b3b4:	80000215 	stw	zero,8(r16)
   4b3b8:	80000115 	stw	zero,4(r16)
   4b3bc:	80000415 	stw	zero,16(r16)
   4b3c0:	80000515 	stw	zero,20(r16)
   4b3c4:	80000615 	stw	zero,24(r16)
   4b3c8:	01800204 	movi	r6,8
   4b3cc:	000b883a 	mov	r5,zero
   4b3d0:	81001704 	addi	r4,r16,92
   4b3d4:	004cd380 	call	4cd38 <memset>
   4b3d8:	8005883a 	mov	r2,r16
   4b3dc:	80000c15 	stw	zero,48(r16)
   4b3e0:	80000d15 	stw	zero,52(r16)
   4b3e4:	80001115 	stw	zero,68(r16)
   4b3e8:	80001215 	stw	zero,72(r16)
   4b3ec:	dfc00417 	ldw	ra,16(sp)
   4b3f0:	dcc00317 	ldw	r19,12(sp)
   4b3f4:	dc800217 	ldw	r18,8(sp)
   4b3f8:	dc400117 	ldw	r17,4(sp)
   4b3fc:	dc000017 	ldw	r16,0(sp)
   4b400:	dec00504 	addi	sp,sp,20
   4b404:	f800283a 	ret
   4b408:	01400104 	movi	r5,4
   4b40c:	9809883a 	mov	r4,r19
   4b410:	004b2ac0 	call	4b2ac <__sfmoreglue>
   4b414:	90800015 	stw	r2,0(r18)
   4b418:	103fde1e 	bne	r2,zero,4b394 <__alt_data_end+0xfffe4294>
   4b41c:	00800304 	movi	r2,12
   4b420:	98800015 	stw	r2,0(r19)
   4b424:	0005883a 	mov	r2,zero
   4b428:	003ff006 	br	4b3ec <__alt_data_end+0xfffe42ec>

0004b42c <_cleanup>:
   4b42c:	00800174 	movhi	r2,5
   4b430:	109e6f04 	addi	r2,r2,31164
   4b434:	11000017 	ldw	r4,0(r2)
   4b438:	01400174 	movhi	r5,5
   4b43c:	297f7b04 	addi	r5,r5,-532
   4b440:	004be481 	jmpi	4be48 <_fwalk_reent>

0004b444 <__sinit>:
   4b444:	20800e17 	ldw	r2,56(r4)
   4b448:	10000126 	beq	r2,zero,4b450 <__sinit+0xc>
   4b44c:	f800283a 	ret
   4b450:	004b1081 	jmpi	4b108 <__sinit.part.1>

0004b454 <__sfp_lock_acquire>:
   4b454:	f800283a 	ret

0004b458 <__sfp_lock_release>:
   4b458:	f800283a 	ret

0004b45c <__sinit_lock_acquire>:
   4b45c:	f800283a 	ret

0004b460 <__sinit_lock_release>:
   4b460:	f800283a 	ret

0004b464 <__fp_lock_all>:
   4b464:	00800174 	movhi	r2,5
   4b468:	109e7004 	addi	r2,r2,31168
   4b46c:	11000017 	ldw	r4,0(r2)
   4b470:	01400174 	movhi	r5,5
   4b474:	296ca904 	addi	r5,r5,-19804
   4b478:	004bd841 	jmpi	4bd84 <_fwalk>

0004b47c <__fp_unlock_all>:
   4b47c:	00800174 	movhi	r2,5
   4b480:	109e7004 	addi	r2,r2,31168
   4b484:	11000017 	ldw	r4,0(r2)
   4b488:	01400174 	movhi	r5,5
   4b48c:	296c3d04 	addi	r5,r5,-20236
   4b490:	004bd841 	jmpi	4bd84 <_fwalk>

0004b494 <_malloc_trim_r>:
   4b494:	defffb04 	addi	sp,sp,-20
   4b498:	dcc00315 	stw	r19,12(sp)
   4b49c:	04c00174 	movhi	r19,5
   4b4a0:	dc800215 	stw	r18,8(sp)
   4b4a4:	dc400115 	stw	r17,4(sp)
   4b4a8:	dc000015 	stw	r16,0(sp)
   4b4ac:	dfc00415 	stw	ra,16(sp)
   4b4b0:	2821883a 	mov	r16,r5
   4b4b4:	9cd8d904 	addi	r19,r19,25444
   4b4b8:	2025883a 	mov	r18,r4
   4b4bc:	00517700 	call	51770 <__malloc_lock>
   4b4c0:	98800217 	ldw	r2,8(r19)
   4b4c4:	14400117 	ldw	r17,4(r2)
   4b4c8:	00bfff04 	movi	r2,-4
   4b4cc:	88a2703a 	and	r17,r17,r2
   4b4d0:	8c21c83a 	sub	r16,r17,r16
   4b4d4:	8403fbc4 	addi	r16,r16,4079
   4b4d8:	8020d33a 	srli	r16,r16,12
   4b4dc:	0083ffc4 	movi	r2,4095
   4b4e0:	843fffc4 	addi	r16,r16,-1
   4b4e4:	8020933a 	slli	r16,r16,12
   4b4e8:	1400060e 	bge	r2,r16,4b504 <_malloc_trim_r+0x70>
   4b4ec:	000b883a 	mov	r5,zero
   4b4f0:	9009883a 	mov	r4,r18
   4b4f4:	004e3c00 	call	4e3c0 <_sbrk_r>
   4b4f8:	98c00217 	ldw	r3,8(r19)
   4b4fc:	1c47883a 	add	r3,r3,r17
   4b500:	10c00a26 	beq	r2,r3,4b52c <_malloc_trim_r+0x98>
   4b504:	9009883a 	mov	r4,r18
   4b508:	00517940 	call	51794 <__malloc_unlock>
   4b50c:	0005883a 	mov	r2,zero
   4b510:	dfc00417 	ldw	ra,16(sp)
   4b514:	dcc00317 	ldw	r19,12(sp)
   4b518:	dc800217 	ldw	r18,8(sp)
   4b51c:	dc400117 	ldw	r17,4(sp)
   4b520:	dc000017 	ldw	r16,0(sp)
   4b524:	dec00504 	addi	sp,sp,20
   4b528:	f800283a 	ret
   4b52c:	040bc83a 	sub	r5,zero,r16
   4b530:	9009883a 	mov	r4,r18
   4b534:	004e3c00 	call	4e3c0 <_sbrk_r>
   4b538:	00ffffc4 	movi	r3,-1
   4b53c:	10c00d26 	beq	r2,r3,4b574 <_malloc_trim_r+0xe0>
   4b540:	00c001b4 	movhi	r3,6
   4b544:	18e55f04 	addi	r3,r3,-27268
   4b548:	18800017 	ldw	r2,0(r3)
   4b54c:	99000217 	ldw	r4,8(r19)
   4b550:	8c23c83a 	sub	r17,r17,r16
   4b554:	8c400054 	ori	r17,r17,1
   4b558:	1421c83a 	sub	r16,r2,r16
   4b55c:	24400115 	stw	r17,4(r4)
   4b560:	9009883a 	mov	r4,r18
   4b564:	1c000015 	stw	r16,0(r3)
   4b568:	00517940 	call	51794 <__malloc_unlock>
   4b56c:	00800044 	movi	r2,1
   4b570:	003fe706 	br	4b510 <__alt_data_end+0xfffe4410>
   4b574:	000b883a 	mov	r5,zero
   4b578:	9009883a 	mov	r4,r18
   4b57c:	004e3c00 	call	4e3c0 <_sbrk_r>
   4b580:	99000217 	ldw	r4,8(r19)
   4b584:	014003c4 	movi	r5,15
   4b588:	1107c83a 	sub	r3,r2,r4
   4b58c:	28ffdd0e 	bge	r5,r3,4b504 <__alt_data_end+0xfffe4404>
   4b590:	01400174 	movhi	r5,5
   4b594:	295e7204 	addi	r5,r5,31176
   4b598:	29400017 	ldw	r5,0(r5)
   4b59c:	18c00054 	ori	r3,r3,1
   4b5a0:	20c00115 	stw	r3,4(r4)
   4b5a4:	00c001b4 	movhi	r3,6
   4b5a8:	1145c83a 	sub	r2,r2,r5
   4b5ac:	18e55f04 	addi	r3,r3,-27268
   4b5b0:	18800015 	stw	r2,0(r3)
   4b5b4:	003fd306 	br	4b504 <__alt_data_end+0xfffe4404>

0004b5b8 <_free_r>:
   4b5b8:	28004126 	beq	r5,zero,4b6c0 <_free_r+0x108>
   4b5bc:	defffd04 	addi	sp,sp,-12
   4b5c0:	dc400115 	stw	r17,4(sp)
   4b5c4:	dc000015 	stw	r16,0(sp)
   4b5c8:	2023883a 	mov	r17,r4
   4b5cc:	2821883a 	mov	r16,r5
   4b5d0:	dfc00215 	stw	ra,8(sp)
   4b5d4:	00517700 	call	51770 <__malloc_lock>
   4b5d8:	81ffff17 	ldw	r7,-4(r16)
   4b5dc:	00bfff84 	movi	r2,-2
   4b5e0:	01000174 	movhi	r4,5
   4b5e4:	81bffe04 	addi	r6,r16,-8
   4b5e8:	3884703a 	and	r2,r7,r2
   4b5ec:	2118d904 	addi	r4,r4,25444
   4b5f0:	308b883a 	add	r5,r6,r2
   4b5f4:	2a400117 	ldw	r9,4(r5)
   4b5f8:	22000217 	ldw	r8,8(r4)
   4b5fc:	00ffff04 	movi	r3,-4
   4b600:	48c6703a 	and	r3,r9,r3
   4b604:	2a005726 	beq	r5,r8,4b764 <_free_r+0x1ac>
   4b608:	28c00115 	stw	r3,4(r5)
   4b60c:	39c0004c 	andi	r7,r7,1
   4b610:	3800091e 	bne	r7,zero,4b638 <_free_r+0x80>
   4b614:	823ffe17 	ldw	r8,-8(r16)
   4b618:	22400204 	addi	r9,r4,8
   4b61c:	320dc83a 	sub	r6,r6,r8
   4b620:	31c00217 	ldw	r7,8(r6)
   4b624:	1205883a 	add	r2,r2,r8
   4b628:	3a406526 	beq	r7,r9,4b7c0 <_free_r+0x208>
   4b62c:	32000317 	ldw	r8,12(r6)
   4b630:	3a000315 	stw	r8,12(r7)
   4b634:	41c00215 	stw	r7,8(r8)
   4b638:	28cf883a 	add	r7,r5,r3
   4b63c:	39c00117 	ldw	r7,4(r7)
   4b640:	39c0004c 	andi	r7,r7,1
   4b644:	38003a26 	beq	r7,zero,4b730 <_free_r+0x178>
   4b648:	10c00054 	ori	r3,r2,1
   4b64c:	30c00115 	stw	r3,4(r6)
   4b650:	3087883a 	add	r3,r6,r2
   4b654:	18800015 	stw	r2,0(r3)
   4b658:	00c07fc4 	movi	r3,511
   4b65c:	18801936 	bltu	r3,r2,4b6c4 <_free_r+0x10c>
   4b660:	1004d0fa 	srli	r2,r2,3
   4b664:	01c00044 	movi	r7,1
   4b668:	21400117 	ldw	r5,4(r4)
   4b66c:	10c00044 	addi	r3,r2,1
   4b670:	18c7883a 	add	r3,r3,r3
   4b674:	1005d0ba 	srai	r2,r2,2
   4b678:	18c7883a 	add	r3,r3,r3
   4b67c:	18c7883a 	add	r3,r3,r3
   4b680:	1907883a 	add	r3,r3,r4
   4b684:	3884983a 	sll	r2,r7,r2
   4b688:	19c00017 	ldw	r7,0(r3)
   4b68c:	1a3ffe04 	addi	r8,r3,-8
   4b690:	1144b03a 	or	r2,r2,r5
   4b694:	32000315 	stw	r8,12(r6)
   4b698:	31c00215 	stw	r7,8(r6)
   4b69c:	20800115 	stw	r2,4(r4)
   4b6a0:	19800015 	stw	r6,0(r3)
   4b6a4:	39800315 	stw	r6,12(r7)
   4b6a8:	8809883a 	mov	r4,r17
   4b6ac:	dfc00217 	ldw	ra,8(sp)
   4b6b0:	dc400117 	ldw	r17,4(sp)
   4b6b4:	dc000017 	ldw	r16,0(sp)
   4b6b8:	dec00304 	addi	sp,sp,12
   4b6bc:	00517941 	jmpi	51794 <__malloc_unlock>
   4b6c0:	f800283a 	ret
   4b6c4:	100ad27a 	srli	r5,r2,9
   4b6c8:	00c00104 	movi	r3,4
   4b6cc:	19404a36 	bltu	r3,r5,4b7f8 <_free_r+0x240>
   4b6d0:	100ad1ba 	srli	r5,r2,6
   4b6d4:	28c00e44 	addi	r3,r5,57
   4b6d8:	18c7883a 	add	r3,r3,r3
   4b6dc:	29400e04 	addi	r5,r5,56
   4b6e0:	18c7883a 	add	r3,r3,r3
   4b6e4:	18c7883a 	add	r3,r3,r3
   4b6e8:	1909883a 	add	r4,r3,r4
   4b6ec:	20c00017 	ldw	r3,0(r4)
   4b6f0:	01c00174 	movhi	r7,5
   4b6f4:	213ffe04 	addi	r4,r4,-8
   4b6f8:	39d8d904 	addi	r7,r7,25444
   4b6fc:	20c04426 	beq	r4,r3,4b810 <_free_r+0x258>
   4b700:	01ffff04 	movi	r7,-4
   4b704:	19400117 	ldw	r5,4(r3)
   4b708:	29ca703a 	and	r5,r5,r7
   4b70c:	1140022e 	bgeu	r2,r5,4b718 <_free_r+0x160>
   4b710:	18c00217 	ldw	r3,8(r3)
   4b714:	20fffb1e 	bne	r4,r3,4b704 <__alt_data_end+0xfffe4604>
   4b718:	19000317 	ldw	r4,12(r3)
   4b71c:	31000315 	stw	r4,12(r6)
   4b720:	30c00215 	stw	r3,8(r6)
   4b724:	21800215 	stw	r6,8(r4)
   4b728:	19800315 	stw	r6,12(r3)
   4b72c:	003fde06 	br	4b6a8 <__alt_data_end+0xfffe45a8>
   4b730:	29c00217 	ldw	r7,8(r5)
   4b734:	10c5883a 	add	r2,r2,r3
   4b738:	00c00174 	movhi	r3,5
   4b73c:	18d8db04 	addi	r3,r3,25452
   4b740:	38c03b26 	beq	r7,r3,4b830 <_free_r+0x278>
   4b744:	2a000317 	ldw	r8,12(r5)
   4b748:	11400054 	ori	r5,r2,1
   4b74c:	3087883a 	add	r3,r6,r2
   4b750:	3a000315 	stw	r8,12(r7)
   4b754:	41c00215 	stw	r7,8(r8)
   4b758:	31400115 	stw	r5,4(r6)
   4b75c:	18800015 	stw	r2,0(r3)
   4b760:	003fbd06 	br	4b658 <__alt_data_end+0xfffe4558>
   4b764:	39c0004c 	andi	r7,r7,1
   4b768:	10c5883a 	add	r2,r2,r3
   4b76c:	3800071e 	bne	r7,zero,4b78c <_free_r+0x1d4>
   4b770:	81fffe17 	ldw	r7,-8(r16)
   4b774:	31cdc83a 	sub	r6,r6,r7
   4b778:	30c00317 	ldw	r3,12(r6)
   4b77c:	31400217 	ldw	r5,8(r6)
   4b780:	11c5883a 	add	r2,r2,r7
   4b784:	28c00315 	stw	r3,12(r5)
   4b788:	19400215 	stw	r5,8(r3)
   4b78c:	10c00054 	ori	r3,r2,1
   4b790:	30c00115 	stw	r3,4(r6)
   4b794:	00c00174 	movhi	r3,5
   4b798:	18de7304 	addi	r3,r3,31180
   4b79c:	18c00017 	ldw	r3,0(r3)
   4b7a0:	21800215 	stw	r6,8(r4)
   4b7a4:	10ffc036 	bltu	r2,r3,4b6a8 <__alt_data_end+0xfffe45a8>
   4b7a8:	008001b4 	movhi	r2,6
   4b7ac:	10a55604 	addi	r2,r2,-27304
   4b7b0:	11400017 	ldw	r5,0(r2)
   4b7b4:	8809883a 	mov	r4,r17
   4b7b8:	004b4940 	call	4b494 <_malloc_trim_r>
   4b7bc:	003fba06 	br	4b6a8 <__alt_data_end+0xfffe45a8>
   4b7c0:	28c9883a 	add	r4,r5,r3
   4b7c4:	21000117 	ldw	r4,4(r4)
   4b7c8:	2100004c 	andi	r4,r4,1
   4b7cc:	2000391e 	bne	r4,zero,4b8b4 <_free_r+0x2fc>
   4b7d0:	29c00217 	ldw	r7,8(r5)
   4b7d4:	29000317 	ldw	r4,12(r5)
   4b7d8:	1885883a 	add	r2,r3,r2
   4b7dc:	10c00054 	ori	r3,r2,1
   4b7e0:	39000315 	stw	r4,12(r7)
   4b7e4:	21c00215 	stw	r7,8(r4)
   4b7e8:	30c00115 	stw	r3,4(r6)
   4b7ec:	308d883a 	add	r6,r6,r2
   4b7f0:	30800015 	stw	r2,0(r6)
   4b7f4:	003fac06 	br	4b6a8 <__alt_data_end+0xfffe45a8>
   4b7f8:	00c00504 	movi	r3,20
   4b7fc:	19401536 	bltu	r3,r5,4b854 <_free_r+0x29c>
   4b800:	28c01704 	addi	r3,r5,92
   4b804:	18c7883a 	add	r3,r3,r3
   4b808:	294016c4 	addi	r5,r5,91
   4b80c:	003fb406 	br	4b6e0 <__alt_data_end+0xfffe45e0>
   4b810:	280bd0ba 	srai	r5,r5,2
   4b814:	00c00044 	movi	r3,1
   4b818:	38800117 	ldw	r2,4(r7)
   4b81c:	194a983a 	sll	r5,r3,r5
   4b820:	2007883a 	mov	r3,r4
   4b824:	2884b03a 	or	r2,r5,r2
   4b828:	38800115 	stw	r2,4(r7)
   4b82c:	003fbb06 	br	4b71c <__alt_data_end+0xfffe461c>
   4b830:	21800515 	stw	r6,20(r4)
   4b834:	21800415 	stw	r6,16(r4)
   4b838:	10c00054 	ori	r3,r2,1
   4b83c:	31c00315 	stw	r7,12(r6)
   4b840:	31c00215 	stw	r7,8(r6)
   4b844:	30c00115 	stw	r3,4(r6)
   4b848:	308d883a 	add	r6,r6,r2
   4b84c:	30800015 	stw	r2,0(r6)
   4b850:	003f9506 	br	4b6a8 <__alt_data_end+0xfffe45a8>
   4b854:	00c01504 	movi	r3,84
   4b858:	19400536 	bltu	r3,r5,4b870 <_free_r+0x2b8>
   4b85c:	100ad33a 	srli	r5,r2,12
   4b860:	28c01bc4 	addi	r3,r5,111
   4b864:	18c7883a 	add	r3,r3,r3
   4b868:	29401b84 	addi	r5,r5,110
   4b86c:	003f9c06 	br	4b6e0 <__alt_data_end+0xfffe45e0>
   4b870:	00c05504 	movi	r3,340
   4b874:	19400536 	bltu	r3,r5,4b88c <_free_r+0x2d4>
   4b878:	100ad3fa 	srli	r5,r2,15
   4b87c:	28c01e04 	addi	r3,r5,120
   4b880:	18c7883a 	add	r3,r3,r3
   4b884:	29401dc4 	addi	r5,r5,119
   4b888:	003f9506 	br	4b6e0 <__alt_data_end+0xfffe45e0>
   4b88c:	00c15504 	movi	r3,1364
   4b890:	19400536 	bltu	r3,r5,4b8a8 <_free_r+0x2f0>
   4b894:	100ad4ba 	srli	r5,r2,18
   4b898:	28c01f44 	addi	r3,r5,125
   4b89c:	18c7883a 	add	r3,r3,r3
   4b8a0:	29401f04 	addi	r5,r5,124
   4b8a4:	003f8e06 	br	4b6e0 <__alt_data_end+0xfffe45e0>
   4b8a8:	00c03f84 	movi	r3,254
   4b8ac:	01401f84 	movi	r5,126
   4b8b0:	003f8b06 	br	4b6e0 <__alt_data_end+0xfffe45e0>
   4b8b4:	10c00054 	ori	r3,r2,1
   4b8b8:	30c00115 	stw	r3,4(r6)
   4b8bc:	308d883a 	add	r6,r6,r2
   4b8c0:	30800015 	stw	r2,0(r6)
   4b8c4:	003f7806 	br	4b6a8 <__alt_data_end+0xfffe45a8>

0004b8c8 <__sfvwrite_r>:
   4b8c8:	30800217 	ldw	r2,8(r6)
   4b8cc:	10006726 	beq	r2,zero,4ba6c <__sfvwrite_r+0x1a4>
   4b8d0:	28c0030b 	ldhu	r3,12(r5)
   4b8d4:	defff404 	addi	sp,sp,-48
   4b8d8:	dd400715 	stw	r21,28(sp)
   4b8dc:	dd000615 	stw	r20,24(sp)
   4b8e0:	dc000215 	stw	r16,8(sp)
   4b8e4:	dfc00b15 	stw	ra,44(sp)
   4b8e8:	df000a15 	stw	fp,40(sp)
   4b8ec:	ddc00915 	stw	r23,36(sp)
   4b8f0:	dd800815 	stw	r22,32(sp)
   4b8f4:	dcc00515 	stw	r19,20(sp)
   4b8f8:	dc800415 	stw	r18,16(sp)
   4b8fc:	dc400315 	stw	r17,12(sp)
   4b900:	1880020c 	andi	r2,r3,8
   4b904:	2821883a 	mov	r16,r5
   4b908:	202b883a 	mov	r21,r4
   4b90c:	3029883a 	mov	r20,r6
   4b910:	10002726 	beq	r2,zero,4b9b0 <__sfvwrite_r+0xe8>
   4b914:	28800417 	ldw	r2,16(r5)
   4b918:	10002526 	beq	r2,zero,4b9b0 <__sfvwrite_r+0xe8>
   4b91c:	1880008c 	andi	r2,r3,2
   4b920:	a4400017 	ldw	r17,0(r20)
   4b924:	10002a26 	beq	r2,zero,4b9d0 <__sfvwrite_r+0x108>
   4b928:	05a00034 	movhi	r22,32768
   4b92c:	0027883a 	mov	r19,zero
   4b930:	0025883a 	mov	r18,zero
   4b934:	b5bf0004 	addi	r22,r22,-1024
   4b938:	980d883a 	mov	r6,r19
   4b93c:	a809883a 	mov	r4,r21
   4b940:	90004626 	beq	r18,zero,4ba5c <__sfvwrite_r+0x194>
   4b944:	900f883a 	mov	r7,r18
   4b948:	b480022e 	bgeu	r22,r18,4b954 <__sfvwrite_r+0x8c>
   4b94c:	01e00034 	movhi	r7,32768
   4b950:	39ff0004 	addi	r7,r7,-1024
   4b954:	80800917 	ldw	r2,36(r16)
   4b958:	81400717 	ldw	r5,28(r16)
   4b95c:	103ee83a 	callr	r2
   4b960:	0080570e 	bge	zero,r2,4bac0 <__sfvwrite_r+0x1f8>
   4b964:	a0c00217 	ldw	r3,8(r20)
   4b968:	98a7883a 	add	r19,r19,r2
   4b96c:	90a5c83a 	sub	r18,r18,r2
   4b970:	1885c83a 	sub	r2,r3,r2
   4b974:	a0800215 	stw	r2,8(r20)
   4b978:	103fef1e 	bne	r2,zero,4b938 <__alt_data_end+0xfffe4838>
   4b97c:	0005883a 	mov	r2,zero
   4b980:	dfc00b17 	ldw	ra,44(sp)
   4b984:	df000a17 	ldw	fp,40(sp)
   4b988:	ddc00917 	ldw	r23,36(sp)
   4b98c:	dd800817 	ldw	r22,32(sp)
   4b990:	dd400717 	ldw	r21,28(sp)
   4b994:	dd000617 	ldw	r20,24(sp)
   4b998:	dcc00517 	ldw	r19,20(sp)
   4b99c:	dc800417 	ldw	r18,16(sp)
   4b9a0:	dc400317 	ldw	r17,12(sp)
   4b9a4:	dc000217 	ldw	r16,8(sp)
   4b9a8:	dec00c04 	addi	sp,sp,48
   4b9ac:	f800283a 	ret
   4b9b0:	800b883a 	mov	r5,r16
   4b9b4:	a809883a 	mov	r4,r21
   4b9b8:	00494700 	call	49470 <__swsetup_r>
   4b9bc:	1000eb1e 	bne	r2,zero,4bd6c <__sfvwrite_r+0x4a4>
   4b9c0:	80c0030b 	ldhu	r3,12(r16)
   4b9c4:	a4400017 	ldw	r17,0(r20)
   4b9c8:	1880008c 	andi	r2,r3,2
   4b9cc:	103fd61e 	bne	r2,zero,4b928 <__alt_data_end+0xfffe4828>
   4b9d0:	1880004c 	andi	r2,r3,1
   4b9d4:	10003f1e 	bne	r2,zero,4bad4 <__sfvwrite_r+0x20c>
   4b9d8:	0039883a 	mov	fp,zero
   4b9dc:	0025883a 	mov	r18,zero
   4b9e0:	90001a26 	beq	r18,zero,4ba4c <__sfvwrite_r+0x184>
   4b9e4:	1880800c 	andi	r2,r3,512
   4b9e8:	84c00217 	ldw	r19,8(r16)
   4b9ec:	10002126 	beq	r2,zero,4ba74 <__sfvwrite_r+0x1ac>
   4b9f0:	982f883a 	mov	r23,r19
   4b9f4:	94c09336 	bltu	r18,r19,4bc44 <__sfvwrite_r+0x37c>
   4b9f8:	1881200c 	andi	r2,r3,1152
   4b9fc:	10009e1e 	bne	r2,zero,4bc78 <__sfvwrite_r+0x3b0>
   4ba00:	81000017 	ldw	r4,0(r16)
   4ba04:	b80d883a 	mov	r6,r23
   4ba08:	e00b883a 	mov	r5,fp
   4ba0c:	004cbdc0 	call	4cbdc <memmove>
   4ba10:	80c00217 	ldw	r3,8(r16)
   4ba14:	81000017 	ldw	r4,0(r16)
   4ba18:	9005883a 	mov	r2,r18
   4ba1c:	1ce7c83a 	sub	r19,r3,r19
   4ba20:	25cf883a 	add	r7,r4,r23
   4ba24:	84c00215 	stw	r19,8(r16)
   4ba28:	81c00015 	stw	r7,0(r16)
   4ba2c:	a0c00217 	ldw	r3,8(r20)
   4ba30:	e0b9883a 	add	fp,fp,r2
   4ba34:	90a5c83a 	sub	r18,r18,r2
   4ba38:	18a7c83a 	sub	r19,r3,r2
   4ba3c:	a4c00215 	stw	r19,8(r20)
   4ba40:	983fce26 	beq	r19,zero,4b97c <__alt_data_end+0xfffe487c>
   4ba44:	80c0030b 	ldhu	r3,12(r16)
   4ba48:	903fe61e 	bne	r18,zero,4b9e4 <__alt_data_end+0xfffe48e4>
   4ba4c:	8f000017 	ldw	fp,0(r17)
   4ba50:	8c800117 	ldw	r18,4(r17)
   4ba54:	8c400204 	addi	r17,r17,8
   4ba58:	003fe106 	br	4b9e0 <__alt_data_end+0xfffe48e0>
   4ba5c:	8cc00017 	ldw	r19,0(r17)
   4ba60:	8c800117 	ldw	r18,4(r17)
   4ba64:	8c400204 	addi	r17,r17,8
   4ba68:	003fb306 	br	4b938 <__alt_data_end+0xfffe4838>
   4ba6c:	0005883a 	mov	r2,zero
   4ba70:	f800283a 	ret
   4ba74:	81000017 	ldw	r4,0(r16)
   4ba78:	80800417 	ldw	r2,16(r16)
   4ba7c:	11005736 	bltu	r2,r4,4bbdc <__sfvwrite_r+0x314>
   4ba80:	85c00517 	ldw	r23,20(r16)
   4ba84:	95c05536 	bltu	r18,r23,4bbdc <__sfvwrite_r+0x314>
   4ba88:	00a00034 	movhi	r2,32768
   4ba8c:	10bfffc4 	addi	r2,r2,-1
   4ba90:	9009883a 	mov	r4,r18
   4ba94:	1480012e 	bgeu	r2,r18,4ba9c <__sfvwrite_r+0x1d4>
   4ba98:	1009883a 	mov	r4,r2
   4ba9c:	b80b883a 	mov	r5,r23
   4baa0:	00431800 	call	43180 <__divsi3>
   4baa4:	15cf383a 	mul	r7,r2,r23
   4baa8:	81400717 	ldw	r5,28(r16)
   4baac:	80800917 	ldw	r2,36(r16)
   4bab0:	e00d883a 	mov	r6,fp
   4bab4:	a809883a 	mov	r4,r21
   4bab8:	103ee83a 	callr	r2
   4babc:	00bfdb16 	blt	zero,r2,4ba2c <__alt_data_end+0xfffe492c>
   4bac0:	8080030b 	ldhu	r2,12(r16)
   4bac4:	10801014 	ori	r2,r2,64
   4bac8:	8080030d 	sth	r2,12(r16)
   4bacc:	00bfffc4 	movi	r2,-1
   4bad0:	003fab06 	br	4b980 <__alt_data_end+0xfffe4880>
   4bad4:	0027883a 	mov	r19,zero
   4bad8:	0011883a 	mov	r8,zero
   4badc:	0039883a 	mov	fp,zero
   4bae0:	0025883a 	mov	r18,zero
   4bae4:	90001f26 	beq	r18,zero,4bb64 <__sfvwrite_r+0x29c>
   4bae8:	40005a26 	beq	r8,zero,4bc54 <__sfvwrite_r+0x38c>
   4baec:	982d883a 	mov	r22,r19
   4baf0:	94c0012e 	bgeu	r18,r19,4baf8 <__sfvwrite_r+0x230>
   4baf4:	902d883a 	mov	r22,r18
   4baf8:	81000017 	ldw	r4,0(r16)
   4bafc:	80800417 	ldw	r2,16(r16)
   4bb00:	b02f883a 	mov	r23,r22
   4bb04:	81c00517 	ldw	r7,20(r16)
   4bb08:	1100032e 	bgeu	r2,r4,4bb18 <__sfvwrite_r+0x250>
   4bb0c:	80c00217 	ldw	r3,8(r16)
   4bb10:	38c7883a 	add	r3,r7,r3
   4bb14:	1d801816 	blt	r3,r22,4bb78 <__sfvwrite_r+0x2b0>
   4bb18:	b1c03e16 	blt	r22,r7,4bc14 <__sfvwrite_r+0x34c>
   4bb1c:	80800917 	ldw	r2,36(r16)
   4bb20:	81400717 	ldw	r5,28(r16)
   4bb24:	e00d883a 	mov	r6,fp
   4bb28:	da000115 	stw	r8,4(sp)
   4bb2c:	a809883a 	mov	r4,r21
   4bb30:	103ee83a 	callr	r2
   4bb34:	102f883a 	mov	r23,r2
   4bb38:	da000117 	ldw	r8,4(sp)
   4bb3c:	00bfe00e 	bge	zero,r2,4bac0 <__alt_data_end+0xfffe49c0>
   4bb40:	9de7c83a 	sub	r19,r19,r23
   4bb44:	98001f26 	beq	r19,zero,4bbc4 <__sfvwrite_r+0x2fc>
   4bb48:	a0800217 	ldw	r2,8(r20)
   4bb4c:	e5f9883a 	add	fp,fp,r23
   4bb50:	95e5c83a 	sub	r18,r18,r23
   4bb54:	15efc83a 	sub	r23,r2,r23
   4bb58:	a5c00215 	stw	r23,8(r20)
   4bb5c:	b83f8726 	beq	r23,zero,4b97c <__alt_data_end+0xfffe487c>
   4bb60:	903fe11e 	bne	r18,zero,4bae8 <__alt_data_end+0xfffe49e8>
   4bb64:	8f000017 	ldw	fp,0(r17)
   4bb68:	8c800117 	ldw	r18,4(r17)
   4bb6c:	0011883a 	mov	r8,zero
   4bb70:	8c400204 	addi	r17,r17,8
   4bb74:	003fdb06 	br	4bae4 <__alt_data_end+0xfffe49e4>
   4bb78:	180d883a 	mov	r6,r3
   4bb7c:	e00b883a 	mov	r5,fp
   4bb80:	da000115 	stw	r8,4(sp)
   4bb84:	d8c00015 	stw	r3,0(sp)
   4bb88:	004cbdc0 	call	4cbdc <memmove>
   4bb8c:	d8c00017 	ldw	r3,0(sp)
   4bb90:	80800017 	ldw	r2,0(r16)
   4bb94:	800b883a 	mov	r5,r16
   4bb98:	a809883a 	mov	r4,r21
   4bb9c:	10c5883a 	add	r2,r2,r3
   4bba0:	80800015 	stw	r2,0(r16)
   4bba4:	d8c00015 	stw	r3,0(sp)
   4bba8:	004b0680 	call	4b068 <_fflush_r>
   4bbac:	d8c00017 	ldw	r3,0(sp)
   4bbb0:	da000117 	ldw	r8,4(sp)
   4bbb4:	103fc21e 	bne	r2,zero,4bac0 <__alt_data_end+0xfffe49c0>
   4bbb8:	182f883a 	mov	r23,r3
   4bbbc:	9de7c83a 	sub	r19,r19,r23
   4bbc0:	983fe11e 	bne	r19,zero,4bb48 <__alt_data_end+0xfffe4a48>
   4bbc4:	800b883a 	mov	r5,r16
   4bbc8:	a809883a 	mov	r4,r21
   4bbcc:	004b0680 	call	4b068 <_fflush_r>
   4bbd0:	103fbb1e 	bne	r2,zero,4bac0 <__alt_data_end+0xfffe49c0>
   4bbd4:	0011883a 	mov	r8,zero
   4bbd8:	003fdb06 	br	4bb48 <__alt_data_end+0xfffe4a48>
   4bbdc:	94c0012e 	bgeu	r18,r19,4bbe4 <__sfvwrite_r+0x31c>
   4bbe0:	9027883a 	mov	r19,r18
   4bbe4:	980d883a 	mov	r6,r19
   4bbe8:	e00b883a 	mov	r5,fp
   4bbec:	004cbdc0 	call	4cbdc <memmove>
   4bbf0:	80800217 	ldw	r2,8(r16)
   4bbf4:	80c00017 	ldw	r3,0(r16)
   4bbf8:	14c5c83a 	sub	r2,r2,r19
   4bbfc:	1cc7883a 	add	r3,r3,r19
   4bc00:	80800215 	stw	r2,8(r16)
   4bc04:	80c00015 	stw	r3,0(r16)
   4bc08:	10004326 	beq	r2,zero,4bd18 <__sfvwrite_r+0x450>
   4bc0c:	9805883a 	mov	r2,r19
   4bc10:	003f8606 	br	4ba2c <__alt_data_end+0xfffe492c>
   4bc14:	b00d883a 	mov	r6,r22
   4bc18:	e00b883a 	mov	r5,fp
   4bc1c:	da000115 	stw	r8,4(sp)
   4bc20:	004cbdc0 	call	4cbdc <memmove>
   4bc24:	80800217 	ldw	r2,8(r16)
   4bc28:	80c00017 	ldw	r3,0(r16)
   4bc2c:	da000117 	ldw	r8,4(sp)
   4bc30:	1585c83a 	sub	r2,r2,r22
   4bc34:	1dad883a 	add	r22,r3,r22
   4bc38:	80800215 	stw	r2,8(r16)
   4bc3c:	85800015 	stw	r22,0(r16)
   4bc40:	003fbf06 	br	4bb40 <__alt_data_end+0xfffe4a40>
   4bc44:	81000017 	ldw	r4,0(r16)
   4bc48:	9027883a 	mov	r19,r18
   4bc4c:	902f883a 	mov	r23,r18
   4bc50:	003f6c06 	br	4ba04 <__alt_data_end+0xfffe4904>
   4bc54:	900d883a 	mov	r6,r18
   4bc58:	01400284 	movi	r5,10
   4bc5c:	e009883a 	mov	r4,fp
   4bc60:	004c9b00 	call	4c9b0 <memchr>
   4bc64:	10003e26 	beq	r2,zero,4bd60 <__sfvwrite_r+0x498>
   4bc68:	10800044 	addi	r2,r2,1
   4bc6c:	1727c83a 	sub	r19,r2,fp
   4bc70:	02000044 	movi	r8,1
   4bc74:	003f9d06 	br	4baec <__alt_data_end+0xfffe49ec>
   4bc78:	80800517 	ldw	r2,20(r16)
   4bc7c:	81400417 	ldw	r5,16(r16)
   4bc80:	81c00017 	ldw	r7,0(r16)
   4bc84:	10a7883a 	add	r19,r2,r2
   4bc88:	9885883a 	add	r2,r19,r2
   4bc8c:	1026d7fa 	srli	r19,r2,31
   4bc90:	396dc83a 	sub	r22,r7,r5
   4bc94:	b1000044 	addi	r4,r22,1
   4bc98:	9885883a 	add	r2,r19,r2
   4bc9c:	1027d07a 	srai	r19,r2,1
   4bca0:	2485883a 	add	r2,r4,r18
   4bca4:	980d883a 	mov	r6,r19
   4bca8:	9880022e 	bgeu	r19,r2,4bcb4 <__sfvwrite_r+0x3ec>
   4bcac:	1027883a 	mov	r19,r2
   4bcb0:	100d883a 	mov	r6,r2
   4bcb4:	18c1000c 	andi	r3,r3,1024
   4bcb8:	18001c26 	beq	r3,zero,4bd2c <__sfvwrite_r+0x464>
   4bcbc:	300b883a 	mov	r5,r6
   4bcc0:	a809883a 	mov	r4,r21
   4bcc4:	004c1a40 	call	4c1a4 <_malloc_r>
   4bcc8:	102f883a 	mov	r23,r2
   4bccc:	10002926 	beq	r2,zero,4bd74 <__sfvwrite_r+0x4ac>
   4bcd0:	81400417 	ldw	r5,16(r16)
   4bcd4:	b00d883a 	mov	r6,r22
   4bcd8:	1009883a 	mov	r4,r2
   4bcdc:	004ca940 	call	4ca94 <memcpy>
   4bce0:	8080030b 	ldhu	r2,12(r16)
   4bce4:	00fedfc4 	movi	r3,-1153
   4bce8:	10c4703a 	and	r2,r2,r3
   4bcec:	10802014 	ori	r2,r2,128
   4bcf0:	8080030d 	sth	r2,12(r16)
   4bcf4:	bd89883a 	add	r4,r23,r22
   4bcf8:	9d8fc83a 	sub	r7,r19,r22
   4bcfc:	85c00415 	stw	r23,16(r16)
   4bd00:	84c00515 	stw	r19,20(r16)
   4bd04:	81000015 	stw	r4,0(r16)
   4bd08:	9027883a 	mov	r19,r18
   4bd0c:	81c00215 	stw	r7,8(r16)
   4bd10:	902f883a 	mov	r23,r18
   4bd14:	003f3b06 	br	4ba04 <__alt_data_end+0xfffe4904>
   4bd18:	800b883a 	mov	r5,r16
   4bd1c:	a809883a 	mov	r4,r21
   4bd20:	004b0680 	call	4b068 <_fflush_r>
   4bd24:	103fb926 	beq	r2,zero,4bc0c <__alt_data_end+0xfffe4b0c>
   4bd28:	003f6506 	br	4bac0 <__alt_data_end+0xfffe49c0>
   4bd2c:	a809883a 	mov	r4,r21
   4bd30:	004de5c0 	call	4de5c <_realloc_r>
   4bd34:	102f883a 	mov	r23,r2
   4bd38:	103fee1e 	bne	r2,zero,4bcf4 <__alt_data_end+0xfffe4bf4>
   4bd3c:	81400417 	ldw	r5,16(r16)
   4bd40:	a809883a 	mov	r4,r21
   4bd44:	004b5b80 	call	4b5b8 <_free_r>
   4bd48:	8080030b 	ldhu	r2,12(r16)
   4bd4c:	00ffdfc4 	movi	r3,-129
   4bd50:	1884703a 	and	r2,r3,r2
   4bd54:	00c00304 	movi	r3,12
   4bd58:	a8c00015 	stw	r3,0(r21)
   4bd5c:	003f5906 	br	4bac4 <__alt_data_end+0xfffe49c4>
   4bd60:	94c00044 	addi	r19,r18,1
   4bd64:	02000044 	movi	r8,1
   4bd68:	003f6006 	br	4baec <__alt_data_end+0xfffe49ec>
   4bd6c:	00bfffc4 	movi	r2,-1
   4bd70:	003f0306 	br	4b980 <__alt_data_end+0xfffe4880>
   4bd74:	00800304 	movi	r2,12
   4bd78:	a8800015 	stw	r2,0(r21)
   4bd7c:	8080030b 	ldhu	r2,12(r16)
   4bd80:	003f5006 	br	4bac4 <__alt_data_end+0xfffe49c4>

0004bd84 <_fwalk>:
   4bd84:	defff704 	addi	sp,sp,-36
   4bd88:	dd000415 	stw	r20,16(sp)
   4bd8c:	dfc00815 	stw	ra,32(sp)
   4bd90:	ddc00715 	stw	r23,28(sp)
   4bd94:	dd800615 	stw	r22,24(sp)
   4bd98:	dd400515 	stw	r21,20(sp)
   4bd9c:	dcc00315 	stw	r19,12(sp)
   4bda0:	dc800215 	stw	r18,8(sp)
   4bda4:	dc400115 	stw	r17,4(sp)
   4bda8:	dc000015 	stw	r16,0(sp)
   4bdac:	2500b804 	addi	r20,r4,736
   4bdb0:	a0002326 	beq	r20,zero,4be40 <_fwalk+0xbc>
   4bdb4:	282b883a 	mov	r21,r5
   4bdb8:	002f883a 	mov	r23,zero
   4bdbc:	05800044 	movi	r22,1
   4bdc0:	04ffffc4 	movi	r19,-1
   4bdc4:	a4400117 	ldw	r17,4(r20)
   4bdc8:	a4800217 	ldw	r18,8(r20)
   4bdcc:	8c7fffc4 	addi	r17,r17,-1
   4bdd0:	88000d16 	blt	r17,zero,4be08 <_fwalk+0x84>
   4bdd4:	94000304 	addi	r16,r18,12
   4bdd8:	94800384 	addi	r18,r18,14
   4bddc:	8080000b 	ldhu	r2,0(r16)
   4bde0:	8c7fffc4 	addi	r17,r17,-1
   4bde4:	813ffd04 	addi	r4,r16,-12
   4bde8:	b080042e 	bgeu	r22,r2,4bdfc <_fwalk+0x78>
   4bdec:	9080000f 	ldh	r2,0(r18)
   4bdf0:	14c00226 	beq	r2,r19,4bdfc <_fwalk+0x78>
   4bdf4:	a83ee83a 	callr	r21
   4bdf8:	b8aeb03a 	or	r23,r23,r2
   4bdfc:	84001a04 	addi	r16,r16,104
   4be00:	94801a04 	addi	r18,r18,104
   4be04:	8cfff51e 	bne	r17,r19,4bddc <__alt_data_end+0xfffe4cdc>
   4be08:	a5000017 	ldw	r20,0(r20)
   4be0c:	a03fed1e 	bne	r20,zero,4bdc4 <__alt_data_end+0xfffe4cc4>
   4be10:	b805883a 	mov	r2,r23
   4be14:	dfc00817 	ldw	ra,32(sp)
   4be18:	ddc00717 	ldw	r23,28(sp)
   4be1c:	dd800617 	ldw	r22,24(sp)
   4be20:	dd400517 	ldw	r21,20(sp)
   4be24:	dd000417 	ldw	r20,16(sp)
   4be28:	dcc00317 	ldw	r19,12(sp)
   4be2c:	dc800217 	ldw	r18,8(sp)
   4be30:	dc400117 	ldw	r17,4(sp)
   4be34:	dc000017 	ldw	r16,0(sp)
   4be38:	dec00904 	addi	sp,sp,36
   4be3c:	f800283a 	ret
   4be40:	002f883a 	mov	r23,zero
   4be44:	003ff206 	br	4be10 <__alt_data_end+0xfffe4d10>

0004be48 <_fwalk_reent>:
   4be48:	defff704 	addi	sp,sp,-36
   4be4c:	dd000415 	stw	r20,16(sp)
   4be50:	dfc00815 	stw	ra,32(sp)
   4be54:	ddc00715 	stw	r23,28(sp)
   4be58:	dd800615 	stw	r22,24(sp)
   4be5c:	dd400515 	stw	r21,20(sp)
   4be60:	dcc00315 	stw	r19,12(sp)
   4be64:	dc800215 	stw	r18,8(sp)
   4be68:	dc400115 	stw	r17,4(sp)
   4be6c:	dc000015 	stw	r16,0(sp)
   4be70:	2500b804 	addi	r20,r4,736
   4be74:	a0002326 	beq	r20,zero,4bf04 <_fwalk_reent+0xbc>
   4be78:	282b883a 	mov	r21,r5
   4be7c:	2027883a 	mov	r19,r4
   4be80:	002f883a 	mov	r23,zero
   4be84:	05800044 	movi	r22,1
   4be88:	04bfffc4 	movi	r18,-1
   4be8c:	a4400117 	ldw	r17,4(r20)
   4be90:	a4000217 	ldw	r16,8(r20)
   4be94:	8c7fffc4 	addi	r17,r17,-1
   4be98:	88000c16 	blt	r17,zero,4becc <_fwalk_reent+0x84>
   4be9c:	84000304 	addi	r16,r16,12
   4bea0:	8080000b 	ldhu	r2,0(r16)
   4bea4:	8c7fffc4 	addi	r17,r17,-1
   4bea8:	817ffd04 	addi	r5,r16,-12
   4beac:	b080052e 	bgeu	r22,r2,4bec4 <_fwalk_reent+0x7c>
   4beb0:	8080008f 	ldh	r2,2(r16)
   4beb4:	9809883a 	mov	r4,r19
   4beb8:	14800226 	beq	r2,r18,4bec4 <_fwalk_reent+0x7c>
   4bebc:	a83ee83a 	callr	r21
   4bec0:	b8aeb03a 	or	r23,r23,r2
   4bec4:	84001a04 	addi	r16,r16,104
   4bec8:	8cbff51e 	bne	r17,r18,4bea0 <__alt_data_end+0xfffe4da0>
   4becc:	a5000017 	ldw	r20,0(r20)
   4bed0:	a03fee1e 	bne	r20,zero,4be8c <__alt_data_end+0xfffe4d8c>
   4bed4:	b805883a 	mov	r2,r23
   4bed8:	dfc00817 	ldw	ra,32(sp)
   4bedc:	ddc00717 	ldw	r23,28(sp)
   4bee0:	dd800617 	ldw	r22,24(sp)
   4bee4:	dd400517 	ldw	r21,20(sp)
   4bee8:	dd000417 	ldw	r20,16(sp)
   4beec:	dcc00317 	ldw	r19,12(sp)
   4bef0:	dc800217 	ldw	r18,8(sp)
   4bef4:	dc400117 	ldw	r17,4(sp)
   4bef8:	dc000017 	ldw	r16,0(sp)
   4befc:	dec00904 	addi	sp,sp,36
   4bf00:	f800283a 	ret
   4bf04:	002f883a 	mov	r23,zero
   4bf08:	003ff206 	br	4bed4 <__alt_data_end+0xfffe4dd4>

0004bf0c <_setlocale_r>:
   4bf0c:	30001b26 	beq	r6,zero,4bf7c <_setlocale_r+0x70>
   4bf10:	01400174 	movhi	r5,5
   4bf14:	defffe04 	addi	sp,sp,-8
   4bf18:	29574704 	addi	r5,r5,23836
   4bf1c:	3009883a 	mov	r4,r6
   4bf20:	dc000015 	stw	r16,0(sp)
   4bf24:	dfc00115 	stw	ra,4(sp)
   4bf28:	3021883a 	mov	r16,r6
   4bf2c:	004e5500 	call	4e550 <strcmp>
   4bf30:	1000061e 	bne	r2,zero,4bf4c <_setlocale_r+0x40>
   4bf34:	00800174 	movhi	r2,5
   4bf38:	10972804 	addi	r2,r2,23712
   4bf3c:	dfc00117 	ldw	ra,4(sp)
   4bf40:	dc000017 	ldw	r16,0(sp)
   4bf44:	dec00204 	addi	sp,sp,8
   4bf48:	f800283a 	ret
   4bf4c:	01400174 	movhi	r5,5
   4bf50:	29572804 	addi	r5,r5,23712
   4bf54:	8009883a 	mov	r4,r16
   4bf58:	004e5500 	call	4e550 <strcmp>
   4bf5c:	103ff526 	beq	r2,zero,4bf34 <__alt_data_end+0xfffe4e34>
   4bf60:	01400174 	movhi	r5,5
   4bf64:	29573204 	addi	r5,r5,23752
   4bf68:	8009883a 	mov	r4,r16
   4bf6c:	004e5500 	call	4e550 <strcmp>
   4bf70:	103ff026 	beq	r2,zero,4bf34 <__alt_data_end+0xfffe4e34>
   4bf74:	0005883a 	mov	r2,zero
   4bf78:	003ff006 	br	4bf3c <__alt_data_end+0xfffe4e3c>
   4bf7c:	00800174 	movhi	r2,5
   4bf80:	10972804 	addi	r2,r2,23712
   4bf84:	f800283a 	ret

0004bf88 <__locale_charset>:
   4bf88:	00800174 	movhi	r2,5
   4bf8c:	1098c304 	addi	r2,r2,25356
   4bf90:	f800283a 	ret

0004bf94 <__locale_mb_cur_max>:
   4bf94:	00800174 	movhi	r2,5
   4bf98:	109e7104 	addi	r2,r2,31172
   4bf9c:	10800017 	ldw	r2,0(r2)
   4bfa0:	f800283a 	ret

0004bfa4 <__locale_msgcharset>:
   4bfa4:	00800174 	movhi	r2,5
   4bfa8:	1098bb04 	addi	r2,r2,25324
   4bfac:	f800283a 	ret

0004bfb0 <__locale_cjk_lang>:
   4bfb0:	0005883a 	mov	r2,zero
   4bfb4:	f800283a 	ret

0004bfb8 <_localeconv_r>:
   4bfb8:	00800174 	movhi	r2,5
   4bfbc:	1098cb04 	addi	r2,r2,25388
   4bfc0:	f800283a 	ret

0004bfc4 <setlocale>:
   4bfc4:	00800174 	movhi	r2,5
   4bfc8:	109e7004 	addi	r2,r2,31168
   4bfcc:	280d883a 	mov	r6,r5
   4bfd0:	200b883a 	mov	r5,r4
   4bfd4:	11000017 	ldw	r4,0(r2)
   4bfd8:	004bf0c1 	jmpi	4bf0c <_setlocale_r>

0004bfdc <localeconv>:
   4bfdc:	00800174 	movhi	r2,5
   4bfe0:	1098cb04 	addi	r2,r2,25388
   4bfe4:	f800283a 	ret

0004bfe8 <__smakebuf_r>:
   4bfe8:	2880030b 	ldhu	r2,12(r5)
   4bfec:	10c0008c 	andi	r3,r2,2
   4bff0:	1800411e 	bne	r3,zero,4c0f8 <__smakebuf_r+0x110>
   4bff4:	deffec04 	addi	sp,sp,-80
   4bff8:	dc000f15 	stw	r16,60(sp)
   4bffc:	2821883a 	mov	r16,r5
   4c000:	2940038f 	ldh	r5,14(r5)
   4c004:	dc401015 	stw	r17,64(sp)
   4c008:	dfc01315 	stw	ra,76(sp)
   4c00c:	dcc01215 	stw	r19,72(sp)
   4c010:	dc801115 	stw	r18,68(sp)
   4c014:	2023883a 	mov	r17,r4
   4c018:	28001c16 	blt	r5,zero,4c08c <__smakebuf_r+0xa4>
   4c01c:	d80d883a 	mov	r6,sp
   4c020:	00500f80 	call	500f8 <_fstat_r>
   4c024:	10001816 	blt	r2,zero,4c088 <__smakebuf_r+0xa0>
   4c028:	d8800117 	ldw	r2,4(sp)
   4c02c:	00e00014 	movui	r3,32768
   4c030:	10bc000c 	andi	r2,r2,61440
   4c034:	14c80020 	cmpeqi	r19,r2,8192
   4c038:	10c03726 	beq	r2,r3,4c118 <__smakebuf_r+0x130>
   4c03c:	80c0030b 	ldhu	r3,12(r16)
   4c040:	18c20014 	ori	r3,r3,2048
   4c044:	80c0030d 	sth	r3,12(r16)
   4c048:	00c80004 	movi	r3,8192
   4c04c:	10c0521e 	bne	r2,r3,4c198 <__smakebuf_r+0x1b0>
   4c050:	8140038f 	ldh	r5,14(r16)
   4c054:	8809883a 	mov	r4,r17
   4c058:	00501540 	call	50154 <_isatty_r>
   4c05c:	10004c26 	beq	r2,zero,4c190 <__smakebuf_r+0x1a8>
   4c060:	8080030b 	ldhu	r2,12(r16)
   4c064:	80c010c4 	addi	r3,r16,67
   4c068:	80c00015 	stw	r3,0(r16)
   4c06c:	10800054 	ori	r2,r2,1
   4c070:	8080030d 	sth	r2,12(r16)
   4c074:	00800044 	movi	r2,1
   4c078:	80c00415 	stw	r3,16(r16)
   4c07c:	80800515 	stw	r2,20(r16)
   4c080:	04810004 	movi	r18,1024
   4c084:	00000706 	br	4c0a4 <__smakebuf_r+0xbc>
   4c088:	8080030b 	ldhu	r2,12(r16)
   4c08c:	10c0200c 	andi	r3,r2,128
   4c090:	18001f1e 	bne	r3,zero,4c110 <__smakebuf_r+0x128>
   4c094:	04810004 	movi	r18,1024
   4c098:	10820014 	ori	r2,r2,2048
   4c09c:	8080030d 	sth	r2,12(r16)
   4c0a0:	0027883a 	mov	r19,zero
   4c0a4:	900b883a 	mov	r5,r18
   4c0a8:	8809883a 	mov	r4,r17
   4c0ac:	004c1a40 	call	4c1a4 <_malloc_r>
   4c0b0:	10002c26 	beq	r2,zero,4c164 <__smakebuf_r+0x17c>
   4c0b4:	80c0030b 	ldhu	r3,12(r16)
   4c0b8:	01000174 	movhi	r4,5
   4c0bc:	212c3f04 	addi	r4,r4,-20228
   4c0c0:	89000f15 	stw	r4,60(r17)
   4c0c4:	18c02014 	ori	r3,r3,128
   4c0c8:	80c0030d 	sth	r3,12(r16)
   4c0cc:	80800015 	stw	r2,0(r16)
   4c0d0:	80800415 	stw	r2,16(r16)
   4c0d4:	84800515 	stw	r18,20(r16)
   4c0d8:	98001a1e 	bne	r19,zero,4c144 <__smakebuf_r+0x15c>
   4c0dc:	dfc01317 	ldw	ra,76(sp)
   4c0e0:	dcc01217 	ldw	r19,72(sp)
   4c0e4:	dc801117 	ldw	r18,68(sp)
   4c0e8:	dc401017 	ldw	r17,64(sp)
   4c0ec:	dc000f17 	ldw	r16,60(sp)
   4c0f0:	dec01404 	addi	sp,sp,80
   4c0f4:	f800283a 	ret
   4c0f8:	288010c4 	addi	r2,r5,67
   4c0fc:	28800015 	stw	r2,0(r5)
   4c100:	28800415 	stw	r2,16(r5)
   4c104:	00800044 	movi	r2,1
   4c108:	28800515 	stw	r2,20(r5)
   4c10c:	f800283a 	ret
   4c110:	04801004 	movi	r18,64
   4c114:	003fe006 	br	4c098 <__alt_data_end+0xfffe4f98>
   4c118:	81000a17 	ldw	r4,40(r16)
   4c11c:	00c00174 	movhi	r3,5
   4c120:	18f93b04 	addi	r3,r3,-6932
   4c124:	20ffc51e 	bne	r4,r3,4c03c <__alt_data_end+0xfffe4f3c>
   4c128:	8080030b 	ldhu	r2,12(r16)
   4c12c:	04810004 	movi	r18,1024
   4c130:	84801315 	stw	r18,76(r16)
   4c134:	1484b03a 	or	r2,r2,r18
   4c138:	8080030d 	sth	r2,12(r16)
   4c13c:	0027883a 	mov	r19,zero
   4c140:	003fd806 	br	4c0a4 <__alt_data_end+0xfffe4fa4>
   4c144:	8140038f 	ldh	r5,14(r16)
   4c148:	8809883a 	mov	r4,r17
   4c14c:	00501540 	call	50154 <_isatty_r>
   4c150:	103fe226 	beq	r2,zero,4c0dc <__alt_data_end+0xfffe4fdc>
   4c154:	8080030b 	ldhu	r2,12(r16)
   4c158:	10800054 	ori	r2,r2,1
   4c15c:	8080030d 	sth	r2,12(r16)
   4c160:	003fde06 	br	4c0dc <__alt_data_end+0xfffe4fdc>
   4c164:	8080030b 	ldhu	r2,12(r16)
   4c168:	10c0800c 	andi	r3,r2,512
   4c16c:	183fdb1e 	bne	r3,zero,4c0dc <__alt_data_end+0xfffe4fdc>
   4c170:	10800094 	ori	r2,r2,2
   4c174:	80c010c4 	addi	r3,r16,67
   4c178:	8080030d 	sth	r2,12(r16)
   4c17c:	00800044 	movi	r2,1
   4c180:	80c00015 	stw	r3,0(r16)
   4c184:	80c00415 	stw	r3,16(r16)
   4c188:	80800515 	stw	r2,20(r16)
   4c18c:	003fd306 	br	4c0dc <__alt_data_end+0xfffe4fdc>
   4c190:	04810004 	movi	r18,1024
   4c194:	003fc306 	br	4c0a4 <__alt_data_end+0xfffe4fa4>
   4c198:	0027883a 	mov	r19,zero
   4c19c:	04810004 	movi	r18,1024
   4c1a0:	003fc006 	br	4c0a4 <__alt_data_end+0xfffe4fa4>

0004c1a4 <_malloc_r>:
   4c1a4:	defff504 	addi	sp,sp,-44
   4c1a8:	dc800315 	stw	r18,12(sp)
   4c1ac:	dfc00a15 	stw	ra,40(sp)
   4c1b0:	df000915 	stw	fp,36(sp)
   4c1b4:	ddc00815 	stw	r23,32(sp)
   4c1b8:	dd800715 	stw	r22,28(sp)
   4c1bc:	dd400615 	stw	r21,24(sp)
   4c1c0:	dd000515 	stw	r20,20(sp)
   4c1c4:	dcc00415 	stw	r19,16(sp)
   4c1c8:	dc400215 	stw	r17,8(sp)
   4c1cc:	dc000115 	stw	r16,4(sp)
   4c1d0:	288002c4 	addi	r2,r5,11
   4c1d4:	00c00584 	movi	r3,22
   4c1d8:	2025883a 	mov	r18,r4
   4c1dc:	18807f2e 	bgeu	r3,r2,4c3dc <_malloc_r+0x238>
   4c1e0:	047ffe04 	movi	r17,-8
   4c1e4:	1462703a 	and	r17,r2,r17
   4c1e8:	8800a316 	blt	r17,zero,4c478 <_malloc_r+0x2d4>
   4c1ec:	8940a236 	bltu	r17,r5,4c478 <_malloc_r+0x2d4>
   4c1f0:	00517700 	call	51770 <__malloc_lock>
   4c1f4:	00807dc4 	movi	r2,503
   4c1f8:	1441e92e 	bgeu	r2,r17,4c9a0 <_malloc_r+0x7fc>
   4c1fc:	8804d27a 	srli	r2,r17,9
   4c200:	1000a126 	beq	r2,zero,4c488 <_malloc_r+0x2e4>
   4c204:	00c00104 	movi	r3,4
   4c208:	18811e36 	bltu	r3,r2,4c684 <_malloc_r+0x4e0>
   4c20c:	8804d1ba 	srli	r2,r17,6
   4c210:	12000e44 	addi	r8,r2,57
   4c214:	11c00e04 	addi	r7,r2,56
   4c218:	4209883a 	add	r4,r8,r8
   4c21c:	04c00174 	movhi	r19,5
   4c220:	2109883a 	add	r4,r4,r4
   4c224:	9cd8d904 	addi	r19,r19,25444
   4c228:	2109883a 	add	r4,r4,r4
   4c22c:	9909883a 	add	r4,r19,r4
   4c230:	24000117 	ldw	r16,4(r4)
   4c234:	213ffe04 	addi	r4,r4,-8
   4c238:	24009726 	beq	r4,r16,4c498 <_malloc_r+0x2f4>
   4c23c:	80800117 	ldw	r2,4(r16)
   4c240:	01bfff04 	movi	r6,-4
   4c244:	014003c4 	movi	r5,15
   4c248:	1184703a 	and	r2,r2,r6
   4c24c:	1447c83a 	sub	r3,r2,r17
   4c250:	28c00716 	blt	r5,r3,4c270 <_malloc_r+0xcc>
   4c254:	1800920e 	bge	r3,zero,4c4a0 <_malloc_r+0x2fc>
   4c258:	84000317 	ldw	r16,12(r16)
   4c25c:	24008e26 	beq	r4,r16,4c498 <_malloc_r+0x2f4>
   4c260:	80800117 	ldw	r2,4(r16)
   4c264:	1184703a 	and	r2,r2,r6
   4c268:	1447c83a 	sub	r3,r2,r17
   4c26c:	28fff90e 	bge	r5,r3,4c254 <__alt_data_end+0xfffe5154>
   4c270:	3809883a 	mov	r4,r7
   4c274:	01800174 	movhi	r6,5
   4c278:	9c000417 	ldw	r16,16(r19)
   4c27c:	3198d904 	addi	r6,r6,25444
   4c280:	32000204 	addi	r8,r6,8
   4c284:	82013426 	beq	r16,r8,4c758 <_malloc_r+0x5b4>
   4c288:	80c00117 	ldw	r3,4(r16)
   4c28c:	00bfff04 	movi	r2,-4
   4c290:	188e703a 	and	r7,r3,r2
   4c294:	3c45c83a 	sub	r2,r7,r17
   4c298:	00c003c4 	movi	r3,15
   4c29c:	18811f16 	blt	r3,r2,4c71c <_malloc_r+0x578>
   4c2a0:	32000515 	stw	r8,20(r6)
   4c2a4:	32000415 	stw	r8,16(r6)
   4c2a8:	10007f0e 	bge	r2,zero,4c4a8 <_malloc_r+0x304>
   4c2ac:	00807fc4 	movi	r2,511
   4c2b0:	11c0fd36 	bltu	r2,r7,4c6a8 <_malloc_r+0x504>
   4c2b4:	3806d0fa 	srli	r3,r7,3
   4c2b8:	01c00044 	movi	r7,1
   4c2bc:	30800117 	ldw	r2,4(r6)
   4c2c0:	19400044 	addi	r5,r3,1
   4c2c4:	294b883a 	add	r5,r5,r5
   4c2c8:	1807d0ba 	srai	r3,r3,2
   4c2cc:	294b883a 	add	r5,r5,r5
   4c2d0:	294b883a 	add	r5,r5,r5
   4c2d4:	298b883a 	add	r5,r5,r6
   4c2d8:	38c6983a 	sll	r3,r7,r3
   4c2dc:	29c00017 	ldw	r7,0(r5)
   4c2e0:	2a7ffe04 	addi	r9,r5,-8
   4c2e4:	1886b03a 	or	r3,r3,r2
   4c2e8:	82400315 	stw	r9,12(r16)
   4c2ec:	81c00215 	stw	r7,8(r16)
   4c2f0:	30c00115 	stw	r3,4(r6)
   4c2f4:	2c000015 	stw	r16,0(r5)
   4c2f8:	3c000315 	stw	r16,12(r7)
   4c2fc:	2005d0ba 	srai	r2,r4,2
   4c300:	01400044 	movi	r5,1
   4c304:	288a983a 	sll	r5,r5,r2
   4c308:	19406f36 	bltu	r3,r5,4c4c8 <_malloc_r+0x324>
   4c30c:	28c4703a 	and	r2,r5,r3
   4c310:	10000a1e 	bne	r2,zero,4c33c <_malloc_r+0x198>
   4c314:	00bfff04 	movi	r2,-4
   4c318:	294b883a 	add	r5,r5,r5
   4c31c:	2088703a 	and	r4,r4,r2
   4c320:	28c4703a 	and	r2,r5,r3
   4c324:	21000104 	addi	r4,r4,4
   4c328:	1000041e 	bne	r2,zero,4c33c <_malloc_r+0x198>
   4c32c:	294b883a 	add	r5,r5,r5
   4c330:	28c4703a 	and	r2,r5,r3
   4c334:	21000104 	addi	r4,r4,4
   4c338:	103ffc26 	beq	r2,zero,4c32c <__alt_data_end+0xfffe522c>
   4c33c:	02bfff04 	movi	r10,-4
   4c340:	024003c4 	movi	r9,15
   4c344:	21800044 	addi	r6,r4,1
   4c348:	318d883a 	add	r6,r6,r6
   4c34c:	318d883a 	add	r6,r6,r6
   4c350:	318d883a 	add	r6,r6,r6
   4c354:	998d883a 	add	r6,r19,r6
   4c358:	333ffe04 	addi	r12,r6,-8
   4c35c:	2017883a 	mov	r11,r4
   4c360:	31800104 	addi	r6,r6,4
   4c364:	34000017 	ldw	r16,0(r6)
   4c368:	31fffd04 	addi	r7,r6,-12
   4c36c:	81c0041e 	bne	r16,r7,4c380 <_malloc_r+0x1dc>
   4c370:	0000fb06 	br	4c760 <_malloc_r+0x5bc>
   4c374:	1801030e 	bge	r3,zero,4c784 <_malloc_r+0x5e0>
   4c378:	84000317 	ldw	r16,12(r16)
   4c37c:	81c0f826 	beq	r16,r7,4c760 <_malloc_r+0x5bc>
   4c380:	80800117 	ldw	r2,4(r16)
   4c384:	1284703a 	and	r2,r2,r10
   4c388:	1447c83a 	sub	r3,r2,r17
   4c38c:	48fff90e 	bge	r9,r3,4c374 <__alt_data_end+0xfffe5274>
   4c390:	80800317 	ldw	r2,12(r16)
   4c394:	81000217 	ldw	r4,8(r16)
   4c398:	89400054 	ori	r5,r17,1
   4c39c:	81400115 	stw	r5,4(r16)
   4c3a0:	20800315 	stw	r2,12(r4)
   4c3a4:	11000215 	stw	r4,8(r2)
   4c3a8:	8463883a 	add	r17,r16,r17
   4c3ac:	9c400515 	stw	r17,20(r19)
   4c3b0:	9c400415 	stw	r17,16(r19)
   4c3b4:	18800054 	ori	r2,r3,1
   4c3b8:	88800115 	stw	r2,4(r17)
   4c3bc:	8a000315 	stw	r8,12(r17)
   4c3c0:	8a000215 	stw	r8,8(r17)
   4c3c4:	88e3883a 	add	r17,r17,r3
   4c3c8:	88c00015 	stw	r3,0(r17)
   4c3cc:	9009883a 	mov	r4,r18
   4c3d0:	00517940 	call	51794 <__malloc_unlock>
   4c3d4:	80800204 	addi	r2,r16,8
   4c3d8:	00001b06 	br	4c448 <_malloc_r+0x2a4>
   4c3dc:	04400404 	movi	r17,16
   4c3e0:	89402536 	bltu	r17,r5,4c478 <_malloc_r+0x2d4>
   4c3e4:	00517700 	call	51770 <__malloc_lock>
   4c3e8:	00800184 	movi	r2,6
   4c3ec:	01000084 	movi	r4,2
   4c3f0:	04c00174 	movhi	r19,5
   4c3f4:	1085883a 	add	r2,r2,r2
   4c3f8:	9cd8d904 	addi	r19,r19,25444
   4c3fc:	1085883a 	add	r2,r2,r2
   4c400:	9885883a 	add	r2,r19,r2
   4c404:	14000117 	ldw	r16,4(r2)
   4c408:	10fffe04 	addi	r3,r2,-8
   4c40c:	80c0d926 	beq	r16,r3,4c774 <_malloc_r+0x5d0>
   4c410:	80c00117 	ldw	r3,4(r16)
   4c414:	81000317 	ldw	r4,12(r16)
   4c418:	00bfff04 	movi	r2,-4
   4c41c:	1884703a 	and	r2,r3,r2
   4c420:	81400217 	ldw	r5,8(r16)
   4c424:	8085883a 	add	r2,r16,r2
   4c428:	10c00117 	ldw	r3,4(r2)
   4c42c:	29000315 	stw	r4,12(r5)
   4c430:	21400215 	stw	r5,8(r4)
   4c434:	18c00054 	ori	r3,r3,1
   4c438:	10c00115 	stw	r3,4(r2)
   4c43c:	9009883a 	mov	r4,r18
   4c440:	00517940 	call	51794 <__malloc_unlock>
   4c444:	80800204 	addi	r2,r16,8
   4c448:	dfc00a17 	ldw	ra,40(sp)
   4c44c:	df000917 	ldw	fp,36(sp)
   4c450:	ddc00817 	ldw	r23,32(sp)
   4c454:	dd800717 	ldw	r22,28(sp)
   4c458:	dd400617 	ldw	r21,24(sp)
   4c45c:	dd000517 	ldw	r20,20(sp)
   4c460:	dcc00417 	ldw	r19,16(sp)
   4c464:	dc800317 	ldw	r18,12(sp)
   4c468:	dc400217 	ldw	r17,8(sp)
   4c46c:	dc000117 	ldw	r16,4(sp)
   4c470:	dec00b04 	addi	sp,sp,44
   4c474:	f800283a 	ret
   4c478:	00800304 	movi	r2,12
   4c47c:	90800015 	stw	r2,0(r18)
   4c480:	0005883a 	mov	r2,zero
   4c484:	003ff006 	br	4c448 <__alt_data_end+0xfffe5348>
   4c488:	01002004 	movi	r4,128
   4c48c:	02001004 	movi	r8,64
   4c490:	01c00fc4 	movi	r7,63
   4c494:	003f6106 	br	4c21c <__alt_data_end+0xfffe511c>
   4c498:	4009883a 	mov	r4,r8
   4c49c:	003f7506 	br	4c274 <__alt_data_end+0xfffe5174>
   4c4a0:	81000317 	ldw	r4,12(r16)
   4c4a4:	003fde06 	br	4c420 <__alt_data_end+0xfffe5320>
   4c4a8:	81c5883a 	add	r2,r16,r7
   4c4ac:	11400117 	ldw	r5,4(r2)
   4c4b0:	9009883a 	mov	r4,r18
   4c4b4:	29400054 	ori	r5,r5,1
   4c4b8:	11400115 	stw	r5,4(r2)
   4c4bc:	00517940 	call	51794 <__malloc_unlock>
   4c4c0:	80800204 	addi	r2,r16,8
   4c4c4:	003fe006 	br	4c448 <__alt_data_end+0xfffe5348>
   4c4c8:	9c000217 	ldw	r16,8(r19)
   4c4cc:	00bfff04 	movi	r2,-4
   4c4d0:	85800117 	ldw	r22,4(r16)
   4c4d4:	b0ac703a 	and	r22,r22,r2
   4c4d8:	b4400336 	bltu	r22,r17,4c4e8 <_malloc_r+0x344>
   4c4dc:	b445c83a 	sub	r2,r22,r17
   4c4e0:	00c003c4 	movi	r3,15
   4c4e4:	18805d16 	blt	r3,r2,4c65c <_malloc_r+0x4b8>
   4c4e8:	05c00174 	movhi	r23,5
   4c4ec:	008001b4 	movhi	r2,6
   4c4f0:	10a55604 	addi	r2,r2,-27304
   4c4f4:	bdde7204 	addi	r23,r23,31176
   4c4f8:	15400017 	ldw	r21,0(r2)
   4c4fc:	b8c00017 	ldw	r3,0(r23)
   4c500:	00bfffc4 	movi	r2,-1
   4c504:	858d883a 	add	r6,r16,r22
   4c508:	8d6b883a 	add	r21,r17,r21
   4c50c:	1880ea26 	beq	r3,r2,4c8b8 <_malloc_r+0x714>
   4c510:	ad4403c4 	addi	r21,r21,4111
   4c514:	00bc0004 	movi	r2,-4096
   4c518:	a8aa703a 	and	r21,r21,r2
   4c51c:	a80b883a 	mov	r5,r21
   4c520:	9009883a 	mov	r4,r18
   4c524:	d9800015 	stw	r6,0(sp)
   4c528:	004e3c00 	call	4e3c0 <_sbrk_r>
   4c52c:	1029883a 	mov	r20,r2
   4c530:	00bfffc4 	movi	r2,-1
   4c534:	d9800017 	ldw	r6,0(sp)
   4c538:	a080e826 	beq	r20,r2,4c8dc <_malloc_r+0x738>
   4c53c:	a180a636 	bltu	r20,r6,4c7d8 <_malloc_r+0x634>
   4c540:	070001b4 	movhi	fp,6
   4c544:	e7255f04 	addi	fp,fp,-27268
   4c548:	e0800017 	ldw	r2,0(fp)
   4c54c:	a887883a 	add	r3,r21,r2
   4c550:	e0c00015 	stw	r3,0(fp)
   4c554:	3500e626 	beq	r6,r20,4c8f0 <_malloc_r+0x74c>
   4c558:	b9000017 	ldw	r4,0(r23)
   4c55c:	00bfffc4 	movi	r2,-1
   4c560:	2080ee26 	beq	r4,r2,4c91c <_malloc_r+0x778>
   4c564:	a185c83a 	sub	r2,r20,r6
   4c568:	10c5883a 	add	r2,r2,r3
   4c56c:	e0800015 	stw	r2,0(fp)
   4c570:	a0c001cc 	andi	r3,r20,7
   4c574:	1800bc26 	beq	r3,zero,4c868 <_malloc_r+0x6c4>
   4c578:	a0e9c83a 	sub	r20,r20,r3
   4c57c:	00840204 	movi	r2,4104
   4c580:	a5000204 	addi	r20,r20,8
   4c584:	10c7c83a 	sub	r3,r2,r3
   4c588:	a545883a 	add	r2,r20,r21
   4c58c:	1083ffcc 	andi	r2,r2,4095
   4c590:	18abc83a 	sub	r21,r3,r2
   4c594:	a80b883a 	mov	r5,r21
   4c598:	9009883a 	mov	r4,r18
   4c59c:	004e3c00 	call	4e3c0 <_sbrk_r>
   4c5a0:	00ffffc4 	movi	r3,-1
   4c5a4:	10c0e126 	beq	r2,r3,4c92c <_malloc_r+0x788>
   4c5a8:	1505c83a 	sub	r2,r2,r20
   4c5ac:	1545883a 	add	r2,r2,r21
   4c5b0:	10800054 	ori	r2,r2,1
   4c5b4:	e0c00017 	ldw	r3,0(fp)
   4c5b8:	9d000215 	stw	r20,8(r19)
   4c5bc:	a0800115 	stw	r2,4(r20)
   4c5c0:	a8c7883a 	add	r3,r21,r3
   4c5c4:	e0c00015 	stw	r3,0(fp)
   4c5c8:	84c00e26 	beq	r16,r19,4c604 <_malloc_r+0x460>
   4c5cc:	018003c4 	movi	r6,15
   4c5d0:	3580a72e 	bgeu	r6,r22,4c870 <_malloc_r+0x6cc>
   4c5d4:	81400117 	ldw	r5,4(r16)
   4c5d8:	013ffe04 	movi	r4,-8
   4c5dc:	b0bffd04 	addi	r2,r22,-12
   4c5e0:	1104703a 	and	r2,r2,r4
   4c5e4:	2900004c 	andi	r4,r5,1
   4c5e8:	2088b03a 	or	r4,r4,r2
   4c5ec:	81000115 	stw	r4,4(r16)
   4c5f0:	01400144 	movi	r5,5
   4c5f4:	8089883a 	add	r4,r16,r2
   4c5f8:	21400115 	stw	r5,4(r4)
   4c5fc:	21400215 	stw	r5,8(r4)
   4c600:	3080cd36 	bltu	r6,r2,4c938 <_malloc_r+0x794>
   4c604:	008001b4 	movhi	r2,6
   4c608:	10a55504 	addi	r2,r2,-27308
   4c60c:	11000017 	ldw	r4,0(r2)
   4c610:	20c0012e 	bgeu	r4,r3,4c618 <_malloc_r+0x474>
   4c614:	10c00015 	stw	r3,0(r2)
   4c618:	008001b4 	movhi	r2,6
   4c61c:	10a55404 	addi	r2,r2,-27312
   4c620:	11000017 	ldw	r4,0(r2)
   4c624:	9c000217 	ldw	r16,8(r19)
   4c628:	20c0012e 	bgeu	r4,r3,4c630 <_malloc_r+0x48c>
   4c62c:	10c00015 	stw	r3,0(r2)
   4c630:	80c00117 	ldw	r3,4(r16)
   4c634:	00bfff04 	movi	r2,-4
   4c638:	1886703a 	and	r3,r3,r2
   4c63c:	1c45c83a 	sub	r2,r3,r17
   4c640:	1c400236 	bltu	r3,r17,4c64c <_malloc_r+0x4a8>
   4c644:	00c003c4 	movi	r3,15
   4c648:	18800416 	blt	r3,r2,4c65c <_malloc_r+0x4b8>
   4c64c:	9009883a 	mov	r4,r18
   4c650:	00517940 	call	51794 <__malloc_unlock>
   4c654:	0005883a 	mov	r2,zero
   4c658:	003f7b06 	br	4c448 <__alt_data_end+0xfffe5348>
   4c65c:	88c00054 	ori	r3,r17,1
   4c660:	80c00115 	stw	r3,4(r16)
   4c664:	8463883a 	add	r17,r16,r17
   4c668:	10800054 	ori	r2,r2,1
   4c66c:	9c400215 	stw	r17,8(r19)
   4c670:	88800115 	stw	r2,4(r17)
   4c674:	9009883a 	mov	r4,r18
   4c678:	00517940 	call	51794 <__malloc_unlock>
   4c67c:	80800204 	addi	r2,r16,8
   4c680:	003f7106 	br	4c448 <__alt_data_end+0xfffe5348>
   4c684:	00c00504 	movi	r3,20
   4c688:	18804a2e 	bgeu	r3,r2,4c7b4 <_malloc_r+0x610>
   4c68c:	00c01504 	movi	r3,84
   4c690:	18806e36 	bltu	r3,r2,4c84c <_malloc_r+0x6a8>
   4c694:	8804d33a 	srli	r2,r17,12
   4c698:	12001bc4 	addi	r8,r2,111
   4c69c:	11c01b84 	addi	r7,r2,110
   4c6a0:	4209883a 	add	r4,r8,r8
   4c6a4:	003edd06 	br	4c21c <__alt_data_end+0xfffe511c>
   4c6a8:	3804d27a 	srli	r2,r7,9
   4c6ac:	00c00104 	movi	r3,4
   4c6b0:	1880442e 	bgeu	r3,r2,4c7c4 <_malloc_r+0x620>
   4c6b4:	00c00504 	movi	r3,20
   4c6b8:	18808136 	bltu	r3,r2,4c8c0 <_malloc_r+0x71c>
   4c6bc:	11401704 	addi	r5,r2,92
   4c6c0:	10c016c4 	addi	r3,r2,91
   4c6c4:	294b883a 	add	r5,r5,r5
   4c6c8:	294b883a 	add	r5,r5,r5
   4c6cc:	294b883a 	add	r5,r5,r5
   4c6d0:	994b883a 	add	r5,r19,r5
   4c6d4:	28800017 	ldw	r2,0(r5)
   4c6d8:	01800174 	movhi	r6,5
   4c6dc:	297ffe04 	addi	r5,r5,-8
   4c6e0:	3198d904 	addi	r6,r6,25444
   4c6e4:	28806526 	beq	r5,r2,4c87c <_malloc_r+0x6d8>
   4c6e8:	01bfff04 	movi	r6,-4
   4c6ec:	10c00117 	ldw	r3,4(r2)
   4c6f0:	1986703a 	and	r3,r3,r6
   4c6f4:	38c0022e 	bgeu	r7,r3,4c700 <_malloc_r+0x55c>
   4c6f8:	10800217 	ldw	r2,8(r2)
   4c6fc:	28bffb1e 	bne	r5,r2,4c6ec <__alt_data_end+0xfffe55ec>
   4c700:	11400317 	ldw	r5,12(r2)
   4c704:	98c00117 	ldw	r3,4(r19)
   4c708:	81400315 	stw	r5,12(r16)
   4c70c:	80800215 	stw	r2,8(r16)
   4c710:	2c000215 	stw	r16,8(r5)
   4c714:	14000315 	stw	r16,12(r2)
   4c718:	003ef806 	br	4c2fc <__alt_data_end+0xfffe51fc>
   4c71c:	88c00054 	ori	r3,r17,1
   4c720:	80c00115 	stw	r3,4(r16)
   4c724:	8463883a 	add	r17,r16,r17
   4c728:	34400515 	stw	r17,20(r6)
   4c72c:	34400415 	stw	r17,16(r6)
   4c730:	10c00054 	ori	r3,r2,1
   4c734:	8a000315 	stw	r8,12(r17)
   4c738:	8a000215 	stw	r8,8(r17)
   4c73c:	88c00115 	stw	r3,4(r17)
   4c740:	88a3883a 	add	r17,r17,r2
   4c744:	88800015 	stw	r2,0(r17)
   4c748:	9009883a 	mov	r4,r18
   4c74c:	00517940 	call	51794 <__malloc_unlock>
   4c750:	80800204 	addi	r2,r16,8
   4c754:	003f3c06 	br	4c448 <__alt_data_end+0xfffe5348>
   4c758:	30c00117 	ldw	r3,4(r6)
   4c75c:	003ee706 	br	4c2fc <__alt_data_end+0xfffe51fc>
   4c760:	5ac00044 	addi	r11,r11,1
   4c764:	588000cc 	andi	r2,r11,3
   4c768:	31800204 	addi	r6,r6,8
   4c76c:	103efd1e 	bne	r2,zero,4c364 <__alt_data_end+0xfffe5264>
   4c770:	00002406 	br	4c804 <_malloc_r+0x660>
   4c774:	14000317 	ldw	r16,12(r2)
   4c778:	143f251e 	bne	r2,r16,4c410 <__alt_data_end+0xfffe5310>
   4c77c:	21000084 	addi	r4,r4,2
   4c780:	003ebc06 	br	4c274 <__alt_data_end+0xfffe5174>
   4c784:	8085883a 	add	r2,r16,r2
   4c788:	10c00117 	ldw	r3,4(r2)
   4c78c:	81000317 	ldw	r4,12(r16)
   4c790:	81400217 	ldw	r5,8(r16)
   4c794:	18c00054 	ori	r3,r3,1
   4c798:	10c00115 	stw	r3,4(r2)
   4c79c:	29000315 	stw	r4,12(r5)
   4c7a0:	21400215 	stw	r5,8(r4)
   4c7a4:	9009883a 	mov	r4,r18
   4c7a8:	00517940 	call	51794 <__malloc_unlock>
   4c7ac:	80800204 	addi	r2,r16,8
   4c7b0:	003f2506 	br	4c448 <__alt_data_end+0xfffe5348>
   4c7b4:	12001704 	addi	r8,r2,92
   4c7b8:	11c016c4 	addi	r7,r2,91
   4c7bc:	4209883a 	add	r4,r8,r8
   4c7c0:	003e9606 	br	4c21c <__alt_data_end+0xfffe511c>
   4c7c4:	3804d1ba 	srli	r2,r7,6
   4c7c8:	11400e44 	addi	r5,r2,57
   4c7cc:	10c00e04 	addi	r3,r2,56
   4c7d0:	294b883a 	add	r5,r5,r5
   4c7d4:	003fbc06 	br	4c6c8 <__alt_data_end+0xfffe55c8>
   4c7d8:	84ff5926 	beq	r16,r19,4c540 <__alt_data_end+0xfffe5440>
   4c7dc:	00800174 	movhi	r2,5
   4c7e0:	1098d904 	addi	r2,r2,25444
   4c7e4:	14000217 	ldw	r16,8(r2)
   4c7e8:	00bfff04 	movi	r2,-4
   4c7ec:	80c00117 	ldw	r3,4(r16)
   4c7f0:	1886703a 	and	r3,r3,r2
   4c7f4:	003f9106 	br	4c63c <__alt_data_end+0xfffe553c>
   4c7f8:	60800217 	ldw	r2,8(r12)
   4c7fc:	213fffc4 	addi	r4,r4,-1
   4c800:	1300651e 	bne	r2,r12,4c998 <_malloc_r+0x7f4>
   4c804:	208000cc 	andi	r2,r4,3
   4c808:	633ffe04 	addi	r12,r12,-8
   4c80c:	103ffa1e 	bne	r2,zero,4c7f8 <__alt_data_end+0xfffe56f8>
   4c810:	98800117 	ldw	r2,4(r19)
   4c814:	0146303a 	nor	r3,zero,r5
   4c818:	1884703a 	and	r2,r3,r2
   4c81c:	98800115 	stw	r2,4(r19)
   4c820:	294b883a 	add	r5,r5,r5
   4c824:	117f2836 	bltu	r2,r5,4c4c8 <__alt_data_end+0xfffe53c8>
   4c828:	283f2726 	beq	r5,zero,4c4c8 <__alt_data_end+0xfffe53c8>
   4c82c:	2886703a 	and	r3,r5,r2
   4c830:	5809883a 	mov	r4,r11
   4c834:	183ec31e 	bne	r3,zero,4c344 <__alt_data_end+0xfffe5244>
   4c838:	294b883a 	add	r5,r5,r5
   4c83c:	2886703a 	and	r3,r5,r2
   4c840:	21000104 	addi	r4,r4,4
   4c844:	183ffc26 	beq	r3,zero,4c838 <__alt_data_end+0xfffe5738>
   4c848:	003ebe06 	br	4c344 <__alt_data_end+0xfffe5244>
   4c84c:	00c05504 	movi	r3,340
   4c850:	18801236 	bltu	r3,r2,4c89c <_malloc_r+0x6f8>
   4c854:	8804d3fa 	srli	r2,r17,15
   4c858:	12001e04 	addi	r8,r2,120
   4c85c:	11c01dc4 	addi	r7,r2,119
   4c860:	4209883a 	add	r4,r8,r8
   4c864:	003e6d06 	br	4c21c <__alt_data_end+0xfffe511c>
   4c868:	00c40004 	movi	r3,4096
   4c86c:	003f4606 	br	4c588 <__alt_data_end+0xfffe5488>
   4c870:	00800044 	movi	r2,1
   4c874:	a0800115 	stw	r2,4(r20)
   4c878:	003f7406 	br	4c64c <__alt_data_end+0xfffe554c>
   4c87c:	1805d0ba 	srai	r2,r3,2
   4c880:	01c00044 	movi	r7,1
   4c884:	30c00117 	ldw	r3,4(r6)
   4c888:	388e983a 	sll	r7,r7,r2
   4c88c:	2805883a 	mov	r2,r5
   4c890:	38c6b03a 	or	r3,r7,r3
   4c894:	30c00115 	stw	r3,4(r6)
   4c898:	003f9b06 	br	4c708 <__alt_data_end+0xfffe5608>
   4c89c:	00c15504 	movi	r3,1364
   4c8a0:	18801a36 	bltu	r3,r2,4c90c <_malloc_r+0x768>
   4c8a4:	8804d4ba 	srli	r2,r17,18
   4c8a8:	12001f44 	addi	r8,r2,125
   4c8ac:	11c01f04 	addi	r7,r2,124
   4c8b0:	4209883a 	add	r4,r8,r8
   4c8b4:	003e5906 	br	4c21c <__alt_data_end+0xfffe511c>
   4c8b8:	ad400404 	addi	r21,r21,16
   4c8bc:	003f1706 	br	4c51c <__alt_data_end+0xfffe541c>
   4c8c0:	00c01504 	movi	r3,84
   4c8c4:	18802336 	bltu	r3,r2,4c954 <_malloc_r+0x7b0>
   4c8c8:	3804d33a 	srli	r2,r7,12
   4c8cc:	11401bc4 	addi	r5,r2,111
   4c8d0:	10c01b84 	addi	r3,r2,110
   4c8d4:	294b883a 	add	r5,r5,r5
   4c8d8:	003f7b06 	br	4c6c8 <__alt_data_end+0xfffe55c8>
   4c8dc:	9c000217 	ldw	r16,8(r19)
   4c8e0:	00bfff04 	movi	r2,-4
   4c8e4:	80c00117 	ldw	r3,4(r16)
   4c8e8:	1886703a 	and	r3,r3,r2
   4c8ec:	003f5306 	br	4c63c <__alt_data_end+0xfffe553c>
   4c8f0:	3083ffcc 	andi	r2,r6,4095
   4c8f4:	103f181e 	bne	r2,zero,4c558 <__alt_data_end+0xfffe5458>
   4c8f8:	99000217 	ldw	r4,8(r19)
   4c8fc:	b545883a 	add	r2,r22,r21
   4c900:	10800054 	ori	r2,r2,1
   4c904:	20800115 	stw	r2,4(r4)
   4c908:	003f3e06 	br	4c604 <__alt_data_end+0xfffe5504>
   4c90c:	01003f84 	movi	r4,254
   4c910:	02001fc4 	movi	r8,127
   4c914:	01c01f84 	movi	r7,126
   4c918:	003e4006 	br	4c21c <__alt_data_end+0xfffe511c>
   4c91c:	00800174 	movhi	r2,5
   4c920:	109e7204 	addi	r2,r2,31176
   4c924:	15000015 	stw	r20,0(r2)
   4c928:	003f1106 	br	4c570 <__alt_data_end+0xfffe5470>
   4c92c:	00800044 	movi	r2,1
   4c930:	002b883a 	mov	r21,zero
   4c934:	003f1f06 	br	4c5b4 <__alt_data_end+0xfffe54b4>
   4c938:	81400204 	addi	r5,r16,8
   4c93c:	9009883a 	mov	r4,r18
   4c940:	004b5b80 	call	4b5b8 <_free_r>
   4c944:	008001b4 	movhi	r2,6
   4c948:	10a55f04 	addi	r2,r2,-27268
   4c94c:	10c00017 	ldw	r3,0(r2)
   4c950:	003f2c06 	br	4c604 <__alt_data_end+0xfffe5504>
   4c954:	00c05504 	movi	r3,340
   4c958:	18800536 	bltu	r3,r2,4c970 <_malloc_r+0x7cc>
   4c95c:	3804d3fa 	srli	r2,r7,15
   4c960:	11401e04 	addi	r5,r2,120
   4c964:	10c01dc4 	addi	r3,r2,119
   4c968:	294b883a 	add	r5,r5,r5
   4c96c:	003f5606 	br	4c6c8 <__alt_data_end+0xfffe55c8>
   4c970:	00c15504 	movi	r3,1364
   4c974:	18800536 	bltu	r3,r2,4c98c <_malloc_r+0x7e8>
   4c978:	3804d4ba 	srli	r2,r7,18
   4c97c:	11401f44 	addi	r5,r2,125
   4c980:	10c01f04 	addi	r3,r2,124
   4c984:	294b883a 	add	r5,r5,r5
   4c988:	003f4f06 	br	4c6c8 <__alt_data_end+0xfffe55c8>
   4c98c:	01403f84 	movi	r5,254
   4c990:	00c01f84 	movi	r3,126
   4c994:	003f4c06 	br	4c6c8 <__alt_data_end+0xfffe55c8>
   4c998:	98800117 	ldw	r2,4(r19)
   4c99c:	003fa006 	br	4c820 <__alt_data_end+0xfffe5720>
   4c9a0:	8808d0fa 	srli	r4,r17,3
   4c9a4:	20800044 	addi	r2,r4,1
   4c9a8:	1085883a 	add	r2,r2,r2
   4c9ac:	003e9006 	br	4c3f0 <__alt_data_end+0xfffe52f0>

0004c9b0 <memchr>:
   4c9b0:	208000cc 	andi	r2,r4,3
   4c9b4:	280f883a 	mov	r7,r5
   4c9b8:	10003426 	beq	r2,zero,4ca8c <memchr+0xdc>
   4c9bc:	30bfffc4 	addi	r2,r6,-1
   4c9c0:	30001a26 	beq	r6,zero,4ca2c <memchr+0x7c>
   4c9c4:	20c00003 	ldbu	r3,0(r4)
   4c9c8:	29803fcc 	andi	r6,r5,255
   4c9cc:	30c0051e 	bne	r6,r3,4c9e4 <memchr+0x34>
   4c9d0:	00001806 	br	4ca34 <memchr+0x84>
   4c9d4:	10001526 	beq	r2,zero,4ca2c <memchr+0x7c>
   4c9d8:	20c00003 	ldbu	r3,0(r4)
   4c9dc:	10bfffc4 	addi	r2,r2,-1
   4c9e0:	30c01426 	beq	r6,r3,4ca34 <memchr+0x84>
   4c9e4:	21000044 	addi	r4,r4,1
   4c9e8:	20c000cc 	andi	r3,r4,3
   4c9ec:	183ff91e 	bne	r3,zero,4c9d4 <__alt_data_end+0xfffe58d4>
   4c9f0:	020000c4 	movi	r8,3
   4c9f4:	40801136 	bltu	r8,r2,4ca3c <memchr+0x8c>
   4c9f8:	10000c26 	beq	r2,zero,4ca2c <memchr+0x7c>
   4c9fc:	20c00003 	ldbu	r3,0(r4)
   4ca00:	29403fcc 	andi	r5,r5,255
   4ca04:	28c00b26 	beq	r5,r3,4ca34 <memchr+0x84>
   4ca08:	20c00044 	addi	r3,r4,1
   4ca0c:	39803fcc 	andi	r6,r7,255
   4ca10:	2089883a 	add	r4,r4,r2
   4ca14:	00000306 	br	4ca24 <memchr+0x74>
   4ca18:	18c00044 	addi	r3,r3,1
   4ca1c:	197fffc3 	ldbu	r5,-1(r3)
   4ca20:	31400526 	beq	r6,r5,4ca38 <memchr+0x88>
   4ca24:	1805883a 	mov	r2,r3
   4ca28:	20fffb1e 	bne	r4,r3,4ca18 <__alt_data_end+0xfffe5918>
   4ca2c:	0005883a 	mov	r2,zero
   4ca30:	f800283a 	ret
   4ca34:	2005883a 	mov	r2,r4
   4ca38:	f800283a 	ret
   4ca3c:	28c03fcc 	andi	r3,r5,255
   4ca40:	1812923a 	slli	r9,r3,8
   4ca44:	02ffbff4 	movhi	r11,65279
   4ca48:	02a02074 	movhi	r10,32897
   4ca4c:	48d2b03a 	or	r9,r9,r3
   4ca50:	4806943a 	slli	r3,r9,16
   4ca54:	5affbfc4 	addi	r11,r11,-257
   4ca58:	52a02004 	addi	r10,r10,-32640
   4ca5c:	48d2b03a 	or	r9,r9,r3
   4ca60:	20c00017 	ldw	r3,0(r4)
   4ca64:	48c6f03a 	xor	r3,r9,r3
   4ca68:	1acd883a 	add	r6,r3,r11
   4ca6c:	00c6303a 	nor	r3,zero,r3
   4ca70:	30c6703a 	and	r3,r6,r3
   4ca74:	1a86703a 	and	r3,r3,r10
   4ca78:	183fe01e 	bne	r3,zero,4c9fc <__alt_data_end+0xfffe58fc>
   4ca7c:	10bfff04 	addi	r2,r2,-4
   4ca80:	21000104 	addi	r4,r4,4
   4ca84:	40bff636 	bltu	r8,r2,4ca60 <__alt_data_end+0xfffe5960>
   4ca88:	003fdb06 	br	4c9f8 <__alt_data_end+0xfffe58f8>
   4ca8c:	3005883a 	mov	r2,r6
   4ca90:	003fd706 	br	4c9f0 <__alt_data_end+0xfffe58f0>

0004ca94 <memcpy>:
   4ca94:	defffd04 	addi	sp,sp,-12
   4ca98:	dfc00215 	stw	ra,8(sp)
   4ca9c:	dc400115 	stw	r17,4(sp)
   4caa0:	dc000015 	stw	r16,0(sp)
   4caa4:	00c003c4 	movi	r3,15
   4caa8:	2005883a 	mov	r2,r4
   4caac:	1980452e 	bgeu	r3,r6,4cbc4 <memcpy+0x130>
   4cab0:	2906b03a 	or	r3,r5,r4
   4cab4:	18c000cc 	andi	r3,r3,3
   4cab8:	1800441e 	bne	r3,zero,4cbcc <memcpy+0x138>
   4cabc:	347ffc04 	addi	r17,r6,-16
   4cac0:	8822d13a 	srli	r17,r17,4
   4cac4:	28c00104 	addi	r3,r5,4
   4cac8:	23400104 	addi	r13,r4,4
   4cacc:	8820913a 	slli	r16,r17,4
   4cad0:	2b000204 	addi	r12,r5,8
   4cad4:	22c00204 	addi	r11,r4,8
   4cad8:	84000504 	addi	r16,r16,20
   4cadc:	2a800304 	addi	r10,r5,12
   4cae0:	22400304 	addi	r9,r4,12
   4cae4:	2c21883a 	add	r16,r5,r16
   4cae8:	2811883a 	mov	r8,r5
   4caec:	200f883a 	mov	r7,r4
   4caf0:	41000017 	ldw	r4,0(r8)
   4caf4:	1fc00017 	ldw	ra,0(r3)
   4caf8:	63c00017 	ldw	r15,0(r12)
   4cafc:	39000015 	stw	r4,0(r7)
   4cb00:	53800017 	ldw	r14,0(r10)
   4cb04:	6fc00015 	stw	ra,0(r13)
   4cb08:	5bc00015 	stw	r15,0(r11)
   4cb0c:	4b800015 	stw	r14,0(r9)
   4cb10:	18c00404 	addi	r3,r3,16
   4cb14:	39c00404 	addi	r7,r7,16
   4cb18:	42000404 	addi	r8,r8,16
   4cb1c:	6b400404 	addi	r13,r13,16
   4cb20:	63000404 	addi	r12,r12,16
   4cb24:	5ac00404 	addi	r11,r11,16
   4cb28:	52800404 	addi	r10,r10,16
   4cb2c:	4a400404 	addi	r9,r9,16
   4cb30:	1c3fef1e 	bne	r3,r16,4caf0 <__alt_data_end+0xfffe59f0>
   4cb34:	89c00044 	addi	r7,r17,1
   4cb38:	380e913a 	slli	r7,r7,4
   4cb3c:	310003cc 	andi	r4,r6,15
   4cb40:	02c000c4 	movi	r11,3
   4cb44:	11c7883a 	add	r3,r2,r7
   4cb48:	29cb883a 	add	r5,r5,r7
   4cb4c:	5900212e 	bgeu	r11,r4,4cbd4 <memcpy+0x140>
   4cb50:	1813883a 	mov	r9,r3
   4cb54:	2811883a 	mov	r8,r5
   4cb58:	200f883a 	mov	r7,r4
   4cb5c:	42800017 	ldw	r10,0(r8)
   4cb60:	4a400104 	addi	r9,r9,4
   4cb64:	39ffff04 	addi	r7,r7,-4
   4cb68:	4abfff15 	stw	r10,-4(r9)
   4cb6c:	42000104 	addi	r8,r8,4
   4cb70:	59fffa36 	bltu	r11,r7,4cb5c <__alt_data_end+0xfffe5a5c>
   4cb74:	213fff04 	addi	r4,r4,-4
   4cb78:	2008d0ba 	srli	r4,r4,2
   4cb7c:	318000cc 	andi	r6,r6,3
   4cb80:	21000044 	addi	r4,r4,1
   4cb84:	2109883a 	add	r4,r4,r4
   4cb88:	2109883a 	add	r4,r4,r4
   4cb8c:	1907883a 	add	r3,r3,r4
   4cb90:	290b883a 	add	r5,r5,r4
   4cb94:	30000626 	beq	r6,zero,4cbb0 <memcpy+0x11c>
   4cb98:	198d883a 	add	r6,r3,r6
   4cb9c:	29c00003 	ldbu	r7,0(r5)
   4cba0:	18c00044 	addi	r3,r3,1
   4cba4:	29400044 	addi	r5,r5,1
   4cba8:	19ffffc5 	stb	r7,-1(r3)
   4cbac:	19bffb1e 	bne	r3,r6,4cb9c <__alt_data_end+0xfffe5a9c>
   4cbb0:	dfc00217 	ldw	ra,8(sp)
   4cbb4:	dc400117 	ldw	r17,4(sp)
   4cbb8:	dc000017 	ldw	r16,0(sp)
   4cbbc:	dec00304 	addi	sp,sp,12
   4cbc0:	f800283a 	ret
   4cbc4:	2007883a 	mov	r3,r4
   4cbc8:	003ff206 	br	4cb94 <__alt_data_end+0xfffe5a94>
   4cbcc:	2007883a 	mov	r3,r4
   4cbd0:	003ff106 	br	4cb98 <__alt_data_end+0xfffe5a98>
   4cbd4:	200d883a 	mov	r6,r4
   4cbd8:	003fee06 	br	4cb94 <__alt_data_end+0xfffe5a94>

0004cbdc <memmove>:
   4cbdc:	2005883a 	mov	r2,r4
   4cbe0:	29000b2e 	bgeu	r5,r4,4cc10 <memmove+0x34>
   4cbe4:	298f883a 	add	r7,r5,r6
   4cbe8:	21c0092e 	bgeu	r4,r7,4cc10 <memmove+0x34>
   4cbec:	2187883a 	add	r3,r4,r6
   4cbf0:	198bc83a 	sub	r5,r3,r6
   4cbf4:	30004826 	beq	r6,zero,4cd18 <memmove+0x13c>
   4cbf8:	39ffffc4 	addi	r7,r7,-1
   4cbfc:	39000003 	ldbu	r4,0(r7)
   4cc00:	18ffffc4 	addi	r3,r3,-1
   4cc04:	19000005 	stb	r4,0(r3)
   4cc08:	28fffb1e 	bne	r5,r3,4cbf8 <__alt_data_end+0xfffe5af8>
   4cc0c:	f800283a 	ret
   4cc10:	00c003c4 	movi	r3,15
   4cc14:	1980412e 	bgeu	r3,r6,4cd1c <memmove+0x140>
   4cc18:	2886b03a 	or	r3,r5,r2
   4cc1c:	18c000cc 	andi	r3,r3,3
   4cc20:	1800401e 	bne	r3,zero,4cd24 <memmove+0x148>
   4cc24:	33fffc04 	addi	r15,r6,-16
   4cc28:	781ed13a 	srli	r15,r15,4
   4cc2c:	28c00104 	addi	r3,r5,4
   4cc30:	13400104 	addi	r13,r2,4
   4cc34:	781c913a 	slli	r14,r15,4
   4cc38:	2b000204 	addi	r12,r5,8
   4cc3c:	12c00204 	addi	r11,r2,8
   4cc40:	73800504 	addi	r14,r14,20
   4cc44:	2a800304 	addi	r10,r5,12
   4cc48:	12400304 	addi	r9,r2,12
   4cc4c:	2b9d883a 	add	r14,r5,r14
   4cc50:	2811883a 	mov	r8,r5
   4cc54:	100f883a 	mov	r7,r2
   4cc58:	41000017 	ldw	r4,0(r8)
   4cc5c:	39c00404 	addi	r7,r7,16
   4cc60:	18c00404 	addi	r3,r3,16
   4cc64:	393ffc15 	stw	r4,-16(r7)
   4cc68:	193ffc17 	ldw	r4,-16(r3)
   4cc6c:	6b400404 	addi	r13,r13,16
   4cc70:	5ac00404 	addi	r11,r11,16
   4cc74:	693ffc15 	stw	r4,-16(r13)
   4cc78:	61000017 	ldw	r4,0(r12)
   4cc7c:	4a400404 	addi	r9,r9,16
   4cc80:	42000404 	addi	r8,r8,16
   4cc84:	593ffc15 	stw	r4,-16(r11)
   4cc88:	51000017 	ldw	r4,0(r10)
   4cc8c:	63000404 	addi	r12,r12,16
   4cc90:	52800404 	addi	r10,r10,16
   4cc94:	493ffc15 	stw	r4,-16(r9)
   4cc98:	1bbfef1e 	bne	r3,r14,4cc58 <__alt_data_end+0xfffe5b58>
   4cc9c:	79000044 	addi	r4,r15,1
   4cca0:	2008913a 	slli	r4,r4,4
   4cca4:	328003cc 	andi	r10,r6,15
   4cca8:	02c000c4 	movi	r11,3
   4ccac:	1107883a 	add	r3,r2,r4
   4ccb0:	290b883a 	add	r5,r5,r4
   4ccb4:	5a801e2e 	bgeu	r11,r10,4cd30 <memmove+0x154>
   4ccb8:	1813883a 	mov	r9,r3
   4ccbc:	2811883a 	mov	r8,r5
   4ccc0:	500f883a 	mov	r7,r10
   4ccc4:	41000017 	ldw	r4,0(r8)
   4ccc8:	4a400104 	addi	r9,r9,4
   4cccc:	39ffff04 	addi	r7,r7,-4
   4ccd0:	493fff15 	stw	r4,-4(r9)
   4ccd4:	42000104 	addi	r8,r8,4
   4ccd8:	59fffa36 	bltu	r11,r7,4ccc4 <__alt_data_end+0xfffe5bc4>
   4ccdc:	513fff04 	addi	r4,r10,-4
   4cce0:	2008d0ba 	srli	r4,r4,2
   4cce4:	318000cc 	andi	r6,r6,3
   4cce8:	21000044 	addi	r4,r4,1
   4ccec:	2109883a 	add	r4,r4,r4
   4ccf0:	2109883a 	add	r4,r4,r4
   4ccf4:	1907883a 	add	r3,r3,r4
   4ccf8:	290b883a 	add	r5,r5,r4
   4ccfc:	30000b26 	beq	r6,zero,4cd2c <memmove+0x150>
   4cd00:	198d883a 	add	r6,r3,r6
   4cd04:	29c00003 	ldbu	r7,0(r5)
   4cd08:	18c00044 	addi	r3,r3,1
   4cd0c:	29400044 	addi	r5,r5,1
   4cd10:	19ffffc5 	stb	r7,-1(r3)
   4cd14:	19bffb1e 	bne	r3,r6,4cd04 <__alt_data_end+0xfffe5c04>
   4cd18:	f800283a 	ret
   4cd1c:	1007883a 	mov	r3,r2
   4cd20:	003ff606 	br	4ccfc <__alt_data_end+0xfffe5bfc>
   4cd24:	1007883a 	mov	r3,r2
   4cd28:	003ff506 	br	4cd00 <__alt_data_end+0xfffe5c00>
   4cd2c:	f800283a 	ret
   4cd30:	500d883a 	mov	r6,r10
   4cd34:	003ff106 	br	4ccfc <__alt_data_end+0xfffe5bfc>

0004cd38 <memset>:
   4cd38:	20c000cc 	andi	r3,r4,3
   4cd3c:	2005883a 	mov	r2,r4
   4cd40:	18004426 	beq	r3,zero,4ce54 <memset+0x11c>
   4cd44:	31ffffc4 	addi	r7,r6,-1
   4cd48:	30004026 	beq	r6,zero,4ce4c <memset+0x114>
   4cd4c:	2813883a 	mov	r9,r5
   4cd50:	200d883a 	mov	r6,r4
   4cd54:	2007883a 	mov	r3,r4
   4cd58:	00000406 	br	4cd6c <memset+0x34>
   4cd5c:	3a3fffc4 	addi	r8,r7,-1
   4cd60:	31800044 	addi	r6,r6,1
   4cd64:	38003926 	beq	r7,zero,4ce4c <memset+0x114>
   4cd68:	400f883a 	mov	r7,r8
   4cd6c:	18c00044 	addi	r3,r3,1
   4cd70:	32400005 	stb	r9,0(r6)
   4cd74:	1a0000cc 	andi	r8,r3,3
   4cd78:	403ff81e 	bne	r8,zero,4cd5c <__alt_data_end+0xfffe5c5c>
   4cd7c:	010000c4 	movi	r4,3
   4cd80:	21c02d2e 	bgeu	r4,r7,4ce38 <memset+0x100>
   4cd84:	29003fcc 	andi	r4,r5,255
   4cd88:	200c923a 	slli	r6,r4,8
   4cd8c:	3108b03a 	or	r4,r6,r4
   4cd90:	200c943a 	slli	r6,r4,16
   4cd94:	218cb03a 	or	r6,r4,r6
   4cd98:	010003c4 	movi	r4,15
   4cd9c:	21c0182e 	bgeu	r4,r7,4ce00 <memset+0xc8>
   4cda0:	3b3ffc04 	addi	r12,r7,-16
   4cda4:	6018d13a 	srli	r12,r12,4
   4cda8:	1a000104 	addi	r8,r3,4
   4cdac:	1ac00204 	addi	r11,r3,8
   4cdb0:	6008913a 	slli	r4,r12,4
   4cdb4:	1a800304 	addi	r10,r3,12
   4cdb8:	1813883a 	mov	r9,r3
   4cdbc:	21000504 	addi	r4,r4,20
   4cdc0:	1909883a 	add	r4,r3,r4
   4cdc4:	49800015 	stw	r6,0(r9)
   4cdc8:	41800015 	stw	r6,0(r8)
   4cdcc:	59800015 	stw	r6,0(r11)
   4cdd0:	51800015 	stw	r6,0(r10)
   4cdd4:	42000404 	addi	r8,r8,16
   4cdd8:	4a400404 	addi	r9,r9,16
   4cddc:	5ac00404 	addi	r11,r11,16
   4cde0:	52800404 	addi	r10,r10,16
   4cde4:	413ff71e 	bne	r8,r4,4cdc4 <__alt_data_end+0xfffe5cc4>
   4cde8:	63000044 	addi	r12,r12,1
   4cdec:	6018913a 	slli	r12,r12,4
   4cdf0:	39c003cc 	andi	r7,r7,15
   4cdf4:	010000c4 	movi	r4,3
   4cdf8:	1b07883a 	add	r3,r3,r12
   4cdfc:	21c00e2e 	bgeu	r4,r7,4ce38 <memset+0x100>
   4ce00:	1813883a 	mov	r9,r3
   4ce04:	3811883a 	mov	r8,r7
   4ce08:	010000c4 	movi	r4,3
   4ce0c:	49800015 	stw	r6,0(r9)
   4ce10:	423fff04 	addi	r8,r8,-4
   4ce14:	4a400104 	addi	r9,r9,4
   4ce18:	223ffc36 	bltu	r4,r8,4ce0c <__alt_data_end+0xfffe5d0c>
   4ce1c:	393fff04 	addi	r4,r7,-4
   4ce20:	2008d0ba 	srli	r4,r4,2
   4ce24:	39c000cc 	andi	r7,r7,3
   4ce28:	21000044 	addi	r4,r4,1
   4ce2c:	2109883a 	add	r4,r4,r4
   4ce30:	2109883a 	add	r4,r4,r4
   4ce34:	1907883a 	add	r3,r3,r4
   4ce38:	38000526 	beq	r7,zero,4ce50 <memset+0x118>
   4ce3c:	19cf883a 	add	r7,r3,r7
   4ce40:	19400005 	stb	r5,0(r3)
   4ce44:	18c00044 	addi	r3,r3,1
   4ce48:	38fffd1e 	bne	r7,r3,4ce40 <__alt_data_end+0xfffe5d40>
   4ce4c:	f800283a 	ret
   4ce50:	f800283a 	ret
   4ce54:	2007883a 	mov	r3,r4
   4ce58:	300f883a 	mov	r7,r6
   4ce5c:	003fc706 	br	4cd7c <__alt_data_end+0xfffe5c7c>

0004ce60 <_Balloc>:
   4ce60:	20801317 	ldw	r2,76(r4)
   4ce64:	defffc04 	addi	sp,sp,-16
   4ce68:	dc400115 	stw	r17,4(sp)
   4ce6c:	dc000015 	stw	r16,0(sp)
   4ce70:	dfc00315 	stw	ra,12(sp)
   4ce74:	dc800215 	stw	r18,8(sp)
   4ce78:	2023883a 	mov	r17,r4
   4ce7c:	2821883a 	mov	r16,r5
   4ce80:	10000f26 	beq	r2,zero,4cec0 <_Balloc+0x60>
   4ce84:	8407883a 	add	r3,r16,r16
   4ce88:	18c7883a 	add	r3,r3,r3
   4ce8c:	10c7883a 	add	r3,r2,r3
   4ce90:	18800017 	ldw	r2,0(r3)
   4ce94:	10001126 	beq	r2,zero,4cedc <_Balloc+0x7c>
   4ce98:	11000017 	ldw	r4,0(r2)
   4ce9c:	19000015 	stw	r4,0(r3)
   4cea0:	10000415 	stw	zero,16(r2)
   4cea4:	10000315 	stw	zero,12(r2)
   4cea8:	dfc00317 	ldw	ra,12(sp)
   4ceac:	dc800217 	ldw	r18,8(sp)
   4ceb0:	dc400117 	ldw	r17,4(sp)
   4ceb4:	dc000017 	ldw	r16,0(sp)
   4ceb8:	dec00404 	addi	sp,sp,16
   4cebc:	f800283a 	ret
   4cec0:	01800844 	movi	r6,33
   4cec4:	01400104 	movi	r5,4
   4cec8:	004fd280 	call	4fd28 <_calloc_r>
   4cecc:	88801315 	stw	r2,76(r17)
   4ced0:	103fec1e 	bne	r2,zero,4ce84 <__alt_data_end+0xfffe5d84>
   4ced4:	0005883a 	mov	r2,zero
   4ced8:	003ff306 	br	4cea8 <__alt_data_end+0xfffe5da8>
   4cedc:	01400044 	movi	r5,1
   4cee0:	2c24983a 	sll	r18,r5,r16
   4cee4:	8809883a 	mov	r4,r17
   4cee8:	91800144 	addi	r6,r18,5
   4ceec:	318d883a 	add	r6,r6,r6
   4cef0:	318d883a 	add	r6,r6,r6
   4cef4:	004fd280 	call	4fd28 <_calloc_r>
   4cef8:	103ff626 	beq	r2,zero,4ced4 <__alt_data_end+0xfffe5dd4>
   4cefc:	14000115 	stw	r16,4(r2)
   4cf00:	14800215 	stw	r18,8(r2)
   4cf04:	003fe606 	br	4cea0 <__alt_data_end+0xfffe5da0>

0004cf08 <_Bfree>:
   4cf08:	28000826 	beq	r5,zero,4cf2c <_Bfree+0x24>
   4cf0c:	28c00117 	ldw	r3,4(r5)
   4cf10:	20801317 	ldw	r2,76(r4)
   4cf14:	18c7883a 	add	r3,r3,r3
   4cf18:	18c7883a 	add	r3,r3,r3
   4cf1c:	10c5883a 	add	r2,r2,r3
   4cf20:	10c00017 	ldw	r3,0(r2)
   4cf24:	28c00015 	stw	r3,0(r5)
   4cf28:	11400015 	stw	r5,0(r2)
   4cf2c:	f800283a 	ret

0004cf30 <__multadd>:
   4cf30:	defffa04 	addi	sp,sp,-24
   4cf34:	dc800315 	stw	r18,12(sp)
   4cf38:	dc400215 	stw	r17,8(sp)
   4cf3c:	dc000115 	stw	r16,4(sp)
   4cf40:	2823883a 	mov	r17,r5
   4cf44:	2c000417 	ldw	r16,16(r5)
   4cf48:	dfc00515 	stw	ra,20(sp)
   4cf4c:	dcc00415 	stw	r19,16(sp)
   4cf50:	2025883a 	mov	r18,r4
   4cf54:	29400504 	addi	r5,r5,20
   4cf58:	0011883a 	mov	r8,zero
   4cf5c:	28c00017 	ldw	r3,0(r5)
   4cf60:	29400104 	addi	r5,r5,4
   4cf64:	42000044 	addi	r8,r8,1
   4cf68:	18bfffcc 	andi	r2,r3,65535
   4cf6c:	1185383a 	mul	r2,r2,r6
   4cf70:	1806d43a 	srli	r3,r3,16
   4cf74:	11cf883a 	add	r7,r2,r7
   4cf78:	3808d43a 	srli	r4,r7,16
   4cf7c:	1987383a 	mul	r3,r3,r6
   4cf80:	38bfffcc 	andi	r2,r7,65535
   4cf84:	1907883a 	add	r3,r3,r4
   4cf88:	1808943a 	slli	r4,r3,16
   4cf8c:	180ed43a 	srli	r7,r3,16
   4cf90:	2085883a 	add	r2,r4,r2
   4cf94:	28bfff15 	stw	r2,-4(r5)
   4cf98:	443ff016 	blt	r8,r16,4cf5c <__alt_data_end+0xfffe5e5c>
   4cf9c:	38000926 	beq	r7,zero,4cfc4 <__multadd+0x94>
   4cfa0:	88800217 	ldw	r2,8(r17)
   4cfa4:	80800f0e 	bge	r16,r2,4cfe4 <__multadd+0xb4>
   4cfa8:	80800144 	addi	r2,r16,5
   4cfac:	1085883a 	add	r2,r2,r2
   4cfb0:	1085883a 	add	r2,r2,r2
   4cfb4:	8885883a 	add	r2,r17,r2
   4cfb8:	11c00015 	stw	r7,0(r2)
   4cfbc:	84000044 	addi	r16,r16,1
   4cfc0:	8c000415 	stw	r16,16(r17)
   4cfc4:	8805883a 	mov	r2,r17
   4cfc8:	dfc00517 	ldw	ra,20(sp)
   4cfcc:	dcc00417 	ldw	r19,16(sp)
   4cfd0:	dc800317 	ldw	r18,12(sp)
   4cfd4:	dc400217 	ldw	r17,8(sp)
   4cfd8:	dc000117 	ldw	r16,4(sp)
   4cfdc:	dec00604 	addi	sp,sp,24
   4cfe0:	f800283a 	ret
   4cfe4:	89400117 	ldw	r5,4(r17)
   4cfe8:	9009883a 	mov	r4,r18
   4cfec:	d9c00015 	stw	r7,0(sp)
   4cff0:	29400044 	addi	r5,r5,1
   4cff4:	004ce600 	call	4ce60 <_Balloc>
   4cff8:	89800417 	ldw	r6,16(r17)
   4cffc:	89400304 	addi	r5,r17,12
   4d000:	11000304 	addi	r4,r2,12
   4d004:	31800084 	addi	r6,r6,2
   4d008:	318d883a 	add	r6,r6,r6
   4d00c:	318d883a 	add	r6,r6,r6
   4d010:	1027883a 	mov	r19,r2
   4d014:	004ca940 	call	4ca94 <memcpy>
   4d018:	d9c00017 	ldw	r7,0(sp)
   4d01c:	88000a26 	beq	r17,zero,4d048 <__multadd+0x118>
   4d020:	88c00117 	ldw	r3,4(r17)
   4d024:	90801317 	ldw	r2,76(r18)
   4d028:	18c7883a 	add	r3,r3,r3
   4d02c:	18c7883a 	add	r3,r3,r3
   4d030:	10c5883a 	add	r2,r2,r3
   4d034:	10c00017 	ldw	r3,0(r2)
   4d038:	88c00015 	stw	r3,0(r17)
   4d03c:	14400015 	stw	r17,0(r2)
   4d040:	9823883a 	mov	r17,r19
   4d044:	003fd806 	br	4cfa8 <__alt_data_end+0xfffe5ea8>
   4d048:	9823883a 	mov	r17,r19
   4d04c:	003fd606 	br	4cfa8 <__alt_data_end+0xfffe5ea8>

0004d050 <__s2b>:
   4d050:	defff904 	addi	sp,sp,-28
   4d054:	dc400115 	stw	r17,4(sp)
   4d058:	dc000015 	stw	r16,0(sp)
   4d05c:	2023883a 	mov	r17,r4
   4d060:	2821883a 	mov	r16,r5
   4d064:	39000204 	addi	r4,r7,8
   4d068:	01400244 	movi	r5,9
   4d06c:	dcc00315 	stw	r19,12(sp)
   4d070:	dc800215 	stw	r18,8(sp)
   4d074:	dfc00615 	stw	ra,24(sp)
   4d078:	dd400515 	stw	r21,20(sp)
   4d07c:	dd000415 	stw	r20,16(sp)
   4d080:	3825883a 	mov	r18,r7
   4d084:	3027883a 	mov	r19,r6
   4d088:	00431800 	call	43180 <__divsi3>
   4d08c:	00c00044 	movi	r3,1
   4d090:	000b883a 	mov	r5,zero
   4d094:	1880030e 	bge	r3,r2,4d0a4 <__s2b+0x54>
   4d098:	18c7883a 	add	r3,r3,r3
   4d09c:	29400044 	addi	r5,r5,1
   4d0a0:	18bffd16 	blt	r3,r2,4d098 <__alt_data_end+0xfffe5f98>
   4d0a4:	8809883a 	mov	r4,r17
   4d0a8:	004ce600 	call	4ce60 <_Balloc>
   4d0ac:	d8c00717 	ldw	r3,28(sp)
   4d0b0:	10c00515 	stw	r3,20(r2)
   4d0b4:	00c00044 	movi	r3,1
   4d0b8:	10c00415 	stw	r3,16(r2)
   4d0bc:	00c00244 	movi	r3,9
   4d0c0:	1cc0210e 	bge	r3,r19,4d148 <__s2b+0xf8>
   4d0c4:	80eb883a 	add	r21,r16,r3
   4d0c8:	a829883a 	mov	r20,r21
   4d0cc:	84e1883a 	add	r16,r16,r19
   4d0d0:	a1c00007 	ldb	r7,0(r20)
   4d0d4:	01800284 	movi	r6,10
   4d0d8:	a5000044 	addi	r20,r20,1
   4d0dc:	100b883a 	mov	r5,r2
   4d0e0:	39fff404 	addi	r7,r7,-48
   4d0e4:	8809883a 	mov	r4,r17
   4d0e8:	004cf300 	call	4cf30 <__multadd>
   4d0ec:	a43ff81e 	bne	r20,r16,4d0d0 <__alt_data_end+0xfffe5fd0>
   4d0f0:	ace1883a 	add	r16,r21,r19
   4d0f4:	843ffe04 	addi	r16,r16,-8
   4d0f8:	9c800a0e 	bge	r19,r18,4d124 <__s2b+0xd4>
   4d0fc:	94e5c83a 	sub	r18,r18,r19
   4d100:	84a5883a 	add	r18,r16,r18
   4d104:	81c00007 	ldb	r7,0(r16)
   4d108:	01800284 	movi	r6,10
   4d10c:	84000044 	addi	r16,r16,1
   4d110:	100b883a 	mov	r5,r2
   4d114:	39fff404 	addi	r7,r7,-48
   4d118:	8809883a 	mov	r4,r17
   4d11c:	004cf300 	call	4cf30 <__multadd>
   4d120:	84bff81e 	bne	r16,r18,4d104 <__alt_data_end+0xfffe6004>
   4d124:	dfc00617 	ldw	ra,24(sp)
   4d128:	dd400517 	ldw	r21,20(sp)
   4d12c:	dd000417 	ldw	r20,16(sp)
   4d130:	dcc00317 	ldw	r19,12(sp)
   4d134:	dc800217 	ldw	r18,8(sp)
   4d138:	dc400117 	ldw	r17,4(sp)
   4d13c:	dc000017 	ldw	r16,0(sp)
   4d140:	dec00704 	addi	sp,sp,28
   4d144:	f800283a 	ret
   4d148:	84000284 	addi	r16,r16,10
   4d14c:	1827883a 	mov	r19,r3
   4d150:	003fe906 	br	4d0f8 <__alt_data_end+0xfffe5ff8>

0004d154 <__hi0bits>:
   4d154:	20bfffec 	andhi	r2,r4,65535
   4d158:	1000141e 	bne	r2,zero,4d1ac <__hi0bits+0x58>
   4d15c:	2008943a 	slli	r4,r4,16
   4d160:	00800404 	movi	r2,16
   4d164:	20ffc02c 	andhi	r3,r4,65280
   4d168:	1800021e 	bne	r3,zero,4d174 <__hi0bits+0x20>
   4d16c:	2008923a 	slli	r4,r4,8
   4d170:	10800204 	addi	r2,r2,8
   4d174:	20fc002c 	andhi	r3,r4,61440
   4d178:	1800021e 	bne	r3,zero,4d184 <__hi0bits+0x30>
   4d17c:	2008913a 	slli	r4,r4,4
   4d180:	10800104 	addi	r2,r2,4
   4d184:	20f0002c 	andhi	r3,r4,49152
   4d188:	1800031e 	bne	r3,zero,4d198 <__hi0bits+0x44>
   4d18c:	2109883a 	add	r4,r4,r4
   4d190:	10800084 	addi	r2,r2,2
   4d194:	2109883a 	add	r4,r4,r4
   4d198:	20000316 	blt	r4,zero,4d1a8 <__hi0bits+0x54>
   4d19c:	2110002c 	andhi	r4,r4,16384
   4d1a0:	2000041e 	bne	r4,zero,4d1b4 <__hi0bits+0x60>
   4d1a4:	00800804 	movi	r2,32
   4d1a8:	f800283a 	ret
   4d1ac:	0005883a 	mov	r2,zero
   4d1b0:	003fec06 	br	4d164 <__alt_data_end+0xfffe6064>
   4d1b4:	10800044 	addi	r2,r2,1
   4d1b8:	f800283a 	ret

0004d1bc <__lo0bits>:
   4d1bc:	20c00017 	ldw	r3,0(r4)
   4d1c0:	188001cc 	andi	r2,r3,7
   4d1c4:	10000826 	beq	r2,zero,4d1e8 <__lo0bits+0x2c>
   4d1c8:	1880004c 	andi	r2,r3,1
   4d1cc:	1000211e 	bne	r2,zero,4d254 <__lo0bits+0x98>
   4d1d0:	1880008c 	andi	r2,r3,2
   4d1d4:	1000211e 	bne	r2,zero,4d25c <__lo0bits+0xa0>
   4d1d8:	1806d0ba 	srli	r3,r3,2
   4d1dc:	00800084 	movi	r2,2
   4d1e0:	20c00015 	stw	r3,0(r4)
   4d1e4:	f800283a 	ret
   4d1e8:	18bfffcc 	andi	r2,r3,65535
   4d1ec:	10001326 	beq	r2,zero,4d23c <__lo0bits+0x80>
   4d1f0:	0005883a 	mov	r2,zero
   4d1f4:	19403fcc 	andi	r5,r3,255
   4d1f8:	2800021e 	bne	r5,zero,4d204 <__lo0bits+0x48>
   4d1fc:	1806d23a 	srli	r3,r3,8
   4d200:	10800204 	addi	r2,r2,8
   4d204:	194003cc 	andi	r5,r3,15
   4d208:	2800021e 	bne	r5,zero,4d214 <__lo0bits+0x58>
   4d20c:	1806d13a 	srli	r3,r3,4
   4d210:	10800104 	addi	r2,r2,4
   4d214:	194000cc 	andi	r5,r3,3
   4d218:	2800021e 	bne	r5,zero,4d224 <__lo0bits+0x68>
   4d21c:	1806d0ba 	srli	r3,r3,2
   4d220:	10800084 	addi	r2,r2,2
   4d224:	1940004c 	andi	r5,r3,1
   4d228:	2800081e 	bne	r5,zero,4d24c <__lo0bits+0x90>
   4d22c:	1806d07a 	srli	r3,r3,1
   4d230:	1800051e 	bne	r3,zero,4d248 <__lo0bits+0x8c>
   4d234:	00800804 	movi	r2,32
   4d238:	f800283a 	ret
   4d23c:	1806d43a 	srli	r3,r3,16
   4d240:	00800404 	movi	r2,16
   4d244:	003feb06 	br	4d1f4 <__alt_data_end+0xfffe60f4>
   4d248:	10800044 	addi	r2,r2,1
   4d24c:	20c00015 	stw	r3,0(r4)
   4d250:	f800283a 	ret
   4d254:	0005883a 	mov	r2,zero
   4d258:	f800283a 	ret
   4d25c:	1806d07a 	srli	r3,r3,1
   4d260:	00800044 	movi	r2,1
   4d264:	20c00015 	stw	r3,0(r4)
   4d268:	f800283a 	ret

0004d26c <__i2b>:
   4d26c:	defffd04 	addi	sp,sp,-12
   4d270:	dc000015 	stw	r16,0(sp)
   4d274:	04000044 	movi	r16,1
   4d278:	dc400115 	stw	r17,4(sp)
   4d27c:	2823883a 	mov	r17,r5
   4d280:	800b883a 	mov	r5,r16
   4d284:	dfc00215 	stw	ra,8(sp)
   4d288:	004ce600 	call	4ce60 <_Balloc>
   4d28c:	14400515 	stw	r17,20(r2)
   4d290:	14000415 	stw	r16,16(r2)
   4d294:	dfc00217 	ldw	ra,8(sp)
   4d298:	dc400117 	ldw	r17,4(sp)
   4d29c:	dc000017 	ldw	r16,0(sp)
   4d2a0:	dec00304 	addi	sp,sp,12
   4d2a4:	f800283a 	ret

0004d2a8 <__multiply>:
   4d2a8:	defffa04 	addi	sp,sp,-24
   4d2ac:	dcc00315 	stw	r19,12(sp)
   4d2b0:	dc800215 	stw	r18,8(sp)
   4d2b4:	34c00417 	ldw	r19,16(r6)
   4d2b8:	2c800417 	ldw	r18,16(r5)
   4d2bc:	dd000415 	stw	r20,16(sp)
   4d2c0:	dc400115 	stw	r17,4(sp)
   4d2c4:	dfc00515 	stw	ra,20(sp)
   4d2c8:	dc000015 	stw	r16,0(sp)
   4d2cc:	2829883a 	mov	r20,r5
   4d2d0:	3023883a 	mov	r17,r6
   4d2d4:	94c0050e 	bge	r18,r19,4d2ec <__multiply+0x44>
   4d2d8:	9007883a 	mov	r3,r18
   4d2dc:	3029883a 	mov	r20,r6
   4d2e0:	9825883a 	mov	r18,r19
   4d2e4:	2823883a 	mov	r17,r5
   4d2e8:	1827883a 	mov	r19,r3
   4d2ec:	a0800217 	ldw	r2,8(r20)
   4d2f0:	94e1883a 	add	r16,r18,r19
   4d2f4:	a1400117 	ldw	r5,4(r20)
   4d2f8:	1400010e 	bge	r2,r16,4d300 <__multiply+0x58>
   4d2fc:	29400044 	addi	r5,r5,1
   4d300:	004ce600 	call	4ce60 <_Balloc>
   4d304:	8415883a 	add	r10,r16,r16
   4d308:	12c00504 	addi	r11,r2,20
   4d30c:	5295883a 	add	r10,r10,r10
   4d310:	5a95883a 	add	r10,r11,r10
   4d314:	5807883a 	mov	r3,r11
   4d318:	5a80032e 	bgeu	r11,r10,4d328 <__multiply+0x80>
   4d31c:	18000015 	stw	zero,0(r3)
   4d320:	18c00104 	addi	r3,r3,4
   4d324:	1abffd36 	bltu	r3,r10,4d31c <__alt_data_end+0xfffe621c>
   4d328:	9ce7883a 	add	r19,r19,r19
   4d32c:	94a5883a 	add	r18,r18,r18
   4d330:	89800504 	addi	r6,r17,20
   4d334:	9ce7883a 	add	r19,r19,r19
   4d338:	a3400504 	addi	r13,r20,20
   4d33c:	94a5883a 	add	r18,r18,r18
   4d340:	34d9883a 	add	r12,r6,r19
   4d344:	6c93883a 	add	r9,r13,r18
   4d348:	3300422e 	bgeu	r6,r12,4d454 <__multiply+0x1ac>
   4d34c:	37c00017 	ldw	ra,0(r6)
   4d350:	fbffffcc 	andi	r15,ra,65535
   4d354:	78001b26 	beq	r15,zero,4d3c4 <__multiply+0x11c>
   4d358:	5811883a 	mov	r8,r11
   4d35c:	681d883a 	mov	r14,r13
   4d360:	000f883a 	mov	r7,zero
   4d364:	71000017 	ldw	r4,0(r14)
   4d368:	40c00017 	ldw	r3,0(r8)
   4d36c:	73800104 	addi	r14,r14,4
   4d370:	217fffcc 	andi	r5,r4,65535
   4d374:	2bcb383a 	mul	r5,r5,r15
   4d378:	2008d43a 	srli	r4,r4,16
   4d37c:	1c7fffcc 	andi	r17,r3,65535
   4d380:	2c4b883a 	add	r5,r5,r17
   4d384:	29cb883a 	add	r5,r5,r7
   4d388:	23c9383a 	mul	r4,r4,r15
   4d38c:	1806d43a 	srli	r3,r3,16
   4d390:	280ed43a 	srli	r7,r5,16
   4d394:	297fffcc 	andi	r5,r5,65535
   4d398:	20c7883a 	add	r3,r4,r3
   4d39c:	19c7883a 	add	r3,r3,r7
   4d3a0:	1808943a 	slli	r4,r3,16
   4d3a4:	4023883a 	mov	r17,r8
   4d3a8:	180ed43a 	srli	r7,r3,16
   4d3ac:	214ab03a 	or	r5,r4,r5
   4d3b0:	41400015 	stw	r5,0(r8)
   4d3b4:	42000104 	addi	r8,r8,4
   4d3b8:	727fea36 	bltu	r14,r9,4d364 <__alt_data_end+0xfffe6264>
   4d3bc:	89c00115 	stw	r7,4(r17)
   4d3c0:	37c00017 	ldw	ra,0(r6)
   4d3c4:	f83ed43a 	srli	ra,ra,16
   4d3c8:	f8001f26 	beq	ra,zero,4d448 <__multiply+0x1a0>
   4d3cc:	58c00017 	ldw	r3,0(r11)
   4d3d0:	681d883a 	mov	r14,r13
   4d3d4:	581f883a 	mov	r15,r11
   4d3d8:	1811883a 	mov	r8,r3
   4d3dc:	5825883a 	mov	r18,r11
   4d3e0:	000f883a 	mov	r7,zero
   4d3e4:	00000106 	br	4d3ec <__multiply+0x144>
   4d3e8:	8825883a 	mov	r18,r17
   4d3ec:	7140000b 	ldhu	r5,0(r14)
   4d3f0:	4010d43a 	srli	r8,r8,16
   4d3f4:	193fffcc 	andi	r4,r3,65535
   4d3f8:	2fcb383a 	mul	r5,r5,ra
   4d3fc:	7bc00104 	addi	r15,r15,4
   4d400:	73800104 	addi	r14,r14,4
   4d404:	2a0b883a 	add	r5,r5,r8
   4d408:	29cb883a 	add	r5,r5,r7
   4d40c:	2806943a 	slli	r3,r5,16
   4d410:	94400104 	addi	r17,r18,4
   4d414:	280ad43a 	srli	r5,r5,16
   4d418:	1908b03a 	or	r4,r3,r4
   4d41c:	793fff15 	stw	r4,-4(r15)
   4d420:	70ffff17 	ldw	r3,-4(r14)
   4d424:	8a000017 	ldw	r8,0(r17)
   4d428:	1806d43a 	srli	r3,r3,16
   4d42c:	413fffcc 	andi	r4,r8,65535
   4d430:	1fc7383a 	mul	r3,r3,ra
   4d434:	1907883a 	add	r3,r3,r4
   4d438:	1947883a 	add	r3,r3,r5
   4d43c:	180ed43a 	srli	r7,r3,16
   4d440:	727fe936 	bltu	r14,r9,4d3e8 <__alt_data_end+0xfffe62e8>
   4d444:	90c00115 	stw	r3,4(r18)
   4d448:	31800104 	addi	r6,r6,4
   4d44c:	5ac00104 	addi	r11,r11,4
   4d450:	333fbe36 	bltu	r6,r12,4d34c <__alt_data_end+0xfffe624c>
   4d454:	0400090e 	bge	zero,r16,4d47c <__multiply+0x1d4>
   4d458:	50ffff17 	ldw	r3,-4(r10)
   4d45c:	52bfff04 	addi	r10,r10,-4
   4d460:	18000326 	beq	r3,zero,4d470 <__multiply+0x1c8>
   4d464:	00000506 	br	4d47c <__multiply+0x1d4>
   4d468:	50c00017 	ldw	r3,0(r10)
   4d46c:	1800031e 	bne	r3,zero,4d47c <__multiply+0x1d4>
   4d470:	843fffc4 	addi	r16,r16,-1
   4d474:	52bfff04 	addi	r10,r10,-4
   4d478:	803ffb1e 	bne	r16,zero,4d468 <__alt_data_end+0xfffe6368>
   4d47c:	14000415 	stw	r16,16(r2)
   4d480:	dfc00517 	ldw	ra,20(sp)
   4d484:	dd000417 	ldw	r20,16(sp)
   4d488:	dcc00317 	ldw	r19,12(sp)
   4d48c:	dc800217 	ldw	r18,8(sp)
   4d490:	dc400117 	ldw	r17,4(sp)
   4d494:	dc000017 	ldw	r16,0(sp)
   4d498:	dec00604 	addi	sp,sp,24
   4d49c:	f800283a 	ret

0004d4a0 <__pow5mult>:
   4d4a0:	defffa04 	addi	sp,sp,-24
   4d4a4:	dcc00315 	stw	r19,12(sp)
   4d4a8:	dc000015 	stw	r16,0(sp)
   4d4ac:	dfc00515 	stw	ra,20(sp)
   4d4b0:	dd000415 	stw	r20,16(sp)
   4d4b4:	dc800215 	stw	r18,8(sp)
   4d4b8:	dc400115 	stw	r17,4(sp)
   4d4bc:	308000cc 	andi	r2,r6,3
   4d4c0:	3021883a 	mov	r16,r6
   4d4c4:	2027883a 	mov	r19,r4
   4d4c8:	10002f1e 	bne	r2,zero,4d588 <__pow5mult+0xe8>
   4d4cc:	2825883a 	mov	r18,r5
   4d4d0:	8021d0ba 	srai	r16,r16,2
   4d4d4:	80001a26 	beq	r16,zero,4d540 <__pow5mult+0xa0>
   4d4d8:	9c401217 	ldw	r17,72(r19)
   4d4dc:	8800061e 	bne	r17,zero,4d4f8 <__pow5mult+0x58>
   4d4e0:	00003406 	br	4d5b4 <__pow5mult+0x114>
   4d4e4:	8021d07a 	srai	r16,r16,1
   4d4e8:	80001526 	beq	r16,zero,4d540 <__pow5mult+0xa0>
   4d4ec:	88800017 	ldw	r2,0(r17)
   4d4f0:	10001c26 	beq	r2,zero,4d564 <__pow5mult+0xc4>
   4d4f4:	1023883a 	mov	r17,r2
   4d4f8:	8080004c 	andi	r2,r16,1
   4d4fc:	103ff926 	beq	r2,zero,4d4e4 <__alt_data_end+0xfffe63e4>
   4d500:	880d883a 	mov	r6,r17
   4d504:	900b883a 	mov	r5,r18
   4d508:	9809883a 	mov	r4,r19
   4d50c:	004d2a80 	call	4d2a8 <__multiply>
   4d510:	90001b26 	beq	r18,zero,4d580 <__pow5mult+0xe0>
   4d514:	91000117 	ldw	r4,4(r18)
   4d518:	98c01317 	ldw	r3,76(r19)
   4d51c:	8021d07a 	srai	r16,r16,1
   4d520:	2109883a 	add	r4,r4,r4
   4d524:	2109883a 	add	r4,r4,r4
   4d528:	1907883a 	add	r3,r3,r4
   4d52c:	19000017 	ldw	r4,0(r3)
   4d530:	91000015 	stw	r4,0(r18)
   4d534:	1c800015 	stw	r18,0(r3)
   4d538:	1025883a 	mov	r18,r2
   4d53c:	803feb1e 	bne	r16,zero,4d4ec <__alt_data_end+0xfffe63ec>
   4d540:	9005883a 	mov	r2,r18
   4d544:	dfc00517 	ldw	ra,20(sp)
   4d548:	dd000417 	ldw	r20,16(sp)
   4d54c:	dcc00317 	ldw	r19,12(sp)
   4d550:	dc800217 	ldw	r18,8(sp)
   4d554:	dc400117 	ldw	r17,4(sp)
   4d558:	dc000017 	ldw	r16,0(sp)
   4d55c:	dec00604 	addi	sp,sp,24
   4d560:	f800283a 	ret
   4d564:	880d883a 	mov	r6,r17
   4d568:	880b883a 	mov	r5,r17
   4d56c:	9809883a 	mov	r4,r19
   4d570:	004d2a80 	call	4d2a8 <__multiply>
   4d574:	88800015 	stw	r2,0(r17)
   4d578:	10000015 	stw	zero,0(r2)
   4d57c:	003fdd06 	br	4d4f4 <__alt_data_end+0xfffe63f4>
   4d580:	1025883a 	mov	r18,r2
   4d584:	003fd706 	br	4d4e4 <__alt_data_end+0xfffe63e4>
   4d588:	10bfffc4 	addi	r2,r2,-1
   4d58c:	1085883a 	add	r2,r2,r2
   4d590:	00c00174 	movhi	r3,5
   4d594:	18d74a04 	addi	r3,r3,23848
   4d598:	1085883a 	add	r2,r2,r2
   4d59c:	1885883a 	add	r2,r3,r2
   4d5a0:	11800017 	ldw	r6,0(r2)
   4d5a4:	000f883a 	mov	r7,zero
   4d5a8:	004cf300 	call	4cf30 <__multadd>
   4d5ac:	1025883a 	mov	r18,r2
   4d5b0:	003fc706 	br	4d4d0 <__alt_data_end+0xfffe63d0>
   4d5b4:	05000044 	movi	r20,1
   4d5b8:	a00b883a 	mov	r5,r20
   4d5bc:	9809883a 	mov	r4,r19
   4d5c0:	004ce600 	call	4ce60 <_Balloc>
   4d5c4:	1023883a 	mov	r17,r2
   4d5c8:	00809c44 	movi	r2,625
   4d5cc:	88800515 	stw	r2,20(r17)
   4d5d0:	8d000415 	stw	r20,16(r17)
   4d5d4:	9c401215 	stw	r17,72(r19)
   4d5d8:	88000015 	stw	zero,0(r17)
   4d5dc:	003fc606 	br	4d4f8 <__alt_data_end+0xfffe63f8>

0004d5e0 <__lshift>:
   4d5e0:	defff904 	addi	sp,sp,-28
   4d5e4:	dd400515 	stw	r21,20(sp)
   4d5e8:	dcc00315 	stw	r19,12(sp)
   4d5ec:	302bd17a 	srai	r21,r6,5
   4d5f0:	2cc00417 	ldw	r19,16(r5)
   4d5f4:	28800217 	ldw	r2,8(r5)
   4d5f8:	dd000415 	stw	r20,16(sp)
   4d5fc:	ace7883a 	add	r19,r21,r19
   4d600:	dc800215 	stw	r18,8(sp)
   4d604:	dc400115 	stw	r17,4(sp)
   4d608:	dc000015 	stw	r16,0(sp)
   4d60c:	dfc00615 	stw	ra,24(sp)
   4d610:	9c000044 	addi	r16,r19,1
   4d614:	2823883a 	mov	r17,r5
   4d618:	3029883a 	mov	r20,r6
   4d61c:	2025883a 	mov	r18,r4
   4d620:	29400117 	ldw	r5,4(r5)
   4d624:	1400030e 	bge	r2,r16,4d634 <__lshift+0x54>
   4d628:	1085883a 	add	r2,r2,r2
   4d62c:	29400044 	addi	r5,r5,1
   4d630:	143ffd16 	blt	r2,r16,4d628 <__alt_data_end+0xfffe6528>
   4d634:	9009883a 	mov	r4,r18
   4d638:	004ce600 	call	4ce60 <_Balloc>
   4d63c:	10c00504 	addi	r3,r2,20
   4d640:	0540070e 	bge	zero,r21,4d660 <__lshift+0x80>
   4d644:	ad6b883a 	add	r21,r21,r21
   4d648:	ad6b883a 	add	r21,r21,r21
   4d64c:	1809883a 	mov	r4,r3
   4d650:	1d47883a 	add	r3,r3,r21
   4d654:	20000015 	stw	zero,0(r4)
   4d658:	21000104 	addi	r4,r4,4
   4d65c:	193ffd1e 	bne	r3,r4,4d654 <__alt_data_end+0xfffe6554>
   4d660:	8a000417 	ldw	r8,16(r17)
   4d664:	89000504 	addi	r4,r17,20
   4d668:	a18007cc 	andi	r6,r20,31
   4d66c:	4211883a 	add	r8,r8,r8
   4d670:	4211883a 	add	r8,r8,r8
   4d674:	2211883a 	add	r8,r4,r8
   4d678:	30002326 	beq	r6,zero,4d708 <__lshift+0x128>
   4d67c:	02400804 	movi	r9,32
   4d680:	4993c83a 	sub	r9,r9,r6
   4d684:	000b883a 	mov	r5,zero
   4d688:	21c00017 	ldw	r7,0(r4)
   4d68c:	1815883a 	mov	r10,r3
   4d690:	18c00104 	addi	r3,r3,4
   4d694:	398e983a 	sll	r7,r7,r6
   4d698:	21000104 	addi	r4,r4,4
   4d69c:	394ab03a 	or	r5,r7,r5
   4d6a0:	197fff15 	stw	r5,-4(r3)
   4d6a4:	217fff17 	ldw	r5,-4(r4)
   4d6a8:	2a4ad83a 	srl	r5,r5,r9
   4d6ac:	223ff636 	bltu	r4,r8,4d688 <__alt_data_end+0xfffe6588>
   4d6b0:	51400115 	stw	r5,4(r10)
   4d6b4:	28001a1e 	bne	r5,zero,4d720 <__lshift+0x140>
   4d6b8:	843fffc4 	addi	r16,r16,-1
   4d6bc:	14000415 	stw	r16,16(r2)
   4d6c0:	88000826 	beq	r17,zero,4d6e4 <__lshift+0x104>
   4d6c4:	89000117 	ldw	r4,4(r17)
   4d6c8:	90c01317 	ldw	r3,76(r18)
   4d6cc:	2109883a 	add	r4,r4,r4
   4d6d0:	2109883a 	add	r4,r4,r4
   4d6d4:	1907883a 	add	r3,r3,r4
   4d6d8:	19000017 	ldw	r4,0(r3)
   4d6dc:	89000015 	stw	r4,0(r17)
   4d6e0:	1c400015 	stw	r17,0(r3)
   4d6e4:	dfc00617 	ldw	ra,24(sp)
   4d6e8:	dd400517 	ldw	r21,20(sp)
   4d6ec:	dd000417 	ldw	r20,16(sp)
   4d6f0:	dcc00317 	ldw	r19,12(sp)
   4d6f4:	dc800217 	ldw	r18,8(sp)
   4d6f8:	dc400117 	ldw	r17,4(sp)
   4d6fc:	dc000017 	ldw	r16,0(sp)
   4d700:	dec00704 	addi	sp,sp,28
   4d704:	f800283a 	ret
   4d708:	21400017 	ldw	r5,0(r4)
   4d70c:	18c00104 	addi	r3,r3,4
   4d710:	21000104 	addi	r4,r4,4
   4d714:	197fff15 	stw	r5,-4(r3)
   4d718:	223ffb36 	bltu	r4,r8,4d708 <__alt_data_end+0xfffe6608>
   4d71c:	003fe606 	br	4d6b8 <__alt_data_end+0xfffe65b8>
   4d720:	9c000084 	addi	r16,r19,2
   4d724:	003fe406 	br	4d6b8 <__alt_data_end+0xfffe65b8>

0004d728 <__mcmp>:
   4d728:	20800417 	ldw	r2,16(r4)
   4d72c:	28c00417 	ldw	r3,16(r5)
   4d730:	10c5c83a 	sub	r2,r2,r3
   4d734:	1000111e 	bne	r2,zero,4d77c <__mcmp+0x54>
   4d738:	18c7883a 	add	r3,r3,r3
   4d73c:	18c7883a 	add	r3,r3,r3
   4d740:	21000504 	addi	r4,r4,20
   4d744:	29400504 	addi	r5,r5,20
   4d748:	20c5883a 	add	r2,r4,r3
   4d74c:	28cb883a 	add	r5,r5,r3
   4d750:	00000106 	br	4d758 <__mcmp+0x30>
   4d754:	20800a2e 	bgeu	r4,r2,4d780 <__mcmp+0x58>
   4d758:	10bfff04 	addi	r2,r2,-4
   4d75c:	297fff04 	addi	r5,r5,-4
   4d760:	11800017 	ldw	r6,0(r2)
   4d764:	28c00017 	ldw	r3,0(r5)
   4d768:	30fffa26 	beq	r6,r3,4d754 <__alt_data_end+0xfffe6654>
   4d76c:	30c00236 	bltu	r6,r3,4d778 <__mcmp+0x50>
   4d770:	00800044 	movi	r2,1
   4d774:	f800283a 	ret
   4d778:	00bfffc4 	movi	r2,-1
   4d77c:	f800283a 	ret
   4d780:	0005883a 	mov	r2,zero
   4d784:	f800283a 	ret

0004d788 <__mdiff>:
   4d788:	28c00417 	ldw	r3,16(r5)
   4d78c:	30800417 	ldw	r2,16(r6)
   4d790:	defffa04 	addi	sp,sp,-24
   4d794:	dcc00315 	stw	r19,12(sp)
   4d798:	dc800215 	stw	r18,8(sp)
   4d79c:	dfc00515 	stw	ra,20(sp)
   4d7a0:	dd000415 	stw	r20,16(sp)
   4d7a4:	dc400115 	stw	r17,4(sp)
   4d7a8:	dc000015 	stw	r16,0(sp)
   4d7ac:	1887c83a 	sub	r3,r3,r2
   4d7b0:	2825883a 	mov	r18,r5
   4d7b4:	3027883a 	mov	r19,r6
   4d7b8:	1800141e 	bne	r3,zero,4d80c <__mdiff+0x84>
   4d7bc:	1085883a 	add	r2,r2,r2
   4d7c0:	1085883a 	add	r2,r2,r2
   4d7c4:	2a000504 	addi	r8,r5,20
   4d7c8:	34000504 	addi	r16,r6,20
   4d7cc:	4087883a 	add	r3,r8,r2
   4d7d0:	8085883a 	add	r2,r16,r2
   4d7d4:	00000106 	br	4d7dc <__mdiff+0x54>
   4d7d8:	40c0592e 	bgeu	r8,r3,4d940 <__mdiff+0x1b8>
   4d7dc:	18ffff04 	addi	r3,r3,-4
   4d7e0:	10bfff04 	addi	r2,r2,-4
   4d7e4:	19c00017 	ldw	r7,0(r3)
   4d7e8:	11400017 	ldw	r5,0(r2)
   4d7ec:	397ffa26 	beq	r7,r5,4d7d8 <__alt_data_end+0xfffe66d8>
   4d7f0:	3940592e 	bgeu	r7,r5,4d958 <__mdiff+0x1d0>
   4d7f4:	9005883a 	mov	r2,r18
   4d7f8:	4023883a 	mov	r17,r8
   4d7fc:	9825883a 	mov	r18,r19
   4d800:	05000044 	movi	r20,1
   4d804:	1027883a 	mov	r19,r2
   4d808:	00000406 	br	4d81c <__mdiff+0x94>
   4d80c:	18005616 	blt	r3,zero,4d968 <__mdiff+0x1e0>
   4d810:	34400504 	addi	r17,r6,20
   4d814:	2c000504 	addi	r16,r5,20
   4d818:	0029883a 	mov	r20,zero
   4d81c:	91400117 	ldw	r5,4(r18)
   4d820:	004ce600 	call	4ce60 <_Balloc>
   4d824:	92400417 	ldw	r9,16(r18)
   4d828:	9b000417 	ldw	r12,16(r19)
   4d82c:	12c00504 	addi	r11,r2,20
   4d830:	4a51883a 	add	r8,r9,r9
   4d834:	6319883a 	add	r12,r12,r12
   4d838:	4211883a 	add	r8,r8,r8
   4d83c:	6319883a 	add	r12,r12,r12
   4d840:	15000315 	stw	r20,12(r2)
   4d844:	8211883a 	add	r8,r16,r8
   4d848:	8b19883a 	add	r12,r17,r12
   4d84c:	0007883a 	mov	r3,zero
   4d850:	81400017 	ldw	r5,0(r16)
   4d854:	89c00017 	ldw	r7,0(r17)
   4d858:	59800104 	addi	r6,r11,4
   4d85c:	293fffcc 	andi	r4,r5,65535
   4d860:	20c7883a 	add	r3,r4,r3
   4d864:	393fffcc 	andi	r4,r7,65535
   4d868:	1909c83a 	sub	r4,r3,r4
   4d86c:	280ad43a 	srli	r5,r5,16
   4d870:	380ed43a 	srli	r7,r7,16
   4d874:	2007d43a 	srai	r3,r4,16
   4d878:	213fffcc 	andi	r4,r4,65535
   4d87c:	29cbc83a 	sub	r5,r5,r7
   4d880:	28c7883a 	add	r3,r5,r3
   4d884:	180a943a 	slli	r5,r3,16
   4d888:	8c400104 	addi	r17,r17,4
   4d88c:	84000104 	addi	r16,r16,4
   4d890:	2908b03a 	or	r4,r5,r4
   4d894:	59000015 	stw	r4,0(r11)
   4d898:	1807d43a 	srai	r3,r3,16
   4d89c:	3015883a 	mov	r10,r6
   4d8a0:	3017883a 	mov	r11,r6
   4d8a4:	8b3fea36 	bltu	r17,r12,4d850 <__alt_data_end+0xfffe6750>
   4d8a8:	8200162e 	bgeu	r16,r8,4d904 <__mdiff+0x17c>
   4d8ac:	8017883a 	mov	r11,r16
   4d8b0:	59400017 	ldw	r5,0(r11)
   4d8b4:	31800104 	addi	r6,r6,4
   4d8b8:	5ac00104 	addi	r11,r11,4
   4d8bc:	293fffcc 	andi	r4,r5,65535
   4d8c0:	20c7883a 	add	r3,r4,r3
   4d8c4:	280ed43a 	srli	r7,r5,16
   4d8c8:	180bd43a 	srai	r5,r3,16
   4d8cc:	193fffcc 	andi	r4,r3,65535
   4d8d0:	3947883a 	add	r3,r7,r5
   4d8d4:	180a943a 	slli	r5,r3,16
   4d8d8:	1807d43a 	srai	r3,r3,16
   4d8dc:	2908b03a 	or	r4,r5,r4
   4d8e0:	313fff15 	stw	r4,-4(r6)
   4d8e4:	5a3ff236 	bltu	r11,r8,4d8b0 <__alt_data_end+0xfffe67b0>
   4d8e8:	0406303a 	nor	r3,zero,r16
   4d8ec:	1a07883a 	add	r3,r3,r8
   4d8f0:	1806d0ba 	srli	r3,r3,2
   4d8f4:	18c00044 	addi	r3,r3,1
   4d8f8:	18c7883a 	add	r3,r3,r3
   4d8fc:	18c7883a 	add	r3,r3,r3
   4d900:	50d5883a 	add	r10,r10,r3
   4d904:	50ffff04 	addi	r3,r10,-4
   4d908:	2000041e 	bne	r4,zero,4d91c <__mdiff+0x194>
   4d90c:	18ffff04 	addi	r3,r3,-4
   4d910:	19000017 	ldw	r4,0(r3)
   4d914:	4a7fffc4 	addi	r9,r9,-1
   4d918:	203ffc26 	beq	r4,zero,4d90c <__alt_data_end+0xfffe680c>
   4d91c:	12400415 	stw	r9,16(r2)
   4d920:	dfc00517 	ldw	ra,20(sp)
   4d924:	dd000417 	ldw	r20,16(sp)
   4d928:	dcc00317 	ldw	r19,12(sp)
   4d92c:	dc800217 	ldw	r18,8(sp)
   4d930:	dc400117 	ldw	r17,4(sp)
   4d934:	dc000017 	ldw	r16,0(sp)
   4d938:	dec00604 	addi	sp,sp,24
   4d93c:	f800283a 	ret
   4d940:	000b883a 	mov	r5,zero
   4d944:	004ce600 	call	4ce60 <_Balloc>
   4d948:	00c00044 	movi	r3,1
   4d94c:	10c00415 	stw	r3,16(r2)
   4d950:	10000515 	stw	zero,20(r2)
   4d954:	003ff206 	br	4d920 <__alt_data_end+0xfffe6820>
   4d958:	8023883a 	mov	r17,r16
   4d95c:	0029883a 	mov	r20,zero
   4d960:	4021883a 	mov	r16,r8
   4d964:	003fad06 	br	4d81c <__alt_data_end+0xfffe671c>
   4d968:	9005883a 	mov	r2,r18
   4d96c:	94400504 	addi	r17,r18,20
   4d970:	9c000504 	addi	r16,r19,20
   4d974:	9825883a 	mov	r18,r19
   4d978:	05000044 	movi	r20,1
   4d97c:	1027883a 	mov	r19,r2
   4d980:	003fa606 	br	4d81c <__alt_data_end+0xfffe671c>

0004d984 <__ulp>:
   4d984:	295ffc2c 	andhi	r5,r5,32752
   4d988:	00bf3034 	movhi	r2,64704
   4d98c:	2887883a 	add	r3,r5,r2
   4d990:	00c0020e 	bge	zero,r3,4d99c <__ulp+0x18>
   4d994:	0005883a 	mov	r2,zero
   4d998:	f800283a 	ret
   4d99c:	00c7c83a 	sub	r3,zero,r3
   4d9a0:	1807d53a 	srai	r3,r3,20
   4d9a4:	008004c4 	movi	r2,19
   4d9a8:	10c00b0e 	bge	r2,r3,4d9d8 <__ulp+0x54>
   4d9ac:	18bffb04 	addi	r2,r3,-20
   4d9b0:	01000784 	movi	r4,30
   4d9b4:	0007883a 	mov	r3,zero
   4d9b8:	20800516 	blt	r4,r2,4d9d0 <__ulp+0x4c>
   4d9bc:	010007c4 	movi	r4,31
   4d9c0:	2089c83a 	sub	r4,r4,r2
   4d9c4:	00800044 	movi	r2,1
   4d9c8:	1104983a 	sll	r2,r2,r4
   4d9cc:	f800283a 	ret
   4d9d0:	00800044 	movi	r2,1
   4d9d4:	f800283a 	ret
   4d9d8:	01400234 	movhi	r5,8
   4d9dc:	28c7d83a 	sra	r3,r5,r3
   4d9e0:	0005883a 	mov	r2,zero
   4d9e4:	f800283a 	ret

0004d9e8 <__b2d>:
   4d9e8:	defffa04 	addi	sp,sp,-24
   4d9ec:	dc000015 	stw	r16,0(sp)
   4d9f0:	24000417 	ldw	r16,16(r4)
   4d9f4:	dc400115 	stw	r17,4(sp)
   4d9f8:	24400504 	addi	r17,r4,20
   4d9fc:	8421883a 	add	r16,r16,r16
   4da00:	8421883a 	add	r16,r16,r16
   4da04:	8c21883a 	add	r16,r17,r16
   4da08:	dc800215 	stw	r18,8(sp)
   4da0c:	84bfff17 	ldw	r18,-4(r16)
   4da10:	dd000415 	stw	r20,16(sp)
   4da14:	dcc00315 	stw	r19,12(sp)
   4da18:	9009883a 	mov	r4,r18
   4da1c:	2829883a 	mov	r20,r5
   4da20:	dfc00515 	stw	ra,20(sp)
   4da24:	004d1540 	call	4d154 <__hi0bits>
   4da28:	00c00804 	movi	r3,32
   4da2c:	1889c83a 	sub	r4,r3,r2
   4da30:	a1000015 	stw	r4,0(r20)
   4da34:	01000284 	movi	r4,10
   4da38:	84ffff04 	addi	r19,r16,-4
   4da3c:	20801216 	blt	r4,r2,4da88 <__b2d+0xa0>
   4da40:	018002c4 	movi	r6,11
   4da44:	308dc83a 	sub	r6,r6,r2
   4da48:	9186d83a 	srl	r3,r18,r6
   4da4c:	18cffc34 	orhi	r3,r3,16368
   4da50:	8cc0212e 	bgeu	r17,r19,4dad8 <__b2d+0xf0>
   4da54:	813ffe17 	ldw	r4,-8(r16)
   4da58:	218cd83a 	srl	r6,r4,r6
   4da5c:	10800544 	addi	r2,r2,21
   4da60:	9084983a 	sll	r2,r18,r2
   4da64:	1184b03a 	or	r2,r2,r6
   4da68:	dfc00517 	ldw	ra,20(sp)
   4da6c:	dd000417 	ldw	r20,16(sp)
   4da70:	dcc00317 	ldw	r19,12(sp)
   4da74:	dc800217 	ldw	r18,8(sp)
   4da78:	dc400117 	ldw	r17,4(sp)
   4da7c:	dc000017 	ldw	r16,0(sp)
   4da80:	dec00604 	addi	sp,sp,24
   4da84:	f800283a 	ret
   4da88:	8cc00f2e 	bgeu	r17,r19,4dac8 <__b2d+0xe0>
   4da8c:	117ffd44 	addi	r5,r2,-11
   4da90:	80bffe17 	ldw	r2,-8(r16)
   4da94:	28000e26 	beq	r5,zero,4dad0 <__b2d+0xe8>
   4da98:	1949c83a 	sub	r4,r3,r5
   4da9c:	9164983a 	sll	r18,r18,r5
   4daa0:	1106d83a 	srl	r3,r2,r4
   4daa4:	81bffe04 	addi	r6,r16,-8
   4daa8:	948ffc34 	orhi	r18,r18,16368
   4daac:	90c6b03a 	or	r3,r18,r3
   4dab0:	89800e2e 	bgeu	r17,r6,4daec <__b2d+0x104>
   4dab4:	81bffd17 	ldw	r6,-12(r16)
   4dab8:	1144983a 	sll	r2,r2,r5
   4dabc:	310ad83a 	srl	r5,r6,r4
   4dac0:	2884b03a 	or	r2,r5,r2
   4dac4:	003fe806 	br	4da68 <__alt_data_end+0xfffe6968>
   4dac8:	10bffd44 	addi	r2,r2,-11
   4dacc:	1000041e 	bne	r2,zero,4dae0 <__b2d+0xf8>
   4dad0:	90cffc34 	orhi	r3,r18,16368
   4dad4:	003fe406 	br	4da68 <__alt_data_end+0xfffe6968>
   4dad8:	000d883a 	mov	r6,zero
   4dadc:	003fdf06 	br	4da5c <__alt_data_end+0xfffe695c>
   4dae0:	90a4983a 	sll	r18,r18,r2
   4dae4:	0005883a 	mov	r2,zero
   4dae8:	003ff906 	br	4dad0 <__alt_data_end+0xfffe69d0>
   4daec:	1144983a 	sll	r2,r2,r5
   4daf0:	003fdd06 	br	4da68 <__alt_data_end+0xfffe6968>

0004daf4 <__d2b>:
   4daf4:	defff804 	addi	sp,sp,-32
   4daf8:	dc000215 	stw	r16,8(sp)
   4dafc:	3021883a 	mov	r16,r6
   4db00:	dc400315 	stw	r17,12(sp)
   4db04:	8022907a 	slli	r17,r16,1
   4db08:	dd000615 	stw	r20,24(sp)
   4db0c:	2829883a 	mov	r20,r5
   4db10:	01400044 	movi	r5,1
   4db14:	dcc00515 	stw	r19,20(sp)
   4db18:	dc800415 	stw	r18,16(sp)
   4db1c:	dfc00715 	stw	ra,28(sp)
   4db20:	3825883a 	mov	r18,r7
   4db24:	8822d57a 	srli	r17,r17,21
   4db28:	004ce600 	call	4ce60 <_Balloc>
   4db2c:	1027883a 	mov	r19,r2
   4db30:	00800434 	movhi	r2,16
   4db34:	10bfffc4 	addi	r2,r2,-1
   4db38:	808c703a 	and	r6,r16,r2
   4db3c:	88000126 	beq	r17,zero,4db44 <__d2b+0x50>
   4db40:	31800434 	orhi	r6,r6,16
   4db44:	d9800015 	stw	r6,0(sp)
   4db48:	a0002426 	beq	r20,zero,4dbdc <__d2b+0xe8>
   4db4c:	d9000104 	addi	r4,sp,4
   4db50:	dd000115 	stw	r20,4(sp)
   4db54:	004d1bc0 	call	4d1bc <__lo0bits>
   4db58:	d8c00017 	ldw	r3,0(sp)
   4db5c:	10002f1e 	bne	r2,zero,4dc1c <__d2b+0x128>
   4db60:	d9000117 	ldw	r4,4(sp)
   4db64:	99000515 	stw	r4,20(r19)
   4db68:	1821003a 	cmpeq	r16,r3,zero
   4db6c:	01000084 	movi	r4,2
   4db70:	2421c83a 	sub	r16,r4,r16
   4db74:	98c00615 	stw	r3,24(r19)
   4db78:	9c000415 	stw	r16,16(r19)
   4db7c:	88001f1e 	bne	r17,zero,4dbfc <__d2b+0x108>
   4db80:	10bef384 	addi	r2,r2,-1074
   4db84:	90800015 	stw	r2,0(r18)
   4db88:	00900034 	movhi	r2,16384
   4db8c:	10bfffc4 	addi	r2,r2,-1
   4db90:	8085883a 	add	r2,r16,r2
   4db94:	1085883a 	add	r2,r2,r2
   4db98:	1085883a 	add	r2,r2,r2
   4db9c:	9885883a 	add	r2,r19,r2
   4dba0:	11000517 	ldw	r4,20(r2)
   4dba4:	8020917a 	slli	r16,r16,5
   4dba8:	004d1540 	call	4d154 <__hi0bits>
   4dbac:	d8c00817 	ldw	r3,32(sp)
   4dbb0:	8085c83a 	sub	r2,r16,r2
   4dbb4:	18800015 	stw	r2,0(r3)
   4dbb8:	9805883a 	mov	r2,r19
   4dbbc:	dfc00717 	ldw	ra,28(sp)
   4dbc0:	dd000617 	ldw	r20,24(sp)
   4dbc4:	dcc00517 	ldw	r19,20(sp)
   4dbc8:	dc800417 	ldw	r18,16(sp)
   4dbcc:	dc400317 	ldw	r17,12(sp)
   4dbd0:	dc000217 	ldw	r16,8(sp)
   4dbd4:	dec00804 	addi	sp,sp,32
   4dbd8:	f800283a 	ret
   4dbdc:	d809883a 	mov	r4,sp
   4dbe0:	004d1bc0 	call	4d1bc <__lo0bits>
   4dbe4:	d8c00017 	ldw	r3,0(sp)
   4dbe8:	04000044 	movi	r16,1
   4dbec:	9c000415 	stw	r16,16(r19)
   4dbf0:	98c00515 	stw	r3,20(r19)
   4dbf4:	10800804 	addi	r2,r2,32
   4dbf8:	883fe126 	beq	r17,zero,4db80 <__alt_data_end+0xfffe6a80>
   4dbfc:	00c00d44 	movi	r3,53
   4dc00:	8c7ef344 	addi	r17,r17,-1075
   4dc04:	88a3883a 	add	r17,r17,r2
   4dc08:	1885c83a 	sub	r2,r3,r2
   4dc0c:	d8c00817 	ldw	r3,32(sp)
   4dc10:	94400015 	stw	r17,0(r18)
   4dc14:	18800015 	stw	r2,0(r3)
   4dc18:	003fe706 	br	4dbb8 <__alt_data_end+0xfffe6ab8>
   4dc1c:	01000804 	movi	r4,32
   4dc20:	2089c83a 	sub	r4,r4,r2
   4dc24:	1908983a 	sll	r4,r3,r4
   4dc28:	d9400117 	ldw	r5,4(sp)
   4dc2c:	1886d83a 	srl	r3,r3,r2
   4dc30:	2148b03a 	or	r4,r4,r5
   4dc34:	99000515 	stw	r4,20(r19)
   4dc38:	d8c00015 	stw	r3,0(sp)
   4dc3c:	003fca06 	br	4db68 <__alt_data_end+0xfffe6a68>

0004dc40 <__ratio>:
   4dc40:	defff904 	addi	sp,sp,-28
   4dc44:	dc400315 	stw	r17,12(sp)
   4dc48:	2823883a 	mov	r17,r5
   4dc4c:	d9400104 	addi	r5,sp,4
   4dc50:	dfc00615 	stw	ra,24(sp)
   4dc54:	dcc00515 	stw	r19,20(sp)
   4dc58:	dc800415 	stw	r18,16(sp)
   4dc5c:	2027883a 	mov	r19,r4
   4dc60:	dc000215 	stw	r16,8(sp)
   4dc64:	004d9e80 	call	4d9e8 <__b2d>
   4dc68:	d80b883a 	mov	r5,sp
   4dc6c:	8809883a 	mov	r4,r17
   4dc70:	1025883a 	mov	r18,r2
   4dc74:	1821883a 	mov	r16,r3
   4dc78:	004d9e80 	call	4d9e8 <__b2d>
   4dc7c:	8a000417 	ldw	r8,16(r17)
   4dc80:	99000417 	ldw	r4,16(r19)
   4dc84:	d9400117 	ldw	r5,4(sp)
   4dc88:	2209c83a 	sub	r4,r4,r8
   4dc8c:	2010917a 	slli	r8,r4,5
   4dc90:	d9000017 	ldw	r4,0(sp)
   4dc94:	2909c83a 	sub	r4,r5,r4
   4dc98:	4109883a 	add	r4,r8,r4
   4dc9c:	01000e0e 	bge	zero,r4,4dcd8 <__ratio+0x98>
   4dca0:	2008953a 	slli	r4,r4,20
   4dca4:	2421883a 	add	r16,r4,r16
   4dca8:	100d883a 	mov	r6,r2
   4dcac:	180f883a 	mov	r7,r3
   4dcb0:	9009883a 	mov	r4,r18
   4dcb4:	800b883a 	mov	r5,r16
   4dcb8:	00450e00 	call	450e0 <__divdf3>
   4dcbc:	dfc00617 	ldw	ra,24(sp)
   4dcc0:	dcc00517 	ldw	r19,20(sp)
   4dcc4:	dc800417 	ldw	r18,16(sp)
   4dcc8:	dc400317 	ldw	r17,12(sp)
   4dccc:	dc000217 	ldw	r16,8(sp)
   4dcd0:	dec00704 	addi	sp,sp,28
   4dcd4:	f800283a 	ret
   4dcd8:	2008953a 	slli	r4,r4,20
   4dcdc:	1907c83a 	sub	r3,r3,r4
   4dce0:	003ff106 	br	4dca8 <__alt_data_end+0xfffe6ba8>

0004dce4 <_mprec_log10>:
   4dce4:	defffe04 	addi	sp,sp,-8
   4dce8:	dc000015 	stw	r16,0(sp)
   4dcec:	dfc00115 	stw	ra,4(sp)
   4dcf0:	008005c4 	movi	r2,23
   4dcf4:	2021883a 	mov	r16,r4
   4dcf8:	11000d0e 	bge	r2,r4,4dd30 <_mprec_log10+0x4c>
   4dcfc:	0005883a 	mov	r2,zero
   4dd00:	00cffc34 	movhi	r3,16368
   4dd04:	843fffc4 	addi	r16,r16,-1
   4dd08:	000d883a 	mov	r6,zero
   4dd0c:	01d00934 	movhi	r7,16420
   4dd10:	1009883a 	mov	r4,r2
   4dd14:	180b883a 	mov	r5,r3
   4dd18:	0045b2c0 	call	45b2c <__muldf3>
   4dd1c:	803ff91e 	bne	r16,zero,4dd04 <__alt_data_end+0xfffe6c04>
   4dd20:	dfc00117 	ldw	ra,4(sp)
   4dd24:	dc000017 	ldw	r16,0(sp)
   4dd28:	dec00204 	addi	sp,sp,8
   4dd2c:	f800283a 	ret
   4dd30:	202090fa 	slli	r16,r4,3
   4dd34:	00800174 	movhi	r2,5
   4dd38:	10976104 	addi	r2,r2,23940
   4dd3c:	1421883a 	add	r16,r2,r16
   4dd40:	80800017 	ldw	r2,0(r16)
   4dd44:	80c00117 	ldw	r3,4(r16)
   4dd48:	dfc00117 	ldw	ra,4(sp)
   4dd4c:	dc000017 	ldw	r16,0(sp)
   4dd50:	dec00204 	addi	sp,sp,8
   4dd54:	f800283a 	ret

0004dd58 <__copybits>:
   4dd58:	297fffc4 	addi	r5,r5,-1
   4dd5c:	280fd17a 	srai	r7,r5,5
   4dd60:	30c00417 	ldw	r3,16(r6)
   4dd64:	30800504 	addi	r2,r6,20
   4dd68:	39c00044 	addi	r7,r7,1
   4dd6c:	18c7883a 	add	r3,r3,r3
   4dd70:	39cf883a 	add	r7,r7,r7
   4dd74:	18c7883a 	add	r3,r3,r3
   4dd78:	39cf883a 	add	r7,r7,r7
   4dd7c:	10c7883a 	add	r3,r2,r3
   4dd80:	21cf883a 	add	r7,r4,r7
   4dd84:	10c00d2e 	bgeu	r2,r3,4ddbc <__copybits+0x64>
   4dd88:	200b883a 	mov	r5,r4
   4dd8c:	12000017 	ldw	r8,0(r2)
   4dd90:	29400104 	addi	r5,r5,4
   4dd94:	10800104 	addi	r2,r2,4
   4dd98:	2a3fff15 	stw	r8,-4(r5)
   4dd9c:	10fffb36 	bltu	r2,r3,4dd8c <__alt_data_end+0xfffe6c8c>
   4dda0:	1985c83a 	sub	r2,r3,r6
   4dda4:	10bffac4 	addi	r2,r2,-21
   4dda8:	1004d0ba 	srli	r2,r2,2
   4ddac:	10800044 	addi	r2,r2,1
   4ddb0:	1085883a 	add	r2,r2,r2
   4ddb4:	1085883a 	add	r2,r2,r2
   4ddb8:	2089883a 	add	r4,r4,r2
   4ddbc:	21c0032e 	bgeu	r4,r7,4ddcc <__copybits+0x74>
   4ddc0:	20000015 	stw	zero,0(r4)
   4ddc4:	21000104 	addi	r4,r4,4
   4ddc8:	21fffd36 	bltu	r4,r7,4ddc0 <__alt_data_end+0xfffe6cc0>
   4ddcc:	f800283a 	ret

0004ddd0 <__any_on>:
   4ddd0:	20c00417 	ldw	r3,16(r4)
   4ddd4:	2805d17a 	srai	r2,r5,5
   4ddd8:	21000504 	addi	r4,r4,20
   4dddc:	18800d0e 	bge	r3,r2,4de14 <__any_on+0x44>
   4dde0:	18c7883a 	add	r3,r3,r3
   4dde4:	18c7883a 	add	r3,r3,r3
   4dde8:	20c7883a 	add	r3,r4,r3
   4ddec:	20c0192e 	bgeu	r4,r3,4de54 <__any_on+0x84>
   4ddf0:	18bfff17 	ldw	r2,-4(r3)
   4ddf4:	18ffff04 	addi	r3,r3,-4
   4ddf8:	1000041e 	bne	r2,zero,4de0c <__any_on+0x3c>
   4ddfc:	20c0142e 	bgeu	r4,r3,4de50 <__any_on+0x80>
   4de00:	18ffff04 	addi	r3,r3,-4
   4de04:	19400017 	ldw	r5,0(r3)
   4de08:	283ffc26 	beq	r5,zero,4ddfc <__alt_data_end+0xfffe6cfc>
   4de0c:	00800044 	movi	r2,1
   4de10:	f800283a 	ret
   4de14:	10c00a0e 	bge	r2,r3,4de40 <__any_on+0x70>
   4de18:	1085883a 	add	r2,r2,r2
   4de1c:	1085883a 	add	r2,r2,r2
   4de20:	294007cc 	andi	r5,r5,31
   4de24:	2087883a 	add	r3,r4,r2
   4de28:	283ff026 	beq	r5,zero,4ddec <__alt_data_end+0xfffe6cec>
   4de2c:	19800017 	ldw	r6,0(r3)
   4de30:	3144d83a 	srl	r2,r6,r5
   4de34:	114a983a 	sll	r5,r2,r5
   4de38:	317ff41e 	bne	r6,r5,4de0c <__alt_data_end+0xfffe6d0c>
   4de3c:	003feb06 	br	4ddec <__alt_data_end+0xfffe6cec>
   4de40:	1085883a 	add	r2,r2,r2
   4de44:	1085883a 	add	r2,r2,r2
   4de48:	2087883a 	add	r3,r4,r2
   4de4c:	003fe706 	br	4ddec <__alt_data_end+0xfffe6cec>
   4de50:	f800283a 	ret
   4de54:	0005883a 	mov	r2,zero
   4de58:	f800283a 	ret

0004de5c <_realloc_r>:
   4de5c:	defff604 	addi	sp,sp,-40
   4de60:	dc800215 	stw	r18,8(sp)
   4de64:	dfc00915 	stw	ra,36(sp)
   4de68:	df000815 	stw	fp,32(sp)
   4de6c:	ddc00715 	stw	r23,28(sp)
   4de70:	dd800615 	stw	r22,24(sp)
   4de74:	dd400515 	stw	r21,20(sp)
   4de78:	dd000415 	stw	r20,16(sp)
   4de7c:	dcc00315 	stw	r19,12(sp)
   4de80:	dc400115 	stw	r17,4(sp)
   4de84:	dc000015 	stw	r16,0(sp)
   4de88:	3025883a 	mov	r18,r6
   4de8c:	2800b726 	beq	r5,zero,4e16c <_realloc_r+0x310>
   4de90:	282b883a 	mov	r21,r5
   4de94:	2029883a 	mov	r20,r4
   4de98:	00517700 	call	51770 <__malloc_lock>
   4de9c:	a8bfff17 	ldw	r2,-4(r21)
   4dea0:	043fff04 	movi	r16,-4
   4dea4:	90c002c4 	addi	r3,r18,11
   4dea8:	01000584 	movi	r4,22
   4deac:	acfffe04 	addi	r19,r21,-8
   4deb0:	1420703a 	and	r16,r2,r16
   4deb4:	20c0332e 	bgeu	r4,r3,4df84 <_realloc_r+0x128>
   4deb8:	047ffe04 	movi	r17,-8
   4debc:	1c62703a 	and	r17,r3,r17
   4dec0:	8807883a 	mov	r3,r17
   4dec4:	88005816 	blt	r17,zero,4e028 <_realloc_r+0x1cc>
   4dec8:	8c805736 	bltu	r17,r18,4e028 <_realloc_r+0x1cc>
   4decc:	80c0300e 	bge	r16,r3,4df90 <_realloc_r+0x134>
   4ded0:	07000174 	movhi	fp,5
   4ded4:	e718d904 	addi	fp,fp,25444
   4ded8:	e1c00217 	ldw	r7,8(fp)
   4dedc:	9c09883a 	add	r4,r19,r16
   4dee0:	22000117 	ldw	r8,4(r4)
   4dee4:	21c06326 	beq	r4,r7,4e074 <_realloc_r+0x218>
   4dee8:	017fff84 	movi	r5,-2
   4deec:	414a703a 	and	r5,r8,r5
   4def0:	214b883a 	add	r5,r4,r5
   4def4:	29800117 	ldw	r6,4(r5)
   4def8:	3180004c 	andi	r6,r6,1
   4defc:	30003f26 	beq	r6,zero,4dffc <_realloc_r+0x1a0>
   4df00:	1080004c 	andi	r2,r2,1
   4df04:	10008326 	beq	r2,zero,4e114 <_realloc_r+0x2b8>
   4df08:	900b883a 	mov	r5,r18
   4df0c:	a009883a 	mov	r4,r20
   4df10:	004c1a40 	call	4c1a4 <_malloc_r>
   4df14:	1025883a 	mov	r18,r2
   4df18:	10011e26 	beq	r2,zero,4e394 <_realloc_r+0x538>
   4df1c:	a93fff17 	ldw	r4,-4(r21)
   4df20:	10fffe04 	addi	r3,r2,-8
   4df24:	00bfff84 	movi	r2,-2
   4df28:	2084703a 	and	r2,r4,r2
   4df2c:	9885883a 	add	r2,r19,r2
   4df30:	1880ee26 	beq	r3,r2,4e2ec <_realloc_r+0x490>
   4df34:	81bfff04 	addi	r6,r16,-4
   4df38:	00800904 	movi	r2,36
   4df3c:	1180b836 	bltu	r2,r6,4e220 <_realloc_r+0x3c4>
   4df40:	00c004c4 	movi	r3,19
   4df44:	19809636 	bltu	r3,r6,4e1a0 <_realloc_r+0x344>
   4df48:	9005883a 	mov	r2,r18
   4df4c:	a807883a 	mov	r3,r21
   4df50:	19000017 	ldw	r4,0(r3)
   4df54:	11000015 	stw	r4,0(r2)
   4df58:	19000117 	ldw	r4,4(r3)
   4df5c:	11000115 	stw	r4,4(r2)
   4df60:	18c00217 	ldw	r3,8(r3)
   4df64:	10c00215 	stw	r3,8(r2)
   4df68:	a80b883a 	mov	r5,r21
   4df6c:	a009883a 	mov	r4,r20
   4df70:	004b5b80 	call	4b5b8 <_free_r>
   4df74:	a009883a 	mov	r4,r20
   4df78:	00517940 	call	51794 <__malloc_unlock>
   4df7c:	9005883a 	mov	r2,r18
   4df80:	00001206 	br	4dfcc <_realloc_r+0x170>
   4df84:	00c00404 	movi	r3,16
   4df88:	1823883a 	mov	r17,r3
   4df8c:	003fce06 	br	4dec8 <__alt_data_end+0xfffe6dc8>
   4df90:	a825883a 	mov	r18,r21
   4df94:	8445c83a 	sub	r2,r16,r17
   4df98:	00c003c4 	movi	r3,15
   4df9c:	18802636 	bltu	r3,r2,4e038 <_realloc_r+0x1dc>
   4dfa0:	99800117 	ldw	r6,4(r19)
   4dfa4:	9c07883a 	add	r3,r19,r16
   4dfa8:	3180004c 	andi	r6,r6,1
   4dfac:	3420b03a 	or	r16,r6,r16
   4dfb0:	9c000115 	stw	r16,4(r19)
   4dfb4:	18800117 	ldw	r2,4(r3)
   4dfb8:	10800054 	ori	r2,r2,1
   4dfbc:	18800115 	stw	r2,4(r3)
   4dfc0:	a009883a 	mov	r4,r20
   4dfc4:	00517940 	call	51794 <__malloc_unlock>
   4dfc8:	9005883a 	mov	r2,r18
   4dfcc:	dfc00917 	ldw	ra,36(sp)
   4dfd0:	df000817 	ldw	fp,32(sp)
   4dfd4:	ddc00717 	ldw	r23,28(sp)
   4dfd8:	dd800617 	ldw	r22,24(sp)
   4dfdc:	dd400517 	ldw	r21,20(sp)
   4dfe0:	dd000417 	ldw	r20,16(sp)
   4dfe4:	dcc00317 	ldw	r19,12(sp)
   4dfe8:	dc800217 	ldw	r18,8(sp)
   4dfec:	dc400117 	ldw	r17,4(sp)
   4dff0:	dc000017 	ldw	r16,0(sp)
   4dff4:	dec00a04 	addi	sp,sp,40
   4dff8:	f800283a 	ret
   4dffc:	017fff04 	movi	r5,-4
   4e000:	414a703a 	and	r5,r8,r5
   4e004:	814d883a 	add	r6,r16,r5
   4e008:	30c01f16 	blt	r6,r3,4e088 <_realloc_r+0x22c>
   4e00c:	20800317 	ldw	r2,12(r4)
   4e010:	20c00217 	ldw	r3,8(r4)
   4e014:	a825883a 	mov	r18,r21
   4e018:	3021883a 	mov	r16,r6
   4e01c:	18800315 	stw	r2,12(r3)
   4e020:	10c00215 	stw	r3,8(r2)
   4e024:	003fdb06 	br	4df94 <__alt_data_end+0xfffe6e94>
   4e028:	00800304 	movi	r2,12
   4e02c:	a0800015 	stw	r2,0(r20)
   4e030:	0005883a 	mov	r2,zero
   4e034:	003fe506 	br	4dfcc <__alt_data_end+0xfffe6ecc>
   4e038:	98c00117 	ldw	r3,4(r19)
   4e03c:	9c4b883a 	add	r5,r19,r17
   4e040:	11000054 	ori	r4,r2,1
   4e044:	18c0004c 	andi	r3,r3,1
   4e048:	1c62b03a 	or	r17,r3,r17
   4e04c:	9c400115 	stw	r17,4(r19)
   4e050:	29000115 	stw	r4,4(r5)
   4e054:	2885883a 	add	r2,r5,r2
   4e058:	10c00117 	ldw	r3,4(r2)
   4e05c:	29400204 	addi	r5,r5,8
   4e060:	a009883a 	mov	r4,r20
   4e064:	18c00054 	ori	r3,r3,1
   4e068:	10c00115 	stw	r3,4(r2)
   4e06c:	004b5b80 	call	4b5b8 <_free_r>
   4e070:	003fd306 	br	4dfc0 <__alt_data_end+0xfffe6ec0>
   4e074:	017fff04 	movi	r5,-4
   4e078:	414a703a 	and	r5,r8,r5
   4e07c:	89800404 	addi	r6,r17,16
   4e080:	8151883a 	add	r8,r16,r5
   4e084:	4180590e 	bge	r8,r6,4e1ec <_realloc_r+0x390>
   4e088:	1080004c 	andi	r2,r2,1
   4e08c:	103f9e1e 	bne	r2,zero,4df08 <__alt_data_end+0xfffe6e08>
   4e090:	adbffe17 	ldw	r22,-8(r21)
   4e094:	00bfff04 	movi	r2,-4
   4e098:	9dadc83a 	sub	r22,r19,r22
   4e09c:	b1800117 	ldw	r6,4(r22)
   4e0a0:	3084703a 	and	r2,r6,r2
   4e0a4:	20002026 	beq	r4,zero,4e128 <_realloc_r+0x2cc>
   4e0a8:	80af883a 	add	r23,r16,r2
   4e0ac:	b96f883a 	add	r23,r23,r5
   4e0b0:	21c05f26 	beq	r4,r7,4e230 <_realloc_r+0x3d4>
   4e0b4:	b8c01c16 	blt	r23,r3,4e128 <_realloc_r+0x2cc>
   4e0b8:	20800317 	ldw	r2,12(r4)
   4e0bc:	20c00217 	ldw	r3,8(r4)
   4e0c0:	81bfff04 	addi	r6,r16,-4
   4e0c4:	01000904 	movi	r4,36
   4e0c8:	18800315 	stw	r2,12(r3)
   4e0cc:	10c00215 	stw	r3,8(r2)
   4e0d0:	b0c00217 	ldw	r3,8(r22)
   4e0d4:	b0800317 	ldw	r2,12(r22)
   4e0d8:	b4800204 	addi	r18,r22,8
   4e0dc:	18800315 	stw	r2,12(r3)
   4e0e0:	10c00215 	stw	r3,8(r2)
   4e0e4:	21801b36 	bltu	r4,r6,4e154 <_realloc_r+0x2f8>
   4e0e8:	008004c4 	movi	r2,19
   4e0ec:	1180352e 	bgeu	r2,r6,4e1c4 <_realloc_r+0x368>
   4e0f0:	a8800017 	ldw	r2,0(r21)
   4e0f4:	b0800215 	stw	r2,8(r22)
   4e0f8:	a8800117 	ldw	r2,4(r21)
   4e0fc:	b0800315 	stw	r2,12(r22)
   4e100:	008006c4 	movi	r2,27
   4e104:	11807f36 	bltu	r2,r6,4e304 <_realloc_r+0x4a8>
   4e108:	b0800404 	addi	r2,r22,16
   4e10c:	ad400204 	addi	r21,r21,8
   4e110:	00002d06 	br	4e1c8 <_realloc_r+0x36c>
   4e114:	adbffe17 	ldw	r22,-8(r21)
   4e118:	00bfff04 	movi	r2,-4
   4e11c:	9dadc83a 	sub	r22,r19,r22
   4e120:	b1000117 	ldw	r4,4(r22)
   4e124:	2084703a 	and	r2,r4,r2
   4e128:	b03f7726 	beq	r22,zero,4df08 <__alt_data_end+0xfffe6e08>
   4e12c:	80af883a 	add	r23,r16,r2
   4e130:	b8ff7516 	blt	r23,r3,4df08 <__alt_data_end+0xfffe6e08>
   4e134:	b0800317 	ldw	r2,12(r22)
   4e138:	b0c00217 	ldw	r3,8(r22)
   4e13c:	81bfff04 	addi	r6,r16,-4
   4e140:	01000904 	movi	r4,36
   4e144:	18800315 	stw	r2,12(r3)
   4e148:	10c00215 	stw	r3,8(r2)
   4e14c:	b4800204 	addi	r18,r22,8
   4e150:	21bfe52e 	bgeu	r4,r6,4e0e8 <__alt_data_end+0xfffe6fe8>
   4e154:	a80b883a 	mov	r5,r21
   4e158:	9009883a 	mov	r4,r18
   4e15c:	004cbdc0 	call	4cbdc <memmove>
   4e160:	b821883a 	mov	r16,r23
   4e164:	b027883a 	mov	r19,r22
   4e168:	003f8a06 	br	4df94 <__alt_data_end+0xfffe6e94>
   4e16c:	300b883a 	mov	r5,r6
   4e170:	dfc00917 	ldw	ra,36(sp)
   4e174:	df000817 	ldw	fp,32(sp)
   4e178:	ddc00717 	ldw	r23,28(sp)
   4e17c:	dd800617 	ldw	r22,24(sp)
   4e180:	dd400517 	ldw	r21,20(sp)
   4e184:	dd000417 	ldw	r20,16(sp)
   4e188:	dcc00317 	ldw	r19,12(sp)
   4e18c:	dc800217 	ldw	r18,8(sp)
   4e190:	dc400117 	ldw	r17,4(sp)
   4e194:	dc000017 	ldw	r16,0(sp)
   4e198:	dec00a04 	addi	sp,sp,40
   4e19c:	004c1a41 	jmpi	4c1a4 <_malloc_r>
   4e1a0:	a8c00017 	ldw	r3,0(r21)
   4e1a4:	90c00015 	stw	r3,0(r18)
   4e1a8:	a8c00117 	ldw	r3,4(r21)
   4e1ac:	90c00115 	stw	r3,4(r18)
   4e1b0:	00c006c4 	movi	r3,27
   4e1b4:	19804536 	bltu	r3,r6,4e2cc <_realloc_r+0x470>
   4e1b8:	90800204 	addi	r2,r18,8
   4e1bc:	a8c00204 	addi	r3,r21,8
   4e1c0:	003f6306 	br	4df50 <__alt_data_end+0xfffe6e50>
   4e1c4:	9005883a 	mov	r2,r18
   4e1c8:	a8c00017 	ldw	r3,0(r21)
   4e1cc:	b821883a 	mov	r16,r23
   4e1d0:	b027883a 	mov	r19,r22
   4e1d4:	10c00015 	stw	r3,0(r2)
   4e1d8:	a8c00117 	ldw	r3,4(r21)
   4e1dc:	10c00115 	stw	r3,4(r2)
   4e1e0:	a8c00217 	ldw	r3,8(r21)
   4e1e4:	10c00215 	stw	r3,8(r2)
   4e1e8:	003f6a06 	br	4df94 <__alt_data_end+0xfffe6e94>
   4e1ec:	9c67883a 	add	r19,r19,r17
   4e1f0:	4445c83a 	sub	r2,r8,r17
   4e1f4:	e4c00215 	stw	r19,8(fp)
   4e1f8:	10800054 	ori	r2,r2,1
   4e1fc:	98800115 	stw	r2,4(r19)
   4e200:	a8bfff17 	ldw	r2,-4(r21)
   4e204:	a009883a 	mov	r4,r20
   4e208:	1080004c 	andi	r2,r2,1
   4e20c:	1462b03a 	or	r17,r2,r17
   4e210:	ac7fff15 	stw	r17,-4(r21)
   4e214:	00517940 	call	51794 <__malloc_unlock>
   4e218:	a805883a 	mov	r2,r21
   4e21c:	003f6b06 	br	4dfcc <__alt_data_end+0xfffe6ecc>
   4e220:	a80b883a 	mov	r5,r21
   4e224:	9009883a 	mov	r4,r18
   4e228:	004cbdc0 	call	4cbdc <memmove>
   4e22c:	003f4e06 	br	4df68 <__alt_data_end+0xfffe6e68>
   4e230:	89000404 	addi	r4,r17,16
   4e234:	b93fbc16 	blt	r23,r4,4e128 <__alt_data_end+0xfffe7028>
   4e238:	b0800317 	ldw	r2,12(r22)
   4e23c:	b0c00217 	ldw	r3,8(r22)
   4e240:	81bfff04 	addi	r6,r16,-4
   4e244:	01000904 	movi	r4,36
   4e248:	18800315 	stw	r2,12(r3)
   4e24c:	10c00215 	stw	r3,8(r2)
   4e250:	b4800204 	addi	r18,r22,8
   4e254:	21804336 	bltu	r4,r6,4e364 <_realloc_r+0x508>
   4e258:	008004c4 	movi	r2,19
   4e25c:	11803f2e 	bgeu	r2,r6,4e35c <_realloc_r+0x500>
   4e260:	a8800017 	ldw	r2,0(r21)
   4e264:	b0800215 	stw	r2,8(r22)
   4e268:	a8800117 	ldw	r2,4(r21)
   4e26c:	b0800315 	stw	r2,12(r22)
   4e270:	008006c4 	movi	r2,27
   4e274:	11803f36 	bltu	r2,r6,4e374 <_realloc_r+0x518>
   4e278:	b0800404 	addi	r2,r22,16
   4e27c:	ad400204 	addi	r21,r21,8
   4e280:	a8c00017 	ldw	r3,0(r21)
   4e284:	10c00015 	stw	r3,0(r2)
   4e288:	a8c00117 	ldw	r3,4(r21)
   4e28c:	10c00115 	stw	r3,4(r2)
   4e290:	a8c00217 	ldw	r3,8(r21)
   4e294:	10c00215 	stw	r3,8(r2)
   4e298:	b447883a 	add	r3,r22,r17
   4e29c:	bc45c83a 	sub	r2,r23,r17
   4e2a0:	e0c00215 	stw	r3,8(fp)
   4e2a4:	10800054 	ori	r2,r2,1
   4e2a8:	18800115 	stw	r2,4(r3)
   4e2ac:	b0800117 	ldw	r2,4(r22)
   4e2b0:	a009883a 	mov	r4,r20
   4e2b4:	1080004c 	andi	r2,r2,1
   4e2b8:	1462b03a 	or	r17,r2,r17
   4e2bc:	b4400115 	stw	r17,4(r22)
   4e2c0:	00517940 	call	51794 <__malloc_unlock>
   4e2c4:	9005883a 	mov	r2,r18
   4e2c8:	003f4006 	br	4dfcc <__alt_data_end+0xfffe6ecc>
   4e2cc:	a8c00217 	ldw	r3,8(r21)
   4e2d0:	90c00215 	stw	r3,8(r18)
   4e2d4:	a8c00317 	ldw	r3,12(r21)
   4e2d8:	90c00315 	stw	r3,12(r18)
   4e2dc:	30801126 	beq	r6,r2,4e324 <_realloc_r+0x4c8>
   4e2e0:	90800404 	addi	r2,r18,16
   4e2e4:	a8c00404 	addi	r3,r21,16
   4e2e8:	003f1906 	br	4df50 <__alt_data_end+0xfffe6e50>
   4e2ec:	90ffff17 	ldw	r3,-4(r18)
   4e2f0:	00bfff04 	movi	r2,-4
   4e2f4:	a825883a 	mov	r18,r21
   4e2f8:	1884703a 	and	r2,r3,r2
   4e2fc:	80a1883a 	add	r16,r16,r2
   4e300:	003f2406 	br	4df94 <__alt_data_end+0xfffe6e94>
   4e304:	a8800217 	ldw	r2,8(r21)
   4e308:	b0800415 	stw	r2,16(r22)
   4e30c:	a8800317 	ldw	r2,12(r21)
   4e310:	b0800515 	stw	r2,20(r22)
   4e314:	31000a26 	beq	r6,r4,4e340 <_realloc_r+0x4e4>
   4e318:	b0800604 	addi	r2,r22,24
   4e31c:	ad400404 	addi	r21,r21,16
   4e320:	003fa906 	br	4e1c8 <__alt_data_end+0xfffe70c8>
   4e324:	a9000417 	ldw	r4,16(r21)
   4e328:	90800604 	addi	r2,r18,24
   4e32c:	a8c00604 	addi	r3,r21,24
   4e330:	91000415 	stw	r4,16(r18)
   4e334:	a9000517 	ldw	r4,20(r21)
   4e338:	91000515 	stw	r4,20(r18)
   4e33c:	003f0406 	br	4df50 <__alt_data_end+0xfffe6e50>
   4e340:	a8c00417 	ldw	r3,16(r21)
   4e344:	ad400604 	addi	r21,r21,24
   4e348:	b0800804 	addi	r2,r22,32
   4e34c:	b0c00615 	stw	r3,24(r22)
   4e350:	a8ffff17 	ldw	r3,-4(r21)
   4e354:	b0c00715 	stw	r3,28(r22)
   4e358:	003f9b06 	br	4e1c8 <__alt_data_end+0xfffe70c8>
   4e35c:	9005883a 	mov	r2,r18
   4e360:	003fc706 	br	4e280 <__alt_data_end+0xfffe7180>
   4e364:	a80b883a 	mov	r5,r21
   4e368:	9009883a 	mov	r4,r18
   4e36c:	004cbdc0 	call	4cbdc <memmove>
   4e370:	003fc906 	br	4e298 <__alt_data_end+0xfffe7198>
   4e374:	a8800217 	ldw	r2,8(r21)
   4e378:	b0800415 	stw	r2,16(r22)
   4e37c:	a8800317 	ldw	r2,12(r21)
   4e380:	b0800515 	stw	r2,20(r22)
   4e384:	31000726 	beq	r6,r4,4e3a4 <_realloc_r+0x548>
   4e388:	b0800604 	addi	r2,r22,24
   4e38c:	ad400404 	addi	r21,r21,16
   4e390:	003fbb06 	br	4e280 <__alt_data_end+0xfffe7180>
   4e394:	a009883a 	mov	r4,r20
   4e398:	00517940 	call	51794 <__malloc_unlock>
   4e39c:	0005883a 	mov	r2,zero
   4e3a0:	003f0a06 	br	4dfcc <__alt_data_end+0xfffe6ecc>
   4e3a4:	a8c00417 	ldw	r3,16(r21)
   4e3a8:	ad400604 	addi	r21,r21,24
   4e3ac:	b0800804 	addi	r2,r22,32
   4e3b0:	b0c00615 	stw	r3,24(r22)
   4e3b4:	a8ffff17 	ldw	r3,-4(r21)
   4e3b8:	b0c00715 	stw	r3,28(r22)
   4e3bc:	003fb006 	br	4e280 <__alt_data_end+0xfffe7180>

0004e3c0 <_sbrk_r>:
   4e3c0:	defffd04 	addi	sp,sp,-12
   4e3c4:	dc000015 	stw	r16,0(sp)
   4e3c8:	040001b4 	movhi	r16,6
   4e3cc:	dc400115 	stw	r17,4(sp)
   4e3d0:	84255704 	addi	r16,r16,-27300
   4e3d4:	2023883a 	mov	r17,r4
   4e3d8:	2809883a 	mov	r4,r5
   4e3dc:	dfc00215 	stw	ra,8(sp)
   4e3e0:	80000015 	stw	zero,0(r16)
   4e3e4:	00519540 	call	51954 <sbrk>
   4e3e8:	00ffffc4 	movi	r3,-1
   4e3ec:	10c00526 	beq	r2,r3,4e404 <_sbrk_r+0x44>
   4e3f0:	dfc00217 	ldw	ra,8(sp)
   4e3f4:	dc400117 	ldw	r17,4(sp)
   4e3f8:	dc000017 	ldw	r16,0(sp)
   4e3fc:	dec00304 	addi	sp,sp,12
   4e400:	f800283a 	ret
   4e404:	80c00017 	ldw	r3,0(r16)
   4e408:	183ff926 	beq	r3,zero,4e3f0 <__alt_data_end+0xfffe72f0>
   4e40c:	88c00015 	stw	r3,0(r17)
   4e410:	003ff706 	br	4e3f0 <__alt_data_end+0xfffe72f0>

0004e414 <__sread>:
   4e414:	defffe04 	addi	sp,sp,-8
   4e418:	dc000015 	stw	r16,0(sp)
   4e41c:	2821883a 	mov	r16,r5
   4e420:	2940038f 	ldh	r5,14(r5)
   4e424:	dfc00115 	stw	ra,4(sp)
   4e428:	00502080 	call	50208 <_read_r>
   4e42c:	10000716 	blt	r2,zero,4e44c <__sread+0x38>
   4e430:	80c01417 	ldw	r3,80(r16)
   4e434:	1887883a 	add	r3,r3,r2
   4e438:	80c01415 	stw	r3,80(r16)
   4e43c:	dfc00117 	ldw	ra,4(sp)
   4e440:	dc000017 	ldw	r16,0(sp)
   4e444:	dec00204 	addi	sp,sp,8
   4e448:	f800283a 	ret
   4e44c:	80c0030b 	ldhu	r3,12(r16)
   4e450:	18fbffcc 	andi	r3,r3,61439
   4e454:	80c0030d 	sth	r3,12(r16)
   4e458:	dfc00117 	ldw	ra,4(sp)
   4e45c:	dc000017 	ldw	r16,0(sp)
   4e460:	dec00204 	addi	sp,sp,8
   4e464:	f800283a 	ret

0004e468 <__seofread>:
   4e468:	0005883a 	mov	r2,zero
   4e46c:	f800283a 	ret

0004e470 <__swrite>:
   4e470:	2880030b 	ldhu	r2,12(r5)
   4e474:	defffb04 	addi	sp,sp,-20
   4e478:	dcc00315 	stw	r19,12(sp)
   4e47c:	dc800215 	stw	r18,8(sp)
   4e480:	dc400115 	stw	r17,4(sp)
   4e484:	dc000015 	stw	r16,0(sp)
   4e488:	dfc00415 	stw	ra,16(sp)
   4e48c:	10c0400c 	andi	r3,r2,256
   4e490:	2821883a 	mov	r16,r5
   4e494:	2023883a 	mov	r17,r4
   4e498:	3025883a 	mov	r18,r6
   4e49c:	3827883a 	mov	r19,r7
   4e4a0:	18000526 	beq	r3,zero,4e4b8 <__swrite+0x48>
   4e4a4:	2940038f 	ldh	r5,14(r5)
   4e4a8:	01c00084 	movi	r7,2
   4e4ac:	000d883a 	mov	r6,zero
   4e4b0:	00501a80 	call	501a8 <_lseek_r>
   4e4b4:	8080030b 	ldhu	r2,12(r16)
   4e4b8:	8140038f 	ldh	r5,14(r16)
   4e4bc:	10bbffcc 	andi	r2,r2,61439
   4e4c0:	980f883a 	mov	r7,r19
   4e4c4:	900d883a 	mov	r6,r18
   4e4c8:	8809883a 	mov	r4,r17
   4e4cc:	8080030d 	sth	r2,12(r16)
   4e4d0:	dfc00417 	ldw	ra,16(sp)
   4e4d4:	dcc00317 	ldw	r19,12(sp)
   4e4d8:	dc800217 	ldw	r18,8(sp)
   4e4dc:	dc400117 	ldw	r17,4(sp)
   4e4e0:	dc000017 	ldw	r16,0(sp)
   4e4e4:	dec00504 	addi	sp,sp,20
   4e4e8:	004fc741 	jmpi	4fc74 <_write_r>

0004e4ec <__sseek>:
   4e4ec:	defffe04 	addi	sp,sp,-8
   4e4f0:	dc000015 	stw	r16,0(sp)
   4e4f4:	2821883a 	mov	r16,r5
   4e4f8:	2940038f 	ldh	r5,14(r5)
   4e4fc:	dfc00115 	stw	ra,4(sp)
   4e500:	00501a80 	call	501a8 <_lseek_r>
   4e504:	00ffffc4 	movi	r3,-1
   4e508:	10c00826 	beq	r2,r3,4e52c <__sseek+0x40>
   4e50c:	80c0030b 	ldhu	r3,12(r16)
   4e510:	80801415 	stw	r2,80(r16)
   4e514:	18c40014 	ori	r3,r3,4096
   4e518:	80c0030d 	sth	r3,12(r16)
   4e51c:	dfc00117 	ldw	ra,4(sp)
   4e520:	dc000017 	ldw	r16,0(sp)
   4e524:	dec00204 	addi	sp,sp,8
   4e528:	f800283a 	ret
   4e52c:	80c0030b 	ldhu	r3,12(r16)
   4e530:	18fbffcc 	andi	r3,r3,61439
   4e534:	80c0030d 	sth	r3,12(r16)
   4e538:	dfc00117 	ldw	ra,4(sp)
   4e53c:	dc000017 	ldw	r16,0(sp)
   4e540:	dec00204 	addi	sp,sp,8
   4e544:	f800283a 	ret

0004e548 <__sclose>:
   4e548:	2940038f 	ldh	r5,14(r5)
   4e54c:	004fcd41 	jmpi	4fcd4 <_close_r>

0004e550 <strcmp>:
   4e550:	2144b03a 	or	r2,r4,r5
   4e554:	108000cc 	andi	r2,r2,3
   4e558:	1000171e 	bne	r2,zero,4e5b8 <strcmp+0x68>
   4e55c:	20800017 	ldw	r2,0(r4)
   4e560:	28c00017 	ldw	r3,0(r5)
   4e564:	10c0141e 	bne	r2,r3,4e5b8 <strcmp+0x68>
   4e568:	027fbff4 	movhi	r9,65279
   4e56c:	4a7fbfc4 	addi	r9,r9,-257
   4e570:	0086303a 	nor	r3,zero,r2
   4e574:	02202074 	movhi	r8,32897
   4e578:	1245883a 	add	r2,r2,r9
   4e57c:	42202004 	addi	r8,r8,-32640
   4e580:	10c4703a 	and	r2,r2,r3
   4e584:	1204703a 	and	r2,r2,r8
   4e588:	10000226 	beq	r2,zero,4e594 <strcmp+0x44>
   4e58c:	00002306 	br	4e61c <strcmp+0xcc>
   4e590:	1000221e 	bne	r2,zero,4e61c <strcmp+0xcc>
   4e594:	21000104 	addi	r4,r4,4
   4e598:	20c00017 	ldw	r3,0(r4)
   4e59c:	29400104 	addi	r5,r5,4
   4e5a0:	29800017 	ldw	r6,0(r5)
   4e5a4:	1a4f883a 	add	r7,r3,r9
   4e5a8:	00c4303a 	nor	r2,zero,r3
   4e5ac:	3884703a 	and	r2,r7,r2
   4e5b0:	1204703a 	and	r2,r2,r8
   4e5b4:	19bff626 	beq	r3,r6,4e590 <__alt_data_end+0xfffe7490>
   4e5b8:	20800003 	ldbu	r2,0(r4)
   4e5bc:	10c03fcc 	andi	r3,r2,255
   4e5c0:	18c0201c 	xori	r3,r3,128
   4e5c4:	18ffe004 	addi	r3,r3,-128
   4e5c8:	18000c26 	beq	r3,zero,4e5fc <strcmp+0xac>
   4e5cc:	29800007 	ldb	r6,0(r5)
   4e5d0:	19800326 	beq	r3,r6,4e5e0 <strcmp+0x90>
   4e5d4:	00001306 	br	4e624 <strcmp+0xd4>
   4e5d8:	29800007 	ldb	r6,0(r5)
   4e5dc:	11800b1e 	bne	r2,r6,4e60c <strcmp+0xbc>
   4e5e0:	21000044 	addi	r4,r4,1
   4e5e4:	20c00003 	ldbu	r3,0(r4)
   4e5e8:	29400044 	addi	r5,r5,1
   4e5ec:	18803fcc 	andi	r2,r3,255
   4e5f0:	1080201c 	xori	r2,r2,128
   4e5f4:	10bfe004 	addi	r2,r2,-128
   4e5f8:	103ff71e 	bne	r2,zero,4e5d8 <__alt_data_end+0xfffe74d8>
   4e5fc:	0007883a 	mov	r3,zero
   4e600:	28800003 	ldbu	r2,0(r5)
   4e604:	1885c83a 	sub	r2,r3,r2
   4e608:	f800283a 	ret
   4e60c:	28800003 	ldbu	r2,0(r5)
   4e610:	18c03fcc 	andi	r3,r3,255
   4e614:	1885c83a 	sub	r2,r3,r2
   4e618:	f800283a 	ret
   4e61c:	0005883a 	mov	r2,zero
   4e620:	f800283a 	ret
   4e624:	10c03fcc 	andi	r3,r2,255
   4e628:	003ff506 	br	4e600 <__alt_data_end+0xfffe7500>

0004e62c <__sprint_r.part.0>:
   4e62c:	28801917 	ldw	r2,100(r5)
   4e630:	defff604 	addi	sp,sp,-40
   4e634:	dd400515 	stw	r21,20(sp)
   4e638:	dfc00915 	stw	ra,36(sp)
   4e63c:	df000815 	stw	fp,32(sp)
   4e640:	ddc00715 	stw	r23,28(sp)
   4e644:	dd800615 	stw	r22,24(sp)
   4e648:	dd000415 	stw	r20,16(sp)
   4e64c:	dcc00315 	stw	r19,12(sp)
   4e650:	dc800215 	stw	r18,8(sp)
   4e654:	dc400115 	stw	r17,4(sp)
   4e658:	dc000015 	stw	r16,0(sp)
   4e65c:	1088000c 	andi	r2,r2,8192
   4e660:	302b883a 	mov	r21,r6
   4e664:	10002e26 	beq	r2,zero,4e720 <__sprint_r.part.0+0xf4>
   4e668:	30800217 	ldw	r2,8(r6)
   4e66c:	35800017 	ldw	r22,0(r6)
   4e670:	10002926 	beq	r2,zero,4e718 <__sprint_r.part.0+0xec>
   4e674:	2827883a 	mov	r19,r5
   4e678:	2029883a 	mov	r20,r4
   4e67c:	b5c00104 	addi	r23,r22,4
   4e680:	04bfffc4 	movi	r18,-1
   4e684:	bc400017 	ldw	r17,0(r23)
   4e688:	b4000017 	ldw	r16,0(r22)
   4e68c:	0039883a 	mov	fp,zero
   4e690:	8822d0ba 	srli	r17,r17,2
   4e694:	8800031e 	bne	r17,zero,4e6a4 <__sprint_r.part.0+0x78>
   4e698:	00001806 	br	4e6fc <__sprint_r.part.0+0xd0>
   4e69c:	84000104 	addi	r16,r16,4
   4e6a0:	8f001526 	beq	r17,fp,4e6f8 <__sprint_r.part.0+0xcc>
   4e6a4:	81400017 	ldw	r5,0(r16)
   4e6a8:	980d883a 	mov	r6,r19
   4e6ac:	a009883a 	mov	r4,r20
   4e6b0:	00500540 	call	50054 <_fputwc_r>
   4e6b4:	e7000044 	addi	fp,fp,1
   4e6b8:	14bff81e 	bne	r2,r18,4e69c <__alt_data_end+0xfffe759c>
   4e6bc:	9005883a 	mov	r2,r18
   4e6c0:	a8000215 	stw	zero,8(r21)
   4e6c4:	a8000115 	stw	zero,4(r21)
   4e6c8:	dfc00917 	ldw	ra,36(sp)
   4e6cc:	df000817 	ldw	fp,32(sp)
   4e6d0:	ddc00717 	ldw	r23,28(sp)
   4e6d4:	dd800617 	ldw	r22,24(sp)
   4e6d8:	dd400517 	ldw	r21,20(sp)
   4e6dc:	dd000417 	ldw	r20,16(sp)
   4e6e0:	dcc00317 	ldw	r19,12(sp)
   4e6e4:	dc800217 	ldw	r18,8(sp)
   4e6e8:	dc400117 	ldw	r17,4(sp)
   4e6ec:	dc000017 	ldw	r16,0(sp)
   4e6f0:	dec00a04 	addi	sp,sp,40
   4e6f4:	f800283a 	ret
   4e6f8:	a8800217 	ldw	r2,8(r21)
   4e6fc:	8c63883a 	add	r17,r17,r17
   4e700:	8c63883a 	add	r17,r17,r17
   4e704:	1445c83a 	sub	r2,r2,r17
   4e708:	a8800215 	stw	r2,8(r21)
   4e70c:	b5800204 	addi	r22,r22,8
   4e710:	bdc00204 	addi	r23,r23,8
   4e714:	103fdb1e 	bne	r2,zero,4e684 <__alt_data_end+0xfffe7584>
   4e718:	0005883a 	mov	r2,zero
   4e71c:	003fe806 	br	4e6c0 <__alt_data_end+0xfffe75c0>
   4e720:	004b8c80 	call	4b8c8 <__sfvwrite_r>
   4e724:	003fe606 	br	4e6c0 <__alt_data_end+0xfffe75c0>

0004e728 <__sprint_r>:
   4e728:	30c00217 	ldw	r3,8(r6)
   4e72c:	18000126 	beq	r3,zero,4e734 <__sprint_r+0xc>
   4e730:	004e62c1 	jmpi	4e62c <__sprint_r.part.0>
   4e734:	30000115 	stw	zero,4(r6)
   4e738:	0005883a 	mov	r2,zero
   4e73c:	f800283a 	ret

0004e740 <___vfiprintf_internal_r>:
   4e740:	deffc904 	addi	sp,sp,-220
   4e744:	df003515 	stw	fp,212(sp)
   4e748:	dd003115 	stw	r20,196(sp)
   4e74c:	dfc03615 	stw	ra,216(sp)
   4e750:	ddc03415 	stw	r23,208(sp)
   4e754:	dd803315 	stw	r22,204(sp)
   4e758:	dd403215 	stw	r21,200(sp)
   4e75c:	dcc03015 	stw	r19,192(sp)
   4e760:	dc802f15 	stw	r18,188(sp)
   4e764:	dc402e15 	stw	r17,184(sp)
   4e768:	dc002d15 	stw	r16,180(sp)
   4e76c:	d9002015 	stw	r4,128(sp)
   4e770:	d9c02215 	stw	r7,136(sp)
   4e774:	2829883a 	mov	r20,r5
   4e778:	3039883a 	mov	fp,r6
   4e77c:	20000226 	beq	r4,zero,4e788 <___vfiprintf_internal_r+0x48>
   4e780:	20800e17 	ldw	r2,56(r4)
   4e784:	1000cf26 	beq	r2,zero,4eac4 <___vfiprintf_internal_r+0x384>
   4e788:	a080030b 	ldhu	r2,12(r20)
   4e78c:	10c8000c 	andi	r3,r2,8192
   4e790:	1800061e 	bne	r3,zero,4e7ac <___vfiprintf_internal_r+0x6c>
   4e794:	a1001917 	ldw	r4,100(r20)
   4e798:	00f7ffc4 	movi	r3,-8193
   4e79c:	10880014 	ori	r2,r2,8192
   4e7a0:	20c6703a 	and	r3,r4,r3
   4e7a4:	a080030d 	sth	r2,12(r20)
   4e7a8:	a0c01915 	stw	r3,100(r20)
   4e7ac:	10c0020c 	andi	r3,r2,8
   4e7b0:	1800a926 	beq	r3,zero,4ea58 <___vfiprintf_internal_r+0x318>
   4e7b4:	a0c00417 	ldw	r3,16(r20)
   4e7b8:	1800a726 	beq	r3,zero,4ea58 <___vfiprintf_internal_r+0x318>
   4e7bc:	1080068c 	andi	r2,r2,26
   4e7c0:	00c00284 	movi	r3,10
   4e7c4:	10c0ac26 	beq	r2,r3,4ea78 <___vfiprintf_internal_r+0x338>
   4e7c8:	da801a04 	addi	r10,sp,104
   4e7cc:	da801e15 	stw	r10,120(sp)
   4e7d0:	d8801e17 	ldw	r2,120(sp)
   4e7d4:	da8019c4 	addi	r10,sp,103
   4e7d8:	05800174 	movhi	r22,5
   4e7dc:	05c00174 	movhi	r23,5
   4e7e0:	da801f15 	stw	r10,124(sp)
   4e7e4:	1295c83a 	sub	r10,r2,r10
   4e7e8:	b5979704 	addi	r22,r22,24156
   4e7ec:	bdd79304 	addi	r23,r23,24140
   4e7f0:	dec01a15 	stw	sp,104(sp)
   4e7f4:	d8001c15 	stw	zero,112(sp)
   4e7f8:	d8001b15 	stw	zero,108(sp)
   4e7fc:	d8002615 	stw	zero,152(sp)
   4e800:	d8002315 	stw	zero,140(sp)
   4e804:	da802715 	stw	r10,156(sp)
   4e808:	d811883a 	mov	r8,sp
   4e80c:	dd002115 	stw	r20,132(sp)
   4e810:	e021883a 	mov	r16,fp
   4e814:	80800007 	ldb	r2,0(r16)
   4e818:	1003ea26 	beq	r2,zero,4f7c4 <___vfiprintf_internal_r+0x1084>
   4e81c:	00c00944 	movi	r3,37
   4e820:	8025883a 	mov	r18,r16
   4e824:	10c0021e 	bne	r2,r3,4e830 <___vfiprintf_internal_r+0xf0>
   4e828:	00001606 	br	4e884 <___vfiprintf_internal_r+0x144>
   4e82c:	10c00326 	beq	r2,r3,4e83c <___vfiprintf_internal_r+0xfc>
   4e830:	94800044 	addi	r18,r18,1
   4e834:	90800007 	ldb	r2,0(r18)
   4e838:	103ffc1e 	bne	r2,zero,4e82c <__alt_data_end+0xfffe772c>
   4e83c:	9423c83a 	sub	r17,r18,r16
   4e840:	88001026 	beq	r17,zero,4e884 <___vfiprintf_internal_r+0x144>
   4e844:	d8c01c17 	ldw	r3,112(sp)
   4e848:	d8801b17 	ldw	r2,108(sp)
   4e84c:	44000015 	stw	r16,0(r8)
   4e850:	88c7883a 	add	r3,r17,r3
   4e854:	10800044 	addi	r2,r2,1
   4e858:	44400115 	stw	r17,4(r8)
   4e85c:	d8c01c15 	stw	r3,112(sp)
   4e860:	d8801b15 	stw	r2,108(sp)
   4e864:	010001c4 	movi	r4,7
   4e868:	2080760e 	bge	r4,r2,4ea44 <___vfiprintf_internal_r+0x304>
   4e86c:	1803821e 	bne	r3,zero,4f678 <___vfiprintf_internal_r+0xf38>
   4e870:	da802317 	ldw	r10,140(sp)
   4e874:	d8001b15 	stw	zero,108(sp)
   4e878:	d811883a 	mov	r8,sp
   4e87c:	5455883a 	add	r10,r10,r17
   4e880:	da802315 	stw	r10,140(sp)
   4e884:	90800007 	ldb	r2,0(r18)
   4e888:	10044626 	beq	r2,zero,4f9a4 <___vfiprintf_internal_r+0x1264>
   4e88c:	90c00047 	ldb	r3,1(r18)
   4e890:	94000044 	addi	r16,r18,1
   4e894:	d8001d85 	stb	zero,118(sp)
   4e898:	0009883a 	mov	r4,zero
   4e89c:	000f883a 	mov	r7,zero
   4e8a0:	027fffc4 	movi	r9,-1
   4e8a4:	0023883a 	mov	r17,zero
   4e8a8:	0029883a 	mov	r20,zero
   4e8ac:	01401604 	movi	r5,88
   4e8b0:	01800244 	movi	r6,9
   4e8b4:	03400a84 	movi	r13,42
   4e8b8:	03001b04 	movi	r12,108
   4e8bc:	84000044 	addi	r16,r16,1
   4e8c0:	18bff804 	addi	r2,r3,-32
   4e8c4:	28827336 	bltu	r5,r2,4f294 <___vfiprintf_internal_r+0xb54>
   4e8c8:	100490ba 	slli	r2,r2,2
   4e8cc:	02800174 	movhi	r10,5
   4e8d0:	52ba3804 	addi	r10,r10,-5920
   4e8d4:	1285883a 	add	r2,r2,r10
   4e8d8:	10800017 	ldw	r2,0(r2)
   4e8dc:	1000683a 	jmp	r2
   4e8e0:	0004efc8 	cmpgei	zero,zero,5055
   4e8e4:	0004f294 	movui	zero,5066
   4e8e8:	0004f294 	movui	zero,5066
   4e8ec:	0004efe8 	cmpgeui	zero,zero,5055
   4e8f0:	0004f294 	movui	zero,5066
   4e8f4:	0004f294 	movui	zero,5066
   4e8f8:	0004f294 	movui	zero,5066
   4e8fc:	0004f294 	movui	zero,5066
   4e900:	0004f294 	movui	zero,5066
   4e904:	0004f294 	movui	zero,5066
   4e908:	0004f1d0 	cmplti	zero,zero,5063
   4e90c:	0004f1ec 	andhi	zero,zero,5063
   4e910:	0004f294 	movui	zero,5066
   4e914:	0004ead4 	movui	zero,5035
   4e918:	0004f1fc 	xorhi	zero,zero,5063
   4e91c:	0004f294 	movui	zero,5066
   4e920:	0004eff4 	movhi	zero,5055
   4e924:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e928:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e92c:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e930:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e934:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e938:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e93c:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e940:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e944:	0004f000 	call	4f00 <__alt_mem_onchip_memory2-0x3b100>
   4e948:	0004f294 	movui	zero,5066
   4e94c:	0004f294 	movui	zero,5066
   4e950:	0004f294 	movui	zero,5066
   4e954:	0004f294 	movui	zero,5066
   4e958:	0004f294 	movui	zero,5066
   4e95c:	0004f294 	movui	zero,5066
   4e960:	0004f294 	movui	zero,5066
   4e964:	0004f294 	movui	zero,5066
   4e968:	0004f294 	movui	zero,5066
   4e96c:	0004f294 	movui	zero,5066
   4e970:	0004f02c 	andhi	zero,zero,5056
   4e974:	0004f294 	movui	zero,5066
   4e978:	0004f294 	movui	zero,5066
   4e97c:	0004f294 	movui	zero,5066
   4e980:	0004f294 	movui	zero,5066
   4e984:	0004f294 	movui	zero,5066
   4e988:	0004f294 	movui	zero,5066
   4e98c:	0004f294 	movui	zero,5066
   4e990:	0004f294 	movui	zero,5066
   4e994:	0004f294 	movui	zero,5066
   4e998:	0004f294 	movui	zero,5066
   4e99c:	0004f064 	muli	zero,zero,5057
   4e9a0:	0004f294 	movui	zero,5066
   4e9a4:	0004f294 	movui	zero,5066
   4e9a8:	0004f294 	movui	zero,5066
   4e9ac:	0004f294 	movui	zero,5066
   4e9b0:	0004f294 	movui	zero,5066
   4e9b4:	0004f0bc 	xorhi	zero,zero,5058
   4e9b8:	0004f294 	movui	zero,5066
   4e9bc:	0004f294 	movui	zero,5066
   4e9c0:	0004f12c 	andhi	zero,zero,5060
   4e9c4:	0004f294 	movui	zero,5066
   4e9c8:	0004f294 	movui	zero,5066
   4e9cc:	0004f294 	movui	zero,5066
   4e9d0:	0004f294 	movui	zero,5066
   4e9d4:	0004f294 	movui	zero,5066
   4e9d8:	0004f294 	movui	zero,5066
   4e9dc:	0004f294 	movui	zero,5066
   4e9e0:	0004f294 	movui	zero,5066
   4e9e4:	0004f294 	movui	zero,5066
   4e9e8:	0004f294 	movui	zero,5066
   4e9ec:	0004eed8 	cmpnei	zero,zero,5051
   4e9f0:	0004ef04 	movi	zero,5052
   4e9f4:	0004f294 	movui	zero,5066
   4e9f8:	0004f294 	movui	zero,5066
   4e9fc:	0004f294 	movui	zero,5066
   4ea00:	0004f23c 	xorhi	zero,zero,5064
   4ea04:	0004ef04 	movi	zero,5052
   4ea08:	0004f294 	movui	zero,5066
   4ea0c:	0004f294 	movui	zero,5066
   4ea10:	0004ed98 	cmpnei	zero,zero,5046
   4ea14:	0004f294 	movui	zero,5066
   4ea18:	0004eda8 	cmpgeui	zero,zero,5046
   4ea1c:	0004ede4 	muli	zero,zero,5047
   4ea20:	0004eae0 	cmpeqi	zero,zero,5035
   4ea24:	0004ed8c 	andi	zero,zero,5046
   4ea28:	0004f294 	movui	zero,5066
   4ea2c:	0004f168 	cmpgeui	zero,zero,5061
   4ea30:	0004f294 	movui	zero,5066
   4ea34:	0004f1c0 	call	4f1c <__alt_mem_onchip_memory2-0x3b0e4>
   4ea38:	0004f294 	movui	zero,5066
   4ea3c:	0004f294 	movui	zero,5066
   4ea40:	0004ee84 	movi	zero,5050
   4ea44:	42000204 	addi	r8,r8,8
   4ea48:	da802317 	ldw	r10,140(sp)
   4ea4c:	5455883a 	add	r10,r10,r17
   4ea50:	da802315 	stw	r10,140(sp)
   4ea54:	003f8b06 	br	4e884 <__alt_data_end+0xfffe7784>
   4ea58:	d9002017 	ldw	r4,128(sp)
   4ea5c:	a00b883a 	mov	r5,r20
   4ea60:	00494700 	call	49470 <__swsetup_r>
   4ea64:	1003b11e 	bne	r2,zero,4f92c <___vfiprintf_internal_r+0x11ec>
   4ea68:	a080030b 	ldhu	r2,12(r20)
   4ea6c:	00c00284 	movi	r3,10
   4ea70:	1080068c 	andi	r2,r2,26
   4ea74:	10ff541e 	bne	r2,r3,4e7c8 <__alt_data_end+0xfffe76c8>
   4ea78:	a080038f 	ldh	r2,14(r20)
   4ea7c:	103f5216 	blt	r2,zero,4e7c8 <__alt_data_end+0xfffe76c8>
   4ea80:	d9c02217 	ldw	r7,136(sp)
   4ea84:	d9002017 	ldw	r4,128(sp)
   4ea88:	e00d883a 	mov	r6,fp
   4ea8c:	a00b883a 	mov	r5,r20
   4ea90:	004fbb80 	call	4fbb8 <__sbprintf>
   4ea94:	dfc03617 	ldw	ra,216(sp)
   4ea98:	df003517 	ldw	fp,212(sp)
   4ea9c:	ddc03417 	ldw	r23,208(sp)
   4eaa0:	dd803317 	ldw	r22,204(sp)
   4eaa4:	dd403217 	ldw	r21,200(sp)
   4eaa8:	dd003117 	ldw	r20,196(sp)
   4eaac:	dcc03017 	ldw	r19,192(sp)
   4eab0:	dc802f17 	ldw	r18,188(sp)
   4eab4:	dc402e17 	ldw	r17,184(sp)
   4eab8:	dc002d17 	ldw	r16,180(sp)
   4eabc:	dec03704 	addi	sp,sp,220
   4eac0:	f800283a 	ret
   4eac4:	004b4440 	call	4b444 <__sinit>
   4eac8:	003f2f06 	br	4e788 <__alt_data_end+0xfffe7688>
   4eacc:	0463c83a 	sub	r17,zero,r17
   4ead0:	d8802215 	stw	r2,136(sp)
   4ead4:	a5000114 	ori	r20,r20,4
   4ead8:	80c00007 	ldb	r3,0(r16)
   4eadc:	003f7706 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4eae0:	00800c04 	movi	r2,48
   4eae4:	da802217 	ldw	r10,136(sp)
   4eae8:	d8801d05 	stb	r2,116(sp)
   4eaec:	00801e04 	movi	r2,120
   4eaf0:	d8801d45 	stb	r2,117(sp)
   4eaf4:	d8001d85 	stb	zero,118(sp)
   4eaf8:	50c00104 	addi	r3,r10,4
   4eafc:	54800017 	ldw	r18,0(r10)
   4eb00:	0027883a 	mov	r19,zero
   4eb04:	a0800094 	ori	r2,r20,2
   4eb08:	48030b16 	blt	r9,zero,4f738 <___vfiprintf_internal_r+0xff8>
   4eb0c:	00bfdfc4 	movi	r2,-129
   4eb10:	a096703a 	and	r11,r20,r2
   4eb14:	d8c02215 	stw	r3,136(sp)
   4eb18:	5d000094 	ori	r20,r11,2
   4eb1c:	90032b1e 	bne	r18,zero,4f7cc <___vfiprintf_internal_r+0x108c>
   4eb20:	00800174 	movhi	r2,5
   4eb24:	10973304 	addi	r2,r2,23756
   4eb28:	d8802615 	stw	r2,152(sp)
   4eb2c:	0039883a 	mov	fp,zero
   4eb30:	48017b1e 	bne	r9,zero,4f120 <___vfiprintf_internal_r+0x9e0>
   4eb34:	0013883a 	mov	r9,zero
   4eb38:	0027883a 	mov	r19,zero
   4eb3c:	dd401a04 	addi	r21,sp,104
   4eb40:	4825883a 	mov	r18,r9
   4eb44:	4cc0010e 	bge	r9,r19,4eb4c <___vfiprintf_internal_r+0x40c>
   4eb48:	9825883a 	mov	r18,r19
   4eb4c:	e7003fcc 	andi	fp,fp,255
   4eb50:	e700201c 	xori	fp,fp,128
   4eb54:	e73fe004 	addi	fp,fp,-128
   4eb58:	e0000126 	beq	fp,zero,4eb60 <___vfiprintf_internal_r+0x420>
   4eb5c:	94800044 	addi	r18,r18,1
   4eb60:	a380008c 	andi	r14,r20,2
   4eb64:	70000126 	beq	r14,zero,4eb6c <___vfiprintf_internal_r+0x42c>
   4eb68:	94800084 	addi	r18,r18,2
   4eb6c:	a700210c 	andi	fp,r20,132
   4eb70:	e001df1e 	bne	fp,zero,4f2f0 <___vfiprintf_internal_r+0xbb0>
   4eb74:	8c87c83a 	sub	r3,r17,r18
   4eb78:	00c1dd0e 	bge	zero,r3,4f2f0 <___vfiprintf_internal_r+0xbb0>
   4eb7c:	01c00404 	movi	r7,16
   4eb80:	d8801c17 	ldw	r2,112(sp)
   4eb84:	38c3ad0e 	bge	r7,r3,4fa3c <___vfiprintf_internal_r+0x12fc>
   4eb88:	02800174 	movhi	r10,5
   4eb8c:	52979704 	addi	r10,r10,24156
   4eb90:	dc002915 	stw	r16,164(sp)
   4eb94:	d9801b17 	ldw	r6,108(sp)
   4eb98:	da802415 	stw	r10,144(sp)
   4eb9c:	03c001c4 	movi	r15,7
   4eba0:	da402515 	stw	r9,148(sp)
   4eba4:	db802815 	stw	r14,160(sp)
   4eba8:	1821883a 	mov	r16,r3
   4ebac:	00000506 	br	4ebc4 <___vfiprintf_internal_r+0x484>
   4ebb0:	31400084 	addi	r5,r6,2
   4ebb4:	42000204 	addi	r8,r8,8
   4ebb8:	200d883a 	mov	r6,r4
   4ebbc:	843ffc04 	addi	r16,r16,-16
   4ebc0:	3c000d0e 	bge	r7,r16,4ebf8 <___vfiprintf_internal_r+0x4b8>
   4ebc4:	10800404 	addi	r2,r2,16
   4ebc8:	31000044 	addi	r4,r6,1
   4ebcc:	45800015 	stw	r22,0(r8)
   4ebd0:	41c00115 	stw	r7,4(r8)
   4ebd4:	d8801c15 	stw	r2,112(sp)
   4ebd8:	d9001b15 	stw	r4,108(sp)
   4ebdc:	793ff40e 	bge	r15,r4,4ebb0 <__alt_data_end+0xfffe7ab0>
   4ebe0:	1001b51e 	bne	r2,zero,4f2b8 <___vfiprintf_internal_r+0xb78>
   4ebe4:	843ffc04 	addi	r16,r16,-16
   4ebe8:	000d883a 	mov	r6,zero
   4ebec:	01400044 	movi	r5,1
   4ebf0:	d811883a 	mov	r8,sp
   4ebf4:	3c3ff316 	blt	r7,r16,4ebc4 <__alt_data_end+0xfffe7ac4>
   4ebf8:	8007883a 	mov	r3,r16
   4ebfc:	da402517 	ldw	r9,148(sp)
   4ec00:	db802817 	ldw	r14,160(sp)
   4ec04:	dc002917 	ldw	r16,164(sp)
   4ec08:	da802417 	ldw	r10,144(sp)
   4ec0c:	1885883a 	add	r2,r3,r2
   4ec10:	40c00115 	stw	r3,4(r8)
   4ec14:	42800015 	stw	r10,0(r8)
   4ec18:	d8801c15 	stw	r2,112(sp)
   4ec1c:	d9401b15 	stw	r5,108(sp)
   4ec20:	00c001c4 	movi	r3,7
   4ec24:	19426016 	blt	r3,r5,4f5a8 <___vfiprintf_internal_r+0xe68>
   4ec28:	d8c01d87 	ldb	r3,118(sp)
   4ec2c:	42000204 	addi	r8,r8,8
   4ec30:	29000044 	addi	r4,r5,1
   4ec34:	1801b31e 	bne	r3,zero,4f304 <___vfiprintf_internal_r+0xbc4>
   4ec38:	7001c026 	beq	r14,zero,4f33c <___vfiprintf_internal_r+0xbfc>
   4ec3c:	d8c01d04 	addi	r3,sp,116
   4ec40:	10800084 	addi	r2,r2,2
   4ec44:	40c00015 	stw	r3,0(r8)
   4ec48:	00c00084 	movi	r3,2
   4ec4c:	40c00115 	stw	r3,4(r8)
   4ec50:	d8801c15 	stw	r2,112(sp)
   4ec54:	d9001b15 	stw	r4,108(sp)
   4ec58:	00c001c4 	movi	r3,7
   4ec5c:	1902650e 	bge	r3,r4,4f5f4 <___vfiprintf_internal_r+0xeb4>
   4ec60:	10029a1e 	bne	r2,zero,4f6cc <___vfiprintf_internal_r+0xf8c>
   4ec64:	00c02004 	movi	r3,128
   4ec68:	01000044 	movi	r4,1
   4ec6c:	000b883a 	mov	r5,zero
   4ec70:	d811883a 	mov	r8,sp
   4ec74:	e0c1b31e 	bne	fp,r3,4f344 <___vfiprintf_internal_r+0xc04>
   4ec78:	8cb9c83a 	sub	fp,r17,r18
   4ec7c:	0701b10e 	bge	zero,fp,4f344 <___vfiprintf_internal_r+0xc04>
   4ec80:	01c00404 	movi	r7,16
   4ec84:	3f03890e 	bge	r7,fp,4faac <___vfiprintf_internal_r+0x136c>
   4ec88:	00c00174 	movhi	r3,5
   4ec8c:	18d79304 	addi	r3,r3,24140
   4ec90:	d8c02415 	stw	r3,144(sp)
   4ec94:	8007883a 	mov	r3,r16
   4ec98:	034001c4 	movi	r13,7
   4ec9c:	e021883a 	mov	r16,fp
   4eca0:	da402515 	stw	r9,148(sp)
   4eca4:	1839883a 	mov	fp,r3
   4eca8:	00000506 	br	4ecc0 <___vfiprintf_internal_r+0x580>
   4ecac:	29800084 	addi	r6,r5,2
   4ecb0:	42000204 	addi	r8,r8,8
   4ecb4:	180b883a 	mov	r5,r3
   4ecb8:	843ffc04 	addi	r16,r16,-16
   4ecbc:	3c000d0e 	bge	r7,r16,4ecf4 <___vfiprintf_internal_r+0x5b4>
   4ecc0:	10800404 	addi	r2,r2,16
   4ecc4:	28c00044 	addi	r3,r5,1
   4ecc8:	45c00015 	stw	r23,0(r8)
   4eccc:	41c00115 	stw	r7,4(r8)
   4ecd0:	d8801c15 	stw	r2,112(sp)
   4ecd4:	d8c01b15 	stw	r3,108(sp)
   4ecd8:	68fff40e 	bge	r13,r3,4ecac <__alt_data_end+0xfffe7bac>
   4ecdc:	1002241e 	bne	r2,zero,4f570 <___vfiprintf_internal_r+0xe30>
   4ece0:	843ffc04 	addi	r16,r16,-16
   4ece4:	01800044 	movi	r6,1
   4ece8:	000b883a 	mov	r5,zero
   4ecec:	d811883a 	mov	r8,sp
   4ecf0:	3c3ff316 	blt	r7,r16,4ecc0 <__alt_data_end+0xfffe7bc0>
   4ecf4:	da402517 	ldw	r9,148(sp)
   4ecf8:	e007883a 	mov	r3,fp
   4ecfc:	8039883a 	mov	fp,r16
   4ed00:	1821883a 	mov	r16,r3
   4ed04:	d8c02417 	ldw	r3,144(sp)
   4ed08:	1705883a 	add	r2,r2,fp
   4ed0c:	47000115 	stw	fp,4(r8)
   4ed10:	40c00015 	stw	r3,0(r8)
   4ed14:	d8801c15 	stw	r2,112(sp)
   4ed18:	d9801b15 	stw	r6,108(sp)
   4ed1c:	00c001c4 	movi	r3,7
   4ed20:	19827616 	blt	r3,r6,4f6fc <___vfiprintf_internal_r+0xfbc>
   4ed24:	4cf9c83a 	sub	fp,r9,r19
   4ed28:	42000204 	addi	r8,r8,8
   4ed2c:	31000044 	addi	r4,r6,1
   4ed30:	300b883a 	mov	r5,r6
   4ed34:	07018516 	blt	zero,fp,4f34c <___vfiprintf_internal_r+0xc0c>
   4ed38:	9885883a 	add	r2,r19,r2
   4ed3c:	45400015 	stw	r21,0(r8)
   4ed40:	44c00115 	stw	r19,4(r8)
   4ed44:	d8801c15 	stw	r2,112(sp)
   4ed48:	d9001b15 	stw	r4,108(sp)
   4ed4c:	00c001c4 	movi	r3,7
   4ed50:	1901dd0e 	bge	r3,r4,4f4c8 <___vfiprintf_internal_r+0xd88>
   4ed54:	1002401e 	bne	r2,zero,4f658 <___vfiprintf_internal_r+0xf18>
   4ed58:	d8001b15 	stw	zero,108(sp)
   4ed5c:	a2c0010c 	andi	r11,r20,4
   4ed60:	58000226 	beq	r11,zero,4ed6c <___vfiprintf_internal_r+0x62c>
   4ed64:	8ca7c83a 	sub	r19,r17,r18
   4ed68:	04c2f216 	blt	zero,r19,4f934 <___vfiprintf_internal_r+0x11f4>
   4ed6c:	8c80010e 	bge	r17,r18,4ed74 <___vfiprintf_internal_r+0x634>
   4ed70:	9023883a 	mov	r17,r18
   4ed74:	da802317 	ldw	r10,140(sp)
   4ed78:	5455883a 	add	r10,r10,r17
   4ed7c:	da802315 	stw	r10,140(sp)
   4ed80:	d8001b15 	stw	zero,108(sp)
   4ed84:	d811883a 	mov	r8,sp
   4ed88:	003ea206 	br	4e814 <__alt_data_end+0xfffe7714>
   4ed8c:	a5000814 	ori	r20,r20,32
   4ed90:	80c00007 	ldb	r3,0(r16)
   4ed94:	003ec906 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4ed98:	80c00007 	ldb	r3,0(r16)
   4ed9c:	1b030926 	beq	r3,r12,4f9c4 <___vfiprintf_internal_r+0x1284>
   4eda0:	a5000414 	ori	r20,r20,16
   4eda4:	003ec506 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4eda8:	21003fcc 	andi	r4,r4,255
   4edac:	20035e1e 	bne	r4,zero,4fb28 <___vfiprintf_internal_r+0x13e8>
   4edb0:	a080080c 	andi	r2,r20,32
   4edb4:	1002a526 	beq	r2,zero,4f84c <___vfiprintf_internal_r+0x110c>
   4edb8:	da802217 	ldw	r10,136(sp)
   4edbc:	50800017 	ldw	r2,0(r10)
   4edc0:	da802317 	ldw	r10,140(sp)
   4edc4:	5007d7fa 	srai	r3,r10,31
   4edc8:	da802217 	ldw	r10,136(sp)
   4edcc:	10c00115 	stw	r3,4(r2)
   4edd0:	52800104 	addi	r10,r10,4
   4edd4:	da802215 	stw	r10,136(sp)
   4edd8:	da802317 	ldw	r10,140(sp)
   4eddc:	12800015 	stw	r10,0(r2)
   4ede0:	003e8c06 	br	4e814 <__alt_data_end+0xfffe7714>
   4ede4:	21003fcc 	andi	r4,r4,255
   4ede8:	2003511e 	bne	r4,zero,4fb30 <___vfiprintf_internal_r+0x13f0>
   4edec:	a080080c 	andi	r2,r20,32
   4edf0:	1000a126 	beq	r2,zero,4f078 <___vfiprintf_internal_r+0x938>
   4edf4:	da802217 	ldw	r10,136(sp)
   4edf8:	d8001d85 	stb	zero,118(sp)
   4edfc:	50800204 	addi	r2,r10,8
   4ee00:	54800017 	ldw	r18,0(r10)
   4ee04:	54c00117 	ldw	r19,4(r10)
   4ee08:	4802b416 	blt	r9,zero,4f8dc <___vfiprintf_internal_r+0x119c>
   4ee0c:	013fdfc4 	movi	r4,-129
   4ee10:	94c6b03a 	or	r3,r18,r19
   4ee14:	d8802215 	stw	r2,136(sp)
   4ee18:	a128703a 	and	r20,r20,r4
   4ee1c:	1800a226 	beq	r3,zero,4f0a8 <___vfiprintf_internal_r+0x968>
   4ee20:	0039883a 	mov	fp,zero
   4ee24:	dd401a04 	addi	r21,sp,104
   4ee28:	9006d0fa 	srli	r3,r18,3
   4ee2c:	9808977a 	slli	r4,r19,29
   4ee30:	9826d0fa 	srli	r19,r19,3
   4ee34:	948001cc 	andi	r18,r18,7
   4ee38:	90800c04 	addi	r2,r18,48
   4ee3c:	ad7fffc4 	addi	r21,r21,-1
   4ee40:	20e4b03a 	or	r18,r4,r3
   4ee44:	a8800005 	stb	r2,0(r21)
   4ee48:	94c6b03a 	or	r3,r18,r19
   4ee4c:	183ff61e 	bne	r3,zero,4ee28 <__alt_data_end+0xfffe7d28>
   4ee50:	a0c0004c 	andi	r3,r20,1
   4ee54:	18005926 	beq	r3,zero,4efbc <___vfiprintf_internal_r+0x87c>
   4ee58:	10803fcc 	andi	r2,r2,255
   4ee5c:	1080201c 	xori	r2,r2,128
   4ee60:	10bfe004 	addi	r2,r2,-128
   4ee64:	00c00c04 	movi	r3,48
   4ee68:	10c05426 	beq	r2,r3,4efbc <___vfiprintf_internal_r+0x87c>
   4ee6c:	da801e17 	ldw	r10,120(sp)
   4ee70:	a8bfffc4 	addi	r2,r21,-1
   4ee74:	a8ffffc5 	stb	r3,-1(r21)
   4ee78:	50a7c83a 	sub	r19,r10,r2
   4ee7c:	102b883a 	mov	r21,r2
   4ee80:	003f2f06 	br	4eb40 <__alt_data_end+0xfffe7a40>
   4ee84:	21003fcc 	andi	r4,r4,255
   4ee88:	2003421e 	bne	r4,zero,4fb94 <___vfiprintf_internal_r+0x1454>
   4ee8c:	00800174 	movhi	r2,5
   4ee90:	10973304 	addi	r2,r2,23756
   4ee94:	d8802615 	stw	r2,152(sp)
   4ee98:	a080080c 	andi	r2,r20,32
   4ee9c:	1000aa26 	beq	r2,zero,4f148 <___vfiprintf_internal_r+0xa08>
   4eea0:	da802217 	ldw	r10,136(sp)
   4eea4:	54800017 	ldw	r18,0(r10)
   4eea8:	54c00117 	ldw	r19,4(r10)
   4eeac:	52800204 	addi	r10,r10,8
   4eeb0:	da802215 	stw	r10,136(sp)
   4eeb4:	a080004c 	andi	r2,r20,1
   4eeb8:	1001d226 	beq	r2,zero,4f604 <___vfiprintf_internal_r+0xec4>
   4eebc:	94c4b03a 	or	r2,r18,r19
   4eec0:	1002351e 	bne	r2,zero,4f798 <___vfiprintf_internal_r+0x1058>
   4eec4:	d8001d85 	stb	zero,118(sp)
   4eec8:	48022216 	blt	r9,zero,4f754 <___vfiprintf_internal_r+0x1014>
   4eecc:	00bfdfc4 	movi	r2,-129
   4eed0:	a0a8703a 	and	r20,r20,r2
   4eed4:	003f1506 	br	4eb2c <__alt_data_end+0xfffe7a2c>
   4eed8:	da802217 	ldw	r10,136(sp)
   4eedc:	04800044 	movi	r18,1
   4eee0:	d8001d85 	stb	zero,118(sp)
   4eee4:	50800017 	ldw	r2,0(r10)
   4eee8:	52800104 	addi	r10,r10,4
   4eeec:	da802215 	stw	r10,136(sp)
   4eef0:	d8801005 	stb	r2,64(sp)
   4eef4:	9027883a 	mov	r19,r18
   4eef8:	dd401004 	addi	r21,sp,64
   4eefc:	0013883a 	mov	r9,zero
   4ef00:	003f1706 	br	4eb60 <__alt_data_end+0xfffe7a60>
   4ef04:	21003fcc 	andi	r4,r4,255
   4ef08:	2003201e 	bne	r4,zero,4fb8c <___vfiprintf_internal_r+0x144c>
   4ef0c:	a080080c 	andi	r2,r20,32
   4ef10:	10004b26 	beq	r2,zero,4f040 <___vfiprintf_internal_r+0x900>
   4ef14:	da802217 	ldw	r10,136(sp)
   4ef18:	50800117 	ldw	r2,4(r10)
   4ef1c:	54800017 	ldw	r18,0(r10)
   4ef20:	52800204 	addi	r10,r10,8
   4ef24:	da802215 	stw	r10,136(sp)
   4ef28:	1027883a 	mov	r19,r2
   4ef2c:	10022c16 	blt	r2,zero,4f7e0 <___vfiprintf_internal_r+0x10a0>
   4ef30:	df001d83 	ldbu	fp,118(sp)
   4ef34:	48007216 	blt	r9,zero,4f100 <___vfiprintf_internal_r+0x9c0>
   4ef38:	00ffdfc4 	movi	r3,-129
   4ef3c:	94c4b03a 	or	r2,r18,r19
   4ef40:	a0e8703a 	and	r20,r20,r3
   4ef44:	1000cc26 	beq	r2,zero,4f278 <___vfiprintf_internal_r+0xb38>
   4ef48:	98021026 	beq	r19,zero,4f78c <___vfiprintf_internal_r+0x104c>
   4ef4c:	dc402415 	stw	r17,144(sp)
   4ef50:	dc002515 	stw	r16,148(sp)
   4ef54:	9823883a 	mov	r17,r19
   4ef58:	9021883a 	mov	r16,r18
   4ef5c:	dd401a04 	addi	r21,sp,104
   4ef60:	4825883a 	mov	r18,r9
   4ef64:	4027883a 	mov	r19,r8
   4ef68:	8009883a 	mov	r4,r16
   4ef6c:	880b883a 	mov	r5,r17
   4ef70:	01800284 	movi	r6,10
   4ef74:	000f883a 	mov	r7,zero
   4ef78:	0050b200 	call	50b20 <__umoddi3>
   4ef7c:	10800c04 	addi	r2,r2,48
   4ef80:	ad7fffc4 	addi	r21,r21,-1
   4ef84:	8009883a 	mov	r4,r16
   4ef88:	880b883a 	mov	r5,r17
   4ef8c:	a8800005 	stb	r2,0(r21)
   4ef90:	01800284 	movi	r6,10
   4ef94:	000f883a 	mov	r7,zero
   4ef98:	00505a80 	call	505a8 <__udivdi3>
   4ef9c:	1021883a 	mov	r16,r2
   4efa0:	10c4b03a 	or	r2,r2,r3
   4efa4:	1823883a 	mov	r17,r3
   4efa8:	103fef1e 	bne	r2,zero,4ef68 <__alt_data_end+0xfffe7e68>
   4efac:	dc402417 	ldw	r17,144(sp)
   4efb0:	dc002517 	ldw	r16,148(sp)
   4efb4:	9013883a 	mov	r9,r18
   4efb8:	9811883a 	mov	r8,r19
   4efbc:	da801e17 	ldw	r10,120(sp)
   4efc0:	5567c83a 	sub	r19,r10,r21
   4efc4:	003ede06 	br	4eb40 <__alt_data_end+0xfffe7a40>
   4efc8:	38803fcc 	andi	r2,r7,255
   4efcc:	1080201c 	xori	r2,r2,128
   4efd0:	10bfe004 	addi	r2,r2,-128
   4efd4:	1002371e 	bne	r2,zero,4f8b4 <___vfiprintf_internal_r+0x1174>
   4efd8:	01000044 	movi	r4,1
   4efdc:	01c00804 	movi	r7,32
   4efe0:	80c00007 	ldb	r3,0(r16)
   4efe4:	003e3506 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4efe8:	a5000054 	ori	r20,r20,1
   4efec:	80c00007 	ldb	r3,0(r16)
   4eff0:	003e3206 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4eff4:	a5002014 	ori	r20,r20,128
   4eff8:	80c00007 	ldb	r3,0(r16)
   4effc:	003e2f06 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4f000:	8015883a 	mov	r10,r16
   4f004:	0023883a 	mov	r17,zero
   4f008:	18bff404 	addi	r2,r3,-48
   4f00c:	50c00007 	ldb	r3,0(r10)
   4f010:	8c4002a4 	muli	r17,r17,10
   4f014:	84000044 	addi	r16,r16,1
   4f018:	8015883a 	mov	r10,r16
   4f01c:	1463883a 	add	r17,r2,r17
   4f020:	18bff404 	addi	r2,r3,-48
   4f024:	30bff92e 	bgeu	r6,r2,4f00c <__alt_data_end+0xfffe7f0c>
   4f028:	003e2506 	br	4e8c0 <__alt_data_end+0xfffe77c0>
   4f02c:	21003fcc 	andi	r4,r4,255
   4f030:	2002d41e 	bne	r4,zero,4fb84 <___vfiprintf_internal_r+0x1444>
   4f034:	a5000414 	ori	r20,r20,16
   4f038:	a080080c 	andi	r2,r20,32
   4f03c:	103fb51e 	bne	r2,zero,4ef14 <__alt_data_end+0xfffe7e14>
   4f040:	a080040c 	andi	r2,r20,16
   4f044:	1001f826 	beq	r2,zero,4f828 <___vfiprintf_internal_r+0x10e8>
   4f048:	da802217 	ldw	r10,136(sp)
   4f04c:	54800017 	ldw	r18,0(r10)
   4f050:	52800104 	addi	r10,r10,4
   4f054:	da802215 	stw	r10,136(sp)
   4f058:	9027d7fa 	srai	r19,r18,31
   4f05c:	9805883a 	mov	r2,r19
   4f060:	003fb206 	br	4ef2c <__alt_data_end+0xfffe7e2c>
   4f064:	21003fcc 	andi	r4,r4,255
   4f068:	2002c41e 	bne	r4,zero,4fb7c <___vfiprintf_internal_r+0x143c>
   4f06c:	a5000414 	ori	r20,r20,16
   4f070:	a080080c 	andi	r2,r20,32
   4f074:	103f5f1e 	bne	r2,zero,4edf4 <__alt_data_end+0xfffe7cf4>
   4f078:	a080040c 	andi	r2,r20,16
   4f07c:	10020f26 	beq	r2,zero,4f8bc <___vfiprintf_internal_r+0x117c>
   4f080:	da802217 	ldw	r10,136(sp)
   4f084:	d8001d85 	stb	zero,118(sp)
   4f088:	0027883a 	mov	r19,zero
   4f08c:	50800104 	addi	r2,r10,4
   4f090:	54800017 	ldw	r18,0(r10)
   4f094:	48021116 	blt	r9,zero,4f8dc <___vfiprintf_internal_r+0x119c>
   4f098:	00ffdfc4 	movi	r3,-129
   4f09c:	d8802215 	stw	r2,136(sp)
   4f0a0:	a0e8703a 	and	r20,r20,r3
   4f0a4:	903f5e1e 	bne	r18,zero,4ee20 <__alt_data_end+0xfffe7d20>
   4f0a8:	0039883a 	mov	fp,zero
   4f0ac:	4802a626 	beq	r9,zero,4fb48 <___vfiprintf_internal_r+0x1408>
   4f0b0:	0025883a 	mov	r18,zero
   4f0b4:	0027883a 	mov	r19,zero
   4f0b8:	003f5a06 	br	4ee24 <__alt_data_end+0xfffe7d24>
   4f0bc:	21003fcc 	andi	r4,r4,255
   4f0c0:	20029f1e 	bne	r4,zero,4fb40 <___vfiprintf_internal_r+0x1400>
   4f0c4:	a5000414 	ori	r20,r20,16
   4f0c8:	a080080c 	andi	r2,r20,32
   4f0cc:	10005e1e 	bne	r2,zero,4f248 <___vfiprintf_internal_r+0xb08>
   4f0d0:	a080040c 	andi	r2,r20,16
   4f0d4:	1001a21e 	bne	r2,zero,4f760 <___vfiprintf_internal_r+0x1020>
   4f0d8:	a080100c 	andi	r2,r20,64
   4f0dc:	d8001d85 	stb	zero,118(sp)
   4f0e0:	da802217 	ldw	r10,136(sp)
   4f0e4:	1002231e 	bne	r2,zero,4f974 <___vfiprintf_internal_r+0x1234>
   4f0e8:	50800104 	addi	r2,r10,4
   4f0ec:	54800017 	ldw	r18,0(r10)
   4f0f0:	0027883a 	mov	r19,zero
   4f0f4:	4801a00e 	bge	r9,zero,4f778 <___vfiprintf_internal_r+0x1038>
   4f0f8:	d8802215 	stw	r2,136(sp)
   4f0fc:	0039883a 	mov	fp,zero
   4f100:	94c4b03a 	or	r2,r18,r19
   4f104:	103f901e 	bne	r2,zero,4ef48 <__alt_data_end+0xfffe7e48>
   4f108:	00800044 	movi	r2,1
   4f10c:	10803fcc 	andi	r2,r2,255
   4f110:	00c00044 	movi	r3,1
   4f114:	10c05926 	beq	r2,r3,4f27c <___vfiprintf_internal_r+0xb3c>
   4f118:	00c00084 	movi	r3,2
   4f11c:	10ffe41e 	bne	r2,r3,4f0b0 <__alt_data_end+0xfffe7fb0>
   4f120:	0025883a 	mov	r18,zero
   4f124:	0027883a 	mov	r19,zero
   4f128:	00013d06 	br	4f620 <___vfiprintf_internal_r+0xee0>
   4f12c:	21003fcc 	andi	r4,r4,255
   4f130:	2002811e 	bne	r4,zero,4fb38 <___vfiprintf_internal_r+0x13f8>
   4f134:	00800174 	movhi	r2,5
   4f138:	10972e04 	addi	r2,r2,23736
   4f13c:	d8802615 	stw	r2,152(sp)
   4f140:	a080080c 	andi	r2,r20,32
   4f144:	103f561e 	bne	r2,zero,4eea0 <__alt_data_end+0xfffe7da0>
   4f148:	a080040c 	andi	r2,r20,16
   4f14c:	1001d126 	beq	r2,zero,4f894 <___vfiprintf_internal_r+0x1154>
   4f150:	da802217 	ldw	r10,136(sp)
   4f154:	0027883a 	mov	r19,zero
   4f158:	54800017 	ldw	r18,0(r10)
   4f15c:	52800104 	addi	r10,r10,4
   4f160:	da802215 	stw	r10,136(sp)
   4f164:	003f5306 	br	4eeb4 <__alt_data_end+0xfffe7db4>
   4f168:	da802217 	ldw	r10,136(sp)
   4f16c:	d8001d85 	stb	zero,118(sp)
   4f170:	55400017 	ldw	r21,0(r10)
   4f174:	50c00104 	addi	r3,r10,4
   4f178:	a8024226 	beq	r21,zero,4fa84 <___vfiprintf_internal_r+0x1344>
   4f17c:	48021816 	blt	r9,zero,4f9e0 <___vfiprintf_internal_r+0x12a0>
   4f180:	480d883a 	mov	r6,r9
   4f184:	000b883a 	mov	r5,zero
   4f188:	a809883a 	mov	r4,r21
   4f18c:	d8c02a15 	stw	r3,168(sp)
   4f190:	da002b15 	stw	r8,172(sp)
   4f194:	da402c15 	stw	r9,176(sp)
   4f198:	004c9b00 	call	4c9b0 <memchr>
   4f19c:	d8c02a17 	ldw	r3,168(sp)
   4f1a0:	da002b17 	ldw	r8,172(sp)
   4f1a4:	da402c17 	ldw	r9,176(sp)
   4f1a8:	10024826 	beq	r2,zero,4facc <___vfiprintf_internal_r+0x138c>
   4f1ac:	1567c83a 	sub	r19,r2,r21
   4f1b0:	df001d83 	ldbu	fp,118(sp)
   4f1b4:	d8c02215 	stw	r3,136(sp)
   4f1b8:	0013883a 	mov	r9,zero
   4f1bc:	003e6006 	br	4eb40 <__alt_data_end+0xfffe7a40>
   4f1c0:	21003fcc 	andi	r4,r4,255
   4f1c4:	203fc026 	beq	r4,zero,4f0c8 <__alt_data_end+0xfffe7fc8>
   4f1c8:	d9c01d85 	stb	r7,118(sp)
   4f1cc:	003fbe06 	br	4f0c8 <__alt_data_end+0xfffe7fc8>
   4f1d0:	da802217 	ldw	r10,136(sp)
   4f1d4:	54400017 	ldw	r17,0(r10)
   4f1d8:	50800104 	addi	r2,r10,4
   4f1dc:	883e3b16 	blt	r17,zero,4eacc <__alt_data_end+0xfffe79cc>
   4f1e0:	d8802215 	stw	r2,136(sp)
   4f1e4:	80c00007 	ldb	r3,0(r16)
   4f1e8:	003db406 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4f1ec:	01000044 	movi	r4,1
   4f1f0:	01c00ac4 	movi	r7,43
   4f1f4:	80c00007 	ldb	r3,0(r16)
   4f1f8:	003db006 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4f1fc:	80c00007 	ldb	r3,0(r16)
   4f200:	82800044 	addi	r10,r16,1
   4f204:	1b423c26 	beq	r3,r13,4faf8 <___vfiprintf_internal_r+0x13b8>
   4f208:	18bff404 	addi	r2,r3,-48
   4f20c:	0013883a 	mov	r9,zero
   4f210:	30822b36 	bltu	r6,r2,4fac0 <___vfiprintf_internal_r+0x1380>
   4f214:	50c00007 	ldb	r3,0(r10)
   4f218:	4a4002a4 	muli	r9,r9,10
   4f21c:	54000044 	addi	r16,r10,1
   4f220:	8015883a 	mov	r10,r16
   4f224:	4893883a 	add	r9,r9,r2
   4f228:	18bff404 	addi	r2,r3,-48
   4f22c:	30bff92e 	bgeu	r6,r2,4f214 <__alt_data_end+0xfffe8114>
   4f230:	483da30e 	bge	r9,zero,4e8c0 <__alt_data_end+0xfffe77c0>
   4f234:	027fffc4 	movi	r9,-1
   4f238:	003da106 	br	4e8c0 <__alt_data_end+0xfffe77c0>
   4f23c:	a5001014 	ori	r20,r20,64
   4f240:	80c00007 	ldb	r3,0(r16)
   4f244:	003d9d06 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4f248:	da802217 	ldw	r10,136(sp)
   4f24c:	d8001d85 	stb	zero,118(sp)
   4f250:	50c00204 	addi	r3,r10,8
   4f254:	54800017 	ldw	r18,0(r10)
   4f258:	54c00117 	ldw	r19,4(r10)
   4f25c:	4801ca16 	blt	r9,zero,4f988 <___vfiprintf_internal_r+0x1248>
   4f260:	013fdfc4 	movi	r4,-129
   4f264:	94c4b03a 	or	r2,r18,r19
   4f268:	d8c02215 	stw	r3,136(sp)
   4f26c:	a128703a 	and	r20,r20,r4
   4f270:	0039883a 	mov	fp,zero
   4f274:	103f341e 	bne	r2,zero,4ef48 <__alt_data_end+0xfffe7e48>
   4f278:	483e2e26 	beq	r9,zero,4eb34 <__alt_data_end+0xfffe7a34>
   4f27c:	0025883a 	mov	r18,zero
   4f280:	94800c04 	addi	r18,r18,48
   4f284:	dc8019c5 	stb	r18,103(sp)
   4f288:	dcc02717 	ldw	r19,156(sp)
   4f28c:	dd4019c4 	addi	r21,sp,103
   4f290:	003e2b06 	br	4eb40 <__alt_data_end+0xfffe7a40>
   4f294:	21003fcc 	andi	r4,r4,255
   4f298:	2002361e 	bne	r4,zero,4fb74 <___vfiprintf_internal_r+0x1434>
   4f29c:	1801c126 	beq	r3,zero,4f9a4 <___vfiprintf_internal_r+0x1264>
   4f2a0:	04800044 	movi	r18,1
   4f2a4:	d8c01005 	stb	r3,64(sp)
   4f2a8:	d8001d85 	stb	zero,118(sp)
   4f2ac:	9027883a 	mov	r19,r18
   4f2b0:	dd401004 	addi	r21,sp,64
   4f2b4:	003f1106 	br	4eefc <__alt_data_end+0xfffe7dfc>
   4f2b8:	d9402117 	ldw	r5,132(sp)
   4f2bc:	d9002017 	ldw	r4,128(sp)
   4f2c0:	d9801a04 	addi	r6,sp,104
   4f2c4:	d9c02b15 	stw	r7,172(sp)
   4f2c8:	dbc02a15 	stw	r15,168(sp)
   4f2cc:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f2d0:	d9c02b17 	ldw	r7,172(sp)
   4f2d4:	dbc02a17 	ldw	r15,168(sp)
   4f2d8:	10006d1e 	bne	r2,zero,4f490 <___vfiprintf_internal_r+0xd50>
   4f2dc:	d9801b17 	ldw	r6,108(sp)
   4f2e0:	d8801c17 	ldw	r2,112(sp)
   4f2e4:	d811883a 	mov	r8,sp
   4f2e8:	31400044 	addi	r5,r6,1
   4f2ec:	003e3306 	br	4ebbc <__alt_data_end+0xfffe7abc>
   4f2f0:	d9401b17 	ldw	r5,108(sp)
   4f2f4:	d8801c17 	ldw	r2,112(sp)
   4f2f8:	29000044 	addi	r4,r5,1
   4f2fc:	d8c01d87 	ldb	r3,118(sp)
   4f300:	183e4d26 	beq	r3,zero,4ec38 <__alt_data_end+0xfffe7b38>
   4f304:	00c00044 	movi	r3,1
   4f308:	d9401d84 	addi	r5,sp,118
   4f30c:	10c5883a 	add	r2,r2,r3
   4f310:	41400015 	stw	r5,0(r8)
   4f314:	40c00115 	stw	r3,4(r8)
   4f318:	d8801c15 	stw	r2,112(sp)
   4f31c:	d9001b15 	stw	r4,108(sp)
   4f320:	014001c4 	movi	r5,7
   4f324:	2900a90e 	bge	r5,r4,4f5cc <___vfiprintf_internal_r+0xe8c>
   4f328:	1000da1e 	bne	r2,zero,4f694 <___vfiprintf_internal_r+0xf54>
   4f32c:	7000ab1e 	bne	r14,zero,4f5dc <___vfiprintf_internal_r+0xe9c>
   4f330:	000b883a 	mov	r5,zero
   4f334:	1809883a 	mov	r4,r3
   4f338:	d811883a 	mov	r8,sp
   4f33c:	00c02004 	movi	r3,128
   4f340:	e0fe4d26 	beq	fp,r3,4ec78 <__alt_data_end+0xfffe7b78>
   4f344:	4cf9c83a 	sub	fp,r9,r19
   4f348:	073e7b0e 	bge	zero,fp,4ed38 <__alt_data_end+0xfffe7c38>
   4f34c:	01c00404 	movi	r7,16
   4f350:	3f01900e 	bge	r7,fp,4f994 <___vfiprintf_internal_r+0x1254>
   4f354:	00c00174 	movhi	r3,5
   4f358:	18d79304 	addi	r3,r3,24140
   4f35c:	d8c02415 	stw	r3,144(sp)
   4f360:	034001c4 	movi	r13,7
   4f364:	00000506 	br	4f37c <___vfiprintf_internal_r+0xc3c>
   4f368:	29000084 	addi	r4,r5,2
   4f36c:	42000204 	addi	r8,r8,8
   4f370:	180b883a 	mov	r5,r3
   4f374:	e73ffc04 	addi	fp,fp,-16
   4f378:	3f000d0e 	bge	r7,fp,4f3b0 <___vfiprintf_internal_r+0xc70>
   4f37c:	10800404 	addi	r2,r2,16
   4f380:	28c00044 	addi	r3,r5,1
   4f384:	45c00015 	stw	r23,0(r8)
   4f388:	41c00115 	stw	r7,4(r8)
   4f38c:	d8801c15 	stw	r2,112(sp)
   4f390:	d8c01b15 	stw	r3,108(sp)
   4f394:	68fff40e 	bge	r13,r3,4f368 <__alt_data_end+0xfffe8268>
   4f398:	1000101e 	bne	r2,zero,4f3dc <___vfiprintf_internal_r+0xc9c>
   4f39c:	e73ffc04 	addi	fp,fp,-16
   4f3a0:	01000044 	movi	r4,1
   4f3a4:	000b883a 	mov	r5,zero
   4f3a8:	d811883a 	mov	r8,sp
   4f3ac:	3f3ff316 	blt	r7,fp,4f37c <__alt_data_end+0xfffe827c>
   4f3b0:	da802417 	ldw	r10,144(sp)
   4f3b4:	1705883a 	add	r2,r2,fp
   4f3b8:	47000115 	stw	fp,4(r8)
   4f3bc:	42800015 	stw	r10,0(r8)
   4f3c0:	d8801c15 	stw	r2,112(sp)
   4f3c4:	d9001b15 	stw	r4,108(sp)
   4f3c8:	00c001c4 	movi	r3,7
   4f3cc:	19003616 	blt	r3,r4,4f4a8 <___vfiprintf_internal_r+0xd68>
   4f3d0:	42000204 	addi	r8,r8,8
   4f3d4:	21000044 	addi	r4,r4,1
   4f3d8:	003e5706 	br	4ed38 <__alt_data_end+0xfffe7c38>
   4f3dc:	d9402117 	ldw	r5,132(sp)
   4f3e0:	d9002017 	ldw	r4,128(sp)
   4f3e4:	d9801a04 	addi	r6,sp,104
   4f3e8:	d9c02b15 	stw	r7,172(sp)
   4f3ec:	db402a15 	stw	r13,168(sp)
   4f3f0:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f3f4:	d9c02b17 	ldw	r7,172(sp)
   4f3f8:	db402a17 	ldw	r13,168(sp)
   4f3fc:	1000241e 	bne	r2,zero,4f490 <___vfiprintf_internal_r+0xd50>
   4f400:	d9401b17 	ldw	r5,108(sp)
   4f404:	d8801c17 	ldw	r2,112(sp)
   4f408:	d811883a 	mov	r8,sp
   4f40c:	29000044 	addi	r4,r5,1
   4f410:	003fd806 	br	4f374 <__alt_data_end+0xfffe8274>
   4f414:	d9401b17 	ldw	r5,108(sp)
   4f418:	00c00174 	movhi	r3,5
   4f41c:	18d79704 	addi	r3,r3,24156
   4f420:	d8c02415 	stw	r3,144(sp)
   4f424:	29400044 	addi	r5,r5,1
   4f428:	d8c02417 	ldw	r3,144(sp)
   4f42c:	14c5883a 	add	r2,r2,r19
   4f430:	44c00115 	stw	r19,4(r8)
   4f434:	40c00015 	stw	r3,0(r8)
   4f438:	d8801c15 	stw	r2,112(sp)
   4f43c:	d9401b15 	stw	r5,108(sp)
   4f440:	00c001c4 	movi	r3,7
   4f444:	1940070e 	bge	r3,r5,4f464 <___vfiprintf_internal_r+0xd24>
   4f448:	103e4826 	beq	r2,zero,4ed6c <__alt_data_end+0xfffe7c6c>
   4f44c:	d9402117 	ldw	r5,132(sp)
   4f450:	d9002017 	ldw	r4,128(sp)
   4f454:	d9801a04 	addi	r6,sp,104
   4f458:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f45c:	10000c1e 	bne	r2,zero,4f490 <___vfiprintf_internal_r+0xd50>
   4f460:	d8801c17 	ldw	r2,112(sp)
   4f464:	8c80010e 	bge	r17,r18,4f46c <___vfiprintf_internal_r+0xd2c>
   4f468:	9023883a 	mov	r17,r18
   4f46c:	da802317 	ldw	r10,140(sp)
   4f470:	5455883a 	add	r10,r10,r17
   4f474:	da802315 	stw	r10,140(sp)
   4f478:	103e4126 	beq	r2,zero,4ed80 <__alt_data_end+0xfffe7c80>
   4f47c:	d9402117 	ldw	r5,132(sp)
   4f480:	d9002017 	ldw	r4,128(sp)
   4f484:	d9801a04 	addi	r6,sp,104
   4f488:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f48c:	103e3c26 	beq	r2,zero,4ed80 <__alt_data_end+0xfffe7c80>
   4f490:	dd002117 	ldw	r20,132(sp)
   4f494:	a080030b 	ldhu	r2,12(r20)
   4f498:	1080100c 	andi	r2,r2,64
   4f49c:	1001231e 	bne	r2,zero,4f92c <___vfiprintf_internal_r+0x11ec>
   4f4a0:	d8802317 	ldw	r2,140(sp)
   4f4a4:	003d7b06 	br	4ea94 <__alt_data_end+0xfffe7994>
   4f4a8:	1000991e 	bne	r2,zero,4f710 <___vfiprintf_internal_r+0xfd0>
   4f4ac:	00c00044 	movi	r3,1
   4f4b0:	9805883a 	mov	r2,r19
   4f4b4:	dd400015 	stw	r21,0(sp)
   4f4b8:	dcc00115 	stw	r19,4(sp)
   4f4bc:	dcc01c15 	stw	r19,112(sp)
   4f4c0:	d8c01b15 	stw	r3,108(sp)
   4f4c4:	d811883a 	mov	r8,sp
   4f4c8:	42000204 	addi	r8,r8,8
   4f4cc:	a2c0010c 	andi	r11,r20,4
   4f4d0:	583fe426 	beq	r11,zero,4f464 <__alt_data_end+0xfffe8364>
   4f4d4:	8ca7c83a 	sub	r19,r17,r18
   4f4d8:	04ffe20e 	bge	zero,r19,4f464 <__alt_data_end+0xfffe8364>
   4f4dc:	01c00404 	movi	r7,16
   4f4e0:	3cffcc0e 	bge	r7,r19,4f414 <__alt_data_end+0xfffe8314>
   4f4e4:	02800174 	movhi	r10,5
   4f4e8:	52979704 	addi	r10,r10,24156
   4f4ec:	d9001b17 	ldw	r4,108(sp)
   4f4f0:	da802415 	stw	r10,144(sp)
   4f4f4:	382b883a 	mov	r21,r7
   4f4f8:	050001c4 	movi	r20,7
   4f4fc:	df002017 	ldw	fp,128(sp)
   4f500:	00000506 	br	4f518 <___vfiprintf_internal_r+0xdd8>
   4f504:	21400084 	addi	r5,r4,2
   4f508:	42000204 	addi	r8,r8,8
   4f50c:	1809883a 	mov	r4,r3
   4f510:	9cfffc04 	addi	r19,r19,-16
   4f514:	acffc40e 	bge	r21,r19,4f428 <__alt_data_end+0xfffe8328>
   4f518:	10800404 	addi	r2,r2,16
   4f51c:	20c00044 	addi	r3,r4,1
   4f520:	45800015 	stw	r22,0(r8)
   4f524:	45400115 	stw	r21,4(r8)
   4f528:	d8801c15 	stw	r2,112(sp)
   4f52c:	d8c01b15 	stw	r3,108(sp)
   4f530:	a0fff40e 	bge	r20,r3,4f504 <__alt_data_end+0xfffe8404>
   4f534:	1000041e 	bne	r2,zero,4f548 <___vfiprintf_internal_r+0xe08>
   4f538:	01400044 	movi	r5,1
   4f53c:	0009883a 	mov	r4,zero
   4f540:	d811883a 	mov	r8,sp
   4f544:	003ff206 	br	4f510 <__alt_data_end+0xfffe8410>
   4f548:	d9402117 	ldw	r5,132(sp)
   4f54c:	d9801a04 	addi	r6,sp,104
   4f550:	e009883a 	mov	r4,fp
   4f554:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f558:	103fcd1e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4f55c:	d9001b17 	ldw	r4,108(sp)
   4f560:	d8801c17 	ldw	r2,112(sp)
   4f564:	d811883a 	mov	r8,sp
   4f568:	21400044 	addi	r5,r4,1
   4f56c:	003fe806 	br	4f510 <__alt_data_end+0xfffe8410>
   4f570:	d9402117 	ldw	r5,132(sp)
   4f574:	d9002017 	ldw	r4,128(sp)
   4f578:	d9801a04 	addi	r6,sp,104
   4f57c:	d9c02b15 	stw	r7,172(sp)
   4f580:	db402a15 	stw	r13,168(sp)
   4f584:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f588:	d9c02b17 	ldw	r7,172(sp)
   4f58c:	db402a17 	ldw	r13,168(sp)
   4f590:	103fbf1e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4f594:	d9401b17 	ldw	r5,108(sp)
   4f598:	d8801c17 	ldw	r2,112(sp)
   4f59c:	d811883a 	mov	r8,sp
   4f5a0:	29800044 	addi	r6,r5,1
   4f5a4:	003dc406 	br	4ecb8 <__alt_data_end+0xfffe7bb8>
   4f5a8:	1000d21e 	bne	r2,zero,4f8f4 <___vfiprintf_internal_r+0x11b4>
   4f5ac:	d8c01d87 	ldb	r3,118(sp)
   4f5b0:	18009526 	beq	r3,zero,4f808 <___vfiprintf_internal_r+0x10c8>
   4f5b4:	00800044 	movi	r2,1
   4f5b8:	d8c01d84 	addi	r3,sp,118
   4f5bc:	1009883a 	mov	r4,r2
   4f5c0:	d8c00015 	stw	r3,0(sp)
   4f5c4:	d8800115 	stw	r2,4(sp)
   4f5c8:	d811883a 	mov	r8,sp
   4f5cc:	200b883a 	mov	r5,r4
   4f5d0:	42000204 	addi	r8,r8,8
   4f5d4:	21000044 	addi	r4,r4,1
   4f5d8:	003d9706 	br	4ec38 <__alt_data_end+0xfffe7b38>
   4f5dc:	d9001d04 	addi	r4,sp,116
   4f5e0:	00800084 	movi	r2,2
   4f5e4:	d9000015 	stw	r4,0(sp)
   4f5e8:	d8800115 	stw	r2,4(sp)
   4f5ec:	1809883a 	mov	r4,r3
   4f5f0:	d811883a 	mov	r8,sp
   4f5f4:	200b883a 	mov	r5,r4
   4f5f8:	42000204 	addi	r8,r8,8
   4f5fc:	21000044 	addi	r4,r4,1
   4f600:	003f4e06 	br	4f33c <__alt_data_end+0xfffe823c>
   4f604:	d8001d85 	stb	zero,118(sp)
   4f608:	48005016 	blt	r9,zero,4f74c <___vfiprintf_internal_r+0x100c>
   4f60c:	00ffdfc4 	movi	r3,-129
   4f610:	94c4b03a 	or	r2,r18,r19
   4f614:	a0e8703a 	and	r20,r20,r3
   4f618:	103d4426 	beq	r2,zero,4eb2c <__alt_data_end+0xfffe7a2c>
   4f61c:	0039883a 	mov	fp,zero
   4f620:	d9002617 	ldw	r4,152(sp)
   4f624:	dd401a04 	addi	r21,sp,104
   4f628:	908003cc 	andi	r2,r18,15
   4f62c:	9806973a 	slli	r3,r19,28
   4f630:	2085883a 	add	r2,r4,r2
   4f634:	9024d13a 	srli	r18,r18,4
   4f638:	10800003 	ldbu	r2,0(r2)
   4f63c:	9826d13a 	srli	r19,r19,4
   4f640:	ad7fffc4 	addi	r21,r21,-1
   4f644:	1ca4b03a 	or	r18,r3,r18
   4f648:	a8800005 	stb	r2,0(r21)
   4f64c:	94c4b03a 	or	r2,r18,r19
   4f650:	103ff51e 	bne	r2,zero,4f628 <__alt_data_end+0xfffe8528>
   4f654:	003e5906 	br	4efbc <__alt_data_end+0xfffe7ebc>
   4f658:	d9402117 	ldw	r5,132(sp)
   4f65c:	d9002017 	ldw	r4,128(sp)
   4f660:	d9801a04 	addi	r6,sp,104
   4f664:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f668:	103f891e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4f66c:	d8801c17 	ldw	r2,112(sp)
   4f670:	d811883a 	mov	r8,sp
   4f674:	003f9506 	br	4f4cc <__alt_data_end+0xfffe83cc>
   4f678:	d9402117 	ldw	r5,132(sp)
   4f67c:	d9002017 	ldw	r4,128(sp)
   4f680:	d9801a04 	addi	r6,sp,104
   4f684:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f688:	103f811e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4f68c:	d811883a 	mov	r8,sp
   4f690:	003ced06 	br	4ea48 <__alt_data_end+0xfffe7948>
   4f694:	d9402117 	ldw	r5,132(sp)
   4f698:	d9002017 	ldw	r4,128(sp)
   4f69c:	d9801a04 	addi	r6,sp,104
   4f6a0:	da402c15 	stw	r9,176(sp)
   4f6a4:	db802a15 	stw	r14,168(sp)
   4f6a8:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f6ac:	da402c17 	ldw	r9,176(sp)
   4f6b0:	db802a17 	ldw	r14,168(sp)
   4f6b4:	103f761e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4f6b8:	d9401b17 	ldw	r5,108(sp)
   4f6bc:	d8801c17 	ldw	r2,112(sp)
   4f6c0:	d811883a 	mov	r8,sp
   4f6c4:	29000044 	addi	r4,r5,1
   4f6c8:	003d5b06 	br	4ec38 <__alt_data_end+0xfffe7b38>
   4f6cc:	d9402117 	ldw	r5,132(sp)
   4f6d0:	d9002017 	ldw	r4,128(sp)
   4f6d4:	d9801a04 	addi	r6,sp,104
   4f6d8:	da402c15 	stw	r9,176(sp)
   4f6dc:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f6e0:	da402c17 	ldw	r9,176(sp)
   4f6e4:	103f6a1e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4f6e8:	d9401b17 	ldw	r5,108(sp)
   4f6ec:	d8801c17 	ldw	r2,112(sp)
   4f6f0:	d811883a 	mov	r8,sp
   4f6f4:	29000044 	addi	r4,r5,1
   4f6f8:	003f1006 	br	4f33c <__alt_data_end+0xfffe823c>
   4f6fc:	1000c31e 	bne	r2,zero,4fa0c <___vfiprintf_internal_r+0x12cc>
   4f700:	01000044 	movi	r4,1
   4f704:	000b883a 	mov	r5,zero
   4f708:	d811883a 	mov	r8,sp
   4f70c:	003f0d06 	br	4f344 <__alt_data_end+0xfffe8244>
   4f710:	d9402117 	ldw	r5,132(sp)
   4f714:	d9002017 	ldw	r4,128(sp)
   4f718:	d9801a04 	addi	r6,sp,104
   4f71c:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f720:	103f5b1e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4f724:	d9001b17 	ldw	r4,108(sp)
   4f728:	d8801c17 	ldw	r2,112(sp)
   4f72c:	d811883a 	mov	r8,sp
   4f730:	21000044 	addi	r4,r4,1
   4f734:	003d8006 	br	4ed38 <__alt_data_end+0xfffe7c38>
   4f738:	01000174 	movhi	r4,5
   4f73c:	21173304 	addi	r4,r4,23756
   4f740:	d9002615 	stw	r4,152(sp)
   4f744:	d8c02215 	stw	r3,136(sp)
   4f748:	1029883a 	mov	r20,r2
   4f74c:	94c4b03a 	or	r2,r18,r19
   4f750:	103fb21e 	bne	r2,zero,4f61c <__alt_data_end+0xfffe851c>
   4f754:	0039883a 	mov	fp,zero
   4f758:	00800084 	movi	r2,2
   4f75c:	003e6b06 	br	4f10c <__alt_data_end+0xfffe800c>
   4f760:	da802217 	ldw	r10,136(sp)
   4f764:	d8001d85 	stb	zero,118(sp)
   4f768:	0027883a 	mov	r19,zero
   4f76c:	50800104 	addi	r2,r10,4
   4f770:	54800017 	ldw	r18,0(r10)
   4f774:	483e6016 	blt	r9,zero,4f0f8 <__alt_data_end+0xfffe7ff8>
   4f778:	00ffdfc4 	movi	r3,-129
   4f77c:	d8802215 	stw	r2,136(sp)
   4f780:	a0e8703a 	and	r20,r20,r3
   4f784:	0039883a 	mov	fp,zero
   4f788:	903ebb26 	beq	r18,zero,4f278 <__alt_data_end+0xfffe8178>
   4f78c:	00800244 	movi	r2,9
   4f790:	14bdee36 	bltu	r2,r18,4ef4c <__alt_data_end+0xfffe7e4c>
   4f794:	003eba06 	br	4f280 <__alt_data_end+0xfffe8180>
   4f798:	00800c04 	movi	r2,48
   4f79c:	d8c01d45 	stb	r3,117(sp)
   4f7a0:	d8801d05 	stb	r2,116(sp)
   4f7a4:	d8001d85 	stb	zero,118(sp)
   4f7a8:	a0c00094 	ori	r3,r20,2
   4f7ac:	4800a916 	blt	r9,zero,4fa54 <___vfiprintf_internal_r+0x1314>
   4f7b0:	00bfdfc4 	movi	r2,-129
   4f7b4:	a096703a 	and	r11,r20,r2
   4f7b8:	5d000094 	ori	r20,r11,2
   4f7bc:	0039883a 	mov	fp,zero
   4f7c0:	003f9706 	br	4f620 <__alt_data_end+0xfffe8520>
   4f7c4:	8025883a 	mov	r18,r16
   4f7c8:	003c2e06 	br	4e884 <__alt_data_end+0xfffe7784>
   4f7cc:	00800174 	movhi	r2,5
   4f7d0:	10973304 	addi	r2,r2,23756
   4f7d4:	0039883a 	mov	fp,zero
   4f7d8:	d8802615 	stw	r2,152(sp)
   4f7dc:	003f9006 	br	4f620 <__alt_data_end+0xfffe8520>
   4f7e0:	04a5c83a 	sub	r18,zero,r18
   4f7e4:	07000b44 	movi	fp,45
   4f7e8:	9004c03a 	cmpne	r2,r18,zero
   4f7ec:	04e7c83a 	sub	r19,zero,r19
   4f7f0:	df001d85 	stb	fp,118(sp)
   4f7f4:	98a7c83a 	sub	r19,r19,r2
   4f7f8:	48009f16 	blt	r9,zero,4fa78 <___vfiprintf_internal_r+0x1338>
   4f7fc:	00bfdfc4 	movi	r2,-129
   4f800:	a0a8703a 	and	r20,r20,r2
   4f804:	003dd006 	br	4ef48 <__alt_data_end+0xfffe7e48>
   4f808:	70004c26 	beq	r14,zero,4f93c <___vfiprintf_internal_r+0x11fc>
   4f80c:	00800084 	movi	r2,2
   4f810:	d8c01d04 	addi	r3,sp,116
   4f814:	d8c00015 	stw	r3,0(sp)
   4f818:	d8800115 	stw	r2,4(sp)
   4f81c:	01000044 	movi	r4,1
   4f820:	d811883a 	mov	r8,sp
   4f824:	003f7306 	br	4f5f4 <__alt_data_end+0xfffe84f4>
   4f828:	a080100c 	andi	r2,r20,64
   4f82c:	da802217 	ldw	r10,136(sp)
   4f830:	103e0626 	beq	r2,zero,4f04c <__alt_data_end+0xfffe7f4c>
   4f834:	5480000f 	ldh	r18,0(r10)
   4f838:	52800104 	addi	r10,r10,4
   4f83c:	da802215 	stw	r10,136(sp)
   4f840:	9027d7fa 	srai	r19,r18,31
   4f844:	9805883a 	mov	r2,r19
   4f848:	003db806 	br	4ef2c <__alt_data_end+0xfffe7e2c>
   4f84c:	a080040c 	andi	r2,r20,16
   4f850:	1000091e 	bne	r2,zero,4f878 <___vfiprintf_internal_r+0x1138>
   4f854:	a2c0100c 	andi	r11,r20,64
   4f858:	58000726 	beq	r11,zero,4f878 <___vfiprintf_internal_r+0x1138>
   4f85c:	da802217 	ldw	r10,136(sp)
   4f860:	50800017 	ldw	r2,0(r10)
   4f864:	52800104 	addi	r10,r10,4
   4f868:	da802215 	stw	r10,136(sp)
   4f86c:	da802317 	ldw	r10,140(sp)
   4f870:	1280000d 	sth	r10,0(r2)
   4f874:	003be706 	br	4e814 <__alt_data_end+0xfffe7714>
   4f878:	da802217 	ldw	r10,136(sp)
   4f87c:	50800017 	ldw	r2,0(r10)
   4f880:	52800104 	addi	r10,r10,4
   4f884:	da802215 	stw	r10,136(sp)
   4f888:	da802317 	ldw	r10,140(sp)
   4f88c:	12800015 	stw	r10,0(r2)
   4f890:	003be006 	br	4e814 <__alt_data_end+0xfffe7714>
   4f894:	a080100c 	andi	r2,r20,64
   4f898:	da802217 	ldw	r10,136(sp)
   4f89c:	10003026 	beq	r2,zero,4f960 <___vfiprintf_internal_r+0x1220>
   4f8a0:	5480000b 	ldhu	r18,0(r10)
   4f8a4:	52800104 	addi	r10,r10,4
   4f8a8:	0027883a 	mov	r19,zero
   4f8ac:	da802215 	stw	r10,136(sp)
   4f8b0:	003d8006 	br	4eeb4 <__alt_data_end+0xfffe7db4>
   4f8b4:	80c00007 	ldb	r3,0(r16)
   4f8b8:	003c0006 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4f8bc:	a080100c 	andi	r2,r20,64
   4f8c0:	d8001d85 	stb	zero,118(sp)
   4f8c4:	da802217 	ldw	r10,136(sp)
   4f8c8:	1000201e 	bne	r2,zero,4f94c <___vfiprintf_internal_r+0x120c>
   4f8cc:	50800104 	addi	r2,r10,4
   4f8d0:	54800017 	ldw	r18,0(r10)
   4f8d4:	0027883a 	mov	r19,zero
   4f8d8:	483def0e 	bge	r9,zero,4f098 <__alt_data_end+0xfffe7f98>
   4f8dc:	94c6b03a 	or	r3,r18,r19
   4f8e0:	d8802215 	stw	r2,136(sp)
   4f8e4:	183d4e1e 	bne	r3,zero,4ee20 <__alt_data_end+0xfffe7d20>
   4f8e8:	0039883a 	mov	fp,zero
   4f8ec:	0005883a 	mov	r2,zero
   4f8f0:	003e0606 	br	4f10c <__alt_data_end+0xfffe800c>
   4f8f4:	d9402117 	ldw	r5,132(sp)
   4f8f8:	d9002017 	ldw	r4,128(sp)
   4f8fc:	d9801a04 	addi	r6,sp,104
   4f900:	da402c15 	stw	r9,176(sp)
   4f904:	db802a15 	stw	r14,168(sp)
   4f908:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f90c:	da402c17 	ldw	r9,176(sp)
   4f910:	db802a17 	ldw	r14,168(sp)
   4f914:	103ede1e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4f918:	d9401b17 	ldw	r5,108(sp)
   4f91c:	d8801c17 	ldw	r2,112(sp)
   4f920:	d811883a 	mov	r8,sp
   4f924:	29000044 	addi	r4,r5,1
   4f928:	003e7406 	br	4f2fc <__alt_data_end+0xfffe81fc>
   4f92c:	00bfffc4 	movi	r2,-1
   4f930:	003c5806 	br	4ea94 <__alt_data_end+0xfffe7994>
   4f934:	d811883a 	mov	r8,sp
   4f938:	003ee806 	br	4f4dc <__alt_data_end+0xfffe83dc>
   4f93c:	000b883a 	mov	r5,zero
   4f940:	01000044 	movi	r4,1
   4f944:	d811883a 	mov	r8,sp
   4f948:	003e7c06 	br	4f33c <__alt_data_end+0xfffe823c>
   4f94c:	50800104 	addi	r2,r10,4
   4f950:	5480000b 	ldhu	r18,0(r10)
   4f954:	0027883a 	mov	r19,zero
   4f958:	483dcf0e 	bge	r9,zero,4f098 <__alt_data_end+0xfffe7f98>
   4f95c:	003fdf06 	br	4f8dc <__alt_data_end+0xfffe87dc>
   4f960:	54800017 	ldw	r18,0(r10)
   4f964:	52800104 	addi	r10,r10,4
   4f968:	0027883a 	mov	r19,zero
   4f96c:	da802215 	stw	r10,136(sp)
   4f970:	003d5006 	br	4eeb4 <__alt_data_end+0xfffe7db4>
   4f974:	50800104 	addi	r2,r10,4
   4f978:	5480000b 	ldhu	r18,0(r10)
   4f97c:	0027883a 	mov	r19,zero
   4f980:	483f7d0e 	bge	r9,zero,4f778 <__alt_data_end+0xfffe8678>
   4f984:	003ddc06 	br	4f0f8 <__alt_data_end+0xfffe7ff8>
   4f988:	d8c02215 	stw	r3,136(sp)
   4f98c:	0039883a 	mov	fp,zero
   4f990:	003ddb06 	br	4f100 <__alt_data_end+0xfffe8000>
   4f994:	02800174 	movhi	r10,5
   4f998:	52979304 	addi	r10,r10,24140
   4f99c:	da802415 	stw	r10,144(sp)
   4f9a0:	003e8306 	br	4f3b0 <__alt_data_end+0xfffe82b0>
   4f9a4:	d8801c17 	ldw	r2,112(sp)
   4f9a8:	dd002117 	ldw	r20,132(sp)
   4f9ac:	103eb926 	beq	r2,zero,4f494 <__alt_data_end+0xfffe8394>
   4f9b0:	d9002017 	ldw	r4,128(sp)
   4f9b4:	d9801a04 	addi	r6,sp,104
   4f9b8:	a00b883a 	mov	r5,r20
   4f9bc:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4f9c0:	003eb406 	br	4f494 <__alt_data_end+0xfffe8394>
   4f9c4:	80c00043 	ldbu	r3,1(r16)
   4f9c8:	a5000814 	ori	r20,r20,32
   4f9cc:	84000044 	addi	r16,r16,1
   4f9d0:	18c03fcc 	andi	r3,r3,255
   4f9d4:	18c0201c 	xori	r3,r3,128
   4f9d8:	18ffe004 	addi	r3,r3,-128
   4f9dc:	003bb706 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4f9e0:	a809883a 	mov	r4,r21
   4f9e4:	d8c02a15 	stw	r3,168(sp)
   4f9e8:	da002b15 	stw	r8,172(sp)
   4f9ec:	00471080 	call	47108 <strlen>
   4f9f0:	d8c02a17 	ldw	r3,168(sp)
   4f9f4:	1027883a 	mov	r19,r2
   4f9f8:	df001d83 	ldbu	fp,118(sp)
   4f9fc:	d8c02215 	stw	r3,136(sp)
   4fa00:	0013883a 	mov	r9,zero
   4fa04:	da002b17 	ldw	r8,172(sp)
   4fa08:	003c4d06 	br	4eb40 <__alt_data_end+0xfffe7a40>
   4fa0c:	d9402117 	ldw	r5,132(sp)
   4fa10:	d9002017 	ldw	r4,128(sp)
   4fa14:	d9801a04 	addi	r6,sp,104
   4fa18:	da402c15 	stw	r9,176(sp)
   4fa1c:	004e62c0 	call	4e62c <__sprint_r.part.0>
   4fa20:	da402c17 	ldw	r9,176(sp)
   4fa24:	103e9a1e 	bne	r2,zero,4f490 <__alt_data_end+0xfffe8390>
   4fa28:	d9401b17 	ldw	r5,108(sp)
   4fa2c:	d8801c17 	ldw	r2,112(sp)
   4fa30:	d811883a 	mov	r8,sp
   4fa34:	29000044 	addi	r4,r5,1
   4fa38:	003e4206 	br	4f344 <__alt_data_end+0xfffe8244>
   4fa3c:	d9401b17 	ldw	r5,108(sp)
   4fa40:	01000174 	movhi	r4,5
   4fa44:	21179704 	addi	r4,r4,24156
   4fa48:	d9002415 	stw	r4,144(sp)
   4fa4c:	29400044 	addi	r5,r5,1
   4fa50:	003c6d06 	br	4ec08 <__alt_data_end+0xfffe7b08>
   4fa54:	0039883a 	mov	fp,zero
   4fa58:	00800084 	movi	r2,2
   4fa5c:	10803fcc 	andi	r2,r2,255
   4fa60:	01000044 	movi	r4,1
   4fa64:	11001e26 	beq	r2,r4,4fae0 <___vfiprintf_internal_r+0x13a0>
   4fa68:	01000084 	movi	r4,2
   4fa6c:	11001e1e 	bne	r2,r4,4fae8 <___vfiprintf_internal_r+0x13a8>
   4fa70:	1829883a 	mov	r20,r3
   4fa74:	003eea06 	br	4f620 <__alt_data_end+0xfffe8520>
   4fa78:	a007883a 	mov	r3,r20
   4fa7c:	00800044 	movi	r2,1
   4fa80:	003ff606 	br	4fa5c <__alt_data_end+0xfffe895c>
   4fa84:	00800184 	movi	r2,6
   4fa88:	1240012e 	bgeu	r2,r9,4fa90 <___vfiprintf_internal_r+0x1350>
   4fa8c:	1013883a 	mov	r9,r2
   4fa90:	4827883a 	mov	r19,r9
   4fa94:	4825883a 	mov	r18,r9
   4fa98:	48001516 	blt	r9,zero,4faf0 <___vfiprintf_internal_r+0x13b0>
   4fa9c:	05400174 	movhi	r21,5
   4faa0:	d8c02215 	stw	r3,136(sp)
   4faa4:	ad573804 	addi	r21,r21,23776
   4faa8:	003d1406 	br	4eefc <__alt_data_end+0xfffe7dfc>
   4faac:	02800174 	movhi	r10,5
   4fab0:	52979304 	addi	r10,r10,24140
   4fab4:	da802415 	stw	r10,144(sp)
   4fab8:	200d883a 	mov	r6,r4
   4fabc:	003c9106 	br	4ed04 <__alt_data_end+0xfffe7c04>
   4fac0:	5021883a 	mov	r16,r10
   4fac4:	0013883a 	mov	r9,zero
   4fac8:	003b7d06 	br	4e8c0 <__alt_data_end+0xfffe77c0>
   4facc:	4827883a 	mov	r19,r9
   4fad0:	df001d83 	ldbu	fp,118(sp)
   4fad4:	d8c02215 	stw	r3,136(sp)
   4fad8:	0013883a 	mov	r9,zero
   4fadc:	003c1806 	br	4eb40 <__alt_data_end+0xfffe7a40>
   4fae0:	1829883a 	mov	r20,r3
   4fae4:	003d1806 	br	4ef48 <__alt_data_end+0xfffe7e48>
   4fae8:	1829883a 	mov	r20,r3
   4faec:	003ccd06 	br	4ee24 <__alt_data_end+0xfffe7d24>
   4faf0:	0025883a 	mov	r18,zero
   4faf4:	003fe906 	br	4fa9c <__alt_data_end+0xfffe899c>
   4faf8:	d8802217 	ldw	r2,136(sp)
   4fafc:	80c00043 	ldbu	r3,1(r16)
   4fb00:	5021883a 	mov	r16,r10
   4fb04:	12400017 	ldw	r9,0(r2)
   4fb08:	10800104 	addi	r2,r2,4
   4fb0c:	d8802215 	stw	r2,136(sp)
   4fb10:	483faf0e 	bge	r9,zero,4f9d0 <__alt_data_end+0xfffe88d0>
   4fb14:	18c03fcc 	andi	r3,r3,255
   4fb18:	18c0201c 	xori	r3,r3,128
   4fb1c:	027fffc4 	movi	r9,-1
   4fb20:	18ffe004 	addi	r3,r3,-128
   4fb24:	003b6506 	br	4e8bc <__alt_data_end+0xfffe77bc>
   4fb28:	d9c01d85 	stb	r7,118(sp)
   4fb2c:	003ca006 	br	4edb0 <__alt_data_end+0xfffe7cb0>
   4fb30:	d9c01d85 	stb	r7,118(sp)
   4fb34:	003cad06 	br	4edec <__alt_data_end+0xfffe7cec>
   4fb38:	d9c01d85 	stb	r7,118(sp)
   4fb3c:	003d7d06 	br	4f134 <__alt_data_end+0xfffe8034>
   4fb40:	d9c01d85 	stb	r7,118(sp)
   4fb44:	003d5f06 	br	4f0c4 <__alt_data_end+0xfffe7fc4>
   4fb48:	a080004c 	andi	r2,r20,1
   4fb4c:	0039883a 	mov	fp,zero
   4fb50:	10000526 	beq	r2,zero,4fb68 <___vfiprintf_internal_r+0x1428>
   4fb54:	00800c04 	movi	r2,48
   4fb58:	d88019c5 	stb	r2,103(sp)
   4fb5c:	dcc02717 	ldw	r19,156(sp)
   4fb60:	dd4019c4 	addi	r21,sp,103
   4fb64:	003bf606 	br	4eb40 <__alt_data_end+0xfffe7a40>
   4fb68:	0027883a 	mov	r19,zero
   4fb6c:	dd401a04 	addi	r21,sp,104
   4fb70:	003bf306 	br	4eb40 <__alt_data_end+0xfffe7a40>
   4fb74:	d9c01d85 	stb	r7,118(sp)
   4fb78:	003dc806 	br	4f29c <__alt_data_end+0xfffe819c>
   4fb7c:	d9c01d85 	stb	r7,118(sp)
   4fb80:	003d3a06 	br	4f06c <__alt_data_end+0xfffe7f6c>
   4fb84:	d9c01d85 	stb	r7,118(sp)
   4fb88:	003d2a06 	br	4f034 <__alt_data_end+0xfffe7f34>
   4fb8c:	d9c01d85 	stb	r7,118(sp)
   4fb90:	003cde06 	br	4ef0c <__alt_data_end+0xfffe7e0c>
   4fb94:	d9c01d85 	stb	r7,118(sp)
   4fb98:	003cbc06 	br	4ee8c <__alt_data_end+0xfffe7d8c>

0004fb9c <__vfiprintf_internal>:
   4fb9c:	00800174 	movhi	r2,5
   4fba0:	109e7004 	addi	r2,r2,31168
   4fba4:	300f883a 	mov	r7,r6
   4fba8:	280d883a 	mov	r6,r5
   4fbac:	200b883a 	mov	r5,r4
   4fbb0:	11000017 	ldw	r4,0(r2)
   4fbb4:	004e7401 	jmpi	4e740 <___vfiprintf_internal_r>

0004fbb8 <__sbprintf>:
   4fbb8:	2880030b 	ldhu	r2,12(r5)
   4fbbc:	2ac01917 	ldw	r11,100(r5)
   4fbc0:	2a80038b 	ldhu	r10,14(r5)
   4fbc4:	2a400717 	ldw	r9,28(r5)
   4fbc8:	2a000917 	ldw	r8,36(r5)
   4fbcc:	defee204 	addi	sp,sp,-1144
   4fbd0:	00c10004 	movi	r3,1024
   4fbd4:	dc011a15 	stw	r16,1128(sp)
   4fbd8:	10bfff4c 	andi	r2,r2,65533
   4fbdc:	2821883a 	mov	r16,r5
   4fbe0:	d8cb883a 	add	r5,sp,r3
   4fbe4:	dc811c15 	stw	r18,1136(sp)
   4fbe8:	dc411b15 	stw	r17,1132(sp)
   4fbec:	dfc11d15 	stw	ra,1140(sp)
   4fbf0:	2025883a 	mov	r18,r4
   4fbf4:	d881030d 	sth	r2,1036(sp)
   4fbf8:	dac11915 	stw	r11,1124(sp)
   4fbfc:	da81038d 	sth	r10,1038(sp)
   4fc00:	da410715 	stw	r9,1052(sp)
   4fc04:	da010915 	stw	r8,1060(sp)
   4fc08:	dec10015 	stw	sp,1024(sp)
   4fc0c:	dec10415 	stw	sp,1040(sp)
   4fc10:	d8c10215 	stw	r3,1032(sp)
   4fc14:	d8c10515 	stw	r3,1044(sp)
   4fc18:	d8010615 	stw	zero,1048(sp)
   4fc1c:	004e7400 	call	4e740 <___vfiprintf_internal_r>
   4fc20:	1023883a 	mov	r17,r2
   4fc24:	10000416 	blt	r2,zero,4fc38 <__sbprintf+0x80>
   4fc28:	d9410004 	addi	r5,sp,1024
   4fc2c:	9009883a 	mov	r4,r18
   4fc30:	004b0680 	call	4b068 <_fflush_r>
   4fc34:	10000d1e 	bne	r2,zero,4fc6c <__sbprintf+0xb4>
   4fc38:	d881030b 	ldhu	r2,1036(sp)
   4fc3c:	1080100c 	andi	r2,r2,64
   4fc40:	10000326 	beq	r2,zero,4fc50 <__sbprintf+0x98>
   4fc44:	8080030b 	ldhu	r2,12(r16)
   4fc48:	10801014 	ori	r2,r2,64
   4fc4c:	8080030d 	sth	r2,12(r16)
   4fc50:	8805883a 	mov	r2,r17
   4fc54:	dfc11d17 	ldw	ra,1140(sp)
   4fc58:	dc811c17 	ldw	r18,1136(sp)
   4fc5c:	dc411b17 	ldw	r17,1132(sp)
   4fc60:	dc011a17 	ldw	r16,1128(sp)
   4fc64:	dec11e04 	addi	sp,sp,1144
   4fc68:	f800283a 	ret
   4fc6c:	047fffc4 	movi	r17,-1
   4fc70:	003ff106 	br	4fc38 <__alt_data_end+0xfffe8b38>

0004fc74 <_write_r>:
   4fc74:	defffd04 	addi	sp,sp,-12
   4fc78:	2805883a 	mov	r2,r5
   4fc7c:	dc000015 	stw	r16,0(sp)
   4fc80:	040001b4 	movhi	r16,6
   4fc84:	dc400115 	stw	r17,4(sp)
   4fc88:	300b883a 	mov	r5,r6
   4fc8c:	84255704 	addi	r16,r16,-27300
   4fc90:	2023883a 	mov	r17,r4
   4fc94:	380d883a 	mov	r6,r7
   4fc98:	1009883a 	mov	r4,r2
   4fc9c:	dfc00215 	stw	ra,8(sp)
   4fca0:	80000015 	stw	zero,0(r16)
   4fca4:	0051a400 	call	51a40 <write>
   4fca8:	00ffffc4 	movi	r3,-1
   4fcac:	10c00526 	beq	r2,r3,4fcc4 <_write_r+0x50>
   4fcb0:	dfc00217 	ldw	ra,8(sp)
   4fcb4:	dc400117 	ldw	r17,4(sp)
   4fcb8:	dc000017 	ldw	r16,0(sp)
   4fcbc:	dec00304 	addi	sp,sp,12
   4fcc0:	f800283a 	ret
   4fcc4:	80c00017 	ldw	r3,0(r16)
   4fcc8:	183ff926 	beq	r3,zero,4fcb0 <__alt_data_end+0xfffe8bb0>
   4fccc:	88c00015 	stw	r3,0(r17)
   4fcd0:	003ff706 	br	4fcb0 <__alt_data_end+0xfffe8bb0>

0004fcd4 <_close_r>:
   4fcd4:	defffd04 	addi	sp,sp,-12
   4fcd8:	dc000015 	stw	r16,0(sp)
   4fcdc:	040001b4 	movhi	r16,6
   4fce0:	dc400115 	stw	r17,4(sp)
   4fce4:	84255704 	addi	r16,r16,-27300
   4fce8:	2023883a 	mov	r17,r4
   4fcec:	2809883a 	mov	r4,r5
   4fcf0:	dfc00215 	stw	ra,8(sp)
   4fcf4:	80000015 	stw	zero,0(r16)
   4fcf8:	00512300 	call	51230 <close>
   4fcfc:	00ffffc4 	movi	r3,-1
   4fd00:	10c00526 	beq	r2,r3,4fd18 <_close_r+0x44>
   4fd04:	dfc00217 	ldw	ra,8(sp)
   4fd08:	dc400117 	ldw	r17,4(sp)
   4fd0c:	dc000017 	ldw	r16,0(sp)
   4fd10:	dec00304 	addi	sp,sp,12
   4fd14:	f800283a 	ret
   4fd18:	80c00017 	ldw	r3,0(r16)
   4fd1c:	183ff926 	beq	r3,zero,4fd04 <__alt_data_end+0xfffe8c04>
   4fd20:	88c00015 	stw	r3,0(r17)
   4fd24:	003ff706 	br	4fd04 <__alt_data_end+0xfffe8c04>

0004fd28 <_calloc_r>:
   4fd28:	298b383a 	mul	r5,r5,r6
   4fd2c:	defffe04 	addi	sp,sp,-8
   4fd30:	dfc00115 	stw	ra,4(sp)
   4fd34:	dc000015 	stw	r16,0(sp)
   4fd38:	004c1a40 	call	4c1a4 <_malloc_r>
   4fd3c:	10002926 	beq	r2,zero,4fde4 <_calloc_r+0xbc>
   4fd40:	11bfff17 	ldw	r6,-4(r2)
   4fd44:	1021883a 	mov	r16,r2
   4fd48:	00bfff04 	movi	r2,-4
   4fd4c:	308c703a 	and	r6,r6,r2
   4fd50:	00c00904 	movi	r3,36
   4fd54:	308d883a 	add	r6,r6,r2
   4fd58:	19801636 	bltu	r3,r6,4fdb4 <_calloc_r+0x8c>
   4fd5c:	008004c4 	movi	r2,19
   4fd60:	11800b2e 	bgeu	r2,r6,4fd90 <_calloc_r+0x68>
   4fd64:	80000015 	stw	zero,0(r16)
   4fd68:	80000115 	stw	zero,4(r16)
   4fd6c:	008006c4 	movi	r2,27
   4fd70:	11801a2e 	bgeu	r2,r6,4fddc <_calloc_r+0xb4>
   4fd74:	80000215 	stw	zero,8(r16)
   4fd78:	80000315 	stw	zero,12(r16)
   4fd7c:	30c0151e 	bne	r6,r3,4fdd4 <_calloc_r+0xac>
   4fd80:	80000415 	stw	zero,16(r16)
   4fd84:	80800604 	addi	r2,r16,24
   4fd88:	80000515 	stw	zero,20(r16)
   4fd8c:	00000106 	br	4fd94 <_calloc_r+0x6c>
   4fd90:	8005883a 	mov	r2,r16
   4fd94:	10000015 	stw	zero,0(r2)
   4fd98:	10000115 	stw	zero,4(r2)
   4fd9c:	10000215 	stw	zero,8(r2)
   4fda0:	8005883a 	mov	r2,r16
   4fda4:	dfc00117 	ldw	ra,4(sp)
   4fda8:	dc000017 	ldw	r16,0(sp)
   4fdac:	dec00204 	addi	sp,sp,8
   4fdb0:	f800283a 	ret
   4fdb4:	000b883a 	mov	r5,zero
   4fdb8:	8009883a 	mov	r4,r16
   4fdbc:	004cd380 	call	4cd38 <memset>
   4fdc0:	8005883a 	mov	r2,r16
   4fdc4:	dfc00117 	ldw	ra,4(sp)
   4fdc8:	dc000017 	ldw	r16,0(sp)
   4fdcc:	dec00204 	addi	sp,sp,8
   4fdd0:	f800283a 	ret
   4fdd4:	80800404 	addi	r2,r16,16
   4fdd8:	003fee06 	br	4fd94 <__alt_data_end+0xfffe8c94>
   4fddc:	80800204 	addi	r2,r16,8
   4fde0:	003fec06 	br	4fd94 <__alt_data_end+0xfffe8c94>
   4fde4:	0005883a 	mov	r2,zero
   4fde8:	003fee06 	br	4fda4 <__alt_data_end+0xfffe8ca4>

0004fdec <_fclose_r>:
   4fdec:	28003926 	beq	r5,zero,4fed4 <_fclose_r+0xe8>
   4fdf0:	defffc04 	addi	sp,sp,-16
   4fdf4:	dc400115 	stw	r17,4(sp)
   4fdf8:	dc000015 	stw	r16,0(sp)
   4fdfc:	dfc00315 	stw	ra,12(sp)
   4fe00:	dc800215 	stw	r18,8(sp)
   4fe04:	2023883a 	mov	r17,r4
   4fe08:	2821883a 	mov	r16,r5
   4fe0c:	20000226 	beq	r4,zero,4fe18 <_fclose_r+0x2c>
   4fe10:	20800e17 	ldw	r2,56(r4)
   4fe14:	10002726 	beq	r2,zero,4feb4 <_fclose_r+0xc8>
   4fe18:	8080030f 	ldh	r2,12(r16)
   4fe1c:	1000071e 	bne	r2,zero,4fe3c <_fclose_r+0x50>
   4fe20:	0005883a 	mov	r2,zero
   4fe24:	dfc00317 	ldw	ra,12(sp)
   4fe28:	dc800217 	ldw	r18,8(sp)
   4fe2c:	dc400117 	ldw	r17,4(sp)
   4fe30:	dc000017 	ldw	r16,0(sp)
   4fe34:	dec00404 	addi	sp,sp,16
   4fe38:	f800283a 	ret
   4fe3c:	800b883a 	mov	r5,r16
   4fe40:	8809883a 	mov	r4,r17
   4fe44:	004ae4c0 	call	4ae4c <__sflush_r>
   4fe48:	1025883a 	mov	r18,r2
   4fe4c:	80800b17 	ldw	r2,44(r16)
   4fe50:	10000426 	beq	r2,zero,4fe64 <_fclose_r+0x78>
   4fe54:	81400717 	ldw	r5,28(r16)
   4fe58:	8809883a 	mov	r4,r17
   4fe5c:	103ee83a 	callr	r2
   4fe60:	10001616 	blt	r2,zero,4febc <_fclose_r+0xd0>
   4fe64:	8080030b 	ldhu	r2,12(r16)
   4fe68:	1080200c 	andi	r2,r2,128
   4fe6c:	1000151e 	bne	r2,zero,4fec4 <_fclose_r+0xd8>
   4fe70:	81400c17 	ldw	r5,48(r16)
   4fe74:	28000526 	beq	r5,zero,4fe8c <_fclose_r+0xa0>
   4fe78:	80801004 	addi	r2,r16,64
   4fe7c:	28800226 	beq	r5,r2,4fe88 <_fclose_r+0x9c>
   4fe80:	8809883a 	mov	r4,r17
   4fe84:	004b5b80 	call	4b5b8 <_free_r>
   4fe88:	80000c15 	stw	zero,48(r16)
   4fe8c:	81401117 	ldw	r5,68(r16)
   4fe90:	28000326 	beq	r5,zero,4fea0 <_fclose_r+0xb4>
   4fe94:	8809883a 	mov	r4,r17
   4fe98:	004b5b80 	call	4b5b8 <_free_r>
   4fe9c:	80001115 	stw	zero,68(r16)
   4fea0:	004b4540 	call	4b454 <__sfp_lock_acquire>
   4fea4:	8000030d 	sth	zero,12(r16)
   4fea8:	004b4580 	call	4b458 <__sfp_lock_release>
   4feac:	9005883a 	mov	r2,r18
   4feb0:	003fdc06 	br	4fe24 <__alt_data_end+0xfffe8d24>
   4feb4:	004b4440 	call	4b444 <__sinit>
   4feb8:	003fd706 	br	4fe18 <__alt_data_end+0xfffe8d18>
   4febc:	04bfffc4 	movi	r18,-1
   4fec0:	003fe806 	br	4fe64 <__alt_data_end+0xfffe8d64>
   4fec4:	81400417 	ldw	r5,16(r16)
   4fec8:	8809883a 	mov	r4,r17
   4fecc:	004b5b80 	call	4b5b8 <_free_r>
   4fed0:	003fe706 	br	4fe70 <__alt_data_end+0xfffe8d70>
   4fed4:	0005883a 	mov	r2,zero
   4fed8:	f800283a 	ret

0004fedc <fclose>:
   4fedc:	00800174 	movhi	r2,5
   4fee0:	109e7004 	addi	r2,r2,31168
   4fee4:	200b883a 	mov	r5,r4
   4fee8:	11000017 	ldw	r4,0(r2)
   4feec:	004fdec1 	jmpi	4fdec <_fclose_r>

0004fef0 <__fputwc>:
   4fef0:	defff804 	addi	sp,sp,-32
   4fef4:	dcc00415 	stw	r19,16(sp)
   4fef8:	dc800315 	stw	r18,12(sp)
   4fefc:	dc000115 	stw	r16,4(sp)
   4ff00:	dfc00715 	stw	ra,28(sp)
   4ff04:	dd400615 	stw	r21,24(sp)
   4ff08:	dd000515 	stw	r20,20(sp)
   4ff0c:	dc400215 	stw	r17,8(sp)
   4ff10:	2027883a 	mov	r19,r4
   4ff14:	2825883a 	mov	r18,r5
   4ff18:	3021883a 	mov	r16,r6
   4ff1c:	004bf940 	call	4bf94 <__locale_mb_cur_max>
   4ff20:	00c00044 	movi	r3,1
   4ff24:	10c03e26 	beq	r2,r3,50020 <__fputwc+0x130>
   4ff28:	81c01704 	addi	r7,r16,92
   4ff2c:	900d883a 	mov	r6,r18
   4ff30:	d80b883a 	mov	r5,sp
   4ff34:	9809883a 	mov	r4,r19
   4ff38:	00503c00 	call	503c0 <_wcrtomb_r>
   4ff3c:	1029883a 	mov	r20,r2
   4ff40:	00bfffc4 	movi	r2,-1
   4ff44:	a0802026 	beq	r20,r2,4ffc8 <__fputwc+0xd8>
   4ff48:	d9400003 	ldbu	r5,0(sp)
   4ff4c:	a0001c26 	beq	r20,zero,4ffc0 <__fputwc+0xd0>
   4ff50:	0023883a 	mov	r17,zero
   4ff54:	05400284 	movi	r21,10
   4ff58:	00000906 	br	4ff80 <__fputwc+0x90>
   4ff5c:	80800017 	ldw	r2,0(r16)
   4ff60:	11400005 	stb	r5,0(r2)
   4ff64:	80c00017 	ldw	r3,0(r16)
   4ff68:	18c00044 	addi	r3,r3,1
   4ff6c:	80c00015 	stw	r3,0(r16)
   4ff70:	8c400044 	addi	r17,r17,1
   4ff74:	dc45883a 	add	r2,sp,r17
   4ff78:	8d00112e 	bgeu	r17,r20,4ffc0 <__fputwc+0xd0>
   4ff7c:	11400003 	ldbu	r5,0(r2)
   4ff80:	80c00217 	ldw	r3,8(r16)
   4ff84:	18ffffc4 	addi	r3,r3,-1
   4ff88:	80c00215 	stw	r3,8(r16)
   4ff8c:	183ff30e 	bge	r3,zero,4ff5c <__alt_data_end+0xfffe8e5c>
   4ff90:	80800617 	ldw	r2,24(r16)
   4ff94:	18801916 	blt	r3,r2,4fffc <__fputwc+0x10c>
   4ff98:	80800017 	ldw	r2,0(r16)
   4ff9c:	11400005 	stb	r5,0(r2)
   4ffa0:	80800017 	ldw	r2,0(r16)
   4ffa4:	10c00003 	ldbu	r3,0(r2)
   4ffa8:	10800044 	addi	r2,r2,1
   4ffac:	1d402326 	beq	r3,r21,5003c <__fputwc+0x14c>
   4ffb0:	80800015 	stw	r2,0(r16)
   4ffb4:	8c400044 	addi	r17,r17,1
   4ffb8:	dc45883a 	add	r2,sp,r17
   4ffbc:	8d3fef36 	bltu	r17,r20,4ff7c <__alt_data_end+0xfffe8e7c>
   4ffc0:	9005883a 	mov	r2,r18
   4ffc4:	00000406 	br	4ffd8 <__fputwc+0xe8>
   4ffc8:	80c0030b 	ldhu	r3,12(r16)
   4ffcc:	a005883a 	mov	r2,r20
   4ffd0:	18c01014 	ori	r3,r3,64
   4ffd4:	80c0030d 	sth	r3,12(r16)
   4ffd8:	dfc00717 	ldw	ra,28(sp)
   4ffdc:	dd400617 	ldw	r21,24(sp)
   4ffe0:	dd000517 	ldw	r20,20(sp)
   4ffe4:	dcc00417 	ldw	r19,16(sp)
   4ffe8:	dc800317 	ldw	r18,12(sp)
   4ffec:	dc400217 	ldw	r17,8(sp)
   4fff0:	dc000117 	ldw	r16,4(sp)
   4fff4:	dec00804 	addi	sp,sp,32
   4fff8:	f800283a 	ret
   4fffc:	800d883a 	mov	r6,r16
   50000:	29403fcc 	andi	r5,r5,255
   50004:	9809883a 	mov	r4,r19
   50008:	00502680 	call	50268 <__swbuf_r>
   5000c:	10bfffe0 	cmpeqi	r2,r2,-1
   50010:	10803fcc 	andi	r2,r2,255
   50014:	103fd626 	beq	r2,zero,4ff70 <__alt_data_end+0xfffe8e70>
   50018:	00bfffc4 	movi	r2,-1
   5001c:	003fee06 	br	4ffd8 <__alt_data_end+0xfffe8ed8>
   50020:	90ffffc4 	addi	r3,r18,-1
   50024:	01003f84 	movi	r4,254
   50028:	20ffbf36 	bltu	r4,r3,4ff28 <__alt_data_end+0xfffe8e28>
   5002c:	900b883a 	mov	r5,r18
   50030:	dc800005 	stb	r18,0(sp)
   50034:	1029883a 	mov	r20,r2
   50038:	003fc506 	br	4ff50 <__alt_data_end+0xfffe8e50>
   5003c:	800d883a 	mov	r6,r16
   50040:	a80b883a 	mov	r5,r21
   50044:	9809883a 	mov	r4,r19
   50048:	00502680 	call	50268 <__swbuf_r>
   5004c:	10bfffe0 	cmpeqi	r2,r2,-1
   50050:	003fef06 	br	50010 <__alt_data_end+0xfffe8f10>

00050054 <_fputwc_r>:
   50054:	3080030b 	ldhu	r2,12(r6)
   50058:	10c8000c 	andi	r3,r2,8192
   5005c:	1800051e 	bne	r3,zero,50074 <_fputwc_r+0x20>
   50060:	30c01917 	ldw	r3,100(r6)
   50064:	10880014 	ori	r2,r2,8192
   50068:	3080030d 	sth	r2,12(r6)
   5006c:	18880014 	ori	r2,r3,8192
   50070:	30801915 	stw	r2,100(r6)
   50074:	004fef01 	jmpi	4fef0 <__fputwc>

00050078 <fputwc>:
   50078:	00800174 	movhi	r2,5
   5007c:	defffc04 	addi	sp,sp,-16
   50080:	109e7004 	addi	r2,r2,31168
   50084:	dc000115 	stw	r16,4(sp)
   50088:	14000017 	ldw	r16,0(r2)
   5008c:	dc400215 	stw	r17,8(sp)
   50090:	dfc00315 	stw	ra,12(sp)
   50094:	2023883a 	mov	r17,r4
   50098:	80000226 	beq	r16,zero,500a4 <fputwc+0x2c>
   5009c:	80800e17 	ldw	r2,56(r16)
   500a0:	10001026 	beq	r2,zero,500e4 <fputwc+0x6c>
   500a4:	2880030b 	ldhu	r2,12(r5)
   500a8:	10c8000c 	andi	r3,r2,8192
   500ac:	1800051e 	bne	r3,zero,500c4 <fputwc+0x4c>
   500b0:	28c01917 	ldw	r3,100(r5)
   500b4:	10880014 	ori	r2,r2,8192
   500b8:	2880030d 	sth	r2,12(r5)
   500bc:	18880014 	ori	r2,r3,8192
   500c0:	28801915 	stw	r2,100(r5)
   500c4:	280d883a 	mov	r6,r5
   500c8:	8009883a 	mov	r4,r16
   500cc:	880b883a 	mov	r5,r17
   500d0:	dfc00317 	ldw	ra,12(sp)
   500d4:	dc400217 	ldw	r17,8(sp)
   500d8:	dc000117 	ldw	r16,4(sp)
   500dc:	dec00404 	addi	sp,sp,16
   500e0:	004fef01 	jmpi	4fef0 <__fputwc>
   500e4:	8009883a 	mov	r4,r16
   500e8:	d9400015 	stw	r5,0(sp)
   500ec:	004b4440 	call	4b444 <__sinit>
   500f0:	d9400017 	ldw	r5,0(sp)
   500f4:	003feb06 	br	500a4 <__alt_data_end+0xfffe8fa4>

000500f8 <_fstat_r>:
   500f8:	defffd04 	addi	sp,sp,-12
   500fc:	2805883a 	mov	r2,r5
   50100:	dc000015 	stw	r16,0(sp)
   50104:	040001b4 	movhi	r16,6
   50108:	dc400115 	stw	r17,4(sp)
   5010c:	84255704 	addi	r16,r16,-27300
   50110:	2023883a 	mov	r17,r4
   50114:	300b883a 	mov	r5,r6
   50118:	1009883a 	mov	r4,r2
   5011c:	dfc00215 	stw	ra,8(sp)
   50120:	80000015 	stw	zero,0(r16)
   50124:	00513680 	call	51368 <fstat>
   50128:	00ffffc4 	movi	r3,-1
   5012c:	10c00526 	beq	r2,r3,50144 <_fstat_r+0x4c>
   50130:	dfc00217 	ldw	ra,8(sp)
   50134:	dc400117 	ldw	r17,4(sp)
   50138:	dc000017 	ldw	r16,0(sp)
   5013c:	dec00304 	addi	sp,sp,12
   50140:	f800283a 	ret
   50144:	80c00017 	ldw	r3,0(r16)
   50148:	183ff926 	beq	r3,zero,50130 <__alt_data_end+0xfffe9030>
   5014c:	88c00015 	stw	r3,0(r17)
   50150:	003ff706 	br	50130 <__alt_data_end+0xfffe9030>

00050154 <_isatty_r>:
   50154:	defffd04 	addi	sp,sp,-12
   50158:	dc000015 	stw	r16,0(sp)
   5015c:	040001b4 	movhi	r16,6
   50160:	dc400115 	stw	r17,4(sp)
   50164:	84255704 	addi	r16,r16,-27300
   50168:	2023883a 	mov	r17,r4
   5016c:	2809883a 	mov	r4,r5
   50170:	dfc00215 	stw	ra,8(sp)
   50174:	80000015 	stw	zero,0(r16)
   50178:	00514540 	call	51454 <isatty>
   5017c:	00ffffc4 	movi	r3,-1
   50180:	10c00526 	beq	r2,r3,50198 <_isatty_r+0x44>
   50184:	dfc00217 	ldw	ra,8(sp)
   50188:	dc400117 	ldw	r17,4(sp)
   5018c:	dc000017 	ldw	r16,0(sp)
   50190:	dec00304 	addi	sp,sp,12
   50194:	f800283a 	ret
   50198:	80c00017 	ldw	r3,0(r16)
   5019c:	183ff926 	beq	r3,zero,50184 <__alt_data_end+0xfffe9084>
   501a0:	88c00015 	stw	r3,0(r17)
   501a4:	003ff706 	br	50184 <__alt_data_end+0xfffe9084>

000501a8 <_lseek_r>:
   501a8:	defffd04 	addi	sp,sp,-12
   501ac:	2805883a 	mov	r2,r5
   501b0:	dc000015 	stw	r16,0(sp)
   501b4:	040001b4 	movhi	r16,6
   501b8:	dc400115 	stw	r17,4(sp)
   501bc:	300b883a 	mov	r5,r6
   501c0:	84255704 	addi	r16,r16,-27300
   501c4:	2023883a 	mov	r17,r4
   501c8:	380d883a 	mov	r6,r7
   501cc:	1009883a 	mov	r4,r2
   501d0:	dfc00215 	stw	ra,8(sp)
   501d4:	80000015 	stw	zero,0(r16)
   501d8:	00516200 	call	51620 <lseek>
   501dc:	00ffffc4 	movi	r3,-1
   501e0:	10c00526 	beq	r2,r3,501f8 <_lseek_r+0x50>
   501e4:	dfc00217 	ldw	ra,8(sp)
   501e8:	dc400117 	ldw	r17,4(sp)
   501ec:	dc000017 	ldw	r16,0(sp)
   501f0:	dec00304 	addi	sp,sp,12
   501f4:	f800283a 	ret
   501f8:	80c00017 	ldw	r3,0(r16)
   501fc:	183ff926 	beq	r3,zero,501e4 <__alt_data_end+0xfffe90e4>
   50200:	88c00015 	stw	r3,0(r17)
   50204:	003ff706 	br	501e4 <__alt_data_end+0xfffe90e4>

00050208 <_read_r>:
   50208:	defffd04 	addi	sp,sp,-12
   5020c:	2805883a 	mov	r2,r5
   50210:	dc000015 	stw	r16,0(sp)
   50214:	040001b4 	movhi	r16,6
   50218:	dc400115 	stw	r17,4(sp)
   5021c:	300b883a 	mov	r5,r6
   50220:	84255704 	addi	r16,r16,-27300
   50224:	2023883a 	mov	r17,r4
   50228:	380d883a 	mov	r6,r7
   5022c:	1009883a 	mov	r4,r2
   50230:	dfc00215 	stw	ra,8(sp)
   50234:	80000015 	stw	zero,0(r16)
   50238:	00517f40 	call	517f4 <read>
   5023c:	00ffffc4 	movi	r3,-1
   50240:	10c00526 	beq	r2,r3,50258 <_read_r+0x50>
   50244:	dfc00217 	ldw	ra,8(sp)
   50248:	dc400117 	ldw	r17,4(sp)
   5024c:	dc000017 	ldw	r16,0(sp)
   50250:	dec00304 	addi	sp,sp,12
   50254:	f800283a 	ret
   50258:	80c00017 	ldw	r3,0(r16)
   5025c:	183ff926 	beq	r3,zero,50244 <__alt_data_end+0xfffe9144>
   50260:	88c00015 	stw	r3,0(r17)
   50264:	003ff706 	br	50244 <__alt_data_end+0xfffe9144>

00050268 <__swbuf_r>:
   50268:	defffb04 	addi	sp,sp,-20
   5026c:	dcc00315 	stw	r19,12(sp)
   50270:	dc800215 	stw	r18,8(sp)
   50274:	dc000015 	stw	r16,0(sp)
   50278:	dfc00415 	stw	ra,16(sp)
   5027c:	dc400115 	stw	r17,4(sp)
   50280:	2025883a 	mov	r18,r4
   50284:	2827883a 	mov	r19,r5
   50288:	3021883a 	mov	r16,r6
   5028c:	20000226 	beq	r4,zero,50298 <__swbuf_r+0x30>
   50290:	20800e17 	ldw	r2,56(r4)
   50294:	10004226 	beq	r2,zero,503a0 <__swbuf_r+0x138>
   50298:	80800617 	ldw	r2,24(r16)
   5029c:	8100030b 	ldhu	r4,12(r16)
   502a0:	80800215 	stw	r2,8(r16)
   502a4:	2080020c 	andi	r2,r4,8
   502a8:	10003626 	beq	r2,zero,50384 <__swbuf_r+0x11c>
   502ac:	80c00417 	ldw	r3,16(r16)
   502b0:	18003426 	beq	r3,zero,50384 <__swbuf_r+0x11c>
   502b4:	2088000c 	andi	r2,r4,8192
   502b8:	9c403fcc 	andi	r17,r19,255
   502bc:	10001a26 	beq	r2,zero,50328 <__swbuf_r+0xc0>
   502c0:	80800017 	ldw	r2,0(r16)
   502c4:	81000517 	ldw	r4,20(r16)
   502c8:	10c7c83a 	sub	r3,r2,r3
   502cc:	1900200e 	bge	r3,r4,50350 <__swbuf_r+0xe8>
   502d0:	18c00044 	addi	r3,r3,1
   502d4:	81000217 	ldw	r4,8(r16)
   502d8:	11400044 	addi	r5,r2,1
   502dc:	81400015 	stw	r5,0(r16)
   502e0:	213fffc4 	addi	r4,r4,-1
   502e4:	81000215 	stw	r4,8(r16)
   502e8:	14c00005 	stb	r19,0(r2)
   502ec:	80800517 	ldw	r2,20(r16)
   502f0:	10c01e26 	beq	r2,r3,5036c <__swbuf_r+0x104>
   502f4:	8080030b 	ldhu	r2,12(r16)
   502f8:	1080004c 	andi	r2,r2,1
   502fc:	10000226 	beq	r2,zero,50308 <__swbuf_r+0xa0>
   50300:	00800284 	movi	r2,10
   50304:	88801926 	beq	r17,r2,5036c <__swbuf_r+0x104>
   50308:	8805883a 	mov	r2,r17
   5030c:	dfc00417 	ldw	ra,16(sp)
   50310:	dcc00317 	ldw	r19,12(sp)
   50314:	dc800217 	ldw	r18,8(sp)
   50318:	dc400117 	ldw	r17,4(sp)
   5031c:	dc000017 	ldw	r16,0(sp)
   50320:	dec00504 	addi	sp,sp,20
   50324:	f800283a 	ret
   50328:	81401917 	ldw	r5,100(r16)
   5032c:	00b7ffc4 	movi	r2,-8193
   50330:	21080014 	ori	r4,r4,8192
   50334:	2884703a 	and	r2,r5,r2
   50338:	80801915 	stw	r2,100(r16)
   5033c:	80800017 	ldw	r2,0(r16)
   50340:	8100030d 	sth	r4,12(r16)
   50344:	81000517 	ldw	r4,20(r16)
   50348:	10c7c83a 	sub	r3,r2,r3
   5034c:	193fe016 	blt	r3,r4,502d0 <__alt_data_end+0xfffe91d0>
   50350:	800b883a 	mov	r5,r16
   50354:	9009883a 	mov	r4,r18
   50358:	004b0680 	call	4b068 <_fflush_r>
   5035c:	1000071e 	bne	r2,zero,5037c <__swbuf_r+0x114>
   50360:	80800017 	ldw	r2,0(r16)
   50364:	00c00044 	movi	r3,1
   50368:	003fda06 	br	502d4 <__alt_data_end+0xfffe91d4>
   5036c:	800b883a 	mov	r5,r16
   50370:	9009883a 	mov	r4,r18
   50374:	004b0680 	call	4b068 <_fflush_r>
   50378:	103fe326 	beq	r2,zero,50308 <__alt_data_end+0xfffe9208>
   5037c:	00bfffc4 	movi	r2,-1
   50380:	003fe206 	br	5030c <__alt_data_end+0xfffe920c>
   50384:	800b883a 	mov	r5,r16
   50388:	9009883a 	mov	r4,r18
   5038c:	00494700 	call	49470 <__swsetup_r>
   50390:	103ffa1e 	bne	r2,zero,5037c <__alt_data_end+0xfffe927c>
   50394:	8100030b 	ldhu	r4,12(r16)
   50398:	80c00417 	ldw	r3,16(r16)
   5039c:	003fc506 	br	502b4 <__alt_data_end+0xfffe91b4>
   503a0:	004b4440 	call	4b444 <__sinit>
   503a4:	003fbc06 	br	50298 <__alt_data_end+0xfffe9198>

000503a8 <__swbuf>:
   503a8:	00800174 	movhi	r2,5
   503ac:	109e7004 	addi	r2,r2,31168
   503b0:	280d883a 	mov	r6,r5
   503b4:	200b883a 	mov	r5,r4
   503b8:	11000017 	ldw	r4,0(r2)
   503bc:	00502681 	jmpi	50268 <__swbuf_r>

000503c0 <_wcrtomb_r>:
   503c0:	defff604 	addi	sp,sp,-40
   503c4:	00800174 	movhi	r2,5
   503c8:	dc800815 	stw	r18,32(sp)
   503cc:	dc400715 	stw	r17,28(sp)
   503d0:	dc000615 	stw	r16,24(sp)
   503d4:	109e7404 	addi	r2,r2,31184
   503d8:	dfc00915 	stw	ra,36(sp)
   503dc:	2021883a 	mov	r16,r4
   503e0:	3823883a 	mov	r17,r7
   503e4:	14800017 	ldw	r18,0(r2)
   503e8:	28001426 	beq	r5,zero,5043c <_wcrtomb_r+0x7c>
   503ec:	d9400415 	stw	r5,16(sp)
   503f0:	d9800515 	stw	r6,20(sp)
   503f4:	004bf880 	call	4bf88 <__locale_charset>
   503f8:	d9800517 	ldw	r6,20(sp)
   503fc:	d9400417 	ldw	r5,16(sp)
   50400:	100f883a 	mov	r7,r2
   50404:	dc400015 	stw	r17,0(sp)
   50408:	8009883a 	mov	r4,r16
   5040c:	903ee83a 	callr	r18
   50410:	00ffffc4 	movi	r3,-1
   50414:	10c0031e 	bne	r2,r3,50424 <_wcrtomb_r+0x64>
   50418:	88000015 	stw	zero,0(r17)
   5041c:	00c02284 	movi	r3,138
   50420:	80c00015 	stw	r3,0(r16)
   50424:	dfc00917 	ldw	ra,36(sp)
   50428:	dc800817 	ldw	r18,32(sp)
   5042c:	dc400717 	ldw	r17,28(sp)
   50430:	dc000617 	ldw	r16,24(sp)
   50434:	dec00a04 	addi	sp,sp,40
   50438:	f800283a 	ret
   5043c:	004bf880 	call	4bf88 <__locale_charset>
   50440:	100f883a 	mov	r7,r2
   50444:	dc400015 	stw	r17,0(sp)
   50448:	000d883a 	mov	r6,zero
   5044c:	d9400104 	addi	r5,sp,4
   50450:	8009883a 	mov	r4,r16
   50454:	903ee83a 	callr	r18
   50458:	003fed06 	br	50410 <__alt_data_end+0xfffe9310>

0005045c <wcrtomb>:
   5045c:	defff604 	addi	sp,sp,-40
   50460:	00800174 	movhi	r2,5
   50464:	dc800615 	stw	r18,24(sp)
   50468:	dc400515 	stw	r17,20(sp)
   5046c:	109e7004 	addi	r2,r2,31168
   50470:	dfc00915 	stw	ra,36(sp)
   50474:	dd000815 	stw	r20,32(sp)
   50478:	dcc00715 	stw	r19,28(sp)
   5047c:	dc000415 	stw	r16,16(sp)
   50480:	3025883a 	mov	r18,r6
   50484:	14400017 	ldw	r17,0(r2)
   50488:	20001926 	beq	r4,zero,504f0 <wcrtomb+0x94>
   5048c:	00800174 	movhi	r2,5
   50490:	109e7404 	addi	r2,r2,31184
   50494:	15000017 	ldw	r20,0(r2)
   50498:	2021883a 	mov	r16,r4
   5049c:	2827883a 	mov	r19,r5
   504a0:	004bf880 	call	4bf88 <__locale_charset>
   504a4:	100f883a 	mov	r7,r2
   504a8:	dc800015 	stw	r18,0(sp)
   504ac:	980d883a 	mov	r6,r19
   504b0:	800b883a 	mov	r5,r16
   504b4:	8809883a 	mov	r4,r17
   504b8:	a03ee83a 	callr	r20
   504bc:	00ffffc4 	movi	r3,-1
   504c0:	10c0031e 	bne	r2,r3,504d0 <wcrtomb+0x74>
   504c4:	90000015 	stw	zero,0(r18)
   504c8:	00c02284 	movi	r3,138
   504cc:	88c00015 	stw	r3,0(r17)
   504d0:	dfc00917 	ldw	ra,36(sp)
   504d4:	dd000817 	ldw	r20,32(sp)
   504d8:	dcc00717 	ldw	r19,28(sp)
   504dc:	dc800617 	ldw	r18,24(sp)
   504e0:	dc400517 	ldw	r17,20(sp)
   504e4:	dc000417 	ldw	r16,16(sp)
   504e8:	dec00a04 	addi	sp,sp,40
   504ec:	f800283a 	ret
   504f0:	00800174 	movhi	r2,5
   504f4:	109e7404 	addi	r2,r2,31184
   504f8:	14000017 	ldw	r16,0(r2)
   504fc:	004bf880 	call	4bf88 <__locale_charset>
   50500:	100f883a 	mov	r7,r2
   50504:	dc800015 	stw	r18,0(sp)
   50508:	000d883a 	mov	r6,zero
   5050c:	d9400104 	addi	r5,sp,4
   50510:	8809883a 	mov	r4,r17
   50514:	803ee83a 	callr	r16
   50518:	003fe806 	br	504bc <__alt_data_end+0xfffe93bc>

0005051c <__ascii_wctomb>:
   5051c:	28000526 	beq	r5,zero,50534 <__ascii_wctomb+0x18>
   50520:	00803fc4 	movi	r2,255
   50524:	11800536 	bltu	r2,r6,5053c <__ascii_wctomb+0x20>
   50528:	29800005 	stb	r6,0(r5)
   5052c:	00800044 	movi	r2,1
   50530:	f800283a 	ret
   50534:	0005883a 	mov	r2,zero
   50538:	f800283a 	ret
   5053c:	00802284 	movi	r2,138
   50540:	20800015 	stw	r2,0(r4)
   50544:	00bfffc4 	movi	r2,-1
   50548:	f800283a 	ret

0005054c <_wctomb_r>:
   5054c:	00800174 	movhi	r2,5
   50550:	defff904 	addi	sp,sp,-28
   50554:	109e7404 	addi	r2,r2,31184
   50558:	dfc00615 	stw	ra,24(sp)
   5055c:	dc400515 	stw	r17,20(sp)
   50560:	dc000415 	stw	r16,16(sp)
   50564:	3823883a 	mov	r17,r7
   50568:	14000017 	ldw	r16,0(r2)
   5056c:	d9000115 	stw	r4,4(sp)
   50570:	d9400215 	stw	r5,8(sp)
   50574:	d9800315 	stw	r6,12(sp)
   50578:	004bf880 	call	4bf88 <__locale_charset>
   5057c:	d9800317 	ldw	r6,12(sp)
   50580:	d9400217 	ldw	r5,8(sp)
   50584:	d9000117 	ldw	r4,4(sp)
   50588:	100f883a 	mov	r7,r2
   5058c:	dc400015 	stw	r17,0(sp)
   50590:	803ee83a 	callr	r16
   50594:	dfc00617 	ldw	ra,24(sp)
   50598:	dc400517 	ldw	r17,20(sp)
   5059c:	dc000417 	ldw	r16,16(sp)
   505a0:	dec00704 	addi	sp,sp,28
   505a4:	f800283a 	ret

000505a8 <__udivdi3>:
   505a8:	defff504 	addi	sp,sp,-44
   505ac:	dcc00415 	stw	r19,16(sp)
   505b0:	dc000115 	stw	r16,4(sp)
   505b4:	dfc00a15 	stw	ra,40(sp)
   505b8:	df000915 	stw	fp,36(sp)
   505bc:	ddc00815 	stw	r23,32(sp)
   505c0:	dd800715 	stw	r22,28(sp)
   505c4:	dd400615 	stw	r21,24(sp)
   505c8:	dd000515 	stw	r20,20(sp)
   505cc:	dc800315 	stw	r18,12(sp)
   505d0:	dc400215 	stw	r17,8(sp)
   505d4:	2027883a 	mov	r19,r4
   505d8:	2821883a 	mov	r16,r5
   505dc:	3800411e 	bne	r7,zero,506e4 <__udivdi3+0x13c>
   505e0:	3023883a 	mov	r17,r6
   505e4:	2025883a 	mov	r18,r4
   505e8:	2980522e 	bgeu	r5,r6,50734 <__udivdi3+0x18c>
   505ec:	00bfffd4 	movui	r2,65535
   505f0:	282d883a 	mov	r22,r5
   505f4:	1180a836 	bltu	r2,r6,50898 <__udivdi3+0x2f0>
   505f8:	00803fc4 	movi	r2,255
   505fc:	1185803a 	cmpltu	r2,r2,r6
   50600:	100490fa 	slli	r2,r2,3
   50604:	3086d83a 	srl	r3,r6,r2
   50608:	01000174 	movhi	r4,5
   5060c:	2116e804 	addi	r4,r4,23456
   50610:	20c7883a 	add	r3,r4,r3
   50614:	18c00003 	ldbu	r3,0(r3)
   50618:	1885883a 	add	r2,r3,r2
   5061c:	00c00804 	movi	r3,32
   50620:	1887c83a 	sub	r3,r3,r2
   50624:	18000526 	beq	r3,zero,5063c <__udivdi3+0x94>
   50628:	80e0983a 	sll	r16,r16,r3
   5062c:	9884d83a 	srl	r2,r19,r2
   50630:	30e2983a 	sll	r17,r6,r3
   50634:	98e4983a 	sll	r18,r19,r3
   50638:	142cb03a 	or	r22,r2,r16
   5063c:	882ad43a 	srli	r21,r17,16
   50640:	b009883a 	mov	r4,r22
   50644:	8d3fffcc 	andi	r20,r17,65535
   50648:	a80b883a 	mov	r5,r21
   5064c:	00432dc0 	call	432dc <__umodsi3>
   50650:	b009883a 	mov	r4,r22
   50654:	a80b883a 	mov	r5,r21
   50658:	1027883a 	mov	r19,r2
   5065c:	00432780 	call	43278 <__udivsi3>
   50660:	102d883a 	mov	r22,r2
   50664:	9826943a 	slli	r19,r19,16
   50668:	9004d43a 	srli	r2,r18,16
   5066c:	a5a1383a 	mul	r16,r20,r22
   50670:	14c4b03a 	or	r2,r2,r19
   50674:	1400052e 	bgeu	r2,r16,5068c <__udivdi3+0xe4>
   50678:	1445883a 	add	r2,r2,r17
   5067c:	b0ffffc4 	addi	r3,r22,-1
   50680:	14400136 	bltu	r2,r17,50688 <__udivdi3+0xe0>
   50684:	14012336 	bltu	r2,r16,50b14 <__udivdi3+0x56c>
   50688:	182d883a 	mov	r22,r3
   5068c:	1421c83a 	sub	r16,r2,r16
   50690:	a80b883a 	mov	r5,r21
   50694:	8009883a 	mov	r4,r16
   50698:	00432dc0 	call	432dc <__umodsi3>
   5069c:	1027883a 	mov	r19,r2
   506a0:	a80b883a 	mov	r5,r21
   506a4:	8009883a 	mov	r4,r16
   506a8:	00432780 	call	43278 <__udivsi3>
   506ac:	9826943a 	slli	r19,r19,16
   506b0:	a0a9383a 	mul	r20,r20,r2
   506b4:	94bfffcc 	andi	r18,r18,65535
   506b8:	94e4b03a 	or	r18,r18,r19
   506bc:	9500052e 	bgeu	r18,r20,506d4 <__udivdi3+0x12c>
   506c0:	8ca5883a 	add	r18,r17,r18
   506c4:	10ffffc4 	addi	r3,r2,-1
   506c8:	9440f136 	bltu	r18,r17,50a90 <__udivdi3+0x4e8>
   506cc:	9500f02e 	bgeu	r18,r20,50a90 <__udivdi3+0x4e8>
   506d0:	10bfff84 	addi	r2,r2,-2
   506d4:	b00c943a 	slli	r6,r22,16
   506d8:	0007883a 	mov	r3,zero
   506dc:	3084b03a 	or	r2,r6,r2
   506e0:	00005906 	br	50848 <__udivdi3+0x2a0>
   506e4:	29c05636 	bltu	r5,r7,50840 <__udivdi3+0x298>
   506e8:	00bfffd4 	movui	r2,65535
   506ec:	11c0622e 	bgeu	r2,r7,50878 <__udivdi3+0x2d0>
   506f0:	00804034 	movhi	r2,256
   506f4:	10bfffc4 	addi	r2,r2,-1
   506f8:	11c0ee36 	bltu	r2,r7,50ab4 <__udivdi3+0x50c>
   506fc:	00800404 	movi	r2,16
   50700:	3886d83a 	srl	r3,r7,r2
   50704:	01000174 	movhi	r4,5
   50708:	2116e804 	addi	r4,r4,23456
   5070c:	20c7883a 	add	r3,r4,r3
   50710:	18c00003 	ldbu	r3,0(r3)
   50714:	05400804 	movi	r21,32
   50718:	1885883a 	add	r2,r3,r2
   5071c:	a8abc83a 	sub	r21,r21,r2
   50720:	a800621e 	bne	r21,zero,508ac <__udivdi3+0x304>
   50724:	3c00e936 	bltu	r7,r16,50acc <__udivdi3+0x524>
   50728:	9985403a 	cmpgeu	r2,r19,r6
   5072c:	0007883a 	mov	r3,zero
   50730:	00004506 	br	50848 <__udivdi3+0x2a0>
   50734:	3000041e 	bne	r6,zero,50748 <__udivdi3+0x1a0>
   50738:	000b883a 	mov	r5,zero
   5073c:	01000044 	movi	r4,1
   50740:	00432780 	call	43278 <__udivsi3>
   50744:	1023883a 	mov	r17,r2
   50748:	00bfffd4 	movui	r2,65535
   5074c:	14404e2e 	bgeu	r2,r17,50888 <__udivdi3+0x2e0>
   50750:	00804034 	movhi	r2,256
   50754:	10bfffc4 	addi	r2,r2,-1
   50758:	1440d836 	bltu	r2,r17,50abc <__udivdi3+0x514>
   5075c:	00800404 	movi	r2,16
   50760:	8886d83a 	srl	r3,r17,r2
   50764:	01000174 	movhi	r4,5
   50768:	2116e804 	addi	r4,r4,23456
   5076c:	20c7883a 	add	r3,r4,r3
   50770:	18c00003 	ldbu	r3,0(r3)
   50774:	1885883a 	add	r2,r3,r2
   50778:	00c00804 	movi	r3,32
   5077c:	1887c83a 	sub	r3,r3,r2
   50780:	18008f1e 	bne	r3,zero,509c0 <__udivdi3+0x418>
   50784:	882ad43a 	srli	r21,r17,16
   50788:	8461c83a 	sub	r16,r16,r17
   5078c:	8d3fffcc 	andi	r20,r17,65535
   50790:	00c00044 	movi	r3,1
   50794:	8009883a 	mov	r4,r16
   50798:	a80b883a 	mov	r5,r21
   5079c:	d8c00015 	stw	r3,0(sp)
   507a0:	00432dc0 	call	432dc <__umodsi3>
   507a4:	8009883a 	mov	r4,r16
   507a8:	a80b883a 	mov	r5,r21
   507ac:	1027883a 	mov	r19,r2
   507b0:	00432780 	call	43278 <__udivsi3>
   507b4:	9826943a 	slli	r19,r19,16
   507b8:	9008d43a 	srli	r4,r18,16
   507bc:	1521383a 	mul	r16,r2,r20
   507c0:	102d883a 	mov	r22,r2
   507c4:	24c8b03a 	or	r4,r4,r19
   507c8:	d8c00017 	ldw	r3,0(sp)
   507cc:	2400052e 	bgeu	r4,r16,507e4 <__udivdi3+0x23c>
   507d0:	2449883a 	add	r4,r4,r17
   507d4:	b0bfffc4 	addi	r2,r22,-1
   507d8:	24400136 	bltu	r4,r17,507e0 <__udivdi3+0x238>
   507dc:	2400ca36 	bltu	r4,r16,50b08 <__udivdi3+0x560>
   507e0:	102d883a 	mov	r22,r2
   507e4:	2421c83a 	sub	r16,r4,r16
   507e8:	a80b883a 	mov	r5,r21
   507ec:	8009883a 	mov	r4,r16
   507f0:	d8c00015 	stw	r3,0(sp)
   507f4:	00432dc0 	call	432dc <__umodsi3>
   507f8:	1027883a 	mov	r19,r2
   507fc:	a80b883a 	mov	r5,r21
   50800:	8009883a 	mov	r4,r16
   50804:	00432780 	call	43278 <__udivsi3>
   50808:	9826943a 	slli	r19,r19,16
   5080c:	1529383a 	mul	r20,r2,r20
   50810:	94bfffcc 	andi	r18,r18,65535
   50814:	94e4b03a 	or	r18,r18,r19
   50818:	d8c00017 	ldw	r3,0(sp)
   5081c:	9500052e 	bgeu	r18,r20,50834 <__udivdi3+0x28c>
   50820:	8ca5883a 	add	r18,r17,r18
   50824:	113fffc4 	addi	r4,r2,-1
   50828:	94409736 	bltu	r18,r17,50a88 <__udivdi3+0x4e0>
   5082c:	9500962e 	bgeu	r18,r20,50a88 <__udivdi3+0x4e0>
   50830:	10bfff84 	addi	r2,r2,-2
   50834:	b00c943a 	slli	r6,r22,16
   50838:	3084b03a 	or	r2,r6,r2
   5083c:	00000206 	br	50848 <__udivdi3+0x2a0>
   50840:	0007883a 	mov	r3,zero
   50844:	0005883a 	mov	r2,zero
   50848:	dfc00a17 	ldw	ra,40(sp)
   5084c:	df000917 	ldw	fp,36(sp)
   50850:	ddc00817 	ldw	r23,32(sp)
   50854:	dd800717 	ldw	r22,28(sp)
   50858:	dd400617 	ldw	r21,24(sp)
   5085c:	dd000517 	ldw	r20,20(sp)
   50860:	dcc00417 	ldw	r19,16(sp)
   50864:	dc800317 	ldw	r18,12(sp)
   50868:	dc400217 	ldw	r17,8(sp)
   5086c:	dc000117 	ldw	r16,4(sp)
   50870:	dec00b04 	addi	sp,sp,44
   50874:	f800283a 	ret
   50878:	00803fc4 	movi	r2,255
   5087c:	11c5803a 	cmpltu	r2,r2,r7
   50880:	100490fa 	slli	r2,r2,3
   50884:	003f9e06 	br	50700 <__alt_data_end+0xfffe9600>
   50888:	00803fc4 	movi	r2,255
   5088c:	1445803a 	cmpltu	r2,r2,r17
   50890:	100490fa 	slli	r2,r2,3
   50894:	003fb206 	br	50760 <__alt_data_end+0xfffe9660>
   50898:	00804034 	movhi	r2,256
   5089c:	10bfffc4 	addi	r2,r2,-1
   508a0:	11808836 	bltu	r2,r6,50ac4 <__udivdi3+0x51c>
   508a4:	00800404 	movi	r2,16
   508a8:	003f5606 	br	50604 <__alt_data_end+0xfffe9504>
   508ac:	30aed83a 	srl	r23,r6,r2
   508b0:	3d4e983a 	sll	r7,r7,r21
   508b4:	80acd83a 	srl	r22,r16,r2
   508b8:	9884d83a 	srl	r2,r19,r2
   508bc:	3deeb03a 	or	r23,r7,r23
   508c0:	b824d43a 	srli	r18,r23,16
   508c4:	8560983a 	sll	r16,r16,r21
   508c8:	b009883a 	mov	r4,r22
   508cc:	900b883a 	mov	r5,r18
   508d0:	3568983a 	sll	r20,r6,r21
   508d4:	1420b03a 	or	r16,r2,r16
   508d8:	00432dc0 	call	432dc <__umodsi3>
   508dc:	b009883a 	mov	r4,r22
   508e0:	900b883a 	mov	r5,r18
   508e4:	1023883a 	mov	r17,r2
   508e8:	00432780 	call	43278 <__udivsi3>
   508ec:	8808943a 	slli	r4,r17,16
   508f0:	bf3fffcc 	andi	fp,r23,65535
   508f4:	8006d43a 	srli	r3,r16,16
   508f8:	e0a3383a 	mul	r17,fp,r2
   508fc:	100d883a 	mov	r6,r2
   50900:	1906b03a 	or	r3,r3,r4
   50904:	1c40042e 	bgeu	r3,r17,50918 <__udivdi3+0x370>
   50908:	1dc7883a 	add	r3,r3,r23
   5090c:	10bfffc4 	addi	r2,r2,-1
   50910:	1dc0752e 	bgeu	r3,r23,50ae8 <__udivdi3+0x540>
   50914:	100d883a 	mov	r6,r2
   50918:	1c63c83a 	sub	r17,r3,r17
   5091c:	900b883a 	mov	r5,r18
   50920:	8809883a 	mov	r4,r17
   50924:	d9800015 	stw	r6,0(sp)
   50928:	00432dc0 	call	432dc <__umodsi3>
   5092c:	102d883a 	mov	r22,r2
   50930:	8809883a 	mov	r4,r17
   50934:	900b883a 	mov	r5,r18
   50938:	00432780 	call	43278 <__udivsi3>
   5093c:	b02c943a 	slli	r22,r22,16
   50940:	e089383a 	mul	r4,fp,r2
   50944:	843fffcc 	andi	r16,r16,65535
   50948:	85a0b03a 	or	r16,r16,r22
   5094c:	d9800017 	ldw	r6,0(sp)
   50950:	8100042e 	bgeu	r16,r4,50964 <__udivdi3+0x3bc>
   50954:	85e1883a 	add	r16,r16,r23
   50958:	10ffffc4 	addi	r3,r2,-1
   5095c:	85c05e2e 	bgeu	r16,r23,50ad8 <__udivdi3+0x530>
   50960:	1805883a 	mov	r2,r3
   50964:	300c943a 	slli	r6,r6,16
   50968:	a17fffcc 	andi	r5,r20,65535
   5096c:	a028d43a 	srli	r20,r20,16
   50970:	3084b03a 	or	r2,r6,r2
   50974:	10ffffcc 	andi	r3,r2,65535
   50978:	100cd43a 	srli	r6,r2,16
   5097c:	194f383a 	mul	r7,r3,r5
   50980:	1d07383a 	mul	r3,r3,r20
   50984:	314b383a 	mul	r5,r6,r5
   50988:	3810d43a 	srli	r8,r7,16
   5098c:	8121c83a 	sub	r16,r16,r4
   50990:	1947883a 	add	r3,r3,r5
   50994:	40c7883a 	add	r3,r8,r3
   50998:	350d383a 	mul	r6,r6,r20
   5099c:	1940022e 	bgeu	r3,r5,509a8 <__udivdi3+0x400>
   509a0:	01000074 	movhi	r4,1
   509a4:	310d883a 	add	r6,r6,r4
   509a8:	1828d43a 	srli	r20,r3,16
   509ac:	a18d883a 	add	r6,r20,r6
   509b0:	81803e36 	bltu	r16,r6,50aac <__udivdi3+0x504>
   509b4:	81803826 	beq	r16,r6,50a98 <__udivdi3+0x4f0>
   509b8:	0007883a 	mov	r3,zero
   509bc:	003fa206 	br	50848 <__alt_data_end+0xfffe9748>
   509c0:	88e2983a 	sll	r17,r17,r3
   509c4:	80a8d83a 	srl	r20,r16,r2
   509c8:	80e0983a 	sll	r16,r16,r3
   509cc:	882ad43a 	srli	r21,r17,16
   509d0:	9884d83a 	srl	r2,r19,r2
   509d4:	a009883a 	mov	r4,r20
   509d8:	a80b883a 	mov	r5,r21
   509dc:	142eb03a 	or	r23,r2,r16
   509e0:	98e4983a 	sll	r18,r19,r3
   509e4:	00432dc0 	call	432dc <__umodsi3>
   509e8:	a009883a 	mov	r4,r20
   509ec:	a80b883a 	mov	r5,r21
   509f0:	1021883a 	mov	r16,r2
   509f4:	00432780 	call	43278 <__udivsi3>
   509f8:	1039883a 	mov	fp,r2
   509fc:	8d3fffcc 	andi	r20,r17,65535
   50a00:	8020943a 	slli	r16,r16,16
   50a04:	b804d43a 	srli	r2,r23,16
   50a08:	a72d383a 	mul	r22,r20,fp
   50a0c:	1404b03a 	or	r2,r2,r16
   50a10:	1580062e 	bgeu	r2,r22,50a2c <__udivdi3+0x484>
   50a14:	1445883a 	add	r2,r2,r17
   50a18:	e0ffffc4 	addi	r3,fp,-1
   50a1c:	14403836 	bltu	r2,r17,50b00 <__udivdi3+0x558>
   50a20:	1580372e 	bgeu	r2,r22,50b00 <__udivdi3+0x558>
   50a24:	e73fff84 	addi	fp,fp,-2
   50a28:	1445883a 	add	r2,r2,r17
   50a2c:	15adc83a 	sub	r22,r2,r22
   50a30:	a80b883a 	mov	r5,r21
   50a34:	b009883a 	mov	r4,r22
   50a38:	00432dc0 	call	432dc <__umodsi3>
   50a3c:	1027883a 	mov	r19,r2
   50a40:	b009883a 	mov	r4,r22
   50a44:	a80b883a 	mov	r5,r21
   50a48:	00432780 	call	43278 <__udivsi3>
   50a4c:	9826943a 	slli	r19,r19,16
   50a50:	a0a1383a 	mul	r16,r20,r2
   50a54:	b93fffcc 	andi	r4,r23,65535
   50a58:	24c8b03a 	or	r4,r4,r19
   50a5c:	2400062e 	bgeu	r4,r16,50a78 <__udivdi3+0x4d0>
   50a60:	2449883a 	add	r4,r4,r17
   50a64:	10ffffc4 	addi	r3,r2,-1
   50a68:	24402336 	bltu	r4,r17,50af8 <__udivdi3+0x550>
   50a6c:	2400222e 	bgeu	r4,r16,50af8 <__udivdi3+0x550>
   50a70:	10bfff84 	addi	r2,r2,-2
   50a74:	2449883a 	add	r4,r4,r17
   50a78:	e038943a 	slli	fp,fp,16
   50a7c:	2421c83a 	sub	r16,r4,r16
   50a80:	e086b03a 	or	r3,fp,r2
   50a84:	003f4306 	br	50794 <__alt_data_end+0xfffe9694>
   50a88:	2005883a 	mov	r2,r4
   50a8c:	003f6906 	br	50834 <__alt_data_end+0xfffe9734>
   50a90:	1805883a 	mov	r2,r3
   50a94:	003f0f06 	br	506d4 <__alt_data_end+0xfffe95d4>
   50a98:	1806943a 	slli	r3,r3,16
   50a9c:	9d66983a 	sll	r19,r19,r21
   50aa0:	39ffffcc 	andi	r7,r7,65535
   50aa4:	19c7883a 	add	r3,r3,r7
   50aa8:	98ffc32e 	bgeu	r19,r3,509b8 <__alt_data_end+0xfffe98b8>
   50aac:	10bfffc4 	addi	r2,r2,-1
   50ab0:	003fc106 	br	509b8 <__alt_data_end+0xfffe98b8>
   50ab4:	00800604 	movi	r2,24
   50ab8:	003f1106 	br	50700 <__alt_data_end+0xfffe9600>
   50abc:	00800604 	movi	r2,24
   50ac0:	003f2706 	br	50760 <__alt_data_end+0xfffe9660>
   50ac4:	00800604 	movi	r2,24
   50ac8:	003ece06 	br	50604 <__alt_data_end+0xfffe9504>
   50acc:	0007883a 	mov	r3,zero
   50ad0:	00800044 	movi	r2,1
   50ad4:	003f5c06 	br	50848 <__alt_data_end+0xfffe9748>
   50ad8:	813fa12e 	bgeu	r16,r4,50960 <__alt_data_end+0xfffe9860>
   50adc:	10bfff84 	addi	r2,r2,-2
   50ae0:	85e1883a 	add	r16,r16,r23
   50ae4:	003f9f06 	br	50964 <__alt_data_end+0xfffe9864>
   50ae8:	1c7f8a2e 	bgeu	r3,r17,50914 <__alt_data_end+0xfffe9814>
   50aec:	31bfff84 	addi	r6,r6,-2
   50af0:	1dc7883a 	add	r3,r3,r23
   50af4:	003f8806 	br	50918 <__alt_data_end+0xfffe9818>
   50af8:	1805883a 	mov	r2,r3
   50afc:	003fde06 	br	50a78 <__alt_data_end+0xfffe9978>
   50b00:	1839883a 	mov	fp,r3
   50b04:	003fc906 	br	50a2c <__alt_data_end+0xfffe992c>
   50b08:	b5bfff84 	addi	r22,r22,-2
   50b0c:	2449883a 	add	r4,r4,r17
   50b10:	003f3406 	br	507e4 <__alt_data_end+0xfffe96e4>
   50b14:	b5bfff84 	addi	r22,r22,-2
   50b18:	1445883a 	add	r2,r2,r17
   50b1c:	003edb06 	br	5068c <__alt_data_end+0xfffe958c>

00050b20 <__umoddi3>:
   50b20:	defff404 	addi	sp,sp,-48
   50b24:	df000a15 	stw	fp,40(sp)
   50b28:	dc400315 	stw	r17,12(sp)
   50b2c:	dc000215 	stw	r16,8(sp)
   50b30:	dfc00b15 	stw	ra,44(sp)
   50b34:	ddc00915 	stw	r23,36(sp)
   50b38:	dd800815 	stw	r22,32(sp)
   50b3c:	dd400715 	stw	r21,28(sp)
   50b40:	dd000615 	stw	r20,24(sp)
   50b44:	dcc00515 	stw	r19,20(sp)
   50b48:	dc800415 	stw	r18,16(sp)
   50b4c:	2021883a 	mov	r16,r4
   50b50:	2823883a 	mov	r17,r5
   50b54:	2839883a 	mov	fp,r5
   50b58:	38003c1e 	bne	r7,zero,50c4c <__umoddi3+0x12c>
   50b5c:	3027883a 	mov	r19,r6
   50b60:	2029883a 	mov	r20,r4
   50b64:	2980512e 	bgeu	r5,r6,50cac <__umoddi3+0x18c>
   50b68:	00bfffd4 	movui	r2,65535
   50b6c:	11809a36 	bltu	r2,r6,50dd8 <__umoddi3+0x2b8>
   50b70:	01003fc4 	movi	r4,255
   50b74:	2189803a 	cmpltu	r4,r4,r6
   50b78:	200890fa 	slli	r4,r4,3
   50b7c:	3104d83a 	srl	r2,r6,r4
   50b80:	00c00174 	movhi	r3,5
   50b84:	18d6e804 	addi	r3,r3,23456
   50b88:	1885883a 	add	r2,r3,r2
   50b8c:	10c00003 	ldbu	r3,0(r2)
   50b90:	00800804 	movi	r2,32
   50b94:	1909883a 	add	r4,r3,r4
   50b98:	1125c83a 	sub	r18,r2,r4
   50b9c:	90000526 	beq	r18,zero,50bb4 <__umoddi3+0x94>
   50ba0:	8ca2983a 	sll	r17,r17,r18
   50ba4:	8108d83a 	srl	r4,r16,r4
   50ba8:	34a6983a 	sll	r19,r6,r18
   50bac:	84a8983a 	sll	r20,r16,r18
   50bb0:	2478b03a 	or	fp,r4,r17
   50bb4:	982ed43a 	srli	r23,r19,16
   50bb8:	e009883a 	mov	r4,fp
   50bbc:	9dbfffcc 	andi	r22,r19,65535
   50bc0:	b80b883a 	mov	r5,r23
   50bc4:	00432dc0 	call	432dc <__umodsi3>
   50bc8:	e009883a 	mov	r4,fp
   50bcc:	b80b883a 	mov	r5,r23
   50bd0:	102b883a 	mov	r21,r2
   50bd4:	00432780 	call	43278 <__udivsi3>
   50bd8:	a806943a 	slli	r3,r21,16
   50bdc:	a008d43a 	srli	r4,r20,16
   50be0:	b085383a 	mul	r2,r22,r2
   50be4:	20c8b03a 	or	r4,r4,r3
   50be8:	2080032e 	bgeu	r4,r2,50bf8 <__umoddi3+0xd8>
   50bec:	24c9883a 	add	r4,r4,r19
   50bf0:	24c00136 	bltu	r4,r19,50bf8 <__umoddi3+0xd8>
   50bf4:	20811036 	bltu	r4,r2,51038 <__umoddi3+0x518>
   50bf8:	20abc83a 	sub	r21,r4,r2
   50bfc:	b80b883a 	mov	r5,r23
   50c00:	a809883a 	mov	r4,r21
   50c04:	00432dc0 	call	432dc <__umodsi3>
   50c08:	1023883a 	mov	r17,r2
   50c0c:	b80b883a 	mov	r5,r23
   50c10:	a809883a 	mov	r4,r21
   50c14:	00432780 	call	43278 <__udivsi3>
   50c18:	8822943a 	slli	r17,r17,16
   50c1c:	b085383a 	mul	r2,r22,r2
   50c20:	a0ffffcc 	andi	r3,r20,65535
   50c24:	1c46b03a 	or	r3,r3,r17
   50c28:	1880042e 	bgeu	r3,r2,50c3c <__umoddi3+0x11c>
   50c2c:	1cc7883a 	add	r3,r3,r19
   50c30:	1cc00236 	bltu	r3,r19,50c3c <__umoddi3+0x11c>
   50c34:	1880012e 	bgeu	r3,r2,50c3c <__umoddi3+0x11c>
   50c38:	1cc7883a 	add	r3,r3,r19
   50c3c:	1885c83a 	sub	r2,r3,r2
   50c40:	1484d83a 	srl	r2,r2,r18
   50c44:	0007883a 	mov	r3,zero
   50c48:	00004f06 	br	50d88 <__umoddi3+0x268>
   50c4c:	29c04c36 	bltu	r5,r7,50d80 <__umoddi3+0x260>
   50c50:	00bfffd4 	movui	r2,65535
   50c54:	11c0582e 	bgeu	r2,r7,50db8 <__umoddi3+0x298>
   50c58:	00804034 	movhi	r2,256
   50c5c:	10bfffc4 	addi	r2,r2,-1
   50c60:	11c0e736 	bltu	r2,r7,51000 <__umoddi3+0x4e0>
   50c64:	01000404 	movi	r4,16
   50c68:	3904d83a 	srl	r2,r7,r4
   50c6c:	00c00174 	movhi	r3,5
   50c70:	18d6e804 	addi	r3,r3,23456
   50c74:	1885883a 	add	r2,r3,r2
   50c78:	14c00003 	ldbu	r19,0(r2)
   50c7c:	00c00804 	movi	r3,32
   50c80:	9927883a 	add	r19,r19,r4
   50c84:	1ce9c83a 	sub	r20,r3,r19
   50c88:	a000581e 	bne	r20,zero,50dec <__umoddi3+0x2cc>
   50c8c:	3c400136 	bltu	r7,r17,50c94 <__umoddi3+0x174>
   50c90:	8180eb36 	bltu	r16,r6,51040 <__umoddi3+0x520>
   50c94:	8185c83a 	sub	r2,r16,r6
   50c98:	89e3c83a 	sub	r17,r17,r7
   50c9c:	8089803a 	cmpltu	r4,r16,r2
   50ca0:	8939c83a 	sub	fp,r17,r4
   50ca4:	e007883a 	mov	r3,fp
   50ca8:	00003706 	br	50d88 <__umoddi3+0x268>
   50cac:	3000041e 	bne	r6,zero,50cc0 <__umoddi3+0x1a0>
   50cb0:	000b883a 	mov	r5,zero
   50cb4:	01000044 	movi	r4,1
   50cb8:	00432780 	call	43278 <__udivsi3>
   50cbc:	1027883a 	mov	r19,r2
   50cc0:	00bfffd4 	movui	r2,65535
   50cc4:	14c0402e 	bgeu	r2,r19,50dc8 <__umoddi3+0x2a8>
   50cc8:	00804034 	movhi	r2,256
   50ccc:	10bfffc4 	addi	r2,r2,-1
   50cd0:	14c0cd36 	bltu	r2,r19,51008 <__umoddi3+0x4e8>
   50cd4:	00800404 	movi	r2,16
   50cd8:	9886d83a 	srl	r3,r19,r2
   50cdc:	01000174 	movhi	r4,5
   50ce0:	2116e804 	addi	r4,r4,23456
   50ce4:	20c7883a 	add	r3,r4,r3
   50ce8:	18c00003 	ldbu	r3,0(r3)
   50cec:	1887883a 	add	r3,r3,r2
   50cf0:	00800804 	movi	r2,32
   50cf4:	10e5c83a 	sub	r18,r2,r3
   50cf8:	9000901e 	bne	r18,zero,50f3c <__umoddi3+0x41c>
   50cfc:	982cd43a 	srli	r22,r19,16
   50d00:	8ce3c83a 	sub	r17,r17,r19
   50d04:	9d7fffcc 	andi	r21,r19,65535
   50d08:	b00b883a 	mov	r5,r22
   50d0c:	8809883a 	mov	r4,r17
   50d10:	00432dc0 	call	432dc <__umodsi3>
   50d14:	8809883a 	mov	r4,r17
   50d18:	b00b883a 	mov	r5,r22
   50d1c:	1021883a 	mov	r16,r2
   50d20:	00432780 	call	43278 <__udivsi3>
   50d24:	8006943a 	slli	r3,r16,16
   50d28:	a008d43a 	srli	r4,r20,16
   50d2c:	1545383a 	mul	r2,r2,r21
   50d30:	20c8b03a 	or	r4,r4,r3
   50d34:	2080042e 	bgeu	r4,r2,50d48 <__umoddi3+0x228>
   50d38:	24c9883a 	add	r4,r4,r19
   50d3c:	24c00236 	bltu	r4,r19,50d48 <__umoddi3+0x228>
   50d40:	2080012e 	bgeu	r4,r2,50d48 <__umoddi3+0x228>
   50d44:	24c9883a 	add	r4,r4,r19
   50d48:	20a1c83a 	sub	r16,r4,r2
   50d4c:	b00b883a 	mov	r5,r22
   50d50:	8009883a 	mov	r4,r16
   50d54:	00432dc0 	call	432dc <__umodsi3>
   50d58:	1023883a 	mov	r17,r2
   50d5c:	b00b883a 	mov	r5,r22
   50d60:	8009883a 	mov	r4,r16
   50d64:	00432780 	call	43278 <__udivsi3>
   50d68:	8822943a 	slli	r17,r17,16
   50d6c:	1545383a 	mul	r2,r2,r21
   50d70:	a53fffcc 	andi	r20,r20,65535
   50d74:	a446b03a 	or	r3,r20,r17
   50d78:	18bfb02e 	bgeu	r3,r2,50c3c <__alt_data_end+0xfffe9b3c>
   50d7c:	003fab06 	br	50c2c <__alt_data_end+0xfffe9b2c>
   50d80:	2005883a 	mov	r2,r4
   50d84:	2807883a 	mov	r3,r5
   50d88:	dfc00b17 	ldw	ra,44(sp)
   50d8c:	df000a17 	ldw	fp,40(sp)
   50d90:	ddc00917 	ldw	r23,36(sp)
   50d94:	dd800817 	ldw	r22,32(sp)
   50d98:	dd400717 	ldw	r21,28(sp)
   50d9c:	dd000617 	ldw	r20,24(sp)
   50da0:	dcc00517 	ldw	r19,20(sp)
   50da4:	dc800417 	ldw	r18,16(sp)
   50da8:	dc400317 	ldw	r17,12(sp)
   50dac:	dc000217 	ldw	r16,8(sp)
   50db0:	dec00c04 	addi	sp,sp,48
   50db4:	f800283a 	ret
   50db8:	04c03fc4 	movi	r19,255
   50dbc:	99c9803a 	cmpltu	r4,r19,r7
   50dc0:	200890fa 	slli	r4,r4,3
   50dc4:	003fa806 	br	50c68 <__alt_data_end+0xfffe9b68>
   50dc8:	00803fc4 	movi	r2,255
   50dcc:	14c5803a 	cmpltu	r2,r2,r19
   50dd0:	100490fa 	slli	r2,r2,3
   50dd4:	003fc006 	br	50cd8 <__alt_data_end+0xfffe9bd8>
   50dd8:	00804034 	movhi	r2,256
   50ddc:	10bfffc4 	addi	r2,r2,-1
   50de0:	11808b36 	bltu	r2,r6,51010 <__umoddi3+0x4f0>
   50de4:	01000404 	movi	r4,16
   50de8:	003f6406 	br	50b7c <__alt_data_end+0xfffe9a7c>
   50dec:	34c4d83a 	srl	r2,r6,r19
   50df0:	3d0e983a 	sll	r7,r7,r20
   50df4:	8cf8d83a 	srl	fp,r17,r19
   50df8:	8d10983a 	sll	r8,r17,r20
   50dfc:	38aab03a 	or	r21,r7,r2
   50e00:	a82cd43a 	srli	r22,r21,16
   50e04:	84e2d83a 	srl	r17,r16,r19
   50e08:	e009883a 	mov	r4,fp
   50e0c:	b00b883a 	mov	r5,r22
   50e10:	8a22b03a 	or	r17,r17,r8
   50e14:	3524983a 	sll	r18,r6,r20
   50e18:	00432dc0 	call	432dc <__umodsi3>
   50e1c:	e009883a 	mov	r4,fp
   50e20:	b00b883a 	mov	r5,r22
   50e24:	102f883a 	mov	r23,r2
   50e28:	00432780 	call	43278 <__udivsi3>
   50e2c:	100d883a 	mov	r6,r2
   50e30:	b808943a 	slli	r4,r23,16
   50e34:	aa3fffcc 	andi	r8,r21,65535
   50e38:	8804d43a 	srli	r2,r17,16
   50e3c:	41af383a 	mul	r23,r8,r6
   50e40:	8520983a 	sll	r16,r16,r20
   50e44:	1104b03a 	or	r2,r2,r4
   50e48:	15c0042e 	bgeu	r2,r23,50e5c <__umoddi3+0x33c>
   50e4c:	1545883a 	add	r2,r2,r21
   50e50:	30ffffc4 	addi	r3,r6,-1
   50e54:	1540742e 	bgeu	r2,r21,51028 <__umoddi3+0x508>
   50e58:	180d883a 	mov	r6,r3
   50e5c:	15efc83a 	sub	r23,r2,r23
   50e60:	b00b883a 	mov	r5,r22
   50e64:	b809883a 	mov	r4,r23
   50e68:	d9800115 	stw	r6,4(sp)
   50e6c:	da000015 	stw	r8,0(sp)
   50e70:	00432dc0 	call	432dc <__umodsi3>
   50e74:	b00b883a 	mov	r5,r22
   50e78:	b809883a 	mov	r4,r23
   50e7c:	1039883a 	mov	fp,r2
   50e80:	00432780 	call	43278 <__udivsi3>
   50e84:	da000017 	ldw	r8,0(sp)
   50e88:	e038943a 	slli	fp,fp,16
   50e8c:	100b883a 	mov	r5,r2
   50e90:	4089383a 	mul	r4,r8,r2
   50e94:	8a3fffcc 	andi	r8,r17,65535
   50e98:	4710b03a 	or	r8,r8,fp
   50e9c:	d9800117 	ldw	r6,4(sp)
   50ea0:	4100042e 	bgeu	r8,r4,50eb4 <__umoddi3+0x394>
   50ea4:	4551883a 	add	r8,r8,r21
   50ea8:	10bfffc4 	addi	r2,r2,-1
   50eac:	45405a2e 	bgeu	r8,r21,51018 <__umoddi3+0x4f8>
   50eb0:	100b883a 	mov	r5,r2
   50eb4:	300c943a 	slli	r6,r6,16
   50eb8:	91ffffcc 	andi	r7,r18,65535
   50ebc:	9004d43a 	srli	r2,r18,16
   50ec0:	314cb03a 	or	r6,r6,r5
   50ec4:	317fffcc 	andi	r5,r6,65535
   50ec8:	300cd43a 	srli	r6,r6,16
   50ecc:	29d3383a 	mul	r9,r5,r7
   50ed0:	288b383a 	mul	r5,r5,r2
   50ed4:	31cf383a 	mul	r7,r6,r7
   50ed8:	4806d43a 	srli	r3,r9,16
   50edc:	4111c83a 	sub	r8,r8,r4
   50ee0:	29cb883a 	add	r5,r5,r7
   50ee4:	194b883a 	add	r5,r3,r5
   50ee8:	3085383a 	mul	r2,r6,r2
   50eec:	29c0022e 	bgeu	r5,r7,50ef8 <__umoddi3+0x3d8>
   50ef0:	00c00074 	movhi	r3,1
   50ef4:	10c5883a 	add	r2,r2,r3
   50ef8:	2808d43a 	srli	r4,r5,16
   50efc:	280a943a 	slli	r5,r5,16
   50f00:	4a7fffcc 	andi	r9,r9,65535
   50f04:	2085883a 	add	r2,r4,r2
   50f08:	2a4b883a 	add	r5,r5,r9
   50f0c:	40803636 	bltu	r8,r2,50fe8 <__umoddi3+0x4c8>
   50f10:	40804d26 	beq	r8,r2,51048 <__umoddi3+0x528>
   50f14:	4089c83a 	sub	r4,r8,r2
   50f18:	280f883a 	mov	r7,r5
   50f1c:	81cfc83a 	sub	r7,r16,r7
   50f20:	81c7803a 	cmpltu	r3,r16,r7
   50f24:	20c7c83a 	sub	r3,r4,r3
   50f28:	1cc4983a 	sll	r2,r3,r19
   50f2c:	3d0ed83a 	srl	r7,r7,r20
   50f30:	1d06d83a 	srl	r3,r3,r20
   50f34:	11c4b03a 	or	r2,r2,r7
   50f38:	003f9306 	br	50d88 <__alt_data_end+0xfffe9c88>
   50f3c:	9ca6983a 	sll	r19,r19,r18
   50f40:	88e8d83a 	srl	r20,r17,r3
   50f44:	80c4d83a 	srl	r2,r16,r3
   50f48:	982cd43a 	srli	r22,r19,16
   50f4c:	8ca2983a 	sll	r17,r17,r18
   50f50:	a009883a 	mov	r4,r20
   50f54:	b00b883a 	mov	r5,r22
   50f58:	1478b03a 	or	fp,r2,r17
   50f5c:	00432dc0 	call	432dc <__umodsi3>
   50f60:	a009883a 	mov	r4,r20
   50f64:	b00b883a 	mov	r5,r22
   50f68:	1023883a 	mov	r17,r2
   50f6c:	00432780 	call	43278 <__udivsi3>
   50f70:	9d7fffcc 	andi	r21,r19,65535
   50f74:	880a943a 	slli	r5,r17,16
   50f78:	e008d43a 	srli	r4,fp,16
   50f7c:	a885383a 	mul	r2,r21,r2
   50f80:	84a8983a 	sll	r20,r16,r18
   50f84:	2148b03a 	or	r4,r4,r5
   50f88:	2080042e 	bgeu	r4,r2,50f9c <__umoddi3+0x47c>
   50f8c:	24c9883a 	add	r4,r4,r19
   50f90:	24c00236 	bltu	r4,r19,50f9c <__umoddi3+0x47c>
   50f94:	2080012e 	bgeu	r4,r2,50f9c <__umoddi3+0x47c>
   50f98:	24c9883a 	add	r4,r4,r19
   50f9c:	20a3c83a 	sub	r17,r4,r2
   50fa0:	b00b883a 	mov	r5,r22
   50fa4:	8809883a 	mov	r4,r17
   50fa8:	00432dc0 	call	432dc <__umodsi3>
   50fac:	102f883a 	mov	r23,r2
   50fb0:	8809883a 	mov	r4,r17
   50fb4:	b00b883a 	mov	r5,r22
   50fb8:	00432780 	call	43278 <__udivsi3>
   50fbc:	b82e943a 	slli	r23,r23,16
   50fc0:	a885383a 	mul	r2,r21,r2
   50fc4:	e13fffcc 	andi	r4,fp,65535
   50fc8:	25c8b03a 	or	r4,r4,r23
   50fcc:	2080042e 	bgeu	r4,r2,50fe0 <__umoddi3+0x4c0>
   50fd0:	24c9883a 	add	r4,r4,r19
   50fd4:	24c00236 	bltu	r4,r19,50fe0 <__umoddi3+0x4c0>
   50fd8:	2080012e 	bgeu	r4,r2,50fe0 <__umoddi3+0x4c0>
   50fdc:	24c9883a 	add	r4,r4,r19
   50fe0:	20a3c83a 	sub	r17,r4,r2
   50fe4:	003f4806 	br	50d08 <__alt_data_end+0xfffe9c08>
   50fe8:	2c8fc83a 	sub	r7,r5,r18
   50fec:	1545c83a 	sub	r2,r2,r21
   50ff0:	29cb803a 	cmpltu	r5,r5,r7
   50ff4:	1145c83a 	sub	r2,r2,r5
   50ff8:	4089c83a 	sub	r4,r8,r2
   50ffc:	003fc706 	br	50f1c <__alt_data_end+0xfffe9e1c>
   51000:	01000604 	movi	r4,24
   51004:	003f1806 	br	50c68 <__alt_data_end+0xfffe9b68>
   51008:	00800604 	movi	r2,24
   5100c:	003f3206 	br	50cd8 <__alt_data_end+0xfffe9bd8>
   51010:	01000604 	movi	r4,24
   51014:	003ed906 	br	50b7c <__alt_data_end+0xfffe9a7c>
   51018:	413fa52e 	bgeu	r8,r4,50eb0 <__alt_data_end+0xfffe9db0>
   5101c:	297fff84 	addi	r5,r5,-2
   51020:	4551883a 	add	r8,r8,r21
   51024:	003fa306 	br	50eb4 <__alt_data_end+0xfffe9db4>
   51028:	15ff8b2e 	bgeu	r2,r23,50e58 <__alt_data_end+0xfffe9d58>
   5102c:	31bfff84 	addi	r6,r6,-2
   51030:	1545883a 	add	r2,r2,r21
   51034:	003f8906 	br	50e5c <__alt_data_end+0xfffe9d5c>
   51038:	24c9883a 	add	r4,r4,r19
   5103c:	003eee06 	br	50bf8 <__alt_data_end+0xfffe9af8>
   51040:	8005883a 	mov	r2,r16
   51044:	003f1706 	br	50ca4 <__alt_data_end+0xfffe9ba4>
   51048:	817fe736 	bltu	r16,r5,50fe8 <__alt_data_end+0xfffe9ee8>
   5104c:	280f883a 	mov	r7,r5
   51050:	0009883a 	mov	r4,zero
   51054:	003fb106 	br	50f1c <__alt_data_end+0xfffe9e1c>

00051058 <__ledf2>:
   51058:	2804d53a 	srli	r2,r5,20
   5105c:	3810d53a 	srli	r8,r7,20
   51060:	00c00434 	movhi	r3,16
   51064:	18ffffc4 	addi	r3,r3,-1
   51068:	1081ffcc 	andi	r2,r2,2047
   5106c:	0241ffc4 	movi	r9,2047
   51070:	28d4703a 	and	r10,r5,r3
   51074:	4201ffcc 	andi	r8,r8,2047
   51078:	38c6703a 	and	r3,r7,r3
   5107c:	280ad7fa 	srli	r5,r5,31
   51080:	380ed7fa 	srli	r7,r7,31
   51084:	12401f26 	beq	r2,r9,51104 <__ledf2+0xac>
   51088:	0241ffc4 	movi	r9,2047
   5108c:	42401426 	beq	r8,r9,510e0 <__ledf2+0x88>
   51090:	1000091e 	bne	r2,zero,510b8 <__ledf2+0x60>
   51094:	2296b03a 	or	r11,r4,r10
   51098:	5813003a 	cmpeq	r9,r11,zero
   5109c:	29403fcc 	andi	r5,r5,255
   510a0:	40000a1e 	bne	r8,zero,510cc <__ledf2+0x74>
   510a4:	30d8b03a 	or	r12,r6,r3
   510a8:	6000081e 	bne	r12,zero,510cc <__ledf2+0x74>
   510ac:	0005883a 	mov	r2,zero
   510b0:	5800111e 	bne	r11,zero,510f8 <__ledf2+0xa0>
   510b4:	f800283a 	ret
   510b8:	29403fcc 	andi	r5,r5,255
   510bc:	40000c1e 	bne	r8,zero,510f0 <__ledf2+0x98>
   510c0:	30d2b03a 	or	r9,r6,r3
   510c4:	48000c26 	beq	r9,zero,510f8 <__ledf2+0xa0>
   510c8:	0013883a 	mov	r9,zero
   510cc:	39c03fcc 	andi	r7,r7,255
   510d0:	48000826 	beq	r9,zero,510f4 <__ledf2+0x9c>
   510d4:	38001126 	beq	r7,zero,5111c <__ledf2+0xc4>
   510d8:	00800044 	movi	r2,1
   510dc:	f800283a 	ret
   510e0:	30d2b03a 	or	r9,r6,r3
   510e4:	483fea26 	beq	r9,zero,51090 <__alt_data_end+0xfffe9f90>
   510e8:	00800084 	movi	r2,2
   510ec:	f800283a 	ret
   510f0:	39c03fcc 	andi	r7,r7,255
   510f4:	39400726 	beq	r7,r5,51114 <__ledf2+0xbc>
   510f8:	2800081e 	bne	r5,zero,5111c <__ledf2+0xc4>
   510fc:	00800044 	movi	r2,1
   51100:	f800283a 	ret
   51104:	2292b03a 	or	r9,r4,r10
   51108:	483fdf26 	beq	r9,zero,51088 <__alt_data_end+0xfffe9f88>
   5110c:	00800084 	movi	r2,2
   51110:	f800283a 	ret
   51114:	4080030e 	bge	r8,r2,51124 <__ledf2+0xcc>
   51118:	383fef26 	beq	r7,zero,510d8 <__alt_data_end+0xfffe9fd8>
   5111c:	00bfffc4 	movi	r2,-1
   51120:	f800283a 	ret
   51124:	123feb16 	blt	r2,r8,510d4 <__alt_data_end+0xfffe9fd4>
   51128:	1abff336 	bltu	r3,r10,510f8 <__alt_data_end+0xfffe9ff8>
   5112c:	50c00326 	beq	r10,r3,5113c <__ledf2+0xe4>
   51130:	50c0042e 	bgeu	r10,r3,51144 <__ledf2+0xec>
   51134:	283fe81e 	bne	r5,zero,510d8 <__alt_data_end+0xfffe9fd8>
   51138:	003ff806 	br	5111c <__alt_data_end+0xfffea01c>
   5113c:	313fee36 	bltu	r6,r4,510f8 <__alt_data_end+0xfffe9ff8>
   51140:	21bffc36 	bltu	r4,r6,51134 <__alt_data_end+0xfffea034>
   51144:	0005883a 	mov	r2,zero
   51148:	f800283a 	ret

0005114c <__floatunsidf>:
   5114c:	defffe04 	addi	sp,sp,-8
   51150:	dc000015 	stw	r16,0(sp)
   51154:	dfc00115 	stw	ra,4(sp)
   51158:	2021883a 	mov	r16,r4
   5115c:	20002226 	beq	r4,zero,511e8 <__floatunsidf+0x9c>
   51160:	0046f540 	call	46f54 <__clzsi2>
   51164:	01010784 	movi	r4,1054
   51168:	2089c83a 	sub	r4,r4,r2
   5116c:	01810cc4 	movi	r6,1075
   51170:	310dc83a 	sub	r6,r6,r4
   51174:	00c007c4 	movi	r3,31
   51178:	1980120e 	bge	r3,r6,511c4 <__floatunsidf+0x78>
   5117c:	00c104c4 	movi	r3,1043
   51180:	1907c83a 	sub	r3,r3,r4
   51184:	80ca983a 	sll	r5,r16,r3
   51188:	00800434 	movhi	r2,16
   5118c:	10bfffc4 	addi	r2,r2,-1
   51190:	2101ffcc 	andi	r4,r4,2047
   51194:	0021883a 	mov	r16,zero
   51198:	288a703a 	and	r5,r5,r2
   5119c:	2008953a 	slli	r4,r4,20
   511a0:	00c00434 	movhi	r3,16
   511a4:	18ffffc4 	addi	r3,r3,-1
   511a8:	28c6703a 	and	r3,r5,r3
   511ac:	8005883a 	mov	r2,r16
   511b0:	1906b03a 	or	r3,r3,r4
   511b4:	dfc00117 	ldw	ra,4(sp)
   511b8:	dc000017 	ldw	r16,0(sp)
   511bc:	dec00204 	addi	sp,sp,8
   511c0:	f800283a 	ret
   511c4:	00c002c4 	movi	r3,11
   511c8:	188bc83a 	sub	r5,r3,r2
   511cc:	814ad83a 	srl	r5,r16,r5
   511d0:	00c00434 	movhi	r3,16
   511d4:	18ffffc4 	addi	r3,r3,-1
   511d8:	81a0983a 	sll	r16,r16,r6
   511dc:	2101ffcc 	andi	r4,r4,2047
   511e0:	28ca703a 	and	r5,r5,r3
   511e4:	003fed06 	br	5119c <__alt_data_end+0xfffea09c>
   511e8:	0009883a 	mov	r4,zero
   511ec:	000b883a 	mov	r5,zero
   511f0:	003fea06 	br	5119c <__alt_data_end+0xfffea09c>

000511f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   511f4:	defffe04 	addi	sp,sp,-8
   511f8:	dfc00115 	stw	ra,4(sp)
   511fc:	df000015 	stw	fp,0(sp)
   51200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51204:	d0a00f17 	ldw	r2,-32708(gp)
   51208:	10000326 	beq	r2,zero,51218 <alt_get_errno+0x24>
   5120c:	d0a00f17 	ldw	r2,-32708(gp)
   51210:	103ee83a 	callr	r2
   51214:	00000106 	br	5121c <alt_get_errno+0x28>
   51218:	d0a6ec04 	addi	r2,gp,-25680
}
   5121c:	e037883a 	mov	sp,fp
   51220:	dfc00117 	ldw	ra,4(sp)
   51224:	df000017 	ldw	fp,0(sp)
   51228:	dec00204 	addi	sp,sp,8
   5122c:	f800283a 	ret

00051230 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   51230:	defffb04 	addi	sp,sp,-20
   51234:	dfc00415 	stw	ra,16(sp)
   51238:	df000315 	stw	fp,12(sp)
   5123c:	df000304 	addi	fp,sp,12
   51240:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   51244:	e0bfff17 	ldw	r2,-4(fp)
   51248:	10000616 	blt	r2,zero,51264 <close+0x34>
   5124c:	e0bfff17 	ldw	r2,-4(fp)
   51250:	10c00324 	muli	r3,r2,12
   51254:	00800174 	movhi	r2,5
   51258:	1099e504 	addi	r2,r2,26516
   5125c:	1885883a 	add	r2,r3,r2
   51260:	00000106 	br	51268 <close+0x38>
   51264:	0005883a 	mov	r2,zero
   51268:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   5126c:	e0bffd17 	ldw	r2,-12(fp)
   51270:	10001926 	beq	r2,zero,512d8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   51274:	e0bffd17 	ldw	r2,-12(fp)
   51278:	10800017 	ldw	r2,0(r2)
   5127c:	10800417 	ldw	r2,16(r2)
   51280:	10000626 	beq	r2,zero,5129c <close+0x6c>
   51284:	e0bffd17 	ldw	r2,-12(fp)
   51288:	10800017 	ldw	r2,0(r2)
   5128c:	10800417 	ldw	r2,16(r2)
   51290:	e13ffd17 	ldw	r4,-12(fp)
   51294:	103ee83a 	callr	r2
   51298:	00000106 	br	512a0 <close+0x70>
   5129c:	0005883a 	mov	r2,zero
   512a0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   512a4:	e13fff17 	ldw	r4,-4(fp)
   512a8:	00518f00 	call	518f0 <alt_release_fd>
    if (rval < 0)
   512ac:	e0bffe17 	ldw	r2,-8(fp)
   512b0:	1000070e 	bge	r2,zero,512d0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   512b4:	00511f40 	call	511f4 <alt_get_errno>
   512b8:	1007883a 	mov	r3,r2
   512bc:	e0bffe17 	ldw	r2,-8(fp)
   512c0:	0085c83a 	sub	r2,zero,r2
   512c4:	18800015 	stw	r2,0(r3)
      return -1;
   512c8:	00bfffc4 	movi	r2,-1
   512cc:	00000706 	br	512ec <close+0xbc>
    }
    return 0;
   512d0:	0005883a 	mov	r2,zero
   512d4:	00000506 	br	512ec <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   512d8:	00511f40 	call	511f4 <alt_get_errno>
   512dc:	1007883a 	mov	r3,r2
   512e0:	00801444 	movi	r2,81
   512e4:	18800015 	stw	r2,0(r3)
    return -1;
   512e8:	00bfffc4 	movi	r2,-1
  }
}
   512ec:	e037883a 	mov	sp,fp
   512f0:	dfc00117 	ldw	ra,4(sp)
   512f4:	df000017 	ldw	fp,0(sp)
   512f8:	dec00204 	addi	sp,sp,8
   512fc:	f800283a 	ret

00051300 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   51300:	defffc04 	addi	sp,sp,-16
   51304:	df000315 	stw	fp,12(sp)
   51308:	df000304 	addi	fp,sp,12
   5130c:	e13ffd15 	stw	r4,-12(fp)
   51310:	e17ffe15 	stw	r5,-8(fp)
   51314:	e1bfff15 	stw	r6,-4(fp)
  return len;
   51318:	e0bfff17 	ldw	r2,-4(fp)
}
   5131c:	e037883a 	mov	sp,fp
   51320:	df000017 	ldw	fp,0(sp)
   51324:	dec00104 	addi	sp,sp,4
   51328:	f800283a 	ret

0005132c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5132c:	defffe04 	addi	sp,sp,-8
   51330:	dfc00115 	stw	ra,4(sp)
   51334:	df000015 	stw	fp,0(sp)
   51338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5133c:	d0a00f17 	ldw	r2,-32708(gp)
   51340:	10000326 	beq	r2,zero,51350 <alt_get_errno+0x24>
   51344:	d0a00f17 	ldw	r2,-32708(gp)
   51348:	103ee83a 	callr	r2
   5134c:	00000106 	br	51354 <alt_get_errno+0x28>
   51350:	d0a6ec04 	addi	r2,gp,-25680
}
   51354:	e037883a 	mov	sp,fp
   51358:	dfc00117 	ldw	ra,4(sp)
   5135c:	df000017 	ldw	fp,0(sp)
   51360:	dec00204 	addi	sp,sp,8
   51364:	f800283a 	ret

00051368 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   51368:	defffb04 	addi	sp,sp,-20
   5136c:	dfc00415 	stw	ra,16(sp)
   51370:	df000315 	stw	fp,12(sp)
   51374:	df000304 	addi	fp,sp,12
   51378:	e13ffe15 	stw	r4,-8(fp)
   5137c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51380:	e0bffe17 	ldw	r2,-8(fp)
   51384:	10000616 	blt	r2,zero,513a0 <fstat+0x38>
   51388:	e0bffe17 	ldw	r2,-8(fp)
   5138c:	10c00324 	muli	r3,r2,12
   51390:	00800174 	movhi	r2,5
   51394:	1099e504 	addi	r2,r2,26516
   51398:	1885883a 	add	r2,r3,r2
   5139c:	00000106 	br	513a4 <fstat+0x3c>
   513a0:	0005883a 	mov	r2,zero
   513a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   513a8:	e0bffd17 	ldw	r2,-12(fp)
   513ac:	10001026 	beq	r2,zero,513f0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   513b0:	e0bffd17 	ldw	r2,-12(fp)
   513b4:	10800017 	ldw	r2,0(r2)
   513b8:	10800817 	ldw	r2,32(r2)
   513bc:	10000726 	beq	r2,zero,513dc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   513c0:	e0bffd17 	ldw	r2,-12(fp)
   513c4:	10800017 	ldw	r2,0(r2)
   513c8:	10800817 	ldw	r2,32(r2)
   513cc:	e17fff17 	ldw	r5,-4(fp)
   513d0:	e13ffd17 	ldw	r4,-12(fp)
   513d4:	103ee83a 	callr	r2
   513d8:	00000a06 	br	51404 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   513dc:	e0bfff17 	ldw	r2,-4(fp)
   513e0:	00c80004 	movi	r3,8192
   513e4:	10c00115 	stw	r3,4(r2)
      return 0;
   513e8:	0005883a 	mov	r2,zero
   513ec:	00000506 	br	51404 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   513f0:	005132c0 	call	5132c <alt_get_errno>
   513f4:	1007883a 	mov	r3,r2
   513f8:	00801444 	movi	r2,81
   513fc:	18800015 	stw	r2,0(r3)
    return -1;
   51400:	00bfffc4 	movi	r2,-1
  }
}
   51404:	e037883a 	mov	sp,fp
   51408:	dfc00117 	ldw	ra,4(sp)
   5140c:	df000017 	ldw	fp,0(sp)
   51410:	dec00204 	addi	sp,sp,8
   51414:	f800283a 	ret

00051418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51418:	defffe04 	addi	sp,sp,-8
   5141c:	dfc00115 	stw	ra,4(sp)
   51420:	df000015 	stw	fp,0(sp)
   51424:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51428:	d0a00f17 	ldw	r2,-32708(gp)
   5142c:	10000326 	beq	r2,zero,5143c <alt_get_errno+0x24>
   51430:	d0a00f17 	ldw	r2,-32708(gp)
   51434:	103ee83a 	callr	r2
   51438:	00000106 	br	51440 <alt_get_errno+0x28>
   5143c:	d0a6ec04 	addi	r2,gp,-25680
}
   51440:	e037883a 	mov	sp,fp
   51444:	dfc00117 	ldw	ra,4(sp)
   51448:	df000017 	ldw	fp,0(sp)
   5144c:	dec00204 	addi	sp,sp,8
   51450:	f800283a 	ret

00051454 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   51454:	deffed04 	addi	sp,sp,-76
   51458:	dfc01215 	stw	ra,72(sp)
   5145c:	df001115 	stw	fp,68(sp)
   51460:	df001104 	addi	fp,sp,68
   51464:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51468:	e0bfff17 	ldw	r2,-4(fp)
   5146c:	10000616 	blt	r2,zero,51488 <isatty+0x34>
   51470:	e0bfff17 	ldw	r2,-4(fp)
   51474:	10c00324 	muli	r3,r2,12
   51478:	00800174 	movhi	r2,5
   5147c:	1099e504 	addi	r2,r2,26516
   51480:	1885883a 	add	r2,r3,r2
   51484:	00000106 	br	5148c <isatty+0x38>
   51488:	0005883a 	mov	r2,zero
   5148c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   51490:	e0bfef17 	ldw	r2,-68(fp)
   51494:	10000e26 	beq	r2,zero,514d0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   51498:	e0bfef17 	ldw	r2,-68(fp)
   5149c:	10800017 	ldw	r2,0(r2)
   514a0:	10800817 	ldw	r2,32(r2)
   514a4:	1000021e 	bne	r2,zero,514b0 <isatty+0x5c>
    {
      return 1;
   514a8:	00800044 	movi	r2,1
   514ac:	00000d06 	br	514e4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   514b0:	e0bff004 	addi	r2,fp,-64
   514b4:	100b883a 	mov	r5,r2
   514b8:	e13fff17 	ldw	r4,-4(fp)
   514bc:	00513680 	call	51368 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   514c0:	e0bff117 	ldw	r2,-60(fp)
   514c4:	10880020 	cmpeqi	r2,r2,8192
   514c8:	10803fcc 	andi	r2,r2,255
   514cc:	00000506 	br	514e4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   514d0:	00514180 	call	51418 <alt_get_errno>
   514d4:	1007883a 	mov	r3,r2
   514d8:	00801444 	movi	r2,81
   514dc:	18800015 	stw	r2,0(r3)
    return 0;
   514e0:	0005883a 	mov	r2,zero
  }
}
   514e4:	e037883a 	mov	sp,fp
   514e8:	dfc00117 	ldw	ra,4(sp)
   514ec:	df000017 	ldw	fp,0(sp)
   514f0:	dec00204 	addi	sp,sp,8
   514f4:	f800283a 	ret

000514f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   514f8:	defffc04 	addi	sp,sp,-16
   514fc:	df000315 	stw	fp,12(sp)
   51500:	df000304 	addi	fp,sp,12
   51504:	e13ffd15 	stw	r4,-12(fp)
   51508:	e17ffe15 	stw	r5,-8(fp)
   5150c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   51510:	e0fffe17 	ldw	r3,-8(fp)
   51514:	e0bffd17 	ldw	r2,-12(fp)
   51518:	18800c26 	beq	r3,r2,5154c <alt_load_section+0x54>
  {
    while( to != end )
   5151c:	00000806 	br	51540 <alt_load_section+0x48>
    {
      *to++ = *from++;
   51520:	e0bffe17 	ldw	r2,-8(fp)
   51524:	10c00104 	addi	r3,r2,4
   51528:	e0fffe15 	stw	r3,-8(fp)
   5152c:	e0fffd17 	ldw	r3,-12(fp)
   51530:	19000104 	addi	r4,r3,4
   51534:	e13ffd15 	stw	r4,-12(fp)
   51538:	18c00017 	ldw	r3,0(r3)
   5153c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   51540:	e0fffe17 	ldw	r3,-8(fp)
   51544:	e0bfff17 	ldw	r2,-4(fp)
   51548:	18bff51e 	bne	r3,r2,51520 <__alt_data_end+0xfffea420>
    {
      *to++ = *from++;
    }
  }
}
   5154c:	0001883a 	nop
   51550:	e037883a 	mov	sp,fp
   51554:	df000017 	ldw	fp,0(sp)
   51558:	dec00104 	addi	sp,sp,4
   5155c:	f800283a 	ret

00051560 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   51560:	defffe04 	addi	sp,sp,-8
   51564:	dfc00115 	stw	ra,4(sp)
   51568:	df000015 	stw	fp,0(sp)
   5156c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   51570:	01800174 	movhi	r6,5
   51574:	319e8104 	addi	r6,r6,31236
   51578:	01400174 	movhi	r5,5
   5157c:	2957b204 	addi	r5,r5,24264
   51580:	01000174 	movhi	r4,5
   51584:	211e8104 	addi	r4,r4,31236
   51588:	00514f80 	call	514f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   5158c:	01800134 	movhi	r6,4
   51590:	31809104 	addi	r6,r6,580
   51594:	01400134 	movhi	r5,4
   51598:	29400804 	addi	r5,r5,32
   5159c:	01000134 	movhi	r4,4
   515a0:	21000804 	addi	r4,r4,32
   515a4:	00514f80 	call	514f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   515a8:	01800174 	movhi	r6,5
   515ac:	3197b204 	addi	r6,r6,24264
   515b0:	01400174 	movhi	r5,5
   515b4:	2956b604 	addi	r5,r5,23256
   515b8:	01000174 	movhi	r4,5
   515bc:	2116b604 	addi	r4,r4,23256
   515c0:	00514f80 	call	514f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   515c4:	00545f40 	call	545f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   515c8:	005486c0 	call	5486c <alt_icache_flush_all>
}
   515cc:	0001883a 	nop
   515d0:	e037883a 	mov	sp,fp
   515d4:	dfc00117 	ldw	ra,4(sp)
   515d8:	df000017 	ldw	fp,0(sp)
   515dc:	dec00204 	addi	sp,sp,8
   515e0:	f800283a 	ret

000515e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   515e4:	defffe04 	addi	sp,sp,-8
   515e8:	dfc00115 	stw	ra,4(sp)
   515ec:	df000015 	stw	fp,0(sp)
   515f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   515f4:	d0a00f17 	ldw	r2,-32708(gp)
   515f8:	10000326 	beq	r2,zero,51608 <alt_get_errno+0x24>
   515fc:	d0a00f17 	ldw	r2,-32708(gp)
   51600:	103ee83a 	callr	r2
   51604:	00000106 	br	5160c <alt_get_errno+0x28>
   51608:	d0a6ec04 	addi	r2,gp,-25680
}
   5160c:	e037883a 	mov	sp,fp
   51610:	dfc00117 	ldw	ra,4(sp)
   51614:	df000017 	ldw	fp,0(sp)
   51618:	dec00204 	addi	sp,sp,8
   5161c:	f800283a 	ret

00051620 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   51620:	defff904 	addi	sp,sp,-28
   51624:	dfc00615 	stw	ra,24(sp)
   51628:	df000515 	stw	fp,20(sp)
   5162c:	df000504 	addi	fp,sp,20
   51630:	e13ffd15 	stw	r4,-12(fp)
   51634:	e17ffe15 	stw	r5,-8(fp)
   51638:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   5163c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51640:	e0bffd17 	ldw	r2,-12(fp)
   51644:	10000616 	blt	r2,zero,51660 <lseek+0x40>
   51648:	e0bffd17 	ldw	r2,-12(fp)
   5164c:	10c00324 	muli	r3,r2,12
   51650:	00800174 	movhi	r2,5
   51654:	1099e504 	addi	r2,r2,26516
   51658:	1885883a 	add	r2,r3,r2
   5165c:	00000106 	br	51664 <lseek+0x44>
   51660:	0005883a 	mov	r2,zero
   51664:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   51668:	e0bffc17 	ldw	r2,-16(fp)
   5166c:	10001026 	beq	r2,zero,516b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   51670:	e0bffc17 	ldw	r2,-16(fp)
   51674:	10800017 	ldw	r2,0(r2)
   51678:	10800717 	ldw	r2,28(r2)
   5167c:	10000926 	beq	r2,zero,516a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   51680:	e0bffc17 	ldw	r2,-16(fp)
   51684:	10800017 	ldw	r2,0(r2)
   51688:	10800717 	ldw	r2,28(r2)
   5168c:	e1bfff17 	ldw	r6,-4(fp)
   51690:	e17ffe17 	ldw	r5,-8(fp)
   51694:	e13ffc17 	ldw	r4,-16(fp)
   51698:	103ee83a 	callr	r2
   5169c:	e0bffb15 	stw	r2,-20(fp)
   516a0:	00000506 	br	516b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   516a4:	00bfde84 	movi	r2,-134
   516a8:	e0bffb15 	stw	r2,-20(fp)
   516ac:	00000206 	br	516b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   516b0:	00bfebc4 	movi	r2,-81
   516b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   516b8:	e0bffb17 	ldw	r2,-20(fp)
   516bc:	1000070e 	bge	r2,zero,516dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   516c0:	00515e40 	call	515e4 <alt_get_errno>
   516c4:	1007883a 	mov	r3,r2
   516c8:	e0bffb17 	ldw	r2,-20(fp)
   516cc:	0085c83a 	sub	r2,zero,r2
   516d0:	18800015 	stw	r2,0(r3)
    rc = -1;
   516d4:	00bfffc4 	movi	r2,-1
   516d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   516dc:	e0bffb17 	ldw	r2,-20(fp)
}
   516e0:	e037883a 	mov	sp,fp
   516e4:	dfc00117 	ldw	ra,4(sp)
   516e8:	df000017 	ldw	fp,0(sp)
   516ec:	dec00204 	addi	sp,sp,8
   516f0:	f800283a 	ret

000516f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   516f4:	defffd04 	addi	sp,sp,-12
   516f8:	dfc00215 	stw	ra,8(sp)
   516fc:	df000115 	stw	fp,4(sp)
   51700:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   51704:	0009883a 	mov	r4,zero
   51708:	0051b6c0 	call	51b6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   5170c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   51710:	0051ba40 	call	51ba4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   51714:	01800174 	movhi	r6,5
   51718:	31979e04 	addi	r6,r6,24184
   5171c:	01400174 	movhi	r5,5
   51720:	29579e04 	addi	r5,r5,24184
   51724:	01000174 	movhi	r4,5
   51728:	21179e04 	addi	r4,r4,24184
   5172c:	0054c040 	call	54c04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   51730:	005471c0 	call	5471c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   51734:	01000174 	movhi	r4,5
   51738:	2111df04 	addi	r4,r4,18300
   5173c:	00555dc0 	call	555dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   51740:	d0a6ed17 	ldw	r2,-25676(gp)
   51744:	d0e6ee17 	ldw	r3,-25672(gp)
   51748:	d126ef17 	ldw	r4,-25668(gp)
   5174c:	200d883a 	mov	r6,r4
   51750:	180b883a 	mov	r5,r3
   51754:	1009883a 	mov	r4,r2
   51758:	0041de00 	call	41de0 <main>
   5175c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   51760:	01000044 	movi	r4,1
   51764:	00512300 	call	51230 <close>
  exit (result);
   51768:	e13fff17 	ldw	r4,-4(fp)
   5176c:	00555f00 	call	555f0 <exit>

00051770 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   51770:	defffe04 	addi	sp,sp,-8
   51774:	df000115 	stw	fp,4(sp)
   51778:	df000104 	addi	fp,sp,4
   5177c:	e13fff15 	stw	r4,-4(fp)
}
   51780:	0001883a 	nop
   51784:	e037883a 	mov	sp,fp
   51788:	df000017 	ldw	fp,0(sp)
   5178c:	dec00104 	addi	sp,sp,4
   51790:	f800283a 	ret

00051794 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   51794:	defffe04 	addi	sp,sp,-8
   51798:	df000115 	stw	fp,4(sp)
   5179c:	df000104 	addi	fp,sp,4
   517a0:	e13fff15 	stw	r4,-4(fp)
}
   517a4:	0001883a 	nop
   517a8:	e037883a 	mov	sp,fp
   517ac:	df000017 	ldw	fp,0(sp)
   517b0:	dec00104 	addi	sp,sp,4
   517b4:	f800283a 	ret

000517b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   517b8:	defffe04 	addi	sp,sp,-8
   517bc:	dfc00115 	stw	ra,4(sp)
   517c0:	df000015 	stw	fp,0(sp)
   517c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   517c8:	d0a00f17 	ldw	r2,-32708(gp)
   517cc:	10000326 	beq	r2,zero,517dc <alt_get_errno+0x24>
   517d0:	d0a00f17 	ldw	r2,-32708(gp)
   517d4:	103ee83a 	callr	r2
   517d8:	00000106 	br	517e0 <alt_get_errno+0x28>
   517dc:	d0a6ec04 	addi	r2,gp,-25680
}
   517e0:	e037883a 	mov	sp,fp
   517e4:	dfc00117 	ldw	ra,4(sp)
   517e8:	df000017 	ldw	fp,0(sp)
   517ec:	dec00204 	addi	sp,sp,8
   517f0:	f800283a 	ret

000517f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   517f4:	defff904 	addi	sp,sp,-28
   517f8:	dfc00615 	stw	ra,24(sp)
   517fc:	df000515 	stw	fp,20(sp)
   51800:	df000504 	addi	fp,sp,20
   51804:	e13ffd15 	stw	r4,-12(fp)
   51808:	e17ffe15 	stw	r5,-8(fp)
   5180c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51810:	e0bffd17 	ldw	r2,-12(fp)
   51814:	10000616 	blt	r2,zero,51830 <read+0x3c>
   51818:	e0bffd17 	ldw	r2,-12(fp)
   5181c:	10c00324 	muli	r3,r2,12
   51820:	00800174 	movhi	r2,5
   51824:	1099e504 	addi	r2,r2,26516
   51828:	1885883a 	add	r2,r3,r2
   5182c:	00000106 	br	51834 <read+0x40>
   51830:	0005883a 	mov	r2,zero
   51834:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   51838:	e0bffb17 	ldw	r2,-20(fp)
   5183c:	10002226 	beq	r2,zero,518c8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   51840:	e0bffb17 	ldw	r2,-20(fp)
   51844:	10800217 	ldw	r2,8(r2)
   51848:	108000cc 	andi	r2,r2,3
   5184c:	10800060 	cmpeqi	r2,r2,1
   51850:	1000181e 	bne	r2,zero,518b4 <read+0xc0>
        (fd->dev->read))
   51854:	e0bffb17 	ldw	r2,-20(fp)
   51858:	10800017 	ldw	r2,0(r2)
   5185c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   51860:	10001426 	beq	r2,zero,518b4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   51864:	e0bffb17 	ldw	r2,-20(fp)
   51868:	10800017 	ldw	r2,0(r2)
   5186c:	10800517 	ldw	r2,20(r2)
   51870:	e0ffff17 	ldw	r3,-4(fp)
   51874:	180d883a 	mov	r6,r3
   51878:	e17ffe17 	ldw	r5,-8(fp)
   5187c:	e13ffb17 	ldw	r4,-20(fp)
   51880:	103ee83a 	callr	r2
   51884:	e0bffc15 	stw	r2,-16(fp)
   51888:	e0bffc17 	ldw	r2,-16(fp)
   5188c:	1000070e 	bge	r2,zero,518ac <read+0xb8>
        {
          ALT_ERRNO = -rval;
   51890:	00517b80 	call	517b8 <alt_get_errno>
   51894:	1007883a 	mov	r3,r2
   51898:	e0bffc17 	ldw	r2,-16(fp)
   5189c:	0085c83a 	sub	r2,zero,r2
   518a0:	18800015 	stw	r2,0(r3)
          return -1;
   518a4:	00bfffc4 	movi	r2,-1
   518a8:	00000c06 	br	518dc <read+0xe8>
        }
        return rval;
   518ac:	e0bffc17 	ldw	r2,-16(fp)
   518b0:	00000a06 	br	518dc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   518b4:	00517b80 	call	517b8 <alt_get_errno>
   518b8:	1007883a 	mov	r3,r2
   518bc:	00800344 	movi	r2,13
   518c0:	18800015 	stw	r2,0(r3)
   518c4:	00000406 	br	518d8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   518c8:	00517b80 	call	517b8 <alt_get_errno>
   518cc:	1007883a 	mov	r3,r2
   518d0:	00801444 	movi	r2,81
   518d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   518d8:	00bfffc4 	movi	r2,-1
}
   518dc:	e037883a 	mov	sp,fp
   518e0:	dfc00117 	ldw	ra,4(sp)
   518e4:	df000017 	ldw	fp,0(sp)
   518e8:	dec00204 	addi	sp,sp,8
   518ec:	f800283a 	ret

000518f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   518f0:	defffe04 	addi	sp,sp,-8
   518f4:	df000115 	stw	fp,4(sp)
   518f8:	df000104 	addi	fp,sp,4
   518fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   51900:	e0bfff17 	ldw	r2,-4(fp)
   51904:	108000d0 	cmplti	r2,r2,3
   51908:	10000d1e 	bne	r2,zero,51940 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   5190c:	00800174 	movhi	r2,5
   51910:	1099e504 	addi	r2,r2,26516
   51914:	e0ffff17 	ldw	r3,-4(fp)
   51918:	18c00324 	muli	r3,r3,12
   5191c:	10c5883a 	add	r2,r2,r3
   51920:	10800204 	addi	r2,r2,8
   51924:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   51928:	00800174 	movhi	r2,5
   5192c:	1099e504 	addi	r2,r2,26516
   51930:	e0ffff17 	ldw	r3,-4(fp)
   51934:	18c00324 	muli	r3,r3,12
   51938:	10c5883a 	add	r2,r2,r3
   5193c:	10000015 	stw	zero,0(r2)
  }
}
   51940:	0001883a 	nop
   51944:	e037883a 	mov	sp,fp
   51948:	df000017 	ldw	fp,0(sp)
   5194c:	dec00104 	addi	sp,sp,4
   51950:	f800283a 	ret

00051954 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   51954:	defff904 	addi	sp,sp,-28
   51958:	df000615 	stw	fp,24(sp)
   5195c:	df000604 	addi	fp,sp,24
   51960:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51964:	0005303a 	rdctl	r2,status
   51968:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5196c:	e0fffe17 	ldw	r3,-8(fp)
   51970:	00bfff84 	movi	r2,-2
   51974:	1884703a 	and	r2,r3,r2
   51978:	1001703a 	wrctl	status,r2
  
  return context;
   5197c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   51980:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   51984:	d0a01017 	ldw	r2,-32704(gp)
   51988:	10c000c4 	addi	r3,r2,3
   5198c:	00bfff04 	movi	r2,-4
   51990:	1884703a 	and	r2,r3,r2
   51994:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   51998:	d0e01017 	ldw	r3,-32704(gp)
   5199c:	e0bfff17 	ldw	r2,-4(fp)
   519a0:	1887883a 	add	r3,r3,r2
   519a4:	008001b4 	movhi	r2,6
   519a8:	109c4004 	addi	r2,r2,28928
   519ac:	10c0062e 	bgeu	r2,r3,519c8 <sbrk+0x74>
   519b0:	e0bffb17 	ldw	r2,-20(fp)
   519b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   519b8:	e0bffa17 	ldw	r2,-24(fp)
   519bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   519c0:	00bfffc4 	movi	r2,-1
   519c4:	00000b06 	br	519f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   519c8:	d0a01017 	ldw	r2,-32704(gp)
   519cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   519d0:	d0e01017 	ldw	r3,-32704(gp)
   519d4:	e0bfff17 	ldw	r2,-4(fp)
   519d8:	1885883a 	add	r2,r3,r2
   519dc:	d0a01015 	stw	r2,-32704(gp)
   519e0:	e0bffb17 	ldw	r2,-20(fp)
   519e4:	e0bffc15 	stw	r2,-16(fp)
   519e8:	e0bffc17 	ldw	r2,-16(fp)
   519ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   519f0:	e0bffd17 	ldw	r2,-12(fp)
} 
   519f4:	e037883a 	mov	sp,fp
   519f8:	df000017 	ldw	fp,0(sp)
   519fc:	dec00104 	addi	sp,sp,4
   51a00:	f800283a 	ret

00051a04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51a04:	defffe04 	addi	sp,sp,-8
   51a08:	dfc00115 	stw	ra,4(sp)
   51a0c:	df000015 	stw	fp,0(sp)
   51a10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51a14:	d0a00f17 	ldw	r2,-32708(gp)
   51a18:	10000326 	beq	r2,zero,51a28 <alt_get_errno+0x24>
   51a1c:	d0a00f17 	ldw	r2,-32708(gp)
   51a20:	103ee83a 	callr	r2
   51a24:	00000106 	br	51a2c <alt_get_errno+0x28>
   51a28:	d0a6ec04 	addi	r2,gp,-25680
}
   51a2c:	e037883a 	mov	sp,fp
   51a30:	dfc00117 	ldw	ra,4(sp)
   51a34:	df000017 	ldw	fp,0(sp)
   51a38:	dec00204 	addi	sp,sp,8
   51a3c:	f800283a 	ret

00051a40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   51a40:	defff904 	addi	sp,sp,-28
   51a44:	dfc00615 	stw	ra,24(sp)
   51a48:	df000515 	stw	fp,20(sp)
   51a4c:	df000504 	addi	fp,sp,20
   51a50:	e13ffd15 	stw	r4,-12(fp)
   51a54:	e17ffe15 	stw	r5,-8(fp)
   51a58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   51a5c:	e0bffd17 	ldw	r2,-12(fp)
   51a60:	10000616 	blt	r2,zero,51a7c <write+0x3c>
   51a64:	e0bffd17 	ldw	r2,-12(fp)
   51a68:	10c00324 	muli	r3,r2,12
   51a6c:	00800174 	movhi	r2,5
   51a70:	1099e504 	addi	r2,r2,26516
   51a74:	1885883a 	add	r2,r3,r2
   51a78:	00000106 	br	51a80 <write+0x40>
   51a7c:	0005883a 	mov	r2,zero
   51a80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   51a84:	e0bffb17 	ldw	r2,-20(fp)
   51a88:	10002126 	beq	r2,zero,51b10 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   51a8c:	e0bffb17 	ldw	r2,-20(fp)
   51a90:	10800217 	ldw	r2,8(r2)
   51a94:	108000cc 	andi	r2,r2,3
   51a98:	10001826 	beq	r2,zero,51afc <write+0xbc>
   51a9c:	e0bffb17 	ldw	r2,-20(fp)
   51aa0:	10800017 	ldw	r2,0(r2)
   51aa4:	10800617 	ldw	r2,24(r2)
   51aa8:	10001426 	beq	r2,zero,51afc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   51aac:	e0bffb17 	ldw	r2,-20(fp)
   51ab0:	10800017 	ldw	r2,0(r2)
   51ab4:	10800617 	ldw	r2,24(r2)
   51ab8:	e0ffff17 	ldw	r3,-4(fp)
   51abc:	180d883a 	mov	r6,r3
   51ac0:	e17ffe17 	ldw	r5,-8(fp)
   51ac4:	e13ffb17 	ldw	r4,-20(fp)
   51ac8:	103ee83a 	callr	r2
   51acc:	e0bffc15 	stw	r2,-16(fp)
   51ad0:	e0bffc17 	ldw	r2,-16(fp)
   51ad4:	1000070e 	bge	r2,zero,51af4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   51ad8:	0051a040 	call	51a04 <alt_get_errno>
   51adc:	1007883a 	mov	r3,r2
   51ae0:	e0bffc17 	ldw	r2,-16(fp)
   51ae4:	0085c83a 	sub	r2,zero,r2
   51ae8:	18800015 	stw	r2,0(r3)
        return -1;
   51aec:	00bfffc4 	movi	r2,-1
   51af0:	00000c06 	br	51b24 <write+0xe4>
      }
      return rval;
   51af4:	e0bffc17 	ldw	r2,-16(fp)
   51af8:	00000a06 	br	51b24 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   51afc:	0051a040 	call	51a04 <alt_get_errno>
   51b00:	1007883a 	mov	r3,r2
   51b04:	00800344 	movi	r2,13
   51b08:	18800015 	stw	r2,0(r3)
   51b0c:	00000406 	br	51b20 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   51b10:	0051a040 	call	51a04 <alt_get_errno>
   51b14:	1007883a 	mov	r3,r2
   51b18:	00801444 	movi	r2,81
   51b1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   51b20:	00bfffc4 	movi	r2,-1
}
   51b24:	e037883a 	mov	sp,fp
   51b28:	dfc00117 	ldw	ra,4(sp)
   51b2c:	df000017 	ldw	fp,0(sp)
   51b30:	dec00204 	addi	sp,sp,8
   51b34:	f800283a 	ret

00051b38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   51b38:	defffd04 	addi	sp,sp,-12
   51b3c:	dfc00215 	stw	ra,8(sp)
   51b40:	df000115 	stw	fp,4(sp)
   51b44:	df000104 	addi	fp,sp,4
   51b48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   51b4c:	d1600c04 	addi	r5,gp,-32720
   51b50:	e13fff17 	ldw	r4,-4(fp)
   51b54:	00546780 	call	54678 <alt_dev_llist_insert>
}
   51b58:	e037883a 	mov	sp,fp
   51b5c:	dfc00117 	ldw	ra,4(sp)
   51b60:	df000017 	ldw	fp,0(sp)
   51b64:	dec00204 	addi	sp,sp,8
   51b68:	f800283a 	ret

00051b6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   51b6c:	defffd04 	addi	sp,sp,-12
   51b70:	dfc00215 	stw	ra,8(sp)
   51b74:	df000115 	stw	fp,4(sp)
   51b78:	df000104 	addi	fp,sp,4
   51b7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   51b80:	00552e00 	call	552e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   51b84:	00800044 	movi	r2,1
   51b88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   51b8c:	0001883a 	nop
   51b90:	e037883a 	mov	sp,fp
   51b94:	dfc00117 	ldw	ra,4(sp)
   51b98:	df000017 	ldw	fp,0(sp)
   51b9c:	dec00204 	addi	sp,sp,8
   51ba0:	f800283a 	ret

00051ba4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   51ba4:	defffe04 	addi	sp,sp,-8
   51ba8:	dfc00115 	stw	ra,4(sp)
   51bac:	df000015 	stw	fp,0(sp)
   51bb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   51bb4:	01c0fa04 	movi	r7,1000
   51bb8:	018000c4 	movi	r6,3
   51bbc:	000b883a 	mov	r5,zero
   51bc0:	01000234 	movhi	r4,8
   51bc4:	21041004 	addi	r4,r4,4160
   51bc8:	00542f40 	call	542f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_DAC, i2c_dac);
   51bcc:	01000174 	movhi	r4,5
   51bd0:	211a4504 	addi	r4,r4,26900
   51bd4:	0051e640 	call	51e64 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   51bd8:	000d883a 	mov	r6,zero
   51bdc:	000b883a 	mov	r5,zero
   51be0:	01000174 	movhi	r4,5
   51be4:	211a5d04 	addi	r4,r4,26996
   51be8:	00539780 	call	53978 <altera_avalon_jtag_uart_init>
   51bec:	01000174 	movhi	r4,5
   51bf0:	211a5304 	addi	r4,r4,26956
   51bf4:	0051b380 	call	51b38 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   51bf8:	0001883a 	nop
}
   51bfc:	0001883a 	nop
   51c00:	e037883a 	mov	sp,fp
   51c04:	dfc00117 	ldw	ra,4(sp)
   51c08:	df000017 	ldw	fp,0(sp)
   51c0c:	dec00204 	addi	sp,sp,8
   51c10:	f800283a 	ret

00051c14 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   51c14:	defff904 	addi	sp,sp,-28
   51c18:	dfc00615 	stw	ra,24(sp)
   51c1c:	df000515 	stw	fp,20(sp)
   51c20:	df000504 	addi	fp,sp,20
   51c24:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   51c28:	008000b4 	movhi	r2,2
   51c2c:	10a1a804 	addi	r2,r2,-31072
   51c30:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   51c34:	e0bfff17 	ldw	r2,-4(fp)
   51c38:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   51c3c:	e0bffc17 	ldw	r2,-16(fp)
   51c40:	10800717 	ldw	r2,28(r2)
   51c44:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   51c48:	e0bffd17 	ldw	r2,-12(fp)
   51c4c:	10800217 	ldw	r2,8(r2)
   51c50:	10800098 	cmpnei	r2,r2,2
   51c54:	1000251e 	bne	r2,zero,51cec <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   51c58:	e0bffd17 	ldw	r2,-12(fp)
   51c5c:	10c00017 	ldw	r3,0(r2)
   51c60:	e0bffd17 	ldw	r2,-12(fp)
   51c64:	10800117 	ldw	r2,4(r2)
   51c68:	e13ffe04 	addi	r4,fp,-8
   51c6c:	200f883a 	mov	r7,r4
   51c70:	100d883a 	mov	r6,r2
   51c74:	180b883a 	mov	r5,r3
   51c78:	e13ffc17 	ldw	r4,-16(fp)
   51c7c:	00523c40 	call	523c4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   51c80:	e0bffd17 	ldw	r2,-12(fp)
   51c84:	10c00117 	ldw	r3,4(r2)
   51c88:	e0bffe17 	ldw	r2,-8(fp)
   51c8c:	1887c83a 	sub	r3,r3,r2
   51c90:	e0bffd17 	ldw	r2,-12(fp)
   51c94:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   51c98:	e0bffd17 	ldw	r2,-12(fp)
   51c9c:	10c00017 	ldw	r3,0(r2)
   51ca0:	e0bffe17 	ldw	r2,-8(fp)
   51ca4:	1887883a 	add	r3,r3,r2
   51ca8:	e0bffd17 	ldw	r2,-12(fp)
   51cac:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   51cb0:	e0bffd17 	ldw	r2,-12(fp)
   51cb4:	10800117 	ldw	r2,4(r2)
   51cb8:	10000c26 	beq	r2,zero,51cec <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   51cbc:	01400704 	movi	r5,28
   51cc0:	e13ffc17 	ldw	r4,-16(fp)
   51cc4:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   51cc8:	01400084 	movi	r5,2
   51ccc:	e13ffc17 	ldw	r4,-16(fp)
   51cd0:	00536080 	call	53608 <alt_avalon_i2c_int_enable>
   51cd4:	00000e06 	br	51d10 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   51cd8:	e0bffb17 	ldw	r2,-20(fp)
   51cdc:	10bfffc4 	addi	r2,r2,-1
   51ce0:	e0bffb15 	stw	r2,-20(fp)
   51ce4:	e0bffb17 	ldw	r2,-20(fp)
   51ce8:	10000426 	beq	r2,zero,51cfc <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   51cec:	e13ffc17 	ldw	r4,-16(fp)
   51cf0:	00523800 	call	52380 <alt_avalon_i2c_is_busy>
   51cf4:	103ff81e 	bne	r2,zero,51cd8 <__alt_data_end+0xfffeabd8>
   51cf8:	00000106 	br	51d00 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   51cfc:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   51d00:	e13ffc17 	ldw	r4,-16(fp)
   51d04:	00520280 	call	52028 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   51d08:	e0bffd17 	ldw	r2,-12(fp)
   51d0c:	10000215 	stw	zero,8(r2)
}
   51d10:	e037883a 	mov	sp,fp
   51d14:	dfc00117 	ldw	ra,4(sp)
   51d18:	df000017 	ldw	fp,0(sp)
   51d1c:	dec00204 	addi	sp,sp,8
   51d20:	f800283a 	ret

00051d24 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   51d24:	defffc04 	addi	sp,sp,-16
   51d28:	dfc00315 	stw	ra,12(sp)
   51d2c:	df000215 	stw	fp,8(sp)
   51d30:	df000204 	addi	fp,sp,8
   51d34:	e13ffe15 	stw	r4,-8(fp)
   51d38:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   51d3c:	e0bfff17 	ldw	r2,-4(fp)
   51d40:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   51d44:	e1ffff17 	ldw	r7,-4(fp)
   51d48:	000d883a 	mov	r6,zero
   51d4c:	01400174 	movhi	r5,5
   51d50:	29470504 	addi	r5,r5,7188
   51d54:	e13ffe17 	ldw	r4,-8(fp)
   51d58:	0051e100 	call	51e10 <alt_avalon_i2c_register_callback>
}
   51d5c:	0001883a 	nop
   51d60:	e037883a 	mov	sp,fp
   51d64:	dfc00117 	ldw	ra,4(sp)
   51d68:	df000017 	ldw	fp,0(sp)
   51d6c:	dec00204 	addi	sp,sp,8
   51d70:	f800283a 	ret

00051d74 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   51d74:	defff904 	addi	sp,sp,-28
   51d78:	dfc00615 	stw	ra,24(sp)
   51d7c:	df000515 	stw	fp,20(sp)
   51d80:	df000504 	addi	fp,sp,20
   51d84:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   51d88:	e0bfff17 	ldw	r2,-4(fp)
   51d8c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   51d90:	014007c4 	movi	r5,31
   51d94:	e13ffb17 	ldw	r4,-20(fp)
   51d98:	00535a00 	call	535a0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   51d9c:	01400704 	movi	r5,28
   51da0:	e13ffb17 	ldw	r4,-20(fp)
   51da4:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   51da8:	e0bffb17 	ldw	r2,-20(fp)
   51dac:	10800617 	ldw	r2,24(r2)
   51db0:	10001126 	beq	r2,zero,51df8 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51db4:	0005303a 	rdctl	r2,status
   51db8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51dbc:	e0fffd17 	ldw	r3,-12(fp)
   51dc0:	00bfff84 	movi	r2,-2
   51dc4:	1884703a 	and	r2,r3,r2
   51dc8:	1001703a 	wrctl	status,r2
  
  return context;
   51dcc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   51dd0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   51dd4:	e0bffb17 	ldw	r2,-20(fp)
   51dd8:	10800617 	ldw	r2,24(r2)
   51ddc:	e13ffb17 	ldw	r4,-20(fp)
   51de0:	103ee83a 	callr	r2
   51de4:	e0bffc17 	ldw	r2,-16(fp)
   51de8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51dec:	e0bffe17 	ldw	r2,-8(fp)
   51df0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   51df4:	0001883a 	nop
   51df8:	0001883a 	nop
}
   51dfc:	e037883a 	mov	sp,fp
   51e00:	dfc00117 	ldw	ra,4(sp)
   51e04:	df000017 	ldw	fp,0(sp)
   51e08:	dec00204 	addi	sp,sp,8
   51e0c:	f800283a 	ret

00051e10 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   51e10:	defffb04 	addi	sp,sp,-20
   51e14:	df000415 	stw	fp,16(sp)
   51e18:	df000404 	addi	fp,sp,16
   51e1c:	e13ffc15 	stw	r4,-16(fp)
   51e20:	e17ffd15 	stw	r5,-12(fp)
   51e24:	e1bffe15 	stw	r6,-8(fp)
   51e28:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   51e2c:	e0bffc17 	ldw	r2,-16(fp)
   51e30:	e0fffd17 	ldw	r3,-12(fp)
   51e34:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   51e38:	e0bffc17 	ldw	r2,-16(fp)
   51e3c:	e0ffff17 	ldw	r3,-4(fp)
   51e40:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   51e44:	e0bffc17 	ldw	r2,-16(fp)
   51e48:	e0fffe17 	ldw	r3,-8(fp)
   51e4c:	10c00815 	stw	r3,32(r2)

    return ;
   51e50:	0001883a 	nop
}
   51e54:	e037883a 	mov	sp,fp
   51e58:	df000017 	ldw	fp,0(sp)
   51e5c:	dec00104 	addi	sp,sp,4
   51e60:	f800283a 	ret

00051e64 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   51e64:	defff704 	addi	sp,sp,-36
   51e68:	dfc00815 	stw	ra,32(sp)
   51e6c:	df000715 	stw	fp,28(sp)
   51e70:	df000704 	addi	fp,sp,28
   51e74:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   51e78:	e13fff17 	ldw	r4,-4(fp)
   51e7c:	00520280 	call	52028 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   51e80:	014007c4 	movi	r5,31
   51e84:	e13fff17 	ldw	r4,-4(fp)
   51e88:	00535a00 	call	535a0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   51e8c:	01400704 	movi	r5,28
   51e90:	e13fff17 	ldw	r4,-4(fp)
   51e94:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   51e98:	014000c4 	movi	r5,3
   51e9c:	e13fff17 	ldw	r4,-4(fp)
   51ea0:	00537ac0 	call	537ac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   51ea4:	014000c4 	movi	r5,3
   51ea8:	e13fff17 	ldw	r4,-4(fp)
   51eac:	00536fc0 	call	536fc <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   51eb0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   51eb4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   51eb8:	e0bffb04 	addi	r2,fp,-20
   51ebc:	018000b4 	movhi	r6,2
   51ec0:	31a1a804 	addi	r6,r6,-31072
   51ec4:	100b883a 	mov	r5,r2
   51ec8:	e13fff17 	ldw	r4,-4(fp)
   51ecc:	00522840 	call	52284 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   51ed0:	e0bffb04 	addi	r2,fp,-20
   51ed4:	100b883a 	mov	r5,r2
   51ed8:	e13fff17 	ldw	r4,-4(fp)
   51edc:	00521240 	call	52124 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   51ee0:	d1601104 	addi	r5,gp,-32700
   51ee4:	e13fff17 	ldw	r4,-4(fp)
   51ee8:	00546780 	call	54678 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   51eec:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   51ef0:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   51ef4:	e0bffa17 	ldw	r2,-24(fp)
   51ef8:	10000c1e 	bne	r2,zero,51f2c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   51efc:	e0bfff17 	ldw	r2,-4(fp)
   51f00:	10c00417 	ldw	r3,16(r2)
   51f04:	e0bfff17 	ldw	r2,-4(fp)
   51f08:	10800517 	ldw	r2,20(r2)
   51f0c:	d8000015 	stw	zero,0(sp)
   51f10:	e1ffff17 	ldw	r7,-4(fp)
   51f14:	01800174 	movhi	r6,5
   51f18:	31875d04 	addi	r6,r6,7540
   51f1c:	100b883a 	mov	r5,r2
   51f20:	1809883a 	mov	r4,r3
   51f24:	00548a00 	call	548a0 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   51f28:	00000406 	br	51f3c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   51f2c:	01000174 	movhi	r4,5
   51f30:	2117aa04 	addi	r4,r4,24232
   51f34:	0054ed40 	call	54ed4 <alt_printf>
    }

    return;
   51f38:	0001883a 	nop

}
   51f3c:	e037883a 	mov	sp,fp
   51f40:	dfc00117 	ldw	ra,4(sp)
   51f44:	df000017 	ldw	fp,0(sp)
   51f48:	dec00204 	addi	sp,sp,8
   51f4c:	f800283a 	ret

00051f50 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   51f50:	defffc04 	addi	sp,sp,-16
   51f54:	dfc00315 	stw	ra,12(sp)
   51f58:	df000215 	stw	fp,8(sp)
   51f5c:	df000204 	addi	fp,sp,8
   51f60:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   51f64:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   51f68:	d1601104 	addi	r5,gp,-32700
   51f6c:	e13fff17 	ldw	r4,-4(fp)
   51f70:	00547dc0 	call	547dc <alt_find_dev>
   51f74:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   51f78:	e0bffe17 	ldw	r2,-8(fp)
}
   51f7c:	e037883a 	mov	sp,fp
   51f80:	dfc00117 	ldw	ra,4(sp)
   51f84:	df000017 	ldw	fp,0(sp)
   51f88:	dec00204 	addi	sp,sp,8
   51f8c:	f800283a 	ret

00051f90 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   51f90:	defffc04 	addi	sp,sp,-16
   51f94:	df000315 	stw	fp,12(sp)
   51f98:	df000304 	addi	fp,sp,12
   51f9c:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   51fa0:	e0bfff17 	ldw	r2,-4(fp)
   51fa4:	10800717 	ldw	r2,28(r2)
   51fa8:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   51fac:	e0bfff17 	ldw	r2,-4(fp)
   51fb0:	10800317 	ldw	r2,12(r2)
   51fb4:	10800204 	addi	r2,r2,8
   51fb8:	10800037 	ldwio	r2,0(r2)
   51fbc:	1080004c 	andi	r2,r2,1
   51fc0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   51fc4:	e0bffe17 	ldw	r2,-8(fp)
   51fc8:	10000226 	beq	r2,zero,51fd4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   51fcc:	00bffe44 	movi	r2,-7
   51fd0:	00001106 	br	52018 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   51fd4:	e0bfff17 	ldw	r2,-4(fp)
   51fd8:	10c00617 	ldw	r3,24(r2)
   51fdc:	00800174 	movhi	r2,5
   51fe0:	10870504 	addi	r2,r2,7188
   51fe4:	1880021e 	bne	r3,r2,51ff0 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   51fe8:	e0bffd17 	ldw	r2,-12(fp)
   51fec:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   51ff0:	e0bfff17 	ldw	r2,-4(fp)
   51ff4:	10800317 	ldw	r2,12(r2)
   51ff8:	10800204 	addi	r2,r2,8
   51ffc:	e0ffff17 	ldw	r3,-4(fp)
   52000:	18c00317 	ldw	r3,12(r3)
   52004:	18c00204 	addi	r3,r3,8
   52008:	18c00037 	ldwio	r3,0(r3)
   5200c:	18c00054 	ori	r3,r3,1
   52010:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   52014:	0005883a 	mov	r2,zero
}
   52018:	e037883a 	mov	sp,fp
   5201c:	df000017 	ldw	fp,0(sp)
   52020:	dec00104 	addi	sp,sp,4
   52024:	f800283a 	ret

00052028 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52028:	defffe04 	addi	sp,sp,-8
   5202c:	df000115 	stw	fp,4(sp)
   52030:	df000104 	addi	fp,sp,4
   52034:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   52038:	e0bfff17 	ldw	r2,-4(fp)
   5203c:	10800317 	ldw	r2,12(r2)
   52040:	10800204 	addi	r2,r2,8
   52044:	e0ffff17 	ldw	r3,-4(fp)
   52048:	18c00317 	ldw	r3,12(r3)
   5204c:	18c00204 	addi	r3,r3,8
   52050:	19000037 	ldwio	r4,0(r3)
   52054:	00ffff84 	movi	r3,-2
   52058:	20c6703a 	and	r3,r4,r3
   5205c:	10c00035 	stwio	r3,0(r2)

}
   52060:	0001883a 	nop
   52064:	e037883a 	mov	sp,fp
   52068:	df000017 	ldw	fp,0(sp)
   5206c:	dec00104 	addi	sp,sp,4
   52070:	f800283a 	ret

00052074 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   52074:	defffd04 	addi	sp,sp,-12
   52078:	df000215 	stw	fp,8(sp)
   5207c:	df000204 	addi	fp,sp,8
   52080:	e13ffe15 	stw	r4,-8(fp)
   52084:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   52088:	e0bffe17 	ldw	r2,-8(fp)
   5208c:	10c00d17 	ldw	r3,52(r2)
   52090:	e0bfff17 	ldw	r2,-4(fp)
   52094:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   52098:	e0bffe17 	ldw	r2,-8(fp)
   5209c:	10800317 	ldw	r2,12(r2)
   520a0:	10800204 	addi	r2,r2,8
   520a4:	10800037 	ldwio	r2,0(r2)
   520a8:	1080008c 	andi	r2,r2,2
   520ac:	1005d07a 	srai	r2,r2,1
   520b0:	1007883a 	mov	r3,r2
   520b4:	e0bfff17 	ldw	r2,-4(fp)
   520b8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   520bc:	e0bffe17 	ldw	r2,-8(fp)
   520c0:	10800317 	ldw	r2,12(r2)
   520c4:	10800904 	addi	r2,r2,36
   520c8:	10800037 	ldwio	r2,0(r2)
   520cc:	1007883a 	mov	r3,r2
   520d0:	e0bfff17 	ldw	r2,-4(fp)
   520d4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   520d8:	e0bffe17 	ldw	r2,-8(fp)
   520dc:	10800317 	ldw	r2,12(r2)
   520e0:	10800804 	addi	r2,r2,32
   520e4:	10800037 	ldwio	r2,0(r2)
   520e8:	1007883a 	mov	r3,r2
   520ec:	e0bfff17 	ldw	r2,-4(fp)
   520f0:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   520f4:	e0bffe17 	ldw	r2,-8(fp)
   520f8:	10800317 	ldw	r2,12(r2)
   520fc:	10800a04 	addi	r2,r2,40
   52100:	10800037 	ldwio	r2,0(r2)
   52104:	1007883a 	mov	r3,r2
   52108:	e0bfff17 	ldw	r2,-4(fp)
   5210c:	10c0030d 	sth	r3,12(r2)
}
   52110:	0001883a 	nop
   52114:	e037883a 	mov	sp,fp
   52118:	df000017 	ldw	fp,0(sp)
   5211c:	dec00104 	addi	sp,sp,4
   52120:	f800283a 	ret

00052124 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   52124:	defffd04 	addi	sp,sp,-12
   52128:	df000215 	stw	fp,8(sp)
   5212c:	df000204 	addi	fp,sp,8
   52130:	e13ffe15 	stw	r4,-8(fp)
   52134:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   52138:	e0bfff17 	ldw	r2,-4(fp)
   5213c:	10c00017 	ldw	r3,0(r2)
   52140:	e0bffe17 	ldw	r2,-8(fp)
   52144:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   52148:	e0bffe17 	ldw	r2,-8(fp)
   5214c:	10800317 	ldw	r2,12(r2)
   52150:	10c00204 	addi	r3,r2,8
   52154:	e0bffe17 	ldw	r2,-8(fp)
   52158:	10800317 	ldw	r2,12(r2)
   5215c:	10800204 	addi	r2,r2,8
   52160:	10800037 	ldwio	r2,0(r2)
   52164:	1009883a 	mov	r4,r2
   52168:	00bfff44 	movi	r2,-3
   5216c:	2088703a 	and	r4,r4,r2
   52170:	e0bfff17 	ldw	r2,-4(fp)
   52174:	10800117 	ldw	r2,4(r2)
   52178:	1085883a 	add	r2,r2,r2
   5217c:	1080008c 	andi	r2,r2,2
   52180:	2084b03a 	or	r2,r4,r2
   52184:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   52188:	e0bffe17 	ldw	r2,-8(fp)
   5218c:	10800317 	ldw	r2,12(r2)
   52190:	10800904 	addi	r2,r2,36
   52194:	e0ffff17 	ldw	r3,-4(fp)
   52198:	18c0020b 	ldhu	r3,8(r3)
   5219c:	18ffffcc 	andi	r3,r3,65535
   521a0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   521a4:	e0bffe17 	ldw	r2,-8(fp)
   521a8:	10800317 	ldw	r2,12(r2)
   521ac:	10800804 	addi	r2,r2,32
   521b0:	e0ffff17 	ldw	r3,-4(fp)
   521b4:	18c0028b 	ldhu	r3,10(r3)
   521b8:	18ffffcc 	andi	r3,r3,65535
   521bc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   521c0:	e0bffe17 	ldw	r2,-8(fp)
   521c4:	10800317 	ldw	r2,12(r2)
   521c8:	10800a04 	addi	r2,r2,40
   521cc:	e0ffff17 	ldw	r3,-4(fp)
   521d0:	18c0030b 	ldhu	r3,12(r3)
   521d4:	18ffffcc 	andi	r3,r3,65535
   521d8:	10c00035 	stwio	r3,0(r2)
}
   521dc:	0001883a 	nop
   521e0:	e037883a 	mov	sp,fp
   521e4:	df000017 	ldw	fp,0(sp)
   521e8:	dec00104 	addi	sp,sp,4
   521ec:	f800283a 	ret

000521f0 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   521f0:	defffb04 	addi	sp,sp,-20
   521f4:	dfc00415 	stw	ra,16(sp)
   521f8:	df000315 	stw	fp,12(sp)
   521fc:	df000304 	addi	fp,sp,12
   52200:	e13ffd15 	stw	r4,-12(fp)
   52204:	e17ffe15 	stw	r5,-8(fp)
   52208:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   5220c:	e0bffe17 	ldw	r2,-8(fp)
   52210:	1080028b 	ldhu	r2,10(r2)
   52214:	10bfffcc 	andi	r2,r2,65535
   52218:	10000426 	beq	r2,zero,5222c <alt_avalon_i2c_master_config_speed_get+0x3c>
   5221c:	e0bffe17 	ldw	r2,-8(fp)
   52220:	1080020b 	ldhu	r2,8(r2)
   52224:	10bfffcc 	andi	r2,r2,65535
   52228:	1000021e 	bne	r2,zero,52234 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   5222c:	00bfff44 	movi	r2,-3
   52230:	00000f06 	br	52270 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   52234:	e0bffd17 	ldw	r2,-12(fp)
   52238:	11000c17 	ldw	r4,48(r2)
   5223c:	e0bffe17 	ldw	r2,-8(fp)
   52240:	1080028b 	ldhu	r2,10(r2)
   52244:	10ffffcc 	andi	r3,r2,65535
   52248:	e0bffe17 	ldw	r2,-8(fp)
   5224c:	1080020b 	ldhu	r2,8(r2)
   52250:	10bfffcc 	andi	r2,r2,65535
   52254:	1885883a 	add	r2,r3,r2
   52258:	100b883a 	mov	r5,r2
   5225c:	00432780 	call	43278 <__udivsi3>
   52260:	1007883a 	mov	r3,r2
   52264:	e0bfff17 	ldw	r2,-4(fp)
   52268:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   5226c:	0005883a 	mov	r2,zero
}
   52270:	e037883a 	mov	sp,fp
   52274:	dfc00117 	ldw	ra,4(sp)
   52278:	df000017 	ldw	fp,0(sp)
   5227c:	dec00204 	addi	sp,sp,8
   52280:	f800283a 	ret

00052284 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   52284:	defff904 	addi	sp,sp,-28
   52288:	dfc00615 	stw	ra,24(sp)
   5228c:	df000515 	stw	fp,20(sp)
   52290:	df000504 	addi	fp,sp,20
   52294:	e13ffd15 	stw	r4,-12(fp)
   52298:	e17ffe15 	stw	r5,-8(fp)
   5229c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   522a0:	e0ffff17 	ldw	r3,-4(fp)
   522a4:	008001b4 	movhi	r2,6
   522a8:	1086a004 	addi	r2,r2,6784
   522ac:	10c00436 	bltu	r2,r3,522c0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   522b0:	e0bfff17 	ldw	r2,-4(fp)
   522b4:	10000226 	beq	r2,zero,522c0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   522b8:	e0bfff17 	ldw	r2,-4(fp)
   522bc:	1000021e 	bne	r2,zero,522c8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   522c0:	00bfff04 	movi	r2,-4
   522c4:	00002906 	br	5236c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   522c8:	e0bffd17 	ldw	r2,-12(fp)
   522cc:	10c00c17 	ldw	r3,48(r2)
   522d0:	e0bfff17 	ldw	r2,-4(fp)
   522d4:	1085883a 	add	r2,r2,r2
   522d8:	100b883a 	mov	r5,r2
   522dc:	1809883a 	mov	r4,r3
   522e0:	00432780 	call	43278 <__udivsi3>
   522e4:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   522e8:	e0bffb17 	ldw	r2,-20(fp)
   522ec:	10800f04 	addi	r2,r2,60
   522f0:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   522f4:	e0bffb17 	ldw	r2,-20(fp)
   522f8:	10bff104 	addi	r2,r2,-60
   522fc:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   52300:	e0ffff17 	ldw	r3,-4(fp)
   52304:	008000b4 	movhi	r2,2
   52308:	10a1a804 	addi	r2,r2,-31072
   5230c:	10c0042e 	bgeu	r2,r3,52320 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   52310:	e0bffe17 	ldw	r2,-8(fp)
   52314:	00c00044 	movi	r3,1
   52318:	10c00115 	stw	r3,4(r2)
   5231c:	00000206 	br	52328 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   52320:	e0bffe17 	ldw	r2,-8(fp)
   52324:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   52328:	e0bffb17 	ldw	r2,-20(fp)
   5232c:	1007883a 	mov	r3,r2
   52330:	e0bffe17 	ldw	r2,-8(fp)
   52334:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   52338:	e0bffc17 	ldw	r2,-16(fp)
   5233c:	1007883a 	mov	r3,r2
   52340:	e0bffe17 	ldw	r2,-8(fp)
   52344:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   52348:	e0bffb17 	ldw	r2,-20(fp)
   5234c:	1007883a 	mov	r3,r2
   52350:	e0bffb17 	ldw	r2,-20(fp)
   52354:	1004d07a 	srli	r2,r2,1
   52358:	1885c83a 	sub	r2,r3,r2
   5235c:	1007883a 	mov	r3,r2
   52360:	e0bffe17 	ldw	r2,-8(fp)
   52364:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   52368:	0005883a 	mov	r2,zero

}
   5236c:	e037883a 	mov	sp,fp
   52370:	dfc00117 	ldw	ra,4(sp)
   52374:	df000017 	ldw	fp,0(sp)
   52378:	dec00204 	addi	sp,sp,8
   5237c:	f800283a 	ret

00052380 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   52380:	defffe04 	addi	sp,sp,-8
   52384:	df000115 	stw	fp,4(sp)
   52388:	df000104 	addi	fp,sp,4
   5238c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   52390:	e0bfff17 	ldw	r2,-4(fp)
   52394:	10800317 	ldw	r2,12(r2)
   52398:	10800504 	addi	r2,r2,20
   5239c:	10800037 	ldwio	r2,0(r2)
   523a0:	1080004c 	andi	r2,r2,1
   523a4:	10000226 	beq	r2,zero,523b0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   523a8:	00800044 	movi	r2,1
   523ac:	00000106 	br	523b4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   523b0:	0005883a 	mov	r2,zero
}
   523b4:	e037883a 	mov	sp,fp
   523b8:	df000017 	ldw	fp,0(sp)
   523bc:	dec00104 	addi	sp,sp,4
   523c0:	f800283a 	ret

000523c4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   523c4:	defffb04 	addi	sp,sp,-20
   523c8:	df000415 	stw	fp,16(sp)
   523cc:	df000404 	addi	fp,sp,16
   523d0:	e13ffc15 	stw	r4,-16(fp)
   523d4:	e17ffd15 	stw	r5,-12(fp)
   523d8:	e1bffe15 	stw	r6,-8(fp)
   523dc:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   523e0:	e0bfff17 	ldw	r2,-4(fp)
   523e4:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   523e8:	00001406 	br	5243c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   523ec:	e0bfff17 	ldw	r2,-4(fp)
   523f0:	10800017 	ldw	r2,0(r2)
   523f4:	e0fffd17 	ldw	r3,-12(fp)
   523f8:	1885883a 	add	r2,r3,r2
   523fc:	e0fffc17 	ldw	r3,-16(fp)
   52400:	18c00317 	ldw	r3,12(r3)
   52404:	18c00104 	addi	r3,r3,4
   52408:	18c00037 	ldwio	r3,0(r3)
   5240c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   52410:	e0bfff17 	ldw	r2,-4(fp)
   52414:	10800017 	ldw	r2,0(r2)
   52418:	10c00044 	addi	r3,r2,1
   5241c:	e0bfff17 	ldw	r2,-4(fp)
   52420:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   52424:	e0bfff17 	ldw	r2,-4(fp)
   52428:	10c00017 	ldw	r3,0(r2)
   5242c:	e0bffe17 	ldw	r2,-8(fp)
   52430:	1880021e 	bne	r3,r2,5243c <alt_avalon_i2c_rx_read_available+0x78>
   52434:	e0bffe17 	ldw	r2,-8(fp)
   52438:	1000061e 	bne	r2,zero,52454 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   5243c:	e0bffc17 	ldw	r2,-16(fp)
   52440:	10800317 	ldw	r2,12(r2)
   52444:	10800704 	addi	r2,r2,28
   52448:	10800037 	ldwio	r2,0(r2)
   5244c:	103fe71e 	bne	r2,zero,523ec <__alt_data_end+0xfffeb2ec>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   52450:	00000106 	br	52458 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   52454:	0001883a 	nop
    }
}
   52458:	0001883a 	nop
   5245c:	e037883a 	mov	sp,fp
   52460:	df000017 	ldw	fp,0(sp)
   52464:	dec00104 	addi	sp,sp,4
   52468:	f800283a 	ret

0005246c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   5246c:	defffa04 	addi	sp,sp,-24
   52470:	dfc00515 	stw	ra,20(sp)
   52474:	df000415 	stw	fp,16(sp)
   52478:	df000404 	addi	fp,sp,16
   5247c:	e13ffe15 	stw	r4,-8(fp)
   52480:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   52484:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   52488:	008000b4 	movhi	r2,2
   5248c:	10a1a804 	addi	r2,r2,-31072
   52490:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   52494:	00000d06 	br	524cc <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   52498:	e0bffd17 	ldw	r2,-12(fp)
   5249c:	108002a8 	cmpgeui	r2,r2,10
   524a0:	1000021e 	bne	r2,zero,524ac <alt_avalon_i2c_rx_read+0x40>
   524a4:	0109c404 	movi	r4,10000
   524a8:	005449c0 	call	5449c <alt_busy_sleep>
      if (--timeout == 0)
   524ac:	e0bffd17 	ldw	r2,-12(fp)
   524b0:	10bfffc4 	addi	r2,r2,-1
   524b4:	e0bffd15 	stw	r2,-12(fp)
   524b8:	e0bffd17 	ldw	r2,-12(fp)
   524bc:	1000031e 	bne	r2,zero,524cc <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   524c0:	00bfff84 	movi	r2,-2
   524c4:	e0bffc15 	stw	r2,-16(fp)
        break;
   524c8:	00000506 	br	524e0 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   524cc:	e0bffe17 	ldw	r2,-8(fp)
   524d0:	10800317 	ldw	r2,12(r2)
   524d4:	10800704 	addi	r2,r2,28
   524d8:	10800037 	ldwio	r2,0(r2)
   524dc:	103fee26 	beq	r2,zero,52498 <__alt_data_end+0xfffeb398>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   524e0:	e0bffe17 	ldw	r2,-8(fp)
   524e4:	10800317 	ldw	r2,12(r2)
   524e8:	10800104 	addi	r2,r2,4
   524ec:	10800037 	ldwio	r2,0(r2)
   524f0:	1007883a 	mov	r3,r2
   524f4:	e0bfff17 	ldw	r2,-4(fp)
   524f8:	10c00005 	stb	r3,0(r2)
        
    return status;
   524fc:	e0bffc17 	ldw	r2,-16(fp)
}
   52500:	e037883a 	mov	sp,fp
   52504:	dfc00117 	ldw	ra,4(sp)
   52508:	df000017 	ldw	fp,0(sp)
   5250c:	dec00204 	addi	sp,sp,8
   52510:	f800283a 	ret

00052514 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   52514:	defff804 	addi	sp,sp,-32
   52518:	dfc00715 	stw	ra,28(sp)
   5251c:	df000615 	stw	fp,24(sp)
   52520:	df000604 	addi	fp,sp,24
   52524:	e13ffc15 	stw	r4,-16(fp)
   52528:	2809883a 	mov	r4,r5
   5252c:	3007883a 	mov	r3,r6
   52530:	3805883a 	mov	r2,r7
   52534:	e13ffd05 	stb	r4,-12(fp)
   52538:	e0fffe05 	stb	r3,-8(fp)
   5253c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   52540:	0089c404 	movi	r2,10000
   52544:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   52548:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   5254c:	00000c06 	br	52580 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   52550:	e0bffa17 	ldw	r2,-24(fp)
   52554:	108002a8 	cmpgeui	r2,r2,10
   52558:	1000021e 	bne	r2,zero,52564 <alt_avalon_i2c_cmd_write+0x50>
   5255c:	0109c404 	movi	r4,10000
   52560:	005449c0 	call	5449c <alt_busy_sleep>
      if (--timeout == 0)
   52564:	e0bffa17 	ldw	r2,-24(fp)
   52568:	10bfffc4 	addi	r2,r2,-1
   5256c:	e0bffa15 	stw	r2,-24(fp)
   52570:	e0bffa17 	ldw	r2,-24(fp)
   52574:	1000021e 	bne	r2,zero,52580 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   52578:	00bfff84 	movi	r2,-2
   5257c:	00001906 	br	525e4 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   52580:	e0bffc17 	ldw	r2,-16(fp)
   52584:	10800317 	ldw	r2,12(r2)
   52588:	10800404 	addi	r2,r2,16
   5258c:	10800037 	ldwio	r2,0(r2)
   52590:	1080004c 	andi	r2,r2,1
   52594:	103fee26 	beq	r2,zero,52550 <__alt_data_end+0xfffeb450>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   52598:	e0bffc17 	ldw	r2,-16(fp)
   5259c:	10800317 	ldw	r2,12(r2)
   525a0:	e13ffd03 	ldbu	r4,-12(fp)
   525a4:	e0fffe03 	ldbu	r3,-8(fp)
   525a8:	1806927a 	slli	r3,r3,9
   525ac:	20c8b03a 	or	r4,r4,r3
   525b0:	e0ffff03 	ldbu	r3,-4(fp)
   525b4:	1806923a 	slli	r3,r3,8
   525b8:	20c6b03a 	or	r3,r4,r3
   525bc:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   525c0:	e0bffb04 	addi	r2,fp,-20
   525c4:	100b883a 	mov	r5,r2
   525c8:	e13ffc17 	ldw	r4,-16(fp)
   525cc:	00527540 	call	52754 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   525d0:	e0bffb04 	addi	r2,fp,-20
   525d4:	100b883a 	mov	r5,r2
   525d8:	e13ffc17 	ldw	r4,-16(fp)
   525dc:	00527a00 	call	527a0 <alt_avalon_i2c_check_arblost>
    
    return status;
   525e0:	e0bffb17 	ldw	r2,-20(fp)
}
   525e4:	e037883a 	mov	sp,fp
   525e8:	dfc00117 	ldw	ra,4(sp)
   525ec:	df000017 	ldw	fp,0(sp)
   525f0:	dec00204 	addi	sp,sp,8
   525f4:	f800283a 	ret

000525f8 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   525f8:	defffa04 	addi	sp,sp,-24
   525fc:	dfc00515 	stw	ra,20(sp)
   52600:	df000415 	stw	fp,16(sp)
   52604:	df000404 	addi	fp,sp,16
   52608:	e13ffd15 	stw	r4,-12(fp)
   5260c:	e17ffe15 	stw	r5,-8(fp)
   52610:	3005883a 	mov	r2,r6
   52614:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   52618:	e0bffd17 	ldw	r2,-12(fp)
   5261c:	10800d17 	ldw	r2,52(r2)
   52620:	10800058 	cmpnei	r2,r2,1
   52624:	10001c1e 	bne	r2,zero,52698 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   52628:	e0bffd17 	ldw	r2,-12(fp)
   5262c:	10800917 	ldw	r2,36(r2)
   52630:	109e0014 	ori	r2,r2,30720
   52634:	1004d1fa 	srli	r2,r2,7
   52638:	1007883a 	mov	r3,r2
   5263c:	00bfff84 	movi	r2,-2
   52640:	1884703a 	and	r2,r3,r2
   52644:	1007883a 	mov	r3,r2
   52648:	e0bffe17 	ldw	r2,-8(fp)
   5264c:	1884b03a 	or	r2,r3,r2
   52650:	10803fcc 	andi	r2,r2,255
   52654:	e0ffff03 	ldbu	r3,-4(fp)
   52658:	000f883a 	mov	r7,zero
   5265c:	180d883a 	mov	r6,r3
   52660:	100b883a 	mov	r5,r2
   52664:	e13ffd17 	ldw	r4,-12(fp)
   52668:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   5266c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   52670:	e0bffd17 	ldw	r2,-12(fp)
   52674:	10800917 	ldw	r2,36(r2)
   52678:	10803fcc 	andi	r2,r2,255
   5267c:	000f883a 	mov	r7,zero
   52680:	000d883a 	mov	r6,zero
   52684:	100b883a 	mov	r5,r2
   52688:	e13ffd17 	ldw	r4,-12(fp)
   5268c:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   52690:	e0bffc15 	stw	r2,-16(fp)
   52694:	00000e06 	br	526d0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   52698:	e0bffd17 	ldw	r2,-12(fp)
   5269c:	10800917 	ldw	r2,36(r2)
   526a0:	1085883a 	add	r2,r2,r2
   526a4:	1007883a 	mov	r3,r2
   526a8:	e0bffe17 	ldw	r2,-8(fp)
   526ac:	1884b03a 	or	r2,r3,r2
   526b0:	10803fcc 	andi	r2,r2,255
   526b4:	e0ffff03 	ldbu	r3,-4(fp)
   526b8:	000f883a 	mov	r7,zero
   526bc:	180d883a 	mov	r6,r3
   526c0:	100b883a 	mov	r5,r2
   526c4:	e13ffd17 	ldw	r4,-12(fp)
   526c8:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   526cc:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   526d0:	e0bffc17 	ldw	r2,-16(fp)
}
   526d4:	e037883a 	mov	sp,fp
   526d8:	dfc00117 	ldw	ra,4(sp)
   526dc:	df000017 	ldw	fp,0(sp)
   526e0:	dec00204 	addi	sp,sp,8
   526e4:	f800283a 	ret

000526e8 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   526e8:	defffd04 	addi	sp,sp,-12
   526ec:	df000215 	stw	fp,8(sp)
   526f0:	df000204 	addi	fp,sp,8
   526f4:	e13ffe15 	stw	r4,-8(fp)
   526f8:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   526fc:	e0bffe17 	ldw	r2,-8(fp)
   52700:	10c00917 	ldw	r3,36(r2)
   52704:	e0bfff17 	ldw	r2,-4(fp)
   52708:	10c00015 	stw	r3,0(r2)
}
   5270c:	0001883a 	nop
   52710:	e037883a 	mov	sp,fp
   52714:	df000017 	ldw	fp,0(sp)
   52718:	dec00104 	addi	sp,sp,4
   5271c:	f800283a 	ret

00052720 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   52720:	defffd04 	addi	sp,sp,-12
   52724:	df000215 	stw	fp,8(sp)
   52728:	df000204 	addi	fp,sp,8
   5272c:	e13ffe15 	stw	r4,-8(fp)
   52730:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   52734:	e0bffe17 	ldw	r2,-8(fp)
   52738:	e0ffff17 	ldw	r3,-4(fp)
   5273c:	10c00915 	stw	r3,36(r2)
}
   52740:	0001883a 	nop
   52744:	e037883a 	mov	sp,fp
   52748:	df000017 	ldw	fp,0(sp)
   5274c:	dec00104 	addi	sp,sp,4
   52750:	f800283a 	ret

00052754 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   52754:	defffd04 	addi	sp,sp,-12
   52758:	df000215 	stw	fp,8(sp)
   5275c:	df000204 	addi	fp,sp,8
   52760:	e13ffe15 	stw	r4,-8(fp)
   52764:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   52768:	e0bffe17 	ldw	r2,-8(fp)
   5276c:	10800317 	ldw	r2,12(r2)
   52770:	10800404 	addi	r2,r2,16
   52774:	10800037 	ldwio	r2,0(r2)
   52778:	1080010c 	andi	r2,r2,4
   5277c:	10000326 	beq	r2,zero,5278c <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   52780:	e0bfff17 	ldw	r2,-4(fp)
   52784:	00fffec4 	movi	r3,-5
   52788:	10c00015 	stw	r3,0(r2)
    }
}
   5278c:	0001883a 	nop
   52790:	e037883a 	mov	sp,fp
   52794:	df000017 	ldw	fp,0(sp)
   52798:	dec00104 	addi	sp,sp,4
   5279c:	f800283a 	ret

000527a0 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   527a0:	defffd04 	addi	sp,sp,-12
   527a4:	df000215 	stw	fp,8(sp)
   527a8:	df000204 	addi	fp,sp,8
   527ac:	e13ffe15 	stw	r4,-8(fp)
   527b0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   527b4:	e0bffe17 	ldw	r2,-8(fp)
   527b8:	10800317 	ldw	r2,12(r2)
   527bc:	10800404 	addi	r2,r2,16
   527c0:	10800037 	ldwio	r2,0(r2)
   527c4:	1080020c 	andi	r2,r2,8
   527c8:	10000326 	beq	r2,zero,527d8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   527cc:	e0bfff17 	ldw	r2,-4(fp)
   527d0:	00fffe84 	movi	r3,-6
   527d4:	10c00015 	stw	r3,0(r2)
    }
}
   527d8:	0001883a 	nop
   527dc:	e037883a 	mov	sp,fp
   527e0:	df000017 	ldw	fp,0(sp)
   527e4:	dec00104 	addi	sp,sp,4
   527e8:	f800283a 	ret

000527ec <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   527ec:	defff804 	addi	sp,sp,-32
   527f0:	dfc00715 	stw	ra,28(sp)
   527f4:	df000615 	stw	fp,24(sp)
   527f8:	df000604 	addi	fp,sp,24
   527fc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   52800:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   52804:	e0bfff17 	ldw	r2,-4(fp)
   52808:	10800717 	ldw	r2,28(r2)
   5280c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   52810:	e0bffb17 	ldw	r2,-20(fp)
   52814:	10800117 	ldw	r2,4(r2)
   52818:	10800044 	addi	r2,r2,1
   5281c:	1089c424 	muli	r2,r2,10000
   52820:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   52824:	e0bffd04 	addi	r2,fp,-12
   52828:	100b883a 	mov	r5,r2
   5282c:	e13fff17 	ldw	r4,-4(fp)
   52830:	005366c0 	call	5366c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   52834:	e0bffd17 	ldw	r2,-12(fp)
   52838:	100b883a 	mov	r5,r2
   5283c:	e13fff17 	ldw	r4,-4(fp)
   52840:	00535a00 	call	535a0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   52844:	e0bffc04 	addi	r2,fp,-16
   52848:	100b883a 	mov	r5,r2
   5284c:	e13fff17 	ldw	r4,-4(fp)
   52850:	00527540 	call	52754 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   52854:	e0bffc17 	ldw	r2,-16(fp)
   52858:	10002226 	beq	r2,zero,528e4 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
   5285c:	e0bffb17 	ldw	r2,-20(fp)
   52860:	10800217 	ldw	r2,8(r2)
   52864:	10001d26 	beq	r2,zero,528dc <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   52868:	00000d06 	br	528a0 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
   5286c:	e0bffa17 	ldw	r2,-24(fp)
   52870:	108002a8 	cmpgeui	r2,r2,10
   52874:	1000021e 	bne	r2,zero,52880 <alt_avalon_i2c_interrupt_transaction_status+0x94>
   52878:	0109c404 	movi	r4,10000
   5287c:	005449c0 	call	5449c <alt_busy_sleep>
              if (--timeout == 0)
   52880:	e0bffa17 	ldw	r2,-24(fp)
   52884:	10bfffc4 	addi	r2,r2,-1
   52888:	e0bffa15 	stw	r2,-24(fp)
   5288c:	e0bffa17 	ldw	r2,-24(fp)
   52890:	1000031e 	bne	r2,zero,528a0 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   52894:	00bfff84 	movi	r2,-2
   52898:	e0bffc15 	stw	r2,-16(fp)
                 break;
   5289c:	00000306 	br	528ac <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   528a0:	e13fff17 	ldw	r4,-4(fp)
   528a4:	00523800 	call	52380 <alt_avalon_i2c_is_busy>
   528a8:	103ff01e 	bne	r2,zero,5286c <__alt_data_end+0xfffeb76c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   528ac:	e0bffb17 	ldw	r2,-20(fp)
   528b0:	10800017 	ldw	r2,0(r2)
   528b4:	e0fffe04 	addi	r3,fp,-8
   528b8:	180f883a 	mov	r7,r3
   528bc:	000d883a 	mov	r6,zero
   528c0:	100b883a 	mov	r5,r2
   528c4:	e13fff17 	ldw	r4,-4(fp)
   528c8:	00523c40 	call	523c4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   528cc:	e13fff17 	ldw	r4,-4(fp)
   528d0:	00520280 	call	52028 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   528d4:	e0bffb17 	ldw	r2,-20(fp)
   528d8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   528dc:	e0bffc17 	ldw	r2,-16(fp)
   528e0:	00000a06 	br	5290c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
   528e4:	e0bffb17 	ldw	r2,-20(fp)
   528e8:	10800217 	ldw	r2,8(r2)
   528ec:	10000626 	beq	r2,zero,52908 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   528f0:	e0bffd17 	ldw	r2,-12(fp)
   528f4:	100b883a 	mov	r5,r2
   528f8:	e13fff17 	ldw	r4,-4(fp)
   528fc:	00536080 	call	53608 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   52900:	00bffe44 	movi	r2,-7
   52904:	00000106 	br	5290c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   52908:	0005883a 	mov	r2,zero
}
   5290c:	e037883a 	mov	sp,fp
   52910:	dfc00117 	ldw	ra,4(sp)
   52914:	df000017 	ldw	fp,0(sp)
   52918:	dec00204 	addi	sp,sp,8
   5291c:	f800283a 	ret

00052920 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   52920:	defff704 	addi	sp,sp,-36
   52924:	dfc00815 	stw	ra,32(sp)
   52928:	df000715 	stw	fp,28(sp)
   5292c:	df000704 	addi	fp,sp,28
   52930:	e13ffc15 	stw	r4,-16(fp)
   52934:	e17ffd15 	stw	r5,-12(fp)
   52938:	e1bffe15 	stw	r6,-8(fp)
   5293c:	3805883a 	mov	r2,r7
   52940:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   52944:	0089c404 	movi	r2,10000
   52948:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   5294c:	00002206 	br	529d8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   52950:	e0bffb17 	ldw	r2,-20(fp)
   52954:	108002a8 	cmpgeui	r2,r2,10
   52958:	1000021e 	bne	r2,zero,52964 <alt_avalon_i2c_master_tx+0x44>
   5295c:	0109c404 	movi	r4,10000
   52960:	005449c0 	call	5449c <alt_busy_sleep>
      if (use_interrupts)
   52964:	e0bfff03 	ldbu	r2,-4(fp)
   52968:	10000926 	beq	r2,zero,52990 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   5296c:	00800044 	movi	r2,1
   52970:	d8800015 	stw	r2,0(sp)
   52974:	000f883a 	mov	r7,zero
   52978:	e1bffe17 	ldw	r6,-8(fp)
   5297c:	e17ffd17 	ldw	r5,-12(fp)
   52980:	e13ffc17 	ldw	r4,-16(fp)
   52984:	0052ec80 	call	52ec8 <alt_avalon_i2c_master_transmit_using_interrupts>
   52988:	e0bffa15 	stw	r2,-24(fp)
   5298c:	00000806 	br	529b0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   52990:	00800044 	movi	r2,1
   52994:	d8800015 	stw	r2,0(sp)
   52998:	000f883a 	mov	r7,zero
   5299c:	e1bffe17 	ldw	r6,-8(fp)
   529a0:	e17ffd17 	ldw	r5,-12(fp)
   529a4:	e13ffc17 	ldw	r4,-16(fp)
   529a8:	0052d0c0 	call	52d0c <alt_avalon_i2c_master_transmit>
   529ac:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   529b0:	e0bffa17 	ldw	r2,-24(fp)
   529b4:	10bffea0 	cmpeqi	r2,r2,-6
   529b8:	1000061e 	bne	r2,zero,529d4 <alt_avalon_i2c_master_tx+0xb4>
   529bc:	e0bffa17 	ldw	r2,-24(fp)
   529c0:	10bffee0 	cmpeqi	r2,r2,-5
   529c4:	1000031e 	bne	r2,zero,529d4 <alt_avalon_i2c_master_tx+0xb4>
   529c8:	e0bffa17 	ldw	r2,-24(fp)
   529cc:	10bffe58 	cmpnei	r2,r2,-7
   529d0:	1000061e 	bne	r2,zero,529ec <alt_avalon_i2c_master_tx+0xcc>
   529d4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   529d8:	e0bffb17 	ldw	r2,-20(fp)
   529dc:	10ffffc4 	addi	r3,r2,-1
   529e0:	e0fffb15 	stw	r3,-20(fp)
   529e4:	103fda1e 	bne	r2,zero,52950 <__alt_data_end+0xfffeb850>
   529e8:	00000106 	br	529f0 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   529ec:	0001883a 	nop
    }

    return status;
   529f0:	e0bffa17 	ldw	r2,-24(fp)
}        
   529f4:	e037883a 	mov	sp,fp
   529f8:	dfc00117 	ldw	ra,4(sp)
   529fc:	df000017 	ldw	fp,0(sp)
   52a00:	dec00204 	addi	sp,sp,8
   52a04:	f800283a 	ret

00052a08 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   52a08:	defff704 	addi	sp,sp,-36
   52a0c:	dfc00815 	stw	ra,32(sp)
   52a10:	df000715 	stw	fp,28(sp)
   52a14:	df000704 	addi	fp,sp,28
   52a18:	e13ffc15 	stw	r4,-16(fp)
   52a1c:	e17ffd15 	stw	r5,-12(fp)
   52a20:	e1bffe15 	stw	r6,-8(fp)
   52a24:	3805883a 	mov	r2,r7
   52a28:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   52a2c:	0089c404 	movi	r2,10000
   52a30:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   52a34:	e0bfff03 	ldbu	r2,-4(fp)
   52a38:	10003426 	beq	r2,zero,52b0c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   52a3c:	00001706 	br	52a9c <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   52a40:	e0bffb17 	ldw	r2,-20(fp)
   52a44:	108002a8 	cmpgeui	r2,r2,10
   52a48:	1000021e 	bne	r2,zero,52a54 <alt_avalon_i2c_master_rx+0x4c>
   52a4c:	0109c404 	movi	r4,10000
   52a50:	005449c0 	call	5449c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   52a54:	00800044 	movi	r2,1
   52a58:	d8800015 	stw	r2,0(sp)
   52a5c:	000f883a 	mov	r7,zero
   52a60:	e1bffe17 	ldw	r6,-8(fp)
   52a64:	e17ffd17 	ldw	r5,-12(fp)
   52a68:	e13ffc17 	ldw	r4,-16(fp)
   52a6c:	00532dc0 	call	532dc <alt_avalon_i2c_master_receive_using_interrupts>
   52a70:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52a74:	e0bffa17 	ldw	r2,-24(fp)
   52a78:	10bffea0 	cmpeqi	r2,r2,-6
   52a7c:	1000061e 	bne	r2,zero,52a98 <alt_avalon_i2c_master_rx+0x90>
   52a80:	e0bffa17 	ldw	r2,-24(fp)
   52a84:	10bffee0 	cmpeqi	r2,r2,-5
   52a88:	1000031e 	bne	r2,zero,52a98 <alt_avalon_i2c_master_rx+0x90>
   52a8c:	e0bffa17 	ldw	r2,-24(fp)
   52a90:	10bffe58 	cmpnei	r2,r2,-7
   52a94:	1000221e 	bne	r2,zero,52b20 <alt_avalon_i2c_master_rx+0x118>
   52a98:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   52a9c:	e0bffb17 	ldw	r2,-20(fp)
   52aa0:	10ffffc4 	addi	r3,r2,-1
   52aa4:	e0fffb15 	stw	r3,-20(fp)
   52aa8:	103fe51e 	bne	r2,zero,52a40 <__alt_data_end+0xfffeb940>
   52aac:	00001f06 	br	52b2c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   52ab0:	e0bffb17 	ldw	r2,-20(fp)
   52ab4:	108002a8 	cmpgeui	r2,r2,10
   52ab8:	1000021e 	bne	r2,zero,52ac4 <alt_avalon_i2c_master_rx+0xbc>
   52abc:	0109c404 	movi	r4,10000
   52ac0:	005449c0 	call	5449c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   52ac4:	00800044 	movi	r2,1
   52ac8:	d8800015 	stw	r2,0(sp)
   52acc:	000f883a 	mov	r7,zero
   52ad0:	e1bffe17 	ldw	r6,-8(fp)
   52ad4:	e17ffd17 	ldw	r5,-12(fp)
   52ad8:	e13ffc17 	ldw	r4,-16(fp)
   52adc:	00530d00 	call	530d0 <alt_avalon_i2c_master_receive>
   52ae0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52ae4:	e0bffa17 	ldw	r2,-24(fp)
   52ae8:	10bffea0 	cmpeqi	r2,r2,-6
   52aec:	1000061e 	bne	r2,zero,52b08 <alt_avalon_i2c_master_rx+0x100>
   52af0:	e0bffa17 	ldw	r2,-24(fp)
   52af4:	10bffee0 	cmpeqi	r2,r2,-5
   52af8:	1000031e 	bne	r2,zero,52b08 <alt_avalon_i2c_master_rx+0x100>
   52afc:	e0bffa17 	ldw	r2,-24(fp)
   52b00:	10bffe58 	cmpnei	r2,r2,-7
   52b04:	1000081e 	bne	r2,zero,52b28 <alt_avalon_i2c_master_rx+0x120>
   52b08:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   52b0c:	e0bffb17 	ldw	r2,-20(fp)
   52b10:	10ffffc4 	addi	r3,r2,-1
   52b14:	e0fffb15 	stw	r3,-20(fp)
   52b18:	103fe51e 	bne	r2,zero,52ab0 <__alt_data_end+0xfffeb9b0>
   52b1c:	00000306 	br	52b2c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   52b20:	0001883a 	nop
   52b24:	00000106 	br	52b2c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   52b28:	0001883a 	nop
      }
    }
    
    return status;
   52b2c:	e0bffa17 	ldw	r2,-24(fp)
}        
   52b30:	e037883a 	mov	sp,fp
   52b34:	dfc00117 	ldw	ra,4(sp)
   52b38:	df000017 	ldw	fp,0(sp)
   52b3c:	dec00204 	addi	sp,sp,8
   52b40:	f800283a 	ret

00052b44 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   52b44:	defff604 	addi	sp,sp,-40
   52b48:	dfc00915 	stw	ra,36(sp)
   52b4c:	df000815 	stw	fp,32(sp)
   52b50:	df000804 	addi	fp,sp,32
   52b54:	e13ffb15 	stw	r4,-20(fp)
   52b58:	e17ffc15 	stw	r5,-16(fp)
   52b5c:	e1bffd15 	stw	r6,-12(fp)
   52b60:	e1fffe15 	stw	r7,-8(fp)
   52b64:	e0800317 	ldw	r2,12(fp)
   52b68:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   52b6c:	0089c404 	movi	r2,10000
   52b70:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   52b74:	e0bfff03 	ldbu	r2,-4(fp)
   52b78:	10005626 	beq	r2,zero,52cd4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   52b7c:	00002806 	br	52c20 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   52b80:	e0bffa17 	ldw	r2,-24(fp)
   52b84:	108002a8 	cmpgeui	r2,r2,10
   52b88:	1000021e 	bne	r2,zero,52b94 <alt_avalon_i2c_master_tx_rx+0x50>
   52b8c:	0109c404 	movi	r4,10000
   52b90:	005449c0 	call	5449c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   52b94:	d8000015 	stw	zero,0(sp)
   52b98:	000f883a 	mov	r7,zero
   52b9c:	e1bffd17 	ldw	r6,-12(fp)
   52ba0:	e17ffc17 	ldw	r5,-16(fp)
   52ba4:	e13ffb17 	ldw	r4,-20(fp)
   52ba8:	0052ec80 	call	52ec8 <alt_avalon_i2c_master_transmit_using_interrupts>
   52bac:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52bb0:	e0bff917 	ldw	r2,-28(fp)
   52bb4:	10bffea0 	cmpeqi	r2,r2,-6
   52bb8:	1000191e 	bne	r2,zero,52c20 <alt_avalon_i2c_master_tx_rx+0xdc>
   52bbc:	e0bff917 	ldw	r2,-28(fp)
   52bc0:	10bffee0 	cmpeqi	r2,r2,-5
   52bc4:	1000161e 	bne	r2,zero,52c20 <alt_avalon_i2c_master_tx_rx+0xdc>
   52bc8:	e0bff917 	ldw	r2,-28(fp)
   52bcc:	10bffe58 	cmpnei	r2,r2,-7
   52bd0:	1000011e 	bne	r2,zero,52bd8 <alt_avalon_i2c_master_tx_rx+0x94>
   52bd4:	00001206 	br	52c20 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   52bd8:	00800044 	movi	r2,1
   52bdc:	d8800015 	stw	r2,0(sp)
   52be0:	01c00044 	movi	r7,1
   52be4:	e1800217 	ldw	r6,8(fp)
   52be8:	e17ffe17 	ldw	r5,-8(fp)
   52bec:	e13ffb17 	ldw	r4,-20(fp)
   52bf0:	00532dc0 	call	532dc <alt_avalon_i2c_master_receive_using_interrupts>
   52bf4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52bf8:	e0bff917 	ldw	r2,-28(fp)
   52bfc:	10bffea0 	cmpeqi	r2,r2,-6
   52c00:	1000061e 	bne	r2,zero,52c1c <alt_avalon_i2c_master_tx_rx+0xd8>
   52c04:	e0bff917 	ldw	r2,-28(fp)
   52c08:	10bffee0 	cmpeqi	r2,r2,-5
   52c0c:	1000031e 	bne	r2,zero,52c1c <alt_avalon_i2c_master_tx_rx+0xd8>
   52c10:	e0bff917 	ldw	r2,-28(fp)
   52c14:	10bffe58 	cmpnei	r2,r2,-7
   52c18:	1000331e 	bne	r2,zero,52ce8 <alt_avalon_i2c_master_tx_rx+0x1a4>
   52c1c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   52c20:	e0bffa17 	ldw	r2,-24(fp)
   52c24:	10ffffc4 	addi	r3,r2,-1
   52c28:	e0fffa15 	stw	r3,-24(fp)
   52c2c:	103fd41e 	bne	r2,zero,52b80 <__alt_data_end+0xfffeba80>
   52c30:	00003006 	br	52cf4 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   52c34:	e0bffa17 	ldw	r2,-24(fp)
   52c38:	108002a8 	cmpgeui	r2,r2,10
   52c3c:	1000021e 	bne	r2,zero,52c48 <alt_avalon_i2c_master_tx_rx+0x104>
   52c40:	0109c404 	movi	r4,10000
   52c44:	005449c0 	call	5449c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   52c48:	d8000015 	stw	zero,0(sp)
   52c4c:	000f883a 	mov	r7,zero
   52c50:	e1bffd17 	ldw	r6,-12(fp)
   52c54:	e17ffc17 	ldw	r5,-16(fp)
   52c58:	e13ffb17 	ldw	r4,-20(fp)
   52c5c:	0052d0c0 	call	52d0c <alt_avalon_i2c_master_transmit>
   52c60:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52c64:	e0bff917 	ldw	r2,-28(fp)
   52c68:	10bffea0 	cmpeqi	r2,r2,-6
   52c6c:	1000191e 	bne	r2,zero,52cd4 <alt_avalon_i2c_master_tx_rx+0x190>
   52c70:	e0bff917 	ldw	r2,-28(fp)
   52c74:	10bffee0 	cmpeqi	r2,r2,-5
   52c78:	1000161e 	bne	r2,zero,52cd4 <alt_avalon_i2c_master_tx_rx+0x190>
   52c7c:	e0bff917 	ldw	r2,-28(fp)
   52c80:	10bffe58 	cmpnei	r2,r2,-7
   52c84:	1000011e 	bne	r2,zero,52c8c <alt_avalon_i2c_master_tx_rx+0x148>
   52c88:	00001206 	br	52cd4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   52c8c:	00800044 	movi	r2,1
   52c90:	d8800015 	stw	r2,0(sp)
   52c94:	01c00044 	movi	r7,1
   52c98:	e1800217 	ldw	r6,8(fp)
   52c9c:	e17ffe17 	ldw	r5,-8(fp)
   52ca0:	e13ffb17 	ldw	r4,-20(fp)
   52ca4:	00530d00 	call	530d0 <alt_avalon_i2c_master_receive>
   52ca8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   52cac:	e0bff917 	ldw	r2,-28(fp)
   52cb0:	10bffea0 	cmpeqi	r2,r2,-6
   52cb4:	1000061e 	bne	r2,zero,52cd0 <alt_avalon_i2c_master_tx_rx+0x18c>
   52cb8:	e0bff917 	ldw	r2,-28(fp)
   52cbc:	10bffee0 	cmpeqi	r2,r2,-5
   52cc0:	1000031e 	bne	r2,zero,52cd0 <alt_avalon_i2c_master_tx_rx+0x18c>
   52cc4:	e0bff917 	ldw	r2,-28(fp)
   52cc8:	10bffe58 	cmpnei	r2,r2,-7
   52ccc:	1000081e 	bne	r2,zero,52cf0 <alt_avalon_i2c_master_tx_rx+0x1ac>
   52cd0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   52cd4:	e0bffa17 	ldw	r2,-24(fp)
   52cd8:	10ffffc4 	addi	r3,r2,-1
   52cdc:	e0fffa15 	stw	r3,-24(fp)
   52ce0:	103fd41e 	bne	r2,zero,52c34 <__alt_data_end+0xfffebb34>
   52ce4:	00000306 	br	52cf4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   52ce8:	0001883a 	nop
   52cec:	00000106 	br	52cf4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   52cf0:	0001883a 	nop
      }
    }
    
    return status;
   52cf4:	e0bff917 	ldw	r2,-28(fp)
}                                       
   52cf8:	e037883a 	mov	sp,fp
   52cfc:	dfc00117 	ldw	ra,4(sp)
   52d00:	df000017 	ldw	fp,0(sp)
   52d04:	dec00204 	addi	sp,sp,8
   52d08:	f800283a 	ret

00052d0c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   52d0c:	defff704 	addi	sp,sp,-36
   52d10:	dfc00815 	stw	ra,32(sp)
   52d14:	df000715 	stw	fp,28(sp)
   52d18:	df000704 	addi	fp,sp,28
   52d1c:	e13ffb15 	stw	r4,-20(fp)
   52d20:	e17ffc15 	stw	r5,-16(fp)
   52d24:	e1bffd15 	stw	r6,-12(fp)
   52d28:	3807883a 	mov	r3,r7
   52d2c:	e0800217 	ldw	r2,8(fp)
   52d30:	e0fffe05 	stb	r3,-8(fp)
   52d34:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   52d38:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   52d3c:	e0bffd17 	ldw	r2,-12(fp)
   52d40:	1089c424 	muli	r2,r2,10000
   52d44:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   52d48:	e0bffd17 	ldw	r2,-12(fp)
   52d4c:	1000021e 	bne	r2,zero,52d58 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   52d50:	0005883a 	mov	r2,zero
   52d54:	00005706 	br	52eb4 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   52d58:	e0bffe03 	ldbu	r2,-8(fp)
   52d5c:	10000a1e 	bne	r2,zero,52d88 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   52d60:	e13ffb17 	ldw	r4,-20(fp)
   52d64:	0051f900 	call	51f90 <alt_avalon_i2c_enable>
   52d68:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   52d6c:	e0bffa17 	ldw	r2,-24(fp)
   52d70:	10000226 	beq	r2,zero,52d7c <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
   52d74:	e0bffa17 	ldw	r2,-24(fp)
   52d78:	00004e06 	br	52eb4 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52d7c:	01400704 	movi	r5,28
   52d80:	e13ffb17 	ldw	r4,-20(fp)
   52d84:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   52d88:	e0bffe03 	ldbu	r2,-8(fp)
   52d8c:	100d883a 	mov	r6,r2
   52d90:	000b883a 	mov	r5,zero
   52d94:	e13ffb17 	ldw	r4,-20(fp)
   52d98:	00525f80 	call	525f8 <alt_avalon_i2c_send_address>
   52d9c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   52da0:	e0bffa17 	ldw	r2,-24(fp)
   52da4:	1000271e 	bne	r2,zero,52e44 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   52da8:	00000f06 	br	52de8 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   52dac:	e0bffc17 	ldw	r2,-16(fp)
   52db0:	10800003 	ldbu	r2,0(r2)
   52db4:	10803fcc 	andi	r2,r2,255
   52db8:	000f883a 	mov	r7,zero
   52dbc:	000d883a 	mov	r6,zero
   52dc0:	100b883a 	mov	r5,r2
   52dc4:	e13ffb17 	ldw	r4,-20(fp)
   52dc8:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   52dcc:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   52dd0:	e0bffc17 	ldw	r2,-16(fp)
   52dd4:	10800044 	addi	r2,r2,1
   52dd8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   52ddc:	e0bffd17 	ldw	r2,-12(fp)
   52de0:	10bfffc4 	addi	r2,r2,-1
   52de4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   52de8:	e0bffd17 	ldw	r2,-12(fp)
   52dec:	108000b0 	cmpltui	r2,r2,2
   52df0:	1000021e 	bne	r2,zero,52dfc <alt_avalon_i2c_master_transmit+0xf0>
   52df4:	e0bffa17 	ldw	r2,-24(fp)
   52df8:	103fec26 	beq	r2,zero,52dac <__alt_data_end+0xfffebcac>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   52dfc:	e0bffa17 	ldw	r2,-24(fp)
   52e00:	1000101e 	bne	r2,zero,52e44 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   52e04:	e0bffc17 	ldw	r2,-16(fp)
   52e08:	10800003 	ldbu	r2,0(r2)
   52e0c:	10803fcc 	andi	r2,r2,255
   52e10:	e0ffff03 	ldbu	r3,-4(fp)
   52e14:	180f883a 	mov	r7,r3
   52e18:	000d883a 	mov	r6,zero
   52e1c:	100b883a 	mov	r5,r2
   52e20:	e13ffb17 	ldw	r4,-20(fp)
   52e24:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   52e28:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   52e2c:	e0bffc17 	ldw	r2,-16(fp)
   52e30:	10800044 	addi	r2,r2,1
   52e34:	e0bffc15 	stw	r2,-16(fp)
            --size;
   52e38:	e0bffd17 	ldw	r2,-12(fp)
   52e3c:	10bfffc4 	addi	r2,r2,-1
   52e40:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   52e44:	e0bfff03 	ldbu	r2,-4(fp)
   52e48:	1000101e 	bne	r2,zero,52e8c <alt_avalon_i2c_master_transmit+0x180>
   52e4c:	e0bffa17 	ldw	r2,-24(fp)
   52e50:	10001726 	beq	r2,zero,52eb0 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   52e54:	00000d06 	br	52e8c <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
   52e58:	e0bff917 	ldw	r2,-28(fp)
   52e5c:	108002a8 	cmpgeui	r2,r2,10
   52e60:	1000021e 	bne	r2,zero,52e6c <alt_avalon_i2c_master_transmit+0x160>
   52e64:	0109c404 	movi	r4,10000
   52e68:	005449c0 	call	5449c <alt_busy_sleep>
            if (--timeout == 0)
   52e6c:	e0bff917 	ldw	r2,-28(fp)
   52e70:	10bfffc4 	addi	r2,r2,-1
   52e74:	e0bff915 	stw	r2,-28(fp)
   52e78:	e0bff917 	ldw	r2,-28(fp)
   52e7c:	1000031e 	bne	r2,zero,52e8c <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   52e80:	00bfff84 	movi	r2,-2
   52e84:	e0bffa15 	stw	r2,-24(fp)
               break;
   52e88:	00000306 	br	52e98 <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   52e8c:	e13ffb17 	ldw	r4,-20(fp)
   52e90:	00523800 	call	52380 <alt_avalon_i2c_is_busy>
   52e94:	103ff01e 	bne	r2,zero,52e58 <__alt_data_end+0xfffebd58>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   52e98:	e0bffa04 	addi	r2,fp,-24
   52e9c:	100b883a 	mov	r5,r2
   52ea0:	e13ffb17 	ldw	r4,-20(fp)
   52ea4:	00527540 	call	52754 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   52ea8:	e13ffb17 	ldw	r4,-20(fp)
   52eac:	00520280 	call	52028 <alt_avalon_i2c_disable>
    }


    return status;
   52eb0:	e0bffa17 	ldw	r2,-24(fp)
}
   52eb4:	e037883a 	mov	sp,fp
   52eb8:	dfc00117 	ldw	ra,4(sp)
   52ebc:	df000017 	ldw	fp,0(sp)
   52ec0:	dec00204 	addi	sp,sp,8
   52ec4:	f800283a 	ret

00052ec8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   52ec8:	defff604 	addi	sp,sp,-40
   52ecc:	dfc00915 	stw	ra,36(sp)
   52ed0:	df000815 	stw	fp,32(sp)
   52ed4:	df000804 	addi	fp,sp,32
   52ed8:	e13ffb15 	stw	r4,-20(fp)
   52edc:	e17ffc15 	stw	r5,-16(fp)
   52ee0:	e1bffd15 	stw	r6,-12(fp)
   52ee4:	3807883a 	mov	r3,r7
   52ee8:	e0800217 	ldw	r2,8(fp)
   52eec:	e0fffe05 	stb	r3,-8(fp)
   52ef0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   52ef4:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   52ef8:	e0bffd17 	ldw	r2,-12(fp)
   52efc:	1089c424 	muli	r2,r2,10000
   52f00:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   52f04:	e0bffb17 	ldw	r2,-20(fp)
   52f08:	10800717 	ldw	r2,28(r2)
   52f0c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   52f10:	e0bffd17 	ldw	r2,-12(fp)
   52f14:	1000021e 	bne	r2,zero,52f20 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
   52f18:	0005883a 	mov	r2,zero
   52f1c:	00006706 	br	530bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   52f20:	e0bffb17 	ldw	r2,-20(fp)
   52f24:	10c00617 	ldw	r3,24(r2)
   52f28:	00800174 	movhi	r2,5
   52f2c:	10870504 	addi	r2,r2,7188
   52f30:	18800226 	beq	r3,r2,52f3c <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   52f34:	00bfff44 	movi	r2,-3
   52f38:	00006006 	br	530bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   52f3c:	e0bffe03 	ldbu	r2,-8(fp)
   52f40:	10000a1e 	bne	r2,zero,52f6c <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   52f44:	e13ffb17 	ldw	r4,-20(fp)
   52f48:	0051f900 	call	51f90 <alt_avalon_i2c_enable>
   52f4c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   52f50:	e0bff817 	ldw	r2,-32(fp)
   52f54:	10000226 	beq	r2,zero,52f60 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
   52f58:	e0bff817 	ldw	r2,-32(fp)
   52f5c:	00005706 	br	530bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   52f60:	01400704 	movi	r5,28
   52f64:	e13ffb17 	ldw	r4,-20(fp)
   52f68:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   52f6c:	e0bffe03 	ldbu	r2,-8(fp)
   52f70:	100d883a 	mov	r6,r2
   52f74:	000b883a 	mov	r5,zero
   52f78:	e13ffb17 	ldw	r4,-20(fp)
   52f7c:	00525f80 	call	525f8 <alt_avalon_i2c_send_address>
   52f80:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   52f84:	e0bff817 	ldw	r2,-32(fp)
   52f88:	1000271e 	bne	r2,zero,53028 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   52f8c:	00000f06 	br	52fcc <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   52f90:	e0bffc17 	ldw	r2,-16(fp)
   52f94:	10800003 	ldbu	r2,0(r2)
   52f98:	10803fcc 	andi	r2,r2,255
   52f9c:	000f883a 	mov	r7,zero
   52fa0:	000d883a 	mov	r6,zero
   52fa4:	100b883a 	mov	r5,r2
   52fa8:	e13ffb17 	ldw	r4,-20(fp)
   52fac:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   52fb0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   52fb4:	e0bffc17 	ldw	r2,-16(fp)
   52fb8:	10800044 	addi	r2,r2,1
   52fbc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   52fc0:	e0bffd17 	ldw	r2,-12(fp)
   52fc4:	10bfffc4 	addi	r2,r2,-1
   52fc8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   52fcc:	e0bffd17 	ldw	r2,-12(fp)
   52fd0:	108000b0 	cmpltui	r2,r2,2
   52fd4:	1000021e 	bne	r2,zero,52fe0 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
   52fd8:	e0bff817 	ldw	r2,-32(fp)
   52fdc:	103fec26 	beq	r2,zero,52f90 <__alt_data_end+0xfffebe90>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   52fe0:	e0bff817 	ldw	r2,-32(fp)
   52fe4:	1000101e 	bne	r2,zero,53028 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   52fe8:	e0bffc17 	ldw	r2,-16(fp)
   52fec:	10800003 	ldbu	r2,0(r2)
   52ff0:	10803fcc 	andi	r2,r2,255
   52ff4:	e0ffff03 	ldbu	r3,-4(fp)
   52ff8:	180f883a 	mov	r7,r3
   52ffc:	000d883a 	mov	r6,zero
   53000:	100b883a 	mov	r5,r2
   53004:	e13ffb17 	ldw	r4,-20(fp)
   53008:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   5300c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   53010:	e0bffc17 	ldw	r2,-16(fp)
   53014:	10800044 	addi	r2,r2,1
   53018:	e0bffc15 	stw	r2,-16(fp)
            --size;
   5301c:	e0bffd17 	ldw	r2,-12(fp)
   53020:	10bfffc4 	addi	r2,r2,-1
   53024:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   53028:	e0bff817 	ldw	r2,-32(fp)
   5302c:	10001426 	beq	r2,zero,53080 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53030:	00000d06 	br	53068 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   53034:	e0bff917 	ldw	r2,-28(fp)
   53038:	108002a8 	cmpgeui	r2,r2,10
   5303c:	1000021e 	bne	r2,zero,53048 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
   53040:	0109c404 	movi	r4,10000
   53044:	005449c0 	call	5449c <alt_busy_sleep>
            if (--timeout == 0)
   53048:	e0bff917 	ldw	r2,-28(fp)
   5304c:	10bfffc4 	addi	r2,r2,-1
   53050:	e0bff915 	stw	r2,-28(fp)
   53054:	e0bff917 	ldw	r2,-28(fp)
   53058:	1000031e 	bne	r2,zero,53068 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   5305c:	00bfff84 	movi	r2,-2
   53060:	e0bff815 	stw	r2,-32(fp)
               break;
   53064:	00000306 	br	53074 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   53068:	e13ffb17 	ldw	r4,-20(fp)
   5306c:	00523800 	call	52380 <alt_avalon_i2c_is_busy>
   53070:	103ff01e 	bne	r2,zero,53034 <__alt_data_end+0xfffebf34>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53074:	e13ffb17 	ldw	r4,-20(fp)
   53078:	00520280 	call	52028 <alt_avalon_i2c_disable>
   5307c:	00000e06 	br	530b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
   53080:	e0bfff03 	ldbu	r2,-4(fp)
   53084:	10000c26 	beq	r2,zero,530b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53088:	01400704 	movi	r5,28
   5308c:	e13ffb17 	ldw	r4,-20(fp)
   53090:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   53094:	000b883a 	mov	r5,zero
   53098:	e13ffb17 	ldw	r4,-20(fp)
   5309c:	00537ac0 	call	537ac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   530a0:	e0bffa17 	ldw	r2,-24(fp)
   530a4:	00c00044 	movi	r3,1
   530a8:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   530ac:	01400044 	movi	r5,1
   530b0:	e13ffb17 	ldw	r4,-20(fp)
   530b4:	00536080 	call	53608 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   530b8:	e0bff817 	ldw	r2,-32(fp)
}
   530bc:	e037883a 	mov	sp,fp
   530c0:	dfc00117 	ldw	ra,4(sp)
   530c4:	df000017 	ldw	fp,0(sp)
   530c8:	dec00204 	addi	sp,sp,8
   530cc:	f800283a 	ret

000530d0 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   530d0:	defff404 	addi	sp,sp,-48
   530d4:	dfc00b15 	stw	ra,44(sp)
   530d8:	df000a15 	stw	fp,40(sp)
   530dc:	df000a04 	addi	fp,sp,40
   530e0:	e13ffb15 	stw	r4,-20(fp)
   530e4:	e17ffc15 	stw	r5,-16(fp)
   530e8:	e1bffd15 	stw	r6,-12(fp)
   530ec:	3807883a 	mov	r3,r7
   530f0:	e0800217 	ldw	r2,8(fp)
   530f4:	e0fffe05 	stb	r3,-8(fp)
   530f8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   530fc:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   53100:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   53104:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   53108:	e0bffd17 	ldw	r2,-12(fp)
   5310c:	1000021e 	bne	r2,zero,53118 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53110:	0005883a 	mov	r2,zero
   53114:	00006c06 	br	532c8 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53118:	e0bffe03 	ldbu	r2,-8(fp)
   5311c:	10000a1e 	bne	r2,zero,53148 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53120:	e13ffb17 	ldw	r4,-20(fp)
   53124:	0051f900 	call	51f90 <alt_avalon_i2c_enable>
   53128:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   5312c:	e0bff917 	ldw	r2,-28(fp)
   53130:	10000226 	beq	r2,zero,5313c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   53134:	e0bff917 	ldw	r2,-28(fp)
   53138:	00006306 	br	532c8 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   5313c:	01400704 	movi	r5,28
   53140:	e13ffb17 	ldw	r4,-20(fp)
   53144:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   53148:	e0bffe03 	ldbu	r2,-8(fp)
   5314c:	100d883a 	mov	r6,r2
   53150:	01400044 	movi	r5,1
   53154:	e13ffb17 	ldw	r4,-20(fp)
   53158:	00525f80 	call	525f8 <alt_avalon_i2c_send_address>
   5315c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   53160:	e0bff917 	ldw	r2,-28(fp)
   53164:	1000341e 	bne	r2,zero,53238 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53168:	00001906 	br	531d0 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   5316c:	000f883a 	mov	r7,zero
   53170:	000d883a 	mov	r6,zero
   53174:	000b883a 	mov	r5,zero
   53178:	e13ffb17 	ldw	r4,-20(fp)
   5317c:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   53180:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   53184:	e0bff817 	ldw	r2,-32(fp)
   53188:	10800044 	addi	r2,r2,1
   5318c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   53190:	e0bff917 	ldw	r2,-28(fp)
   53194:	10000e1e 	bne	r2,zero,531d0 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   53198:	e0bffa04 	addi	r2,fp,-24
   5319c:	100f883a 	mov	r7,r2
   531a0:	000d883a 	mov	r6,zero
   531a4:	e17ffc17 	ldw	r5,-16(fp)
   531a8:	e13ffb17 	ldw	r4,-20(fp)
   531ac:	00523c40 	call	523c4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   531b0:	e0bffa17 	ldw	r2,-24(fp)
   531b4:	e0fffc17 	ldw	r3,-16(fp)
   531b8:	1885883a 	add	r2,r3,r2
   531bc:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   531c0:	e0bffa17 	ldw	r2,-24(fp)
   531c4:	e0fff717 	ldw	r3,-36(fp)
   531c8:	1885883a 	add	r2,r3,r2
   531cc:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   531d0:	e0bffd17 	ldw	r2,-12(fp)
   531d4:	10bfffc4 	addi	r2,r2,-1
   531d8:	e0fff817 	ldw	r3,-32(fp)
   531dc:	1880022e 	bgeu	r3,r2,531e8 <alt_avalon_i2c_master_receive+0x118>
   531e0:	e0bff917 	ldw	r2,-28(fp)
   531e4:	103fe126 	beq	r2,zero,5316c <__alt_data_end+0xfffec06c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   531e8:	e0bff917 	ldw	r2,-28(fp)
   531ec:	1000121e 	bne	r2,zero,53238 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   531f0:	e0bfff03 	ldbu	r2,-4(fp)
   531f4:	100f883a 	mov	r7,r2
   531f8:	000d883a 	mov	r6,zero
   531fc:	000b883a 	mov	r5,zero
   53200:	e13ffb17 	ldw	r4,-20(fp)
   53204:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   53208:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   5320c:	00000a06 	br	53238 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   53210:	e17ffc17 	ldw	r5,-16(fp)
   53214:	e13ffb17 	ldw	r4,-20(fp)
   53218:	005246c0 	call	5246c <alt_avalon_i2c_rx_read>
   5321c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   53220:	e0bffc17 	ldw	r2,-16(fp)
   53224:	10800044 	addi	r2,r2,1
   53228:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   5322c:	e0bff717 	ldw	r2,-36(fp)
   53230:	10800044 	addi	r2,r2,1
   53234:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   53238:	e0fff717 	ldw	r3,-36(fp)
   5323c:	e0bffd17 	ldw	r2,-12(fp)
   53240:	1880022e 	bgeu	r3,r2,5324c <alt_avalon_i2c_master_receive+0x17c>
   53244:	e0bff917 	ldw	r2,-28(fp)
   53248:	103ff126 	beq	r2,zero,53210 <__alt_data_end+0xfffec110>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   5324c:	e0bfff03 	ldbu	r2,-4(fp)
   53250:	1000021e 	bne	r2,zero,5325c <alt_avalon_i2c_master_receive+0x18c>
   53254:	e0bff917 	ldw	r2,-28(fp)
   53258:	10001a26 	beq	r2,zero,532c4 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
   5325c:	e0bffd17 	ldw	r2,-12(fp)
   53260:	1089c424 	muli	r2,r2,10000
   53264:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53268:	00000d06 	br	532a0 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
   5326c:	e0bff617 	ldw	r2,-40(fp)
   53270:	108002a8 	cmpgeui	r2,r2,10
   53274:	1000021e 	bne	r2,zero,53280 <alt_avalon_i2c_master_receive+0x1b0>
   53278:	0109c404 	movi	r4,10000
   5327c:	005449c0 	call	5449c <alt_busy_sleep>
            if (--timeout == 0)
   53280:	e0bff617 	ldw	r2,-40(fp)
   53284:	10bfffc4 	addi	r2,r2,-1
   53288:	e0bff615 	stw	r2,-40(fp)
   5328c:	e0bff617 	ldw	r2,-40(fp)
   53290:	1000031e 	bne	r2,zero,532a0 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   53294:	00bfff84 	movi	r2,-2
   53298:	e0bff915 	stw	r2,-28(fp)
               break;
   5329c:	00000306 	br	532ac <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   532a0:	e13ffb17 	ldw	r4,-20(fp)
   532a4:	00523800 	call	52380 <alt_avalon_i2c_is_busy>
   532a8:	103ff01e 	bne	r2,zero,5326c <__alt_data_end+0xfffec16c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   532ac:	e0bff904 	addi	r2,fp,-28
   532b0:	100b883a 	mov	r5,r2
   532b4:	e13ffb17 	ldw	r4,-20(fp)
   532b8:	00527540 	call	52754 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   532bc:	e13ffb17 	ldw	r4,-20(fp)
   532c0:	00520280 	call	52028 <alt_avalon_i2c_disable>
    }

    return status;
   532c4:	e0bff917 	ldw	r2,-28(fp)
}
   532c8:	e037883a 	mov	sp,fp
   532cc:	dfc00117 	ldw	ra,4(sp)
   532d0:	df000017 	ldw	fp,0(sp)
   532d4:	dec00204 	addi	sp,sp,8
   532d8:	f800283a 	ret

000532dc <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   532dc:	defff504 	addi	sp,sp,-44
   532e0:	dfc00a15 	stw	ra,40(sp)
   532e4:	df000915 	stw	fp,36(sp)
   532e8:	df000904 	addi	fp,sp,36
   532ec:	e13ffb15 	stw	r4,-20(fp)
   532f0:	e17ffc15 	stw	r5,-16(fp)
   532f4:	e1bffd15 	stw	r6,-12(fp)
   532f8:	3807883a 	mov	r3,r7
   532fc:	e0800217 	ldw	r2,8(fp)
   53300:	e0fffe05 	stb	r3,-8(fp)
   53304:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   53308:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   5330c:	e0bffb17 	ldw	r2,-20(fp)
   53310:	10800717 	ldw	r2,28(r2)
   53314:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   53318:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   5331c:	e0bffd17 	ldw	r2,-12(fp)
   53320:	1000021e 	bne	r2,zero,5332c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   53324:	0005883a 	mov	r2,zero
   53328:	00006206 	br	534b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   5332c:	e0bffb17 	ldw	r2,-20(fp)
   53330:	10c00617 	ldw	r3,24(r2)
   53334:	00800174 	movhi	r2,5
   53338:	10870504 	addi	r2,r2,7188
   5333c:	18800226 	beq	r3,r2,53348 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   53340:	00bfff44 	movi	r2,-3
   53344:	00005b06 	br	534b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   53348:	e0bffe03 	ldbu	r2,-8(fp)
   5334c:	10000a1e 	bne	r2,zero,53378 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   53350:	e13ffb17 	ldw	r4,-20(fp)
   53354:	0051f900 	call	51f90 <alt_avalon_i2c_enable>
   53358:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   5335c:	e0bff717 	ldw	r2,-36(fp)
   53360:	10000226 	beq	r2,zero,5336c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   53364:	e0bff717 	ldw	r2,-36(fp)
   53368:	00005206 	br	534b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   5336c:	01400704 	movi	r5,28
   53370:	e13ffb17 	ldw	r4,-20(fp)
   53374:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   53378:	e0bffe03 	ldbu	r2,-8(fp)
   5337c:	100d883a 	mov	r6,r2
   53380:	01400044 	movi	r5,1
   53384:	e13ffb17 	ldw	r4,-20(fp)
   53388:	00525f80 	call	525f8 <alt_avalon_i2c_send_address>
   5338c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   53390:	e0bff717 	ldw	r2,-36(fp)
   53394:	1000191e 	bne	r2,zero,533fc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   53398:	00000906 	br	533c0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   5339c:	000f883a 	mov	r7,zero
   533a0:	000d883a 	mov	r6,zero
   533a4:	000b883a 	mov	r5,zero
   533a8:	e13ffb17 	ldw	r4,-20(fp)
   533ac:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   533b0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   533b4:	e0bff917 	ldw	r2,-28(fp)
   533b8:	10800044 	addi	r2,r2,1
   533bc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   533c0:	e0bffd17 	ldw	r2,-12(fp)
   533c4:	10bfffc4 	addi	r2,r2,-1
   533c8:	e0fff917 	ldw	r3,-28(fp)
   533cc:	1880022e 	bgeu	r3,r2,533d8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   533d0:	e0bff717 	ldw	r2,-36(fp)
   533d4:	103ff126 	beq	r2,zero,5339c <__alt_data_end+0xfffec29c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   533d8:	e0bff717 	ldw	r2,-36(fp)
   533dc:	1000071e 	bne	r2,zero,533fc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   533e0:	e0bfff03 	ldbu	r2,-4(fp)
   533e4:	100f883a 	mov	r7,r2
   533e8:	000d883a 	mov	r6,zero
   533ec:	000b883a 	mov	r5,zero
   533f0:	e13ffb17 	ldw	r4,-20(fp)
   533f4:	00525140 	call	52514 <alt_avalon_i2c_cmd_write>
   533f8:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   533fc:	e0bff717 	ldw	r2,-36(fp)
   53400:	10001726 	beq	r2,zero,53460 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
   53404:	e0bffd17 	ldw	r2,-12(fp)
   53408:	1089c424 	muli	r2,r2,10000
   5340c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53410:	00000d06 	br	53448 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
   53414:	e0bff817 	ldw	r2,-32(fp)
   53418:	108002a8 	cmpgeui	r2,r2,10
   5341c:	1000021e 	bne	r2,zero,53428 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
   53420:	0109c404 	movi	r4,10000
   53424:	005449c0 	call	5449c <alt_busy_sleep>
            if (--timeout == 0)
   53428:	e0bff817 	ldw	r2,-32(fp)
   5342c:	10bfffc4 	addi	r2,r2,-1
   53430:	e0bff815 	stw	r2,-32(fp)
   53434:	e0bff817 	ldw	r2,-32(fp)
   53438:	1000031e 	bne	r2,zero,53448 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   5343c:	00bfff84 	movi	r2,-2
   53440:	e0bff715 	stw	r2,-36(fp)
               break;
   53444:	00000306 	br	53454 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   53448:	e13ffb17 	ldw	r4,-20(fp)
   5344c:	00523800 	call	52380 <alt_avalon_i2c_is_busy>
   53450:	103ff01e 	bne	r2,zero,53414 <__alt_data_end+0xfffec314>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   53454:	e13ffb17 	ldw	r4,-20(fp)
   53458:	00520280 	call	52028 <alt_avalon_i2c_disable>
   5345c:	00001406 	br	534b0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
   53460:	e0bfff03 	ldbu	r2,-4(fp)
   53464:	10001226 	beq	r2,zero,534b0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   53468:	01400704 	movi	r5,28
   5346c:	e13ffb17 	ldw	r4,-20(fp)
   53470:	00535640 	call	53564 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   53474:	000b883a 	mov	r5,zero
   53478:	e13ffb17 	ldw	r4,-20(fp)
   5347c:	00536fc0 	call	536fc <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   53480:	e0bffa17 	ldw	r2,-24(fp)
   53484:	00c00084 	movi	r3,2
   53488:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   5348c:	e0bffa17 	ldw	r2,-24(fp)
   53490:	e0fffc17 	ldw	r3,-16(fp)
   53494:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   53498:	e0bffa17 	ldw	r2,-24(fp)
   5349c:	e0fffd17 	ldw	r3,-12(fp)
   534a0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   534a4:	01400084 	movi	r5,2
   534a8:	e13ffb17 	ldw	r4,-20(fp)
   534ac:	00536080 	call	53608 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   534b0:	e0bff717 	ldw	r2,-36(fp)
}
   534b4:	e037883a 	mov	sp,fp
   534b8:	dfc00117 	ldw	ra,4(sp)
   534bc:	df000017 	ldw	fp,0(sp)
   534c0:	dec00204 	addi	sp,sp,8
   534c4:	f800283a 	ret

000534c8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   534c8:	defffd04 	addi	sp,sp,-12
   534cc:	df000215 	stw	fp,8(sp)
   534d0:	df000204 	addi	fp,sp,8
   534d4:	e13ffe15 	stw	r4,-8(fp)
   534d8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   534dc:	e0bffe17 	ldw	r2,-8(fp)
   534e0:	10800317 	ldw	r2,12(r2)
   534e4:	10800404 	addi	r2,r2,16
   534e8:	10c00037 	ldwio	r3,0(r2)
   534ec:	e0bffe17 	ldw	r2,-8(fp)
   534f0:	10800317 	ldw	r2,12(r2)
   534f4:	10800304 	addi	r2,r2,12
   534f8:	10800037 	ldwio	r2,0(r2)
   534fc:	1884703a 	and	r2,r3,r2
   53500:	1007883a 	mov	r3,r2
   53504:	e0bfff17 	ldw	r2,-4(fp)
   53508:	10c00015 	stw	r3,0(r2)
}
   5350c:	0001883a 	nop
   53510:	e037883a 	mov	sp,fp
   53514:	df000017 	ldw	fp,0(sp)
   53518:	dec00104 	addi	sp,sp,4
   5351c:	f800283a 	ret

00053520 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   53520:	defffd04 	addi	sp,sp,-12
   53524:	df000215 	stw	fp,8(sp)
   53528:	df000204 	addi	fp,sp,8
   5352c:	e13ffe15 	stw	r4,-8(fp)
   53530:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   53534:	e0bffe17 	ldw	r2,-8(fp)
   53538:	10800317 	ldw	r2,12(r2)
   5353c:	10800404 	addi	r2,r2,16
   53540:	10800037 	ldwio	r2,0(r2)
   53544:	1007883a 	mov	r3,r2
   53548:	e0bfff17 	ldw	r2,-4(fp)
   5354c:	10c00015 	stw	r3,0(r2)
}
   53550:	0001883a 	nop
   53554:	e037883a 	mov	sp,fp
   53558:	df000017 	ldw	fp,0(sp)
   5355c:	dec00104 	addi	sp,sp,4
   53560:	f800283a 	ret

00053564 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   53564:	defffd04 	addi	sp,sp,-12
   53568:	df000215 	stw	fp,8(sp)
   5356c:	df000204 	addi	fp,sp,8
   53570:	e13ffe15 	stw	r4,-8(fp)
   53574:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   53578:	e0bffe17 	ldw	r2,-8(fp)
   5357c:	10800317 	ldw	r2,12(r2)
   53580:	10800404 	addi	r2,r2,16
   53584:	e0ffff17 	ldw	r3,-4(fp)
   53588:	10c00035 	stwio	r3,0(r2)
}
   5358c:	0001883a 	nop
   53590:	e037883a 	mov	sp,fp
   53594:	df000017 	ldw	fp,0(sp)
   53598:	dec00104 	addi	sp,sp,4
   5359c:	f800283a 	ret

000535a0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   535a0:	defffb04 	addi	sp,sp,-20
   535a4:	dfc00415 	stw	ra,16(sp)
   535a8:	df000315 	stw	fp,12(sp)
   535ac:	df000304 	addi	fp,sp,12
   535b0:	e13ffe15 	stw	r4,-8(fp)
   535b4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   535b8:	e17ffd04 	addi	r5,fp,-12
   535bc:	e13ffe17 	ldw	r4,-8(fp)
   535c0:	005366c0 	call	5366c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   535c4:	e0bfff17 	ldw	r2,-4(fp)
   535c8:	0086303a 	nor	r3,zero,r2
   535cc:	e0bffd17 	ldw	r2,-12(fp)
   535d0:	1884703a 	and	r2,r3,r2
   535d4:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   535d8:	e0bffe17 	ldw	r2,-8(fp)
   535dc:	10800317 	ldw	r2,12(r2)
   535e0:	10800304 	addi	r2,r2,12
   535e4:	e0fffd17 	ldw	r3,-12(fp)
   535e8:	18c007cc 	andi	r3,r3,31
   535ec:	10c00035 	stwio	r3,0(r2)
}
   535f0:	0001883a 	nop
   535f4:	e037883a 	mov	sp,fp
   535f8:	dfc00117 	ldw	ra,4(sp)
   535fc:	df000017 	ldw	fp,0(sp)
   53600:	dec00204 	addi	sp,sp,8
   53604:	f800283a 	ret

00053608 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   53608:	defffb04 	addi	sp,sp,-20
   5360c:	dfc00415 	stw	ra,16(sp)
   53610:	df000315 	stw	fp,12(sp)
   53614:	df000304 	addi	fp,sp,12
   53618:	e13ffe15 	stw	r4,-8(fp)
   5361c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   53620:	e17ffd04 	addi	r5,fp,-12
   53624:	e13ffe17 	ldw	r4,-8(fp)
   53628:	005366c0 	call	5366c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   5362c:	e0fffd17 	ldw	r3,-12(fp)
   53630:	e0bfff17 	ldw	r2,-4(fp)
   53634:	1884b03a 	or	r2,r3,r2
   53638:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   5363c:	e0bffe17 	ldw	r2,-8(fp)
   53640:	10800317 	ldw	r2,12(r2)
   53644:	10800304 	addi	r2,r2,12
   53648:	e0fffd17 	ldw	r3,-12(fp)
   5364c:	18c007cc 	andi	r3,r3,31
   53650:	10c00035 	stwio	r3,0(r2)
}
   53654:	0001883a 	nop
   53658:	e037883a 	mov	sp,fp
   5365c:	dfc00117 	ldw	ra,4(sp)
   53660:	df000017 	ldw	fp,0(sp)
   53664:	dec00204 	addi	sp,sp,8
   53668:	f800283a 	ret

0005366c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   5366c:	defffd04 	addi	sp,sp,-12
   53670:	df000215 	stw	fp,8(sp)
   53674:	df000204 	addi	fp,sp,8
   53678:	e13ffe15 	stw	r4,-8(fp)
   5367c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   53680:	e0bffe17 	ldw	r2,-8(fp)
   53684:	10800317 	ldw	r2,12(r2)
   53688:	10800304 	addi	r2,r2,12
   5368c:	10800037 	ldwio	r2,0(r2)
   53690:	10c007cc 	andi	r3,r2,31
   53694:	e0bfff17 	ldw	r2,-4(fp)
   53698:	10c00015 	stw	r3,0(r2)
}
   5369c:	0001883a 	nop
   536a0:	e037883a 	mov	sp,fp
   536a4:	df000017 	ldw	fp,0(sp)
   536a8:	dec00104 	addi	sp,sp,4
   536ac:	f800283a 	ret

000536b0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   536b0:	defffd04 	addi	sp,sp,-12
   536b4:	df000215 	stw	fp,8(sp)
   536b8:	df000204 	addi	fp,sp,8
   536bc:	e13ffe15 	stw	r4,-8(fp)
   536c0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   536c4:	e0bffe17 	ldw	r2,-8(fp)
   536c8:	10800317 	ldw	r2,12(r2)
   536cc:	10800204 	addi	r2,r2,8
   536d0:	10800037 	ldwio	r2,0(r2)
   536d4:	10800c0c 	andi	r2,r2,48
   536d8:	1005d13a 	srai	r2,r2,4
   536dc:	1007883a 	mov	r3,r2
   536e0:	e0bfff17 	ldw	r2,-4(fp)
   536e4:	10c00015 	stw	r3,0(r2)
}
   536e8:	0001883a 	nop
   536ec:	e037883a 	mov	sp,fp
   536f0:	df000017 	ldw	fp,0(sp)
   536f4:	dec00104 	addi	sp,sp,4
   536f8:	f800283a 	ret

000536fc <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   536fc:	defffd04 	addi	sp,sp,-12
   53700:	df000215 	stw	fp,8(sp)
   53704:	df000204 	addi	fp,sp,8
   53708:	e13ffe15 	stw	r4,-8(fp)
   5370c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   53710:	e0bffe17 	ldw	r2,-8(fp)
   53714:	10800317 	ldw	r2,12(r2)
   53718:	10800204 	addi	r2,r2,8
   5371c:	e0fffe17 	ldw	r3,-8(fp)
   53720:	18c00317 	ldw	r3,12(r3)
   53724:	18c00204 	addi	r3,r3,8
   53728:	18c00037 	ldwio	r3,0(r3)
   5372c:	1809883a 	mov	r4,r3
   53730:	00fff3c4 	movi	r3,-49
   53734:	20c8703a 	and	r4,r4,r3
   53738:	e0ffff17 	ldw	r3,-4(fp)
   5373c:	1806913a 	slli	r3,r3,4
   53740:	18c00c0c 	andi	r3,r3,48
   53744:	20c6b03a 	or	r3,r4,r3
   53748:	10c00035 	stwio	r3,0(r2)
}
   5374c:	0001883a 	nop
   53750:	e037883a 	mov	sp,fp
   53754:	df000017 	ldw	fp,0(sp)
   53758:	dec00104 	addi	sp,sp,4
   5375c:	f800283a 	ret

00053760 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   53760:	defffd04 	addi	sp,sp,-12
   53764:	df000215 	stw	fp,8(sp)
   53768:	df000204 	addi	fp,sp,8
   5376c:	e13ffe15 	stw	r4,-8(fp)
   53770:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   53774:	e0bffe17 	ldw	r2,-8(fp)
   53778:	10800317 	ldw	r2,12(r2)
   5377c:	10800204 	addi	r2,r2,8
   53780:	10800037 	ldwio	r2,0(r2)
   53784:	1080030c 	andi	r2,r2,12
   53788:	1005d0ba 	srai	r2,r2,2
   5378c:	1007883a 	mov	r3,r2
   53790:	e0bfff17 	ldw	r2,-4(fp)
   53794:	10c00015 	stw	r3,0(r2)
}
   53798:	0001883a 	nop
   5379c:	e037883a 	mov	sp,fp
   537a0:	df000017 	ldw	fp,0(sp)
   537a4:	dec00104 	addi	sp,sp,4
   537a8:	f800283a 	ret

000537ac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   537ac:	defffd04 	addi	sp,sp,-12
   537b0:	df000215 	stw	fp,8(sp)
   537b4:	df000204 	addi	fp,sp,8
   537b8:	e13ffe15 	stw	r4,-8(fp)
   537bc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   537c0:	e0bffe17 	ldw	r2,-8(fp)
   537c4:	10800317 	ldw	r2,12(r2)
   537c8:	10c00204 	addi	r3,r2,8
   537cc:	e0bffe17 	ldw	r2,-8(fp)
   537d0:	10800317 	ldw	r2,12(r2)
   537d4:	10800204 	addi	r2,r2,8
   537d8:	10800037 	ldwio	r2,0(r2)
   537dc:	1009883a 	mov	r4,r2
   537e0:	00bffcc4 	movi	r2,-13
   537e4:	2088703a 	and	r4,r4,r2
   537e8:	e0bfff17 	ldw	r2,-4(fp)
   537ec:	1085883a 	add	r2,r2,r2
   537f0:	1085883a 	add	r2,r2,r2
   537f4:	1080030c 	andi	r2,r2,12
   537f8:	2084b03a 	or	r2,r4,r2
   537fc:	18800035 	stwio	r2,0(r3)
}
   53800:	0001883a 	nop
   53804:	e037883a 	mov	sp,fp
   53808:	df000017 	ldw	fp,0(sp)
   5380c:	dec00104 	addi	sp,sp,4
   53810:	f800283a 	ret

00053814 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   53814:	defffa04 	addi	sp,sp,-24
   53818:	dfc00515 	stw	ra,20(sp)
   5381c:	df000415 	stw	fp,16(sp)
   53820:	df000404 	addi	fp,sp,16
   53824:	e13ffd15 	stw	r4,-12(fp)
   53828:	e17ffe15 	stw	r5,-8(fp)
   5382c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   53830:	e0bffd17 	ldw	r2,-12(fp)
   53834:	10800017 	ldw	r2,0(r2)
   53838:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   5383c:	e0bffc17 	ldw	r2,-16(fp)
   53840:	10c00a04 	addi	r3,r2,40
   53844:	e0bffd17 	ldw	r2,-12(fp)
   53848:	10800217 	ldw	r2,8(r2)
   5384c:	100f883a 	mov	r7,r2
   53850:	e1bfff17 	ldw	r6,-4(fp)
   53854:	e17ffe17 	ldw	r5,-8(fp)
   53858:	1809883a 	mov	r4,r3
   5385c:	0053e3c0 	call	53e3c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   53860:	e037883a 	mov	sp,fp
   53864:	dfc00117 	ldw	ra,4(sp)
   53868:	df000017 	ldw	fp,0(sp)
   5386c:	dec00204 	addi	sp,sp,8
   53870:	f800283a 	ret

00053874 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   53874:	defffa04 	addi	sp,sp,-24
   53878:	dfc00515 	stw	ra,20(sp)
   5387c:	df000415 	stw	fp,16(sp)
   53880:	df000404 	addi	fp,sp,16
   53884:	e13ffd15 	stw	r4,-12(fp)
   53888:	e17ffe15 	stw	r5,-8(fp)
   5388c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   53890:	e0bffd17 	ldw	r2,-12(fp)
   53894:	10800017 	ldw	r2,0(r2)
   53898:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   5389c:	e0bffc17 	ldw	r2,-16(fp)
   538a0:	10c00a04 	addi	r3,r2,40
   538a4:	e0bffd17 	ldw	r2,-12(fp)
   538a8:	10800217 	ldw	r2,8(r2)
   538ac:	100f883a 	mov	r7,r2
   538b0:	e1bfff17 	ldw	r6,-4(fp)
   538b4:	e17ffe17 	ldw	r5,-8(fp)
   538b8:	1809883a 	mov	r4,r3
   538bc:	00540580 	call	54058 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   538c0:	e037883a 	mov	sp,fp
   538c4:	dfc00117 	ldw	ra,4(sp)
   538c8:	df000017 	ldw	fp,0(sp)
   538cc:	dec00204 	addi	sp,sp,8
   538d0:	f800283a 	ret

000538d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   538d4:	defffc04 	addi	sp,sp,-16
   538d8:	dfc00315 	stw	ra,12(sp)
   538dc:	df000215 	stw	fp,8(sp)
   538e0:	df000204 	addi	fp,sp,8
   538e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   538e8:	e0bfff17 	ldw	r2,-4(fp)
   538ec:	10800017 	ldw	r2,0(r2)
   538f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   538f4:	e0bffe17 	ldw	r2,-8(fp)
   538f8:	10c00a04 	addi	r3,r2,40
   538fc:	e0bfff17 	ldw	r2,-4(fp)
   53900:	10800217 	ldw	r2,8(r2)
   53904:	100b883a 	mov	r5,r2
   53908:	1809883a 	mov	r4,r3
   5390c:	0053ce40 	call	53ce4 <altera_avalon_jtag_uart_close>
}
   53910:	e037883a 	mov	sp,fp
   53914:	dfc00117 	ldw	ra,4(sp)
   53918:	df000017 	ldw	fp,0(sp)
   5391c:	dec00204 	addi	sp,sp,8
   53920:	f800283a 	ret

00053924 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   53924:	defffa04 	addi	sp,sp,-24
   53928:	dfc00515 	stw	ra,20(sp)
   5392c:	df000415 	stw	fp,16(sp)
   53930:	df000404 	addi	fp,sp,16
   53934:	e13ffd15 	stw	r4,-12(fp)
   53938:	e17ffe15 	stw	r5,-8(fp)
   5393c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   53940:	e0bffd17 	ldw	r2,-12(fp)
   53944:	10800017 	ldw	r2,0(r2)
   53948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   5394c:	e0bffc17 	ldw	r2,-16(fp)
   53950:	10800a04 	addi	r2,r2,40
   53954:	e1bfff17 	ldw	r6,-4(fp)
   53958:	e17ffe17 	ldw	r5,-8(fp)
   5395c:	1009883a 	mov	r4,r2
   53960:	0053d4c0 	call	53d4c <altera_avalon_jtag_uart_ioctl>
}
   53964:	e037883a 	mov	sp,fp
   53968:	dfc00117 	ldw	ra,4(sp)
   5396c:	df000017 	ldw	fp,0(sp)
   53970:	dec00204 	addi	sp,sp,8
   53974:	f800283a 	ret

00053978 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   53978:	defffa04 	addi	sp,sp,-24
   5397c:	dfc00515 	stw	ra,20(sp)
   53980:	df000415 	stw	fp,16(sp)
   53984:	df000404 	addi	fp,sp,16
   53988:	e13ffd15 	stw	r4,-12(fp)
   5398c:	e17ffe15 	stw	r5,-8(fp)
   53990:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53994:	e0bffd17 	ldw	r2,-12(fp)
   53998:	00c00044 	movi	r3,1
   5399c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   539a0:	e0bffd17 	ldw	r2,-12(fp)
   539a4:	10800017 	ldw	r2,0(r2)
   539a8:	10800104 	addi	r2,r2,4
   539ac:	1007883a 	mov	r3,r2
   539b0:	e0bffd17 	ldw	r2,-12(fp)
   539b4:	10800817 	ldw	r2,32(r2)
   539b8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   539bc:	e0bffe17 	ldw	r2,-8(fp)
   539c0:	e0ffff17 	ldw	r3,-4(fp)
   539c4:	d8000015 	stw	zero,0(sp)
   539c8:	e1fffd17 	ldw	r7,-12(fp)
   539cc:	01800174 	movhi	r6,5
   539d0:	318e8e04 	addi	r6,r6,14904
   539d4:	180b883a 	mov	r5,r3
   539d8:	1009883a 	mov	r4,r2
   539dc:	00548a00 	call	548a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   539e0:	e0bffd17 	ldw	r2,-12(fp)
   539e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   539e8:	e0bffd17 	ldw	r2,-12(fp)
   539ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   539f0:	d0e6f117 	ldw	r3,-25660(gp)
   539f4:	e1fffd17 	ldw	r7,-12(fp)
   539f8:	01800174 	movhi	r6,5
   539fc:	318f1104 	addi	r6,r6,15428
   53a00:	180b883a 	mov	r5,r3
   53a04:	1009883a 	mov	r4,r2
   53a08:	00543700 	call	54370 <alt_alarm_start>
   53a0c:	1000040e 	bge	r2,zero,53a20 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   53a10:	e0fffd17 	ldw	r3,-12(fp)
   53a14:	00a00034 	movhi	r2,32768
   53a18:	10bfffc4 	addi	r2,r2,-1
   53a1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   53a20:	0001883a 	nop
   53a24:	e037883a 	mov	sp,fp
   53a28:	dfc00117 	ldw	ra,4(sp)
   53a2c:	df000017 	ldw	fp,0(sp)
   53a30:	dec00204 	addi	sp,sp,8
   53a34:	f800283a 	ret

00053a38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   53a38:	defff804 	addi	sp,sp,-32
   53a3c:	df000715 	stw	fp,28(sp)
   53a40:	df000704 	addi	fp,sp,28
   53a44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   53a48:	e0bfff17 	ldw	r2,-4(fp)
   53a4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   53a50:	e0bffb17 	ldw	r2,-20(fp)
   53a54:	10800017 	ldw	r2,0(r2)
   53a58:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53a5c:	e0bffc17 	ldw	r2,-16(fp)
   53a60:	10800104 	addi	r2,r2,4
   53a64:	10800037 	ldwio	r2,0(r2)
   53a68:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   53a6c:	e0bffd17 	ldw	r2,-12(fp)
   53a70:	1080c00c 	andi	r2,r2,768
   53a74:	10006d26 	beq	r2,zero,53c2c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   53a78:	e0bffd17 	ldw	r2,-12(fp)
   53a7c:	1080400c 	andi	r2,r2,256
   53a80:	10003526 	beq	r2,zero,53b58 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   53a84:	00800074 	movhi	r2,1
   53a88:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53a8c:	e0bffb17 	ldw	r2,-20(fp)
   53a90:	10800a17 	ldw	r2,40(r2)
   53a94:	10800044 	addi	r2,r2,1
   53a98:	1081ffcc 	andi	r2,r2,2047
   53a9c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   53aa0:	e0bffb17 	ldw	r2,-20(fp)
   53aa4:	10c00b17 	ldw	r3,44(r2)
   53aa8:	e0bffe17 	ldw	r2,-8(fp)
   53aac:	18801526 	beq	r3,r2,53b04 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   53ab0:	e0bffc17 	ldw	r2,-16(fp)
   53ab4:	10800037 	ldwio	r2,0(r2)
   53ab8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   53abc:	e0bff917 	ldw	r2,-28(fp)
   53ac0:	10a0000c 	andi	r2,r2,32768
   53ac4:	10001126 	beq	r2,zero,53b0c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   53ac8:	e0bffb17 	ldw	r2,-20(fp)
   53acc:	10800a17 	ldw	r2,40(r2)
   53ad0:	e0fff917 	ldw	r3,-28(fp)
   53ad4:	1809883a 	mov	r4,r3
   53ad8:	e0fffb17 	ldw	r3,-20(fp)
   53adc:	1885883a 	add	r2,r3,r2
   53ae0:	10800e04 	addi	r2,r2,56
   53ae4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53ae8:	e0bffb17 	ldw	r2,-20(fp)
   53aec:	10800a17 	ldw	r2,40(r2)
   53af0:	10800044 	addi	r2,r2,1
   53af4:	10c1ffcc 	andi	r3,r2,2047
   53af8:	e0bffb17 	ldw	r2,-20(fp)
   53afc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   53b00:	003fe206 	br	53a8c <__alt_data_end+0xfffec98c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   53b04:	0001883a 	nop
   53b08:	00000106 	br	53b10 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   53b0c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   53b10:	e0bff917 	ldw	r2,-28(fp)
   53b14:	10bfffec 	andhi	r2,r2,65535
   53b18:	10000f26 	beq	r2,zero,53b58 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53b1c:	e0bffb17 	ldw	r2,-20(fp)
   53b20:	10c00817 	ldw	r3,32(r2)
   53b24:	00bfff84 	movi	r2,-2
   53b28:	1886703a 	and	r3,r3,r2
   53b2c:	e0bffb17 	ldw	r2,-20(fp)
   53b30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   53b34:	e0bffc17 	ldw	r2,-16(fp)
   53b38:	10800104 	addi	r2,r2,4
   53b3c:	1007883a 	mov	r3,r2
   53b40:	e0bffb17 	ldw	r2,-20(fp)
   53b44:	10800817 	ldw	r2,32(r2)
   53b48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53b4c:	e0bffc17 	ldw	r2,-16(fp)
   53b50:	10800104 	addi	r2,r2,4
   53b54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   53b58:	e0bffd17 	ldw	r2,-12(fp)
   53b5c:	1080800c 	andi	r2,r2,512
   53b60:	103fbe26 	beq	r2,zero,53a5c <__alt_data_end+0xfffec95c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   53b64:	e0bffd17 	ldw	r2,-12(fp)
   53b68:	1004d43a 	srli	r2,r2,16
   53b6c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   53b70:	00001406 	br	53bc4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   53b74:	e0bffc17 	ldw	r2,-16(fp)
   53b78:	e0fffb17 	ldw	r3,-20(fp)
   53b7c:	18c00d17 	ldw	r3,52(r3)
   53b80:	e13ffb17 	ldw	r4,-20(fp)
   53b84:	20c7883a 	add	r3,r4,r3
   53b88:	18c20e04 	addi	r3,r3,2104
   53b8c:	18c00003 	ldbu	r3,0(r3)
   53b90:	18c03fcc 	andi	r3,r3,255
   53b94:	18c0201c 	xori	r3,r3,128
   53b98:	18ffe004 	addi	r3,r3,-128
   53b9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53ba0:	e0bffb17 	ldw	r2,-20(fp)
   53ba4:	10800d17 	ldw	r2,52(r2)
   53ba8:	10800044 	addi	r2,r2,1
   53bac:	10c1ffcc 	andi	r3,r2,2047
   53bb0:	e0bffb17 	ldw	r2,-20(fp)
   53bb4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   53bb8:	e0bffa17 	ldw	r2,-24(fp)
   53bbc:	10bfffc4 	addi	r2,r2,-1
   53bc0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   53bc4:	e0bffa17 	ldw	r2,-24(fp)
   53bc8:	10000526 	beq	r2,zero,53be0 <altera_avalon_jtag_uart_irq+0x1a8>
   53bcc:	e0bffb17 	ldw	r2,-20(fp)
   53bd0:	10c00d17 	ldw	r3,52(r2)
   53bd4:	e0bffb17 	ldw	r2,-20(fp)
   53bd8:	10800c17 	ldw	r2,48(r2)
   53bdc:	18bfe51e 	bne	r3,r2,53b74 <__alt_data_end+0xfffeca74>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   53be0:	e0bffa17 	ldw	r2,-24(fp)
   53be4:	103f9d26 	beq	r2,zero,53a5c <__alt_data_end+0xfffec95c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   53be8:	e0bffb17 	ldw	r2,-20(fp)
   53bec:	10c00817 	ldw	r3,32(r2)
   53bf0:	00bfff44 	movi	r2,-3
   53bf4:	1886703a 	and	r3,r3,r2
   53bf8:	e0bffb17 	ldw	r2,-20(fp)
   53bfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   53c00:	e0bffb17 	ldw	r2,-20(fp)
   53c04:	10800017 	ldw	r2,0(r2)
   53c08:	10800104 	addi	r2,r2,4
   53c0c:	1007883a 	mov	r3,r2
   53c10:	e0bffb17 	ldw	r2,-20(fp)
   53c14:	10800817 	ldw	r2,32(r2)
   53c18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53c1c:	e0bffc17 	ldw	r2,-16(fp)
   53c20:	10800104 	addi	r2,r2,4
   53c24:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   53c28:	003f8c06 	br	53a5c <__alt_data_end+0xfffec95c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   53c2c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   53c30:	0001883a 	nop
   53c34:	e037883a 	mov	sp,fp
   53c38:	df000017 	ldw	fp,0(sp)
   53c3c:	dec00104 	addi	sp,sp,4
   53c40:	f800283a 	ret

00053c44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   53c44:	defff804 	addi	sp,sp,-32
   53c48:	df000715 	stw	fp,28(sp)
   53c4c:	df000704 	addi	fp,sp,28
   53c50:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   53c54:	e0bffb17 	ldw	r2,-20(fp)
   53c58:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   53c5c:	e0bff917 	ldw	r2,-28(fp)
   53c60:	10800017 	ldw	r2,0(r2)
   53c64:	10800104 	addi	r2,r2,4
   53c68:	10800037 	ldwio	r2,0(r2)
   53c6c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   53c70:	e0bffa17 	ldw	r2,-24(fp)
   53c74:	1081000c 	andi	r2,r2,1024
   53c78:	10000b26 	beq	r2,zero,53ca8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   53c7c:	e0bff917 	ldw	r2,-28(fp)
   53c80:	10800017 	ldw	r2,0(r2)
   53c84:	10800104 	addi	r2,r2,4
   53c88:	1007883a 	mov	r3,r2
   53c8c:	e0bff917 	ldw	r2,-28(fp)
   53c90:	10800817 	ldw	r2,32(r2)
   53c94:	10810014 	ori	r2,r2,1024
   53c98:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   53c9c:	e0bff917 	ldw	r2,-28(fp)
   53ca0:	10000915 	stw	zero,36(r2)
   53ca4:	00000a06 	br	53cd0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   53ca8:	e0bff917 	ldw	r2,-28(fp)
   53cac:	10c00917 	ldw	r3,36(r2)
   53cb0:	00a00034 	movhi	r2,32768
   53cb4:	10bfff04 	addi	r2,r2,-4
   53cb8:	10c00536 	bltu	r2,r3,53cd0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   53cbc:	e0bff917 	ldw	r2,-28(fp)
   53cc0:	10800917 	ldw	r2,36(r2)
   53cc4:	10c00044 	addi	r3,r2,1
   53cc8:	e0bff917 	ldw	r2,-28(fp)
   53ccc:	10c00915 	stw	r3,36(r2)
   53cd0:	d0a6f117 	ldw	r2,-25660(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   53cd4:	e037883a 	mov	sp,fp
   53cd8:	df000017 	ldw	fp,0(sp)
   53cdc:	dec00104 	addi	sp,sp,4
   53ce0:	f800283a 	ret

00053ce4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   53ce4:	defffd04 	addi	sp,sp,-12
   53ce8:	df000215 	stw	fp,8(sp)
   53cec:	df000204 	addi	fp,sp,8
   53cf0:	e13ffe15 	stw	r4,-8(fp)
   53cf4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   53cf8:	00000506 	br	53d10 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   53cfc:	e0bfff17 	ldw	r2,-4(fp)
   53d00:	1090000c 	andi	r2,r2,16384
   53d04:	10000226 	beq	r2,zero,53d10 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   53d08:	00bffd44 	movi	r2,-11
   53d0c:	00000b06 	br	53d3c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   53d10:	e0bffe17 	ldw	r2,-8(fp)
   53d14:	10c00d17 	ldw	r3,52(r2)
   53d18:	e0bffe17 	ldw	r2,-8(fp)
   53d1c:	10800c17 	ldw	r2,48(r2)
   53d20:	18800526 	beq	r3,r2,53d38 <altera_avalon_jtag_uart_close+0x54>
   53d24:	e0bffe17 	ldw	r2,-8(fp)
   53d28:	10c00917 	ldw	r3,36(r2)
   53d2c:	e0bffe17 	ldw	r2,-8(fp)
   53d30:	10800117 	ldw	r2,4(r2)
   53d34:	18bff136 	bltu	r3,r2,53cfc <__alt_data_end+0xfffecbfc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   53d38:	0005883a 	mov	r2,zero
}
   53d3c:	e037883a 	mov	sp,fp
   53d40:	df000017 	ldw	fp,0(sp)
   53d44:	dec00104 	addi	sp,sp,4
   53d48:	f800283a 	ret

00053d4c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   53d4c:	defffa04 	addi	sp,sp,-24
   53d50:	df000515 	stw	fp,20(sp)
   53d54:	df000504 	addi	fp,sp,20
   53d58:	e13ffd15 	stw	r4,-12(fp)
   53d5c:	e17ffe15 	stw	r5,-8(fp)
   53d60:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   53d64:	00bff9c4 	movi	r2,-25
   53d68:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   53d6c:	e0bffe17 	ldw	r2,-8(fp)
   53d70:	10da8060 	cmpeqi	r3,r2,27137
   53d74:	1800031e 	bne	r3,zero,53d84 <altera_avalon_jtag_uart_ioctl+0x38>
   53d78:	109a80a0 	cmpeqi	r2,r2,27138
   53d7c:	1000181e 	bne	r2,zero,53de0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   53d80:	00002906 	br	53e28 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   53d84:	e0bffd17 	ldw	r2,-12(fp)
   53d88:	10c00117 	ldw	r3,4(r2)
   53d8c:	00a00034 	movhi	r2,32768
   53d90:	10bfffc4 	addi	r2,r2,-1
   53d94:	18802126 	beq	r3,r2,53e1c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   53d98:	e0bfff17 	ldw	r2,-4(fp)
   53d9c:	10800017 	ldw	r2,0(r2)
   53da0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   53da4:	e0bffc17 	ldw	r2,-16(fp)
   53da8:	10800090 	cmplti	r2,r2,2
   53dac:	1000061e 	bne	r2,zero,53dc8 <altera_avalon_jtag_uart_ioctl+0x7c>
   53db0:	e0fffc17 	ldw	r3,-16(fp)
   53db4:	00a00034 	movhi	r2,32768
   53db8:	10bfffc4 	addi	r2,r2,-1
   53dbc:	18800226 	beq	r3,r2,53dc8 <altera_avalon_jtag_uart_ioctl+0x7c>
   53dc0:	e0bffc17 	ldw	r2,-16(fp)
   53dc4:	00000206 	br	53dd0 <altera_avalon_jtag_uart_ioctl+0x84>
   53dc8:	00a00034 	movhi	r2,32768
   53dcc:	10bfff84 	addi	r2,r2,-2
   53dd0:	e0fffd17 	ldw	r3,-12(fp)
   53dd4:	18800115 	stw	r2,4(r3)
      rc = 0;
   53dd8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   53ddc:	00000f06 	br	53e1c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   53de0:	e0bffd17 	ldw	r2,-12(fp)
   53de4:	10c00117 	ldw	r3,4(r2)
   53de8:	00a00034 	movhi	r2,32768
   53dec:	10bfffc4 	addi	r2,r2,-1
   53df0:	18800c26 	beq	r3,r2,53e24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   53df4:	e0bffd17 	ldw	r2,-12(fp)
   53df8:	10c00917 	ldw	r3,36(r2)
   53dfc:	e0bffd17 	ldw	r2,-12(fp)
   53e00:	10800117 	ldw	r2,4(r2)
   53e04:	1885803a 	cmpltu	r2,r3,r2
   53e08:	10c03fcc 	andi	r3,r2,255
   53e0c:	e0bfff17 	ldw	r2,-4(fp)
   53e10:	10c00015 	stw	r3,0(r2)
      rc = 0;
   53e14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   53e18:	00000206 	br	53e24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   53e1c:	0001883a 	nop
   53e20:	00000106 	br	53e28 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   53e24:	0001883a 	nop

  default:
    break;
  }

  return rc;
   53e28:	e0bffb17 	ldw	r2,-20(fp)
}
   53e2c:	e037883a 	mov	sp,fp
   53e30:	df000017 	ldw	fp,0(sp)
   53e34:	dec00104 	addi	sp,sp,4
   53e38:	f800283a 	ret

00053e3c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   53e3c:	defff304 	addi	sp,sp,-52
   53e40:	dfc00c15 	stw	ra,48(sp)
   53e44:	df000b15 	stw	fp,44(sp)
   53e48:	df000b04 	addi	fp,sp,44
   53e4c:	e13ffc15 	stw	r4,-16(fp)
   53e50:	e17ffd15 	stw	r5,-12(fp)
   53e54:	e1bffe15 	stw	r6,-8(fp)
   53e58:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   53e5c:	e0bffd17 	ldw	r2,-12(fp)
   53e60:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   53e64:	00004706 	br	53f84 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   53e68:	e0bffc17 	ldw	r2,-16(fp)
   53e6c:	10800a17 	ldw	r2,40(r2)
   53e70:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   53e74:	e0bffc17 	ldw	r2,-16(fp)
   53e78:	10800b17 	ldw	r2,44(r2)
   53e7c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   53e80:	e0fff717 	ldw	r3,-36(fp)
   53e84:	e0bff817 	ldw	r2,-32(fp)
   53e88:	18800536 	bltu	r3,r2,53ea0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   53e8c:	e0fff717 	ldw	r3,-36(fp)
   53e90:	e0bff817 	ldw	r2,-32(fp)
   53e94:	1885c83a 	sub	r2,r3,r2
   53e98:	e0bff615 	stw	r2,-40(fp)
   53e9c:	00000406 	br	53eb0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   53ea0:	00c20004 	movi	r3,2048
   53ea4:	e0bff817 	ldw	r2,-32(fp)
   53ea8:	1885c83a 	sub	r2,r3,r2
   53eac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   53eb0:	e0bff617 	ldw	r2,-40(fp)
   53eb4:	10001e26 	beq	r2,zero,53f30 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   53eb8:	e0fffe17 	ldw	r3,-8(fp)
   53ebc:	e0bff617 	ldw	r2,-40(fp)
   53ec0:	1880022e 	bgeu	r3,r2,53ecc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   53ec4:	e0bffe17 	ldw	r2,-8(fp)
   53ec8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   53ecc:	e0bffc17 	ldw	r2,-16(fp)
   53ed0:	10c00e04 	addi	r3,r2,56
   53ed4:	e0bff817 	ldw	r2,-32(fp)
   53ed8:	1885883a 	add	r2,r3,r2
   53edc:	e1bff617 	ldw	r6,-40(fp)
   53ee0:	100b883a 	mov	r5,r2
   53ee4:	e13ff517 	ldw	r4,-44(fp)
   53ee8:	004ca940 	call	4ca94 <memcpy>
      ptr   += n;
   53eec:	e0fff517 	ldw	r3,-44(fp)
   53ef0:	e0bff617 	ldw	r2,-40(fp)
   53ef4:	1885883a 	add	r2,r3,r2
   53ef8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   53efc:	e0fffe17 	ldw	r3,-8(fp)
   53f00:	e0bff617 	ldw	r2,-40(fp)
   53f04:	1885c83a 	sub	r2,r3,r2
   53f08:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53f0c:	e0fff817 	ldw	r3,-32(fp)
   53f10:	e0bff617 	ldw	r2,-40(fp)
   53f14:	1885883a 	add	r2,r3,r2
   53f18:	10c1ffcc 	andi	r3,r2,2047
   53f1c:	e0bffc17 	ldw	r2,-16(fp)
   53f20:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   53f24:	e0bffe17 	ldw	r2,-8(fp)
   53f28:	00bfcf16 	blt	zero,r2,53e68 <__alt_data_end+0xfffecd68>
   53f2c:	00000106 	br	53f34 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   53f30:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   53f34:	e0fff517 	ldw	r3,-44(fp)
   53f38:	e0bffd17 	ldw	r2,-12(fp)
   53f3c:	1880141e 	bne	r3,r2,53f90 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   53f40:	e0bfff17 	ldw	r2,-4(fp)
   53f44:	1090000c 	andi	r2,r2,16384
   53f48:	1000131e 	bne	r2,zero,53f98 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   53f4c:	0001883a 	nop
   53f50:	e0bffc17 	ldw	r2,-16(fp)
   53f54:	10c00a17 	ldw	r3,40(r2)
   53f58:	e0bff717 	ldw	r2,-36(fp)
   53f5c:	1880051e 	bne	r3,r2,53f74 <altera_avalon_jtag_uart_read+0x138>
   53f60:	e0bffc17 	ldw	r2,-16(fp)
   53f64:	10c00917 	ldw	r3,36(r2)
   53f68:	e0bffc17 	ldw	r2,-16(fp)
   53f6c:	10800117 	ldw	r2,4(r2)
   53f70:	18bff736 	bltu	r3,r2,53f50 <__alt_data_end+0xfffece50>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   53f74:	e0bffc17 	ldw	r2,-16(fp)
   53f78:	10c00a17 	ldw	r3,40(r2)
   53f7c:	e0bff717 	ldw	r2,-36(fp)
   53f80:	18800726 	beq	r3,r2,53fa0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   53f84:	e0bffe17 	ldw	r2,-8(fp)
   53f88:	00bfb716 	blt	zero,r2,53e68 <__alt_data_end+0xfffecd68>
   53f8c:	00000506 	br	53fa4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   53f90:	0001883a 	nop
   53f94:	00000306 	br	53fa4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   53f98:	0001883a 	nop
   53f9c:	00000106 	br	53fa4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   53fa0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   53fa4:	e0fff517 	ldw	r3,-44(fp)
   53fa8:	e0bffd17 	ldw	r2,-12(fp)
   53fac:	18801826 	beq	r3,r2,54010 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53fb0:	0005303a 	rdctl	r2,status
   53fb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53fb8:	e0fffb17 	ldw	r3,-20(fp)
   53fbc:	00bfff84 	movi	r2,-2
   53fc0:	1884703a 	and	r2,r3,r2
   53fc4:	1001703a 	wrctl	status,r2
  
  return context;
   53fc8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   53fcc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53fd0:	e0bffc17 	ldw	r2,-16(fp)
   53fd4:	10800817 	ldw	r2,32(r2)
   53fd8:	10c00054 	ori	r3,r2,1
   53fdc:	e0bffc17 	ldw	r2,-16(fp)
   53fe0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   53fe4:	e0bffc17 	ldw	r2,-16(fp)
   53fe8:	10800017 	ldw	r2,0(r2)
   53fec:	10800104 	addi	r2,r2,4
   53ff0:	1007883a 	mov	r3,r2
   53ff4:	e0bffc17 	ldw	r2,-16(fp)
   53ff8:	10800817 	ldw	r2,32(r2)
   53ffc:	18800035 	stwio	r2,0(r3)
   54000:	e0bffa17 	ldw	r2,-24(fp)
   54004:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54008:	e0bff917 	ldw	r2,-28(fp)
   5400c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   54010:	e0fff517 	ldw	r3,-44(fp)
   54014:	e0bffd17 	ldw	r2,-12(fp)
   54018:	18800426 	beq	r3,r2,5402c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   5401c:	e0fff517 	ldw	r3,-44(fp)
   54020:	e0bffd17 	ldw	r2,-12(fp)
   54024:	1885c83a 	sub	r2,r3,r2
   54028:	00000606 	br	54044 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   5402c:	e0bfff17 	ldw	r2,-4(fp)
   54030:	1090000c 	andi	r2,r2,16384
   54034:	10000226 	beq	r2,zero,54040 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   54038:	00bffd44 	movi	r2,-11
   5403c:	00000106 	br	54044 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   54040:	00bffec4 	movi	r2,-5
}
   54044:	e037883a 	mov	sp,fp
   54048:	dfc00117 	ldw	ra,4(sp)
   5404c:	df000017 	ldw	fp,0(sp)
   54050:	dec00204 	addi	sp,sp,8
   54054:	f800283a 	ret

00054058 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   54058:	defff304 	addi	sp,sp,-52
   5405c:	dfc00c15 	stw	ra,48(sp)
   54060:	df000b15 	stw	fp,44(sp)
   54064:	df000b04 	addi	fp,sp,44
   54068:	e13ffc15 	stw	r4,-16(fp)
   5406c:	e17ffd15 	stw	r5,-12(fp)
   54070:	e1bffe15 	stw	r6,-8(fp)
   54074:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   54078:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   5407c:	e0bffd17 	ldw	r2,-12(fp)
   54080:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54084:	00003706 	br	54164 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   54088:	e0bffc17 	ldw	r2,-16(fp)
   5408c:	10800c17 	ldw	r2,48(r2)
   54090:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   54094:	e0bffc17 	ldw	r2,-16(fp)
   54098:	10800d17 	ldw	r2,52(r2)
   5409c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   540a0:	e0fff917 	ldw	r3,-28(fp)
   540a4:	e0bff517 	ldw	r2,-44(fp)
   540a8:	1880062e 	bgeu	r3,r2,540c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   540ac:	e0fff517 	ldw	r3,-44(fp)
   540b0:	e0bff917 	ldw	r2,-28(fp)
   540b4:	1885c83a 	sub	r2,r3,r2
   540b8:	10bfffc4 	addi	r2,r2,-1
   540bc:	e0bff615 	stw	r2,-40(fp)
   540c0:	00000b06 	br	540f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   540c4:	e0bff517 	ldw	r2,-44(fp)
   540c8:	10000526 	beq	r2,zero,540e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   540cc:	00c20004 	movi	r3,2048
   540d0:	e0bff917 	ldw	r2,-28(fp)
   540d4:	1885c83a 	sub	r2,r3,r2
   540d8:	e0bff615 	stw	r2,-40(fp)
   540dc:	00000406 	br	540f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   540e0:	00c1ffc4 	movi	r3,2047
   540e4:	e0bff917 	ldw	r2,-28(fp)
   540e8:	1885c83a 	sub	r2,r3,r2
   540ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   540f0:	e0bff617 	ldw	r2,-40(fp)
   540f4:	10001e26 	beq	r2,zero,54170 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   540f8:	e0fffe17 	ldw	r3,-8(fp)
   540fc:	e0bff617 	ldw	r2,-40(fp)
   54100:	1880022e 	bgeu	r3,r2,5410c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   54104:	e0bffe17 	ldw	r2,-8(fp)
   54108:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   5410c:	e0bffc17 	ldw	r2,-16(fp)
   54110:	10c20e04 	addi	r3,r2,2104
   54114:	e0bff917 	ldw	r2,-28(fp)
   54118:	1885883a 	add	r2,r3,r2
   5411c:	e1bff617 	ldw	r6,-40(fp)
   54120:	e17ffd17 	ldw	r5,-12(fp)
   54124:	1009883a 	mov	r4,r2
   54128:	004ca940 	call	4ca94 <memcpy>
      ptr   += n;
   5412c:	e0fffd17 	ldw	r3,-12(fp)
   54130:	e0bff617 	ldw	r2,-40(fp)
   54134:	1885883a 	add	r2,r3,r2
   54138:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   5413c:	e0fffe17 	ldw	r3,-8(fp)
   54140:	e0bff617 	ldw	r2,-40(fp)
   54144:	1885c83a 	sub	r2,r3,r2
   54148:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5414c:	e0fff917 	ldw	r3,-28(fp)
   54150:	e0bff617 	ldw	r2,-40(fp)
   54154:	1885883a 	add	r2,r3,r2
   54158:	10c1ffcc 	andi	r3,r2,2047
   5415c:	e0bffc17 	ldw	r2,-16(fp)
   54160:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   54164:	e0bffe17 	ldw	r2,-8(fp)
   54168:	00bfc716 	blt	zero,r2,54088 <__alt_data_end+0xfffecf88>
   5416c:	00000106 	br	54174 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   54170:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54174:	0005303a 	rdctl	r2,status
   54178:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5417c:	e0fffb17 	ldw	r3,-20(fp)
   54180:	00bfff84 	movi	r2,-2
   54184:	1884703a 	and	r2,r3,r2
   54188:	1001703a 	wrctl	status,r2
  
  return context;
   5418c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   54190:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   54194:	e0bffc17 	ldw	r2,-16(fp)
   54198:	10800817 	ldw	r2,32(r2)
   5419c:	10c00094 	ori	r3,r2,2
   541a0:	e0bffc17 	ldw	r2,-16(fp)
   541a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   541a8:	e0bffc17 	ldw	r2,-16(fp)
   541ac:	10800017 	ldw	r2,0(r2)
   541b0:	10800104 	addi	r2,r2,4
   541b4:	1007883a 	mov	r3,r2
   541b8:	e0bffc17 	ldw	r2,-16(fp)
   541bc:	10800817 	ldw	r2,32(r2)
   541c0:	18800035 	stwio	r2,0(r3)
   541c4:	e0bffa17 	ldw	r2,-24(fp)
   541c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   541cc:	e0bff817 	ldw	r2,-32(fp)
   541d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   541d4:	e0bffe17 	ldw	r2,-8(fp)
   541d8:	0080100e 	bge	zero,r2,5421c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   541dc:	e0bfff17 	ldw	r2,-4(fp)
   541e0:	1090000c 	andi	r2,r2,16384
   541e4:	1000101e 	bne	r2,zero,54228 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   541e8:	0001883a 	nop
   541ec:	e0bffc17 	ldw	r2,-16(fp)
   541f0:	10c00d17 	ldw	r3,52(r2)
   541f4:	e0bff517 	ldw	r2,-44(fp)
   541f8:	1880051e 	bne	r3,r2,54210 <altera_avalon_jtag_uart_write+0x1b8>
   541fc:	e0bffc17 	ldw	r2,-16(fp)
   54200:	10c00917 	ldw	r3,36(r2)
   54204:	e0bffc17 	ldw	r2,-16(fp)
   54208:	10800117 	ldw	r2,4(r2)
   5420c:	18bff736 	bltu	r3,r2,541ec <__alt_data_end+0xfffed0ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   54210:	e0bffc17 	ldw	r2,-16(fp)
   54214:	10800917 	ldw	r2,36(r2)
   54218:	1000051e 	bne	r2,zero,54230 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   5421c:	e0bffe17 	ldw	r2,-8(fp)
   54220:	00bfd016 	blt	zero,r2,54164 <__alt_data_end+0xfffed064>
   54224:	00000306 	br	54234 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   54228:	0001883a 	nop
   5422c:	00000106 	br	54234 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   54230:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   54234:	e0fffd17 	ldw	r3,-12(fp)
   54238:	e0bff717 	ldw	r2,-36(fp)
   5423c:	18800426 	beq	r3,r2,54250 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   54240:	e0fffd17 	ldw	r3,-12(fp)
   54244:	e0bff717 	ldw	r2,-36(fp)
   54248:	1885c83a 	sub	r2,r3,r2
   5424c:	00000606 	br	54268 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   54250:	e0bfff17 	ldw	r2,-4(fp)
   54254:	1090000c 	andi	r2,r2,16384
   54258:	10000226 	beq	r2,zero,54264 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   5425c:	00bffd44 	movi	r2,-11
   54260:	00000106 	br	54268 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   54264:	00bffec4 	movi	r2,-5
}
   54268:	e037883a 	mov	sp,fp
   5426c:	dfc00117 	ldw	ra,4(sp)
   54270:	df000017 	ldw	fp,0(sp)
   54274:	dec00204 	addi	sp,sp,8
   54278:	f800283a 	ret

0005427c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   5427c:	defffa04 	addi	sp,sp,-24
   54280:	dfc00515 	stw	ra,20(sp)
   54284:	df000415 	stw	fp,16(sp)
   54288:	df000404 	addi	fp,sp,16
   5428c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   54290:	0007883a 	mov	r3,zero
   54294:	e0bfff17 	ldw	r2,-4(fp)
   54298:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   5429c:	e0bfff17 	ldw	r2,-4(fp)
   542a0:	10800104 	addi	r2,r2,4
   542a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   542a8:	0005303a 	rdctl	r2,status
   542ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   542b0:	e0fffd17 	ldw	r3,-12(fp)
   542b4:	00bfff84 	movi	r2,-2
   542b8:	1884703a 	and	r2,r3,r2
   542bc:	1001703a 	wrctl	status,r2
  
  return context;
   542c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   542c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   542c8:	00551d80 	call	551d8 <alt_tick>
   542cc:	e0bffc17 	ldw	r2,-16(fp)
   542d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   542d4:	e0bffe17 	ldw	r2,-8(fp)
   542d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   542dc:	0001883a 	nop
   542e0:	e037883a 	mov	sp,fp
   542e4:	dfc00117 	ldw	ra,4(sp)
   542e8:	df000017 	ldw	fp,0(sp)
   542ec:	dec00204 	addi	sp,sp,8
   542f0:	f800283a 	ret

000542f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   542f4:	defff804 	addi	sp,sp,-32
   542f8:	dfc00715 	stw	ra,28(sp)
   542fc:	df000615 	stw	fp,24(sp)
   54300:	df000604 	addi	fp,sp,24
   54304:	e13ffc15 	stw	r4,-16(fp)
   54308:	e17ffd15 	stw	r5,-12(fp)
   5430c:	e1bffe15 	stw	r6,-8(fp)
   54310:	e1ffff15 	stw	r7,-4(fp)
   54314:	e0bfff17 	ldw	r2,-4(fp)
   54318:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   5431c:	d0a6f117 	ldw	r2,-25660(gp)
   54320:	1000021e 	bne	r2,zero,5432c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   54324:	e0bffb17 	ldw	r2,-20(fp)
   54328:	d0a6f115 	stw	r2,-25660(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   5432c:	e0bffc17 	ldw	r2,-16(fp)
   54330:	10800104 	addi	r2,r2,4
   54334:	00c001c4 	movi	r3,7
   54338:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   5433c:	d8000015 	stw	zero,0(sp)
   54340:	e1fffc17 	ldw	r7,-16(fp)
   54344:	01800174 	movhi	r6,5
   54348:	31909f04 	addi	r6,r6,17020
   5434c:	e17ffe17 	ldw	r5,-8(fp)
   54350:	e13ffd17 	ldw	r4,-12(fp)
   54354:	00548a00 	call	548a0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   54358:	0001883a 	nop
   5435c:	e037883a 	mov	sp,fp
   54360:	dfc00117 	ldw	ra,4(sp)
   54364:	df000017 	ldw	fp,0(sp)
   54368:	dec00204 	addi	sp,sp,8
   5436c:	f800283a 	ret

00054370 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   54370:	defff504 	addi	sp,sp,-44
   54374:	df000a15 	stw	fp,40(sp)
   54378:	df000a04 	addi	fp,sp,40
   5437c:	e13ffc15 	stw	r4,-16(fp)
   54380:	e17ffd15 	stw	r5,-12(fp)
   54384:	e1bffe15 	stw	r6,-8(fp)
   54388:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   5438c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   54390:	d0a6f117 	ldw	r2,-25660(gp)
  
  if (alt_ticks_per_second ())
   54394:	10003c26 	beq	r2,zero,54488 <alt_alarm_start+0x118>
  {
    if (alarm)
   54398:	e0bffc17 	ldw	r2,-16(fp)
   5439c:	10003826 	beq	r2,zero,54480 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   543a0:	e0bffc17 	ldw	r2,-16(fp)
   543a4:	e0fffe17 	ldw	r3,-8(fp)
   543a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   543ac:	e0bffc17 	ldw	r2,-16(fp)
   543b0:	e0ffff17 	ldw	r3,-4(fp)
   543b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   543b8:	0005303a 	rdctl	r2,status
   543bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   543c0:	e0fff917 	ldw	r3,-28(fp)
   543c4:	00bfff84 	movi	r2,-2
   543c8:	1884703a 	and	r2,r3,r2
   543cc:	1001703a 	wrctl	status,r2
  
  return context;
   543d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   543d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   543d8:	d0a6f217 	ldw	r2,-25656(gp)
      
      current_nticks = alt_nticks();
   543dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   543e0:	e0fffd17 	ldw	r3,-12(fp)
   543e4:	e0bff617 	ldw	r2,-40(fp)
   543e8:	1885883a 	add	r2,r3,r2
   543ec:	10c00044 	addi	r3,r2,1
   543f0:	e0bffc17 	ldw	r2,-16(fp)
   543f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   543f8:	e0bffc17 	ldw	r2,-16(fp)
   543fc:	10c00217 	ldw	r3,8(r2)
   54400:	e0bff617 	ldw	r2,-40(fp)
   54404:	1880042e 	bgeu	r3,r2,54418 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   54408:	e0bffc17 	ldw	r2,-16(fp)
   5440c:	00c00044 	movi	r3,1
   54410:	10c00405 	stb	r3,16(r2)
   54414:	00000206 	br	54420 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   54418:	e0bffc17 	ldw	r2,-16(fp)
   5441c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   54420:	e0bffc17 	ldw	r2,-16(fp)
   54424:	d0e01404 	addi	r3,gp,-32688
   54428:	e0fffa15 	stw	r3,-24(fp)
   5442c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   54430:	e0bffb17 	ldw	r2,-20(fp)
   54434:	e0fffa17 	ldw	r3,-24(fp)
   54438:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5443c:	e0bffa17 	ldw	r2,-24(fp)
   54440:	10c00017 	ldw	r3,0(r2)
   54444:	e0bffb17 	ldw	r2,-20(fp)
   54448:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5444c:	e0bffa17 	ldw	r2,-24(fp)
   54450:	10800017 	ldw	r2,0(r2)
   54454:	e0fffb17 	ldw	r3,-20(fp)
   54458:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5445c:	e0bffa17 	ldw	r2,-24(fp)
   54460:	e0fffb17 	ldw	r3,-20(fp)
   54464:	10c00015 	stw	r3,0(r2)
   54468:	e0bff817 	ldw	r2,-32(fp)
   5446c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54470:	e0bff717 	ldw	r2,-36(fp)
   54474:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   54478:	0005883a 	mov	r2,zero
   5447c:	00000306 	br	5448c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   54480:	00bffa84 	movi	r2,-22
   54484:	00000106 	br	5448c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   54488:	00bfde84 	movi	r2,-134
  }
}
   5448c:	e037883a 	mov	sp,fp
   54490:	df000017 	ldw	fp,0(sp)
   54494:	dec00104 	addi	sp,sp,4
   54498:	f800283a 	ret

0005449c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   5449c:	defffa04 	addi	sp,sp,-24
   544a0:	dfc00515 	stw	ra,20(sp)
   544a4:	df000415 	stw	fp,16(sp)
   544a8:	df000404 	addi	fp,sp,16
   544ac:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   544b0:	008000c4 	movi	r2,3
   544b4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   544b8:	e0fffd17 	ldw	r3,-12(fp)
   544bc:	008003f4 	movhi	r2,15
   544c0:	10909004 	addi	r2,r2,16960
   544c4:	1885383a 	mul	r2,r3,r2
   544c8:	100b883a 	mov	r5,r2
   544cc:	01017db4 	movhi	r4,1526
   544d0:	21384004 	addi	r4,r4,-7936
   544d4:	00432780 	call	43278 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   544d8:	100b883a 	mov	r5,r2
   544dc:	01200034 	movhi	r4,32768
   544e0:	213fffc4 	addi	r4,r4,-1
   544e4:	00432780 	call	43278 <__udivsi3>
   544e8:	100b883a 	mov	r5,r2
   544ec:	e13fff17 	ldw	r4,-4(fp)
   544f0:	00432780 	call	43278 <__udivsi3>
   544f4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   544f8:	e0bffe17 	ldw	r2,-8(fp)
   544fc:	10002a26 	beq	r2,zero,545a8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   54500:	e03ffc15 	stw	zero,-16(fp)
   54504:	00001706 	br	54564 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   54508:	00a00034 	movhi	r2,32768
   5450c:	10bfffc4 	addi	r2,r2,-1
   54510:	10bfffc4 	addi	r2,r2,-1
   54514:	103ffe1e 	bne	r2,zero,54510 <__alt_data_end+0xfffed410>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   54518:	e0fffd17 	ldw	r3,-12(fp)
   5451c:	008003f4 	movhi	r2,15
   54520:	10909004 	addi	r2,r2,16960
   54524:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   54528:	100b883a 	mov	r5,r2
   5452c:	01017db4 	movhi	r4,1526
   54530:	21384004 	addi	r4,r4,-7936
   54534:	00432780 	call	43278 <__udivsi3>
   54538:	100b883a 	mov	r5,r2
   5453c:	01200034 	movhi	r4,32768
   54540:	213fffc4 	addi	r4,r4,-1
   54544:	00432780 	call	43278 <__udivsi3>
   54548:	1007883a 	mov	r3,r2
   5454c:	e0bfff17 	ldw	r2,-4(fp)
   54550:	10c5c83a 	sub	r2,r2,r3
   54554:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   54558:	e0bffc17 	ldw	r2,-16(fp)
   5455c:	10800044 	addi	r2,r2,1
   54560:	e0bffc15 	stw	r2,-16(fp)
   54564:	e0fffc17 	ldw	r3,-16(fp)
   54568:	e0bffe17 	ldw	r2,-8(fp)
   5456c:	18bfe616 	blt	r3,r2,54508 <__alt_data_end+0xfffed408>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   54570:	e0fffd17 	ldw	r3,-12(fp)
   54574:	008003f4 	movhi	r2,15
   54578:	10909004 	addi	r2,r2,16960
   5457c:	1885383a 	mul	r2,r3,r2
   54580:	100b883a 	mov	r5,r2
   54584:	01017db4 	movhi	r4,1526
   54588:	21384004 	addi	r4,r4,-7936
   5458c:	00432780 	call	43278 <__udivsi3>
   54590:	1007883a 	mov	r3,r2
   54594:	e0bfff17 	ldw	r2,-4(fp)
   54598:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   5459c:	10bfffc4 	addi	r2,r2,-1
   545a0:	103ffe1e 	bne	r2,zero,5459c <__alt_data_end+0xfffed49c>
   545a4:	00000d06 	br	545dc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   545a8:	e0fffd17 	ldw	r3,-12(fp)
   545ac:	008003f4 	movhi	r2,15
   545b0:	10909004 	addi	r2,r2,16960
   545b4:	1885383a 	mul	r2,r3,r2
   545b8:	100b883a 	mov	r5,r2
   545bc:	01017db4 	movhi	r4,1526
   545c0:	21384004 	addi	r4,r4,-7936
   545c4:	00432780 	call	43278 <__udivsi3>
   545c8:	1007883a 	mov	r3,r2
   545cc:	e0bfff17 	ldw	r2,-4(fp)
   545d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   545d4:	10bfffc4 	addi	r2,r2,-1
   545d8:	00bffe16 	blt	zero,r2,545d4 <__alt_data_end+0xfffed4d4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   545dc:	0005883a 	mov	r2,zero
}
   545e0:	e037883a 	mov	sp,fp
   545e4:	dfc00117 	ldw	ra,4(sp)
   545e8:	df000017 	ldw	fp,0(sp)
   545ec:	dec00204 	addi	sp,sp,8
   545f0:	f800283a 	ret

000545f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   545f4:	defffe04 	addi	sp,sp,-8
   545f8:	df000115 	stw	fp,4(sp)
   545fc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   54600:	e03fff15 	stw	zero,-4(fp)
   54604:	00000506 	br	5461c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   54608:	e0bfff17 	ldw	r2,-4(fp)
   5460c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   54610:	e0bfff17 	ldw	r2,-4(fp)
   54614:	10800804 	addi	r2,r2,32
   54618:	e0bfff15 	stw	r2,-4(fp)
   5461c:	e0bfff17 	ldw	r2,-4(fp)
   54620:	10820030 	cmpltui	r2,r2,2048
   54624:	103ff81e 	bne	r2,zero,54608 <__alt_data_end+0xfffed508>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   54628:	0001883a 	nop
   5462c:	e037883a 	mov	sp,fp
   54630:	df000017 	ldw	fp,0(sp)
   54634:	dec00104 	addi	sp,sp,4
   54638:	f800283a 	ret

0005463c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5463c:	defffe04 	addi	sp,sp,-8
   54640:	dfc00115 	stw	ra,4(sp)
   54644:	df000015 	stw	fp,0(sp)
   54648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5464c:	d0a00f17 	ldw	r2,-32708(gp)
   54650:	10000326 	beq	r2,zero,54660 <alt_get_errno+0x24>
   54654:	d0a00f17 	ldw	r2,-32708(gp)
   54658:	103ee83a 	callr	r2
   5465c:	00000106 	br	54664 <alt_get_errno+0x28>
   54660:	d0a6ec04 	addi	r2,gp,-25680
}
   54664:	e037883a 	mov	sp,fp
   54668:	dfc00117 	ldw	ra,4(sp)
   5466c:	df000017 	ldw	fp,0(sp)
   54670:	dec00204 	addi	sp,sp,8
   54674:	f800283a 	ret

00054678 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   54678:	defffa04 	addi	sp,sp,-24
   5467c:	dfc00515 	stw	ra,20(sp)
   54680:	df000415 	stw	fp,16(sp)
   54684:	df000404 	addi	fp,sp,16
   54688:	e13ffe15 	stw	r4,-8(fp)
   5468c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   54690:	e0bffe17 	ldw	r2,-8(fp)
   54694:	10000326 	beq	r2,zero,546a4 <alt_dev_llist_insert+0x2c>
   54698:	e0bffe17 	ldw	r2,-8(fp)
   5469c:	10800217 	ldw	r2,8(r2)
   546a0:	1000061e 	bne	r2,zero,546bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   546a4:	005463c0 	call	5463c <alt_get_errno>
   546a8:	1007883a 	mov	r3,r2
   546ac:	00800584 	movi	r2,22
   546b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   546b4:	00bffa84 	movi	r2,-22
   546b8:	00001306 	br	54708 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   546bc:	e0bffe17 	ldw	r2,-8(fp)
   546c0:	e0ffff17 	ldw	r3,-4(fp)
   546c4:	e0fffc15 	stw	r3,-16(fp)
   546c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   546cc:	e0bffd17 	ldw	r2,-12(fp)
   546d0:	e0fffc17 	ldw	r3,-16(fp)
   546d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   546d8:	e0bffc17 	ldw	r2,-16(fp)
   546dc:	10c00017 	ldw	r3,0(r2)
   546e0:	e0bffd17 	ldw	r2,-12(fp)
   546e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   546e8:	e0bffc17 	ldw	r2,-16(fp)
   546ec:	10800017 	ldw	r2,0(r2)
   546f0:	e0fffd17 	ldw	r3,-12(fp)
   546f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   546f8:	e0bffc17 	ldw	r2,-16(fp)
   546fc:	e0fffd17 	ldw	r3,-12(fp)
   54700:	10c00015 	stw	r3,0(r2)

  return 0;  
   54704:	0005883a 	mov	r2,zero
}
   54708:	e037883a 	mov	sp,fp
   5470c:	dfc00117 	ldw	ra,4(sp)
   54710:	df000017 	ldw	fp,0(sp)
   54714:	dec00204 	addi	sp,sp,8
   54718:	f800283a 	ret

0005471c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   5471c:	defffd04 	addi	sp,sp,-12
   54720:	dfc00215 	stw	ra,8(sp)
   54724:	df000115 	stw	fp,4(sp)
   54728:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5472c:	00800174 	movhi	r2,5
   54730:	1096b504 	addi	r2,r2,23252
   54734:	e0bfff15 	stw	r2,-4(fp)
   54738:	00000606 	br	54754 <_do_ctors+0x38>
        (*ctor) (); 
   5473c:	e0bfff17 	ldw	r2,-4(fp)
   54740:	10800017 	ldw	r2,0(r2)
   54744:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   54748:	e0bfff17 	ldw	r2,-4(fp)
   5474c:	10bfff04 	addi	r2,r2,-4
   54750:	e0bfff15 	stw	r2,-4(fp)
   54754:	e0ffff17 	ldw	r3,-4(fp)
   54758:	00800174 	movhi	r2,5
   5475c:	1096b604 	addi	r2,r2,23256
   54760:	18bff62e 	bgeu	r3,r2,5473c <__alt_data_end+0xfffed63c>
        (*ctor) (); 
}
   54764:	0001883a 	nop
   54768:	e037883a 	mov	sp,fp
   5476c:	dfc00117 	ldw	ra,4(sp)
   54770:	df000017 	ldw	fp,0(sp)
   54774:	dec00204 	addi	sp,sp,8
   54778:	f800283a 	ret

0005477c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   5477c:	defffd04 	addi	sp,sp,-12
   54780:	dfc00215 	stw	ra,8(sp)
   54784:	df000115 	stw	fp,4(sp)
   54788:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   5478c:	00800174 	movhi	r2,5
   54790:	1096b504 	addi	r2,r2,23252
   54794:	e0bfff15 	stw	r2,-4(fp)
   54798:	00000606 	br	547b4 <_do_dtors+0x38>
        (*dtor) (); 
   5479c:	e0bfff17 	ldw	r2,-4(fp)
   547a0:	10800017 	ldw	r2,0(r2)
   547a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   547a8:	e0bfff17 	ldw	r2,-4(fp)
   547ac:	10bfff04 	addi	r2,r2,-4
   547b0:	e0bfff15 	stw	r2,-4(fp)
   547b4:	e0ffff17 	ldw	r3,-4(fp)
   547b8:	00800174 	movhi	r2,5
   547bc:	1096b604 	addi	r2,r2,23256
   547c0:	18bff62e 	bgeu	r3,r2,5479c <__alt_data_end+0xfffed69c>
        (*dtor) (); 
}
   547c4:	0001883a 	nop
   547c8:	e037883a 	mov	sp,fp
   547cc:	dfc00117 	ldw	ra,4(sp)
   547d0:	df000017 	ldw	fp,0(sp)
   547d4:	dec00204 	addi	sp,sp,8
   547d8:	f800283a 	ret

000547dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   547dc:	defffa04 	addi	sp,sp,-24
   547e0:	dfc00515 	stw	ra,20(sp)
   547e4:	df000415 	stw	fp,16(sp)
   547e8:	df000404 	addi	fp,sp,16
   547ec:	e13ffe15 	stw	r4,-8(fp)
   547f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   547f4:	e0bfff17 	ldw	r2,-4(fp)
   547f8:	10800017 	ldw	r2,0(r2)
   547fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   54800:	e13ffe17 	ldw	r4,-8(fp)
   54804:	00471080 	call	47108 <strlen>
   54808:	10800044 	addi	r2,r2,1
   5480c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   54810:	00000d06 	br	54848 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   54814:	e0bffc17 	ldw	r2,-16(fp)
   54818:	10800217 	ldw	r2,8(r2)
   5481c:	e0fffd17 	ldw	r3,-12(fp)
   54820:	180d883a 	mov	r6,r3
   54824:	e17ffe17 	ldw	r5,-8(fp)
   54828:	1009883a 	mov	r4,r2
   5482c:	00556280 	call	55628 <memcmp>
   54830:	1000021e 	bne	r2,zero,5483c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   54834:	e0bffc17 	ldw	r2,-16(fp)
   54838:	00000706 	br	54858 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   5483c:	e0bffc17 	ldw	r2,-16(fp)
   54840:	10800017 	ldw	r2,0(r2)
   54844:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   54848:	e0fffc17 	ldw	r3,-16(fp)
   5484c:	e0bfff17 	ldw	r2,-4(fp)
   54850:	18bff01e 	bne	r3,r2,54814 <__alt_data_end+0xfffed714>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   54854:	0005883a 	mov	r2,zero
}
   54858:	e037883a 	mov	sp,fp
   5485c:	dfc00117 	ldw	ra,4(sp)
   54860:	df000017 	ldw	fp,0(sp)
   54864:	dec00204 	addi	sp,sp,8
   54868:	f800283a 	ret

0005486c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   5486c:	defffe04 	addi	sp,sp,-8
   54870:	dfc00115 	stw	ra,4(sp)
   54874:	df000015 	stw	fp,0(sp)
   54878:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   5487c:	01440004 	movi	r5,4096
   54880:	0009883a 	mov	r4,zero
   54884:	00554b00 	call	554b0 <alt_icache_flush>
#endif
}
   54888:	0001883a 	nop
   5488c:	e037883a 	mov	sp,fp
   54890:	dfc00117 	ldw	ra,4(sp)
   54894:	df000017 	ldw	fp,0(sp)
   54898:	dec00204 	addi	sp,sp,8
   5489c:	f800283a 	ret

000548a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   548a0:	defff904 	addi	sp,sp,-28
   548a4:	dfc00615 	stw	ra,24(sp)
   548a8:	df000515 	stw	fp,20(sp)
   548ac:	df000504 	addi	fp,sp,20
   548b0:	e13ffc15 	stw	r4,-16(fp)
   548b4:	e17ffd15 	stw	r5,-12(fp)
   548b8:	e1bffe15 	stw	r6,-8(fp)
   548bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   548c0:	e0800217 	ldw	r2,8(fp)
   548c4:	d8800015 	stw	r2,0(sp)
   548c8:	e1ffff17 	ldw	r7,-4(fp)
   548cc:	e1bffe17 	ldw	r6,-8(fp)
   548d0:	e17ffd17 	ldw	r5,-12(fp)
   548d4:	e13ffc17 	ldw	r4,-16(fp)
   548d8:	0054a500 	call	54a50 <alt_iic_isr_register>
}  
   548dc:	e037883a 	mov	sp,fp
   548e0:	dfc00117 	ldw	ra,4(sp)
   548e4:	df000017 	ldw	fp,0(sp)
   548e8:	dec00204 	addi	sp,sp,8
   548ec:	f800283a 	ret

000548f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   548f0:	defff904 	addi	sp,sp,-28
   548f4:	df000615 	stw	fp,24(sp)
   548f8:	df000604 	addi	fp,sp,24
   548fc:	e13ffe15 	stw	r4,-8(fp)
   54900:	e17fff15 	stw	r5,-4(fp)
   54904:	e0bfff17 	ldw	r2,-4(fp)
   54908:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5490c:	0005303a 	rdctl	r2,status
   54910:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54914:	e0fffb17 	ldw	r3,-20(fp)
   54918:	00bfff84 	movi	r2,-2
   5491c:	1884703a 	and	r2,r3,r2
   54920:	1001703a 	wrctl	status,r2
  
  return context;
   54924:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   54928:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   5492c:	00c00044 	movi	r3,1
   54930:	e0bffa17 	ldw	r2,-24(fp)
   54934:	1884983a 	sll	r2,r3,r2
   54938:	1007883a 	mov	r3,r2
   5493c:	d0a6f017 	ldw	r2,-25664(gp)
   54940:	1884b03a 	or	r2,r3,r2
   54944:	d0a6f015 	stw	r2,-25664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   54948:	d0a6f017 	ldw	r2,-25664(gp)
   5494c:	100170fa 	wrctl	ienable,r2
   54950:	e0bffc17 	ldw	r2,-16(fp)
   54954:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54958:	e0bffd17 	ldw	r2,-12(fp)
   5495c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   54960:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   54964:	0001883a 	nop
}
   54968:	e037883a 	mov	sp,fp
   5496c:	df000017 	ldw	fp,0(sp)
   54970:	dec00104 	addi	sp,sp,4
   54974:	f800283a 	ret

00054978 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   54978:	defff904 	addi	sp,sp,-28
   5497c:	df000615 	stw	fp,24(sp)
   54980:	df000604 	addi	fp,sp,24
   54984:	e13ffe15 	stw	r4,-8(fp)
   54988:	e17fff15 	stw	r5,-4(fp)
   5498c:	e0bfff17 	ldw	r2,-4(fp)
   54990:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54994:	0005303a 	rdctl	r2,status
   54998:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5499c:	e0fffb17 	ldw	r3,-20(fp)
   549a0:	00bfff84 	movi	r2,-2
   549a4:	1884703a 	and	r2,r3,r2
   549a8:	1001703a 	wrctl	status,r2
  
  return context;
   549ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   549b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   549b4:	00c00044 	movi	r3,1
   549b8:	e0bffa17 	ldw	r2,-24(fp)
   549bc:	1884983a 	sll	r2,r3,r2
   549c0:	0084303a 	nor	r2,zero,r2
   549c4:	1007883a 	mov	r3,r2
   549c8:	d0a6f017 	ldw	r2,-25664(gp)
   549cc:	1884703a 	and	r2,r3,r2
   549d0:	d0a6f015 	stw	r2,-25664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   549d4:	d0a6f017 	ldw	r2,-25664(gp)
   549d8:	100170fa 	wrctl	ienable,r2
   549dc:	e0bffc17 	ldw	r2,-16(fp)
   549e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   549e4:	e0bffd17 	ldw	r2,-12(fp)
   549e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   549ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   549f0:	0001883a 	nop
}
   549f4:	e037883a 	mov	sp,fp
   549f8:	df000017 	ldw	fp,0(sp)
   549fc:	dec00104 	addi	sp,sp,4
   54a00:	f800283a 	ret

00054a04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   54a04:	defffc04 	addi	sp,sp,-16
   54a08:	df000315 	stw	fp,12(sp)
   54a0c:	df000304 	addi	fp,sp,12
   54a10:	e13ffe15 	stw	r4,-8(fp)
   54a14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   54a18:	000530fa 	rdctl	r2,ienable
   54a1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   54a20:	00c00044 	movi	r3,1
   54a24:	e0bfff17 	ldw	r2,-4(fp)
   54a28:	1884983a 	sll	r2,r3,r2
   54a2c:	1007883a 	mov	r3,r2
   54a30:	e0bffd17 	ldw	r2,-12(fp)
   54a34:	1884703a 	and	r2,r3,r2
   54a38:	1004c03a 	cmpne	r2,r2,zero
   54a3c:	10803fcc 	andi	r2,r2,255
}
   54a40:	e037883a 	mov	sp,fp
   54a44:	df000017 	ldw	fp,0(sp)
   54a48:	dec00104 	addi	sp,sp,4
   54a4c:	f800283a 	ret

00054a50 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54a50:	defff504 	addi	sp,sp,-44
   54a54:	dfc00a15 	stw	ra,40(sp)
   54a58:	df000915 	stw	fp,36(sp)
   54a5c:	df000904 	addi	fp,sp,36
   54a60:	e13ffc15 	stw	r4,-16(fp)
   54a64:	e17ffd15 	stw	r5,-12(fp)
   54a68:	e1bffe15 	stw	r6,-8(fp)
   54a6c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   54a70:	00bffa84 	movi	r2,-22
   54a74:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   54a78:	e0bffd17 	ldw	r2,-12(fp)
   54a7c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   54a80:	e0bff817 	ldw	r2,-32(fp)
   54a84:	10800808 	cmpgei	r2,r2,32
   54a88:	1000271e 	bne	r2,zero,54b28 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54a8c:	0005303a 	rdctl	r2,status
   54a90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54a94:	e0fffb17 	ldw	r3,-20(fp)
   54a98:	00bfff84 	movi	r2,-2
   54a9c:	1884703a 	and	r2,r3,r2
   54aa0:	1001703a 	wrctl	status,r2
  
  return context;
   54aa4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   54aa8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   54aac:	008001b4 	movhi	r2,6
   54ab0:	10a56904 	addi	r2,r2,-27228
   54ab4:	e0fff817 	ldw	r3,-32(fp)
   54ab8:	180690fa 	slli	r3,r3,3
   54abc:	10c5883a 	add	r2,r2,r3
   54ac0:	e0fffe17 	ldw	r3,-8(fp)
   54ac4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   54ac8:	008001b4 	movhi	r2,6
   54acc:	10a56904 	addi	r2,r2,-27228
   54ad0:	e0fff817 	ldw	r3,-32(fp)
   54ad4:	180690fa 	slli	r3,r3,3
   54ad8:	10c5883a 	add	r2,r2,r3
   54adc:	10800104 	addi	r2,r2,4
   54ae0:	e0ffff17 	ldw	r3,-4(fp)
   54ae4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   54ae8:	e0bffe17 	ldw	r2,-8(fp)
   54aec:	10000526 	beq	r2,zero,54b04 <alt_iic_isr_register+0xb4>
   54af0:	e0bff817 	ldw	r2,-32(fp)
   54af4:	100b883a 	mov	r5,r2
   54af8:	e13ffc17 	ldw	r4,-16(fp)
   54afc:	00548f00 	call	548f0 <alt_ic_irq_enable>
   54b00:	00000406 	br	54b14 <alt_iic_isr_register+0xc4>
   54b04:	e0bff817 	ldw	r2,-32(fp)
   54b08:	100b883a 	mov	r5,r2
   54b0c:	e13ffc17 	ldw	r4,-16(fp)
   54b10:	00549780 	call	54978 <alt_ic_irq_disable>
   54b14:	e0bff715 	stw	r2,-36(fp)
   54b18:	e0bffa17 	ldw	r2,-24(fp)
   54b1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54b20:	e0bff917 	ldw	r2,-28(fp)
   54b24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   54b28:	e0bff717 	ldw	r2,-36(fp)
}
   54b2c:	e037883a 	mov	sp,fp
   54b30:	dfc00117 	ldw	ra,4(sp)
   54b34:	df000017 	ldw	fp,0(sp)
   54b38:	dec00204 	addi	sp,sp,8
   54b3c:	f800283a 	ret

00054b40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   54b40:	defff904 	addi	sp,sp,-28
   54b44:	dfc00615 	stw	ra,24(sp)
   54b48:	df000515 	stw	fp,20(sp)
   54b4c:	df000504 	addi	fp,sp,20
   54b50:	e13ffc15 	stw	r4,-16(fp)
   54b54:	e17ffd15 	stw	r5,-12(fp)
   54b58:	e1bffe15 	stw	r6,-8(fp)
   54b5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   54b60:	e1bfff17 	ldw	r6,-4(fp)
   54b64:	e17ffe17 	ldw	r5,-8(fp)
   54b68:	e13ffd17 	ldw	r4,-12(fp)
   54b6c:	0054d800 	call	54d80 <open>
   54b70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   54b74:	e0bffb17 	ldw	r2,-20(fp)
   54b78:	10001c16 	blt	r2,zero,54bec <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   54b7c:	00800174 	movhi	r2,5
   54b80:	1099e504 	addi	r2,r2,26516
   54b84:	e0fffb17 	ldw	r3,-20(fp)
   54b88:	18c00324 	muli	r3,r3,12
   54b8c:	10c5883a 	add	r2,r2,r3
   54b90:	10c00017 	ldw	r3,0(r2)
   54b94:	e0bffc17 	ldw	r2,-16(fp)
   54b98:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   54b9c:	00800174 	movhi	r2,5
   54ba0:	1099e504 	addi	r2,r2,26516
   54ba4:	e0fffb17 	ldw	r3,-20(fp)
   54ba8:	18c00324 	muli	r3,r3,12
   54bac:	10c5883a 	add	r2,r2,r3
   54bb0:	10800104 	addi	r2,r2,4
   54bb4:	10c00017 	ldw	r3,0(r2)
   54bb8:	e0bffc17 	ldw	r2,-16(fp)
   54bbc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   54bc0:	00800174 	movhi	r2,5
   54bc4:	1099e504 	addi	r2,r2,26516
   54bc8:	e0fffb17 	ldw	r3,-20(fp)
   54bcc:	18c00324 	muli	r3,r3,12
   54bd0:	10c5883a 	add	r2,r2,r3
   54bd4:	10800204 	addi	r2,r2,8
   54bd8:	10c00017 	ldw	r3,0(r2)
   54bdc:	e0bffc17 	ldw	r2,-16(fp)
   54be0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   54be4:	e13ffb17 	ldw	r4,-20(fp)
   54be8:	00518f00 	call	518f0 <alt_release_fd>
  }
} 
   54bec:	0001883a 	nop
   54bf0:	e037883a 	mov	sp,fp
   54bf4:	dfc00117 	ldw	ra,4(sp)
   54bf8:	df000017 	ldw	fp,0(sp)
   54bfc:	dec00204 	addi	sp,sp,8
   54c00:	f800283a 	ret

00054c04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   54c04:	defffb04 	addi	sp,sp,-20
   54c08:	dfc00415 	stw	ra,16(sp)
   54c0c:	df000315 	stw	fp,12(sp)
   54c10:	df000304 	addi	fp,sp,12
   54c14:	e13ffd15 	stw	r4,-12(fp)
   54c18:	e17ffe15 	stw	r5,-8(fp)
   54c1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   54c20:	01c07fc4 	movi	r7,511
   54c24:	01800044 	movi	r6,1
   54c28:	e17ffd17 	ldw	r5,-12(fp)
   54c2c:	01000174 	movhi	r4,5
   54c30:	2119e804 	addi	r4,r4,26528
   54c34:	0054b400 	call	54b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   54c38:	01c07fc4 	movi	r7,511
   54c3c:	000d883a 	mov	r6,zero
   54c40:	e17ffe17 	ldw	r5,-8(fp)
   54c44:	01000174 	movhi	r4,5
   54c48:	2119e504 	addi	r4,r4,26516
   54c4c:	0054b400 	call	54b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   54c50:	01c07fc4 	movi	r7,511
   54c54:	01800044 	movi	r6,1
   54c58:	e17fff17 	ldw	r5,-4(fp)
   54c5c:	01000174 	movhi	r4,5
   54c60:	2119eb04 	addi	r4,r4,26540
   54c64:	0054b400 	call	54b40 <alt_open_fd>
}  
   54c68:	0001883a 	nop
   54c6c:	e037883a 	mov	sp,fp
   54c70:	dfc00117 	ldw	ra,4(sp)
   54c74:	df000017 	ldw	fp,0(sp)
   54c78:	dec00204 	addi	sp,sp,8
   54c7c:	f800283a 	ret

00054c80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54c80:	defffe04 	addi	sp,sp,-8
   54c84:	dfc00115 	stw	ra,4(sp)
   54c88:	df000015 	stw	fp,0(sp)
   54c8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54c90:	d0a00f17 	ldw	r2,-32708(gp)
   54c94:	10000326 	beq	r2,zero,54ca4 <alt_get_errno+0x24>
   54c98:	d0a00f17 	ldw	r2,-32708(gp)
   54c9c:	103ee83a 	callr	r2
   54ca0:	00000106 	br	54ca8 <alt_get_errno+0x28>
   54ca4:	d0a6ec04 	addi	r2,gp,-25680
}
   54ca8:	e037883a 	mov	sp,fp
   54cac:	dfc00117 	ldw	ra,4(sp)
   54cb0:	df000017 	ldw	fp,0(sp)
   54cb4:	dec00204 	addi	sp,sp,8
   54cb8:	f800283a 	ret

00054cbc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   54cbc:	defffd04 	addi	sp,sp,-12
   54cc0:	df000215 	stw	fp,8(sp)
   54cc4:	df000204 	addi	fp,sp,8
   54cc8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   54ccc:	e0bfff17 	ldw	r2,-4(fp)
   54cd0:	10800217 	ldw	r2,8(r2)
   54cd4:	10d00034 	orhi	r3,r2,16384
   54cd8:	e0bfff17 	ldw	r2,-4(fp)
   54cdc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   54ce0:	e03ffe15 	stw	zero,-8(fp)
   54ce4:	00001d06 	br	54d5c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   54ce8:	00800174 	movhi	r2,5
   54cec:	1099e504 	addi	r2,r2,26516
   54cf0:	e0fffe17 	ldw	r3,-8(fp)
   54cf4:	18c00324 	muli	r3,r3,12
   54cf8:	10c5883a 	add	r2,r2,r3
   54cfc:	10c00017 	ldw	r3,0(r2)
   54d00:	e0bfff17 	ldw	r2,-4(fp)
   54d04:	10800017 	ldw	r2,0(r2)
   54d08:	1880111e 	bne	r3,r2,54d50 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   54d0c:	00800174 	movhi	r2,5
   54d10:	1099e504 	addi	r2,r2,26516
   54d14:	e0fffe17 	ldw	r3,-8(fp)
   54d18:	18c00324 	muli	r3,r3,12
   54d1c:	10c5883a 	add	r2,r2,r3
   54d20:	10800204 	addi	r2,r2,8
   54d24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   54d28:	1000090e 	bge	r2,zero,54d50 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   54d2c:	e0bffe17 	ldw	r2,-8(fp)
   54d30:	10c00324 	muli	r3,r2,12
   54d34:	00800174 	movhi	r2,5
   54d38:	1099e504 	addi	r2,r2,26516
   54d3c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   54d40:	e0bfff17 	ldw	r2,-4(fp)
   54d44:	18800226 	beq	r3,r2,54d50 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   54d48:	00bffcc4 	movi	r2,-13
   54d4c:	00000806 	br	54d70 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   54d50:	e0bffe17 	ldw	r2,-8(fp)
   54d54:	10800044 	addi	r2,r2,1
   54d58:	e0bffe15 	stw	r2,-8(fp)
   54d5c:	d0a00e17 	ldw	r2,-32712(gp)
   54d60:	1007883a 	mov	r3,r2
   54d64:	e0bffe17 	ldw	r2,-8(fp)
   54d68:	18bfdf2e 	bgeu	r3,r2,54ce8 <__alt_data_end+0xfffedbe8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   54d6c:	0005883a 	mov	r2,zero
}
   54d70:	e037883a 	mov	sp,fp
   54d74:	df000017 	ldw	fp,0(sp)
   54d78:	dec00104 	addi	sp,sp,4
   54d7c:	f800283a 	ret

00054d80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   54d80:	defff604 	addi	sp,sp,-40
   54d84:	dfc00915 	stw	ra,36(sp)
   54d88:	df000815 	stw	fp,32(sp)
   54d8c:	df000804 	addi	fp,sp,32
   54d90:	e13ffd15 	stw	r4,-12(fp)
   54d94:	e17ffe15 	stw	r5,-8(fp)
   54d98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   54d9c:	00bfffc4 	movi	r2,-1
   54da0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   54da4:	00bffb44 	movi	r2,-19
   54da8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   54dac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   54db0:	d1600c04 	addi	r5,gp,-32720
   54db4:	e13ffd17 	ldw	r4,-12(fp)
   54db8:	00547dc0 	call	547dc <alt_find_dev>
   54dbc:	e0bff815 	stw	r2,-32(fp)
   54dc0:	e0bff817 	ldw	r2,-32(fp)
   54dc4:	1000051e 	bne	r2,zero,54ddc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   54dc8:	e13ffd17 	ldw	r4,-12(fp)
   54dcc:	00553040 	call	55304 <alt_find_file>
   54dd0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   54dd4:	00800044 	movi	r2,1
   54dd8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   54ddc:	e0bff817 	ldw	r2,-32(fp)
   54de0:	10002926 	beq	r2,zero,54e88 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   54de4:	e13ff817 	ldw	r4,-32(fp)
   54de8:	005540c0 	call	5540c <alt_get_fd>
   54dec:	e0bff915 	stw	r2,-28(fp)
   54df0:	e0bff917 	ldw	r2,-28(fp)
   54df4:	1000030e 	bge	r2,zero,54e04 <open+0x84>
    {
      status = index;
   54df8:	e0bff917 	ldw	r2,-28(fp)
   54dfc:	e0bffa15 	stw	r2,-24(fp)
   54e00:	00002306 	br	54e90 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   54e04:	e0bff917 	ldw	r2,-28(fp)
   54e08:	10c00324 	muli	r3,r2,12
   54e0c:	00800174 	movhi	r2,5
   54e10:	1099e504 	addi	r2,r2,26516
   54e14:	1885883a 	add	r2,r3,r2
   54e18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   54e1c:	e0fffe17 	ldw	r3,-8(fp)
   54e20:	00900034 	movhi	r2,16384
   54e24:	10bfffc4 	addi	r2,r2,-1
   54e28:	1886703a 	and	r3,r3,r2
   54e2c:	e0bffc17 	ldw	r2,-16(fp)
   54e30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   54e34:	e0bffb17 	ldw	r2,-20(fp)
   54e38:	1000051e 	bne	r2,zero,54e50 <open+0xd0>
   54e3c:	e13ffc17 	ldw	r4,-16(fp)
   54e40:	0054cbc0 	call	54cbc <alt_file_locked>
   54e44:	e0bffa15 	stw	r2,-24(fp)
   54e48:	e0bffa17 	ldw	r2,-24(fp)
   54e4c:	10001016 	blt	r2,zero,54e90 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   54e50:	e0bff817 	ldw	r2,-32(fp)
   54e54:	10800317 	ldw	r2,12(r2)
   54e58:	10000826 	beq	r2,zero,54e7c <open+0xfc>
   54e5c:	e0bff817 	ldw	r2,-32(fp)
   54e60:	10800317 	ldw	r2,12(r2)
   54e64:	e1ffff17 	ldw	r7,-4(fp)
   54e68:	e1bffe17 	ldw	r6,-8(fp)
   54e6c:	e17ffd17 	ldw	r5,-12(fp)
   54e70:	e13ffc17 	ldw	r4,-16(fp)
   54e74:	103ee83a 	callr	r2
   54e78:	00000106 	br	54e80 <open+0x100>
   54e7c:	0005883a 	mov	r2,zero
   54e80:	e0bffa15 	stw	r2,-24(fp)
   54e84:	00000206 	br	54e90 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   54e88:	00bffb44 	movi	r2,-19
   54e8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   54e90:	e0bffa17 	ldw	r2,-24(fp)
   54e94:	1000090e 	bge	r2,zero,54ebc <open+0x13c>
  {
    alt_release_fd (index);  
   54e98:	e13ff917 	ldw	r4,-28(fp)
   54e9c:	00518f00 	call	518f0 <alt_release_fd>
    ALT_ERRNO = -status;
   54ea0:	0054c800 	call	54c80 <alt_get_errno>
   54ea4:	1007883a 	mov	r3,r2
   54ea8:	e0bffa17 	ldw	r2,-24(fp)
   54eac:	0085c83a 	sub	r2,zero,r2
   54eb0:	18800015 	stw	r2,0(r3)
    return -1;
   54eb4:	00bfffc4 	movi	r2,-1
   54eb8:	00000106 	br	54ec0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   54ebc:	e0bff917 	ldw	r2,-28(fp)
}
   54ec0:	e037883a 	mov	sp,fp
   54ec4:	dfc00117 	ldw	ra,4(sp)
   54ec8:	df000017 	ldw	fp,0(sp)
   54ecc:	dec00204 	addi	sp,sp,8
   54ed0:	f800283a 	ret

00054ed4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   54ed4:	defff204 	addi	sp,sp,-56
   54ed8:	dfc00a15 	stw	ra,40(sp)
   54edc:	df000915 	stw	fp,36(sp)
   54ee0:	df000904 	addi	fp,sp,36
   54ee4:	e13fff15 	stw	r4,-4(fp)
   54ee8:	e1400215 	stw	r5,8(fp)
   54eec:	e1800315 	stw	r6,12(fp)
   54ef0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   54ef4:	e0800204 	addi	r2,fp,8
   54ef8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   54efc:	e0bfff17 	ldw	r2,-4(fp)
   54f00:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   54f04:	00006f06 	br	550c4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   54f08:	e0bff807 	ldb	r2,-32(fp)
   54f0c:	10800960 	cmpeqi	r2,r2,37
   54f10:	1000041e 	bne	r2,zero,54f24 <alt_printf+0x50>
        {
            alt_putchar(c);
   54f14:	e0bff807 	ldb	r2,-32(fp)
   54f18:	1009883a 	mov	r4,r2
   54f1c:	00551000 	call	55100 <alt_putchar>
   54f20:	00006806 	br	550c4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   54f24:	e0bff717 	ldw	r2,-36(fp)
   54f28:	10c00044 	addi	r3,r2,1
   54f2c:	e0fff715 	stw	r3,-36(fp)
   54f30:	10800003 	ldbu	r2,0(r2)
   54f34:	e0bff805 	stb	r2,-32(fp)
   54f38:	e0bff807 	ldb	r2,-32(fp)
   54f3c:	10006926 	beq	r2,zero,550e4 <alt_printf+0x210>
            {
                if (c == '%')
   54f40:	e0bff807 	ldb	r2,-32(fp)
   54f44:	10800958 	cmpnei	r2,r2,37
   54f48:	1000041e 	bne	r2,zero,54f5c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   54f4c:	e0bff807 	ldb	r2,-32(fp)
   54f50:	1009883a 	mov	r4,r2
   54f54:	00551000 	call	55100 <alt_putchar>
   54f58:	00005a06 	br	550c4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   54f5c:	e0bff807 	ldb	r2,-32(fp)
   54f60:	108018d8 	cmpnei	r2,r2,99
   54f64:	1000081e 	bne	r2,zero,54f88 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   54f68:	e0bffe17 	ldw	r2,-8(fp)
   54f6c:	10c00104 	addi	r3,r2,4
   54f70:	e0fffe15 	stw	r3,-8(fp)
   54f74:	10800017 	ldw	r2,0(r2)
   54f78:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   54f7c:	e13ffd17 	ldw	r4,-12(fp)
   54f80:	00551000 	call	55100 <alt_putchar>
   54f84:	00004f06 	br	550c4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   54f88:	e0bff807 	ldb	r2,-32(fp)
   54f8c:	10801e18 	cmpnei	r2,r2,120
   54f90:	1000341e 	bne	r2,zero,55064 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   54f94:	e0bffe17 	ldw	r2,-8(fp)
   54f98:	10c00104 	addi	r3,r2,4
   54f9c:	e0fffe15 	stw	r3,-8(fp)
   54fa0:	10800017 	ldw	r2,0(r2)
   54fa4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   54fa8:	e0bffb17 	ldw	r2,-20(fp)
   54fac:	1000031e 	bne	r2,zero,54fbc <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   54fb0:	01000c04 	movi	r4,48
   54fb4:	00551000 	call	55100 <alt_putchar>
                        continue;
   54fb8:	00004206 	br	550c4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   54fbc:	00800704 	movi	r2,28
   54fc0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   54fc4:	00000306 	br	54fd4 <alt_printf+0x100>
                        digit_shift -= 4;
   54fc8:	e0bff917 	ldw	r2,-28(fp)
   54fcc:	10bfff04 	addi	r2,r2,-4
   54fd0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   54fd4:	00c003c4 	movi	r3,15
   54fd8:	e0bff917 	ldw	r2,-28(fp)
   54fdc:	1884983a 	sll	r2,r3,r2
   54fe0:	1007883a 	mov	r3,r2
   54fe4:	e0bffb17 	ldw	r2,-20(fp)
   54fe8:	1884703a 	and	r2,r3,r2
   54fec:	103ff626 	beq	r2,zero,54fc8 <__alt_data_end+0xfffedec8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   54ff0:	00001906 	br	55058 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   54ff4:	00c003c4 	movi	r3,15
   54ff8:	e0bff917 	ldw	r2,-28(fp)
   54ffc:	1884983a 	sll	r2,r3,r2
   55000:	1007883a 	mov	r3,r2
   55004:	e0bffb17 	ldw	r2,-20(fp)
   55008:	1886703a 	and	r3,r3,r2
   5500c:	e0bff917 	ldw	r2,-28(fp)
   55010:	1884d83a 	srl	r2,r3,r2
   55014:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   55018:	e0bffc17 	ldw	r2,-16(fp)
   5501c:	108002a8 	cmpgeui	r2,r2,10
   55020:	1000041e 	bne	r2,zero,55034 <alt_printf+0x160>
                            c = '0' + digit;
   55024:	e0bffc17 	ldw	r2,-16(fp)
   55028:	10800c04 	addi	r2,r2,48
   5502c:	e0bff805 	stb	r2,-32(fp)
   55030:	00000306 	br	55040 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   55034:	e0bffc17 	ldw	r2,-16(fp)
   55038:	108015c4 	addi	r2,r2,87
   5503c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   55040:	e0bff807 	ldb	r2,-32(fp)
   55044:	1009883a 	mov	r4,r2
   55048:	00551000 	call	55100 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   5504c:	e0bff917 	ldw	r2,-28(fp)
   55050:	10bfff04 	addi	r2,r2,-4
   55054:	e0bff915 	stw	r2,-28(fp)
   55058:	e0bff917 	ldw	r2,-28(fp)
   5505c:	103fe50e 	bge	r2,zero,54ff4 <__alt_data_end+0xfffedef4>
   55060:	00001806 	br	550c4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   55064:	e0bff807 	ldb	r2,-32(fp)
   55068:	10801cd8 	cmpnei	r2,r2,115
   5506c:	1000151e 	bne	r2,zero,550c4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   55070:	e0bffe17 	ldw	r2,-8(fp)
   55074:	10c00104 	addi	r3,r2,4
   55078:	e0fffe15 	stw	r3,-8(fp)
   5507c:	10800017 	ldw	r2,0(r2)
   55080:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   55084:	00000906 	br	550ac <alt_printf+0x1d8>
                      alt_putchar(*s++);
   55088:	e0bffa17 	ldw	r2,-24(fp)
   5508c:	10c00044 	addi	r3,r2,1
   55090:	e0fffa15 	stw	r3,-24(fp)
   55094:	10800003 	ldbu	r2,0(r2)
   55098:	10803fcc 	andi	r2,r2,255
   5509c:	1080201c 	xori	r2,r2,128
   550a0:	10bfe004 	addi	r2,r2,-128
   550a4:	1009883a 	mov	r4,r2
   550a8:	00551000 	call	55100 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   550ac:	e0bffa17 	ldw	r2,-24(fp)
   550b0:	10800003 	ldbu	r2,0(r2)
   550b4:	10803fcc 	andi	r2,r2,255
   550b8:	1080201c 	xori	r2,r2,128
   550bc:	10bfe004 	addi	r2,r2,-128
   550c0:	103ff11e 	bne	r2,zero,55088 <__alt_data_end+0xfffedf88>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   550c4:	e0bff717 	ldw	r2,-36(fp)
   550c8:	10c00044 	addi	r3,r2,1
   550cc:	e0fff715 	stw	r3,-36(fp)
   550d0:	10800003 	ldbu	r2,0(r2)
   550d4:	e0bff805 	stb	r2,-32(fp)
   550d8:	e0bff807 	ldb	r2,-32(fp)
   550dc:	103f8a1e 	bne	r2,zero,54f08 <__alt_data_end+0xfffede08>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   550e0:	00000106 	br	550e8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   550e4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   550e8:	0001883a 	nop
   550ec:	e037883a 	mov	sp,fp
   550f0:	dfc00117 	ldw	ra,4(sp)
   550f4:	df000017 	ldw	fp,0(sp)
   550f8:	dec00504 	addi	sp,sp,20
   550fc:	f800283a 	ret

00055100 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   55100:	defffd04 	addi	sp,sp,-12
   55104:	dfc00215 	stw	ra,8(sp)
   55108:	df000115 	stw	fp,4(sp)
   5510c:	df000104 	addi	fp,sp,4
   55110:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   55114:	d0a00517 	ldw	r2,-32748(gp)
   55118:	10800217 	ldw	r2,8(r2)
   5511c:	100b883a 	mov	r5,r2
   55120:	e13fff17 	ldw	r4,-4(fp)
   55124:	00557440 	call	55744 <putc>
#endif
#endif
}
   55128:	e037883a 	mov	sp,fp
   5512c:	dfc00117 	ldw	ra,4(sp)
   55130:	df000017 	ldw	fp,0(sp)
   55134:	dec00204 	addi	sp,sp,8
   55138:	f800283a 	ret

0005513c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   5513c:	defffa04 	addi	sp,sp,-24
   55140:	df000515 	stw	fp,20(sp)
   55144:	df000504 	addi	fp,sp,20
   55148:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5514c:	0005303a 	rdctl	r2,status
   55150:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   55154:	e0fffc17 	ldw	r3,-16(fp)
   55158:	00bfff84 	movi	r2,-2
   5515c:	1884703a 	and	r2,r3,r2
   55160:	1001703a 	wrctl	status,r2
  
  return context;
   55164:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   55168:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   5516c:	e0bfff17 	ldw	r2,-4(fp)
   55170:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   55174:	e0bffd17 	ldw	r2,-12(fp)
   55178:	10800017 	ldw	r2,0(r2)
   5517c:	e0fffd17 	ldw	r3,-12(fp)
   55180:	18c00117 	ldw	r3,4(r3)
   55184:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   55188:	e0bffd17 	ldw	r2,-12(fp)
   5518c:	10800117 	ldw	r2,4(r2)
   55190:	e0fffd17 	ldw	r3,-12(fp)
   55194:	18c00017 	ldw	r3,0(r3)
   55198:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   5519c:	e0bffd17 	ldw	r2,-12(fp)
   551a0:	e0fffd17 	ldw	r3,-12(fp)
   551a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   551a8:	e0bffd17 	ldw	r2,-12(fp)
   551ac:	e0fffd17 	ldw	r3,-12(fp)
   551b0:	10c00015 	stw	r3,0(r2)
   551b4:	e0bffb17 	ldw	r2,-20(fp)
   551b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   551bc:	e0bffe17 	ldw	r2,-8(fp)
   551c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   551c4:	0001883a 	nop
   551c8:	e037883a 	mov	sp,fp
   551cc:	df000017 	ldw	fp,0(sp)
   551d0:	dec00104 	addi	sp,sp,4
   551d4:	f800283a 	ret

000551d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   551d8:	defffb04 	addi	sp,sp,-20
   551dc:	dfc00415 	stw	ra,16(sp)
   551e0:	df000315 	stw	fp,12(sp)
   551e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   551e8:	d0a01417 	ldw	r2,-32688(gp)
   551ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   551f0:	d0a6f217 	ldw	r2,-25656(gp)
   551f4:	10800044 	addi	r2,r2,1
   551f8:	d0a6f215 	stw	r2,-25656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   551fc:	00002e06 	br	552b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   55200:	e0bffd17 	ldw	r2,-12(fp)
   55204:	10800017 	ldw	r2,0(r2)
   55208:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   5520c:	e0bffd17 	ldw	r2,-12(fp)
   55210:	10800403 	ldbu	r2,16(r2)
   55214:	10803fcc 	andi	r2,r2,255
   55218:	10000426 	beq	r2,zero,5522c <alt_tick+0x54>
   5521c:	d0a6f217 	ldw	r2,-25656(gp)
   55220:	1000021e 	bne	r2,zero,5522c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   55224:	e0bffd17 	ldw	r2,-12(fp)
   55228:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   5522c:	e0bffd17 	ldw	r2,-12(fp)
   55230:	10800217 	ldw	r2,8(r2)
   55234:	d0e6f217 	ldw	r3,-25656(gp)
   55238:	18801d36 	bltu	r3,r2,552b0 <alt_tick+0xd8>
   5523c:	e0bffd17 	ldw	r2,-12(fp)
   55240:	10800403 	ldbu	r2,16(r2)
   55244:	10803fcc 	andi	r2,r2,255
   55248:	1000191e 	bne	r2,zero,552b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   5524c:	e0bffd17 	ldw	r2,-12(fp)
   55250:	10800317 	ldw	r2,12(r2)
   55254:	e0fffd17 	ldw	r3,-12(fp)
   55258:	18c00517 	ldw	r3,20(r3)
   5525c:	1809883a 	mov	r4,r3
   55260:	103ee83a 	callr	r2
   55264:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   55268:	e0bfff17 	ldw	r2,-4(fp)
   5526c:	1000031e 	bne	r2,zero,5527c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   55270:	e13ffd17 	ldw	r4,-12(fp)
   55274:	005513c0 	call	5513c <alt_alarm_stop>
   55278:	00000d06 	br	552b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   5527c:	e0bffd17 	ldw	r2,-12(fp)
   55280:	10c00217 	ldw	r3,8(r2)
   55284:	e0bfff17 	ldw	r2,-4(fp)
   55288:	1887883a 	add	r3,r3,r2
   5528c:	e0bffd17 	ldw	r2,-12(fp)
   55290:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   55294:	e0bffd17 	ldw	r2,-12(fp)
   55298:	10c00217 	ldw	r3,8(r2)
   5529c:	d0a6f217 	ldw	r2,-25656(gp)
   552a0:	1880032e 	bgeu	r3,r2,552b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   552a4:	e0bffd17 	ldw	r2,-12(fp)
   552a8:	00c00044 	movi	r3,1
   552ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   552b0:	e0bffe17 	ldw	r2,-8(fp)
   552b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   552b8:	e0fffd17 	ldw	r3,-12(fp)
   552bc:	d0a01404 	addi	r2,gp,-32688
   552c0:	18bfcf1e 	bne	r3,r2,55200 <__alt_data_end+0xfffee100>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   552c4:	0001883a 	nop
}
   552c8:	0001883a 	nop
   552cc:	e037883a 	mov	sp,fp
   552d0:	dfc00117 	ldw	ra,4(sp)
   552d4:	df000017 	ldw	fp,0(sp)
   552d8:	dec00204 	addi	sp,sp,8
   552dc:	f800283a 	ret

000552e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   552e0:	deffff04 	addi	sp,sp,-4
   552e4:	df000015 	stw	fp,0(sp)
   552e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   552ec:	000170fa 	wrctl	ienable,zero
}
   552f0:	0001883a 	nop
   552f4:	e037883a 	mov	sp,fp
   552f8:	df000017 	ldw	fp,0(sp)
   552fc:	dec00104 	addi	sp,sp,4
   55300:	f800283a 	ret

00055304 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   55304:	defffb04 	addi	sp,sp,-20
   55308:	dfc00415 	stw	ra,16(sp)
   5530c:	df000315 	stw	fp,12(sp)
   55310:	df000304 	addi	fp,sp,12
   55314:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   55318:	d0a00a17 	ldw	r2,-32728(gp)
   5531c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   55320:	00003106 	br	553e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   55324:	e0bffd17 	ldw	r2,-12(fp)
   55328:	10800217 	ldw	r2,8(r2)
   5532c:	1009883a 	mov	r4,r2
   55330:	00471080 	call	47108 <strlen>
   55334:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   55338:	e0bffd17 	ldw	r2,-12(fp)
   5533c:	10c00217 	ldw	r3,8(r2)
   55340:	e0bffe17 	ldw	r2,-8(fp)
   55344:	10bfffc4 	addi	r2,r2,-1
   55348:	1885883a 	add	r2,r3,r2
   5534c:	10800003 	ldbu	r2,0(r2)
   55350:	10803fcc 	andi	r2,r2,255
   55354:	1080201c 	xori	r2,r2,128
   55358:	10bfe004 	addi	r2,r2,-128
   5535c:	10800bd8 	cmpnei	r2,r2,47
   55360:	1000031e 	bne	r2,zero,55370 <alt_find_file+0x6c>
    {
      len -= 1;
   55364:	e0bffe17 	ldw	r2,-8(fp)
   55368:	10bfffc4 	addi	r2,r2,-1
   5536c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   55370:	e0bffe17 	ldw	r2,-8(fp)
   55374:	e0ffff17 	ldw	r3,-4(fp)
   55378:	1885883a 	add	r2,r3,r2
   5537c:	10800003 	ldbu	r2,0(r2)
   55380:	10803fcc 	andi	r2,r2,255
   55384:	1080201c 	xori	r2,r2,128
   55388:	10bfe004 	addi	r2,r2,-128
   5538c:	10800be0 	cmpeqi	r2,r2,47
   55390:	1000081e 	bne	r2,zero,553b4 <alt_find_file+0xb0>
   55394:	e0bffe17 	ldw	r2,-8(fp)
   55398:	e0ffff17 	ldw	r3,-4(fp)
   5539c:	1885883a 	add	r2,r3,r2
   553a0:	10800003 	ldbu	r2,0(r2)
   553a4:	10803fcc 	andi	r2,r2,255
   553a8:	1080201c 	xori	r2,r2,128
   553ac:	10bfe004 	addi	r2,r2,-128
   553b0:	10000a1e 	bne	r2,zero,553dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   553b4:	e0bffd17 	ldw	r2,-12(fp)
   553b8:	10800217 	ldw	r2,8(r2)
   553bc:	e0fffe17 	ldw	r3,-8(fp)
   553c0:	180d883a 	mov	r6,r3
   553c4:	e17fff17 	ldw	r5,-4(fp)
   553c8:	1009883a 	mov	r4,r2
   553cc:	00556280 	call	55628 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   553d0:	1000021e 	bne	r2,zero,553dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   553d4:	e0bffd17 	ldw	r2,-12(fp)
   553d8:	00000706 	br	553f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   553dc:	e0bffd17 	ldw	r2,-12(fp)
   553e0:	10800017 	ldw	r2,0(r2)
   553e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   553e8:	e0fffd17 	ldw	r3,-12(fp)
   553ec:	d0a00a04 	addi	r2,gp,-32728
   553f0:	18bfcc1e 	bne	r3,r2,55324 <__alt_data_end+0xfffee224>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   553f4:	0005883a 	mov	r2,zero
}
   553f8:	e037883a 	mov	sp,fp
   553fc:	dfc00117 	ldw	ra,4(sp)
   55400:	df000017 	ldw	fp,0(sp)
   55404:	dec00204 	addi	sp,sp,8
   55408:	f800283a 	ret

0005540c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   5540c:	defffc04 	addi	sp,sp,-16
   55410:	df000315 	stw	fp,12(sp)
   55414:	df000304 	addi	fp,sp,12
   55418:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   5541c:	00bffa04 	movi	r2,-24
   55420:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   55424:	e03ffd15 	stw	zero,-12(fp)
   55428:	00001906 	br	55490 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   5542c:	00800174 	movhi	r2,5
   55430:	1099e504 	addi	r2,r2,26516
   55434:	e0fffd17 	ldw	r3,-12(fp)
   55438:	18c00324 	muli	r3,r3,12
   5543c:	10c5883a 	add	r2,r2,r3
   55440:	10800017 	ldw	r2,0(r2)
   55444:	10000f1e 	bne	r2,zero,55484 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   55448:	00800174 	movhi	r2,5
   5544c:	1099e504 	addi	r2,r2,26516
   55450:	e0fffd17 	ldw	r3,-12(fp)
   55454:	18c00324 	muli	r3,r3,12
   55458:	10c5883a 	add	r2,r2,r3
   5545c:	e0ffff17 	ldw	r3,-4(fp)
   55460:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   55464:	d0e00e17 	ldw	r3,-32712(gp)
   55468:	e0bffd17 	ldw	r2,-12(fp)
   5546c:	1880020e 	bge	r3,r2,55478 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   55470:	e0bffd17 	ldw	r2,-12(fp)
   55474:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   55478:	e0bffd17 	ldw	r2,-12(fp)
   5547c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   55480:	00000606 	br	5549c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   55484:	e0bffd17 	ldw	r2,-12(fp)
   55488:	10800044 	addi	r2,r2,1
   5548c:	e0bffd15 	stw	r2,-12(fp)
   55490:	e0bffd17 	ldw	r2,-12(fp)
   55494:	10800810 	cmplti	r2,r2,32
   55498:	103fe41e 	bne	r2,zero,5542c <__alt_data_end+0xfffee32c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   5549c:	e0bffe17 	ldw	r2,-8(fp)
}
   554a0:	e037883a 	mov	sp,fp
   554a4:	df000017 	ldw	fp,0(sp)
   554a8:	dec00104 	addi	sp,sp,4
   554ac:	f800283a 	ret

000554b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   554b0:	defffb04 	addi	sp,sp,-20
   554b4:	df000415 	stw	fp,16(sp)
   554b8:	df000404 	addi	fp,sp,16
   554bc:	e13ffe15 	stw	r4,-8(fp)
   554c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   554c4:	e0bfff17 	ldw	r2,-4(fp)
   554c8:	10840070 	cmpltui	r2,r2,4097
   554cc:	1000021e 	bne	r2,zero,554d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   554d0:	00840004 	movi	r2,4096
   554d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   554d8:	e0fffe17 	ldw	r3,-8(fp)
   554dc:	e0bfff17 	ldw	r2,-4(fp)
   554e0:	1885883a 	add	r2,r3,r2
   554e4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   554e8:	e0bffe17 	ldw	r2,-8(fp)
   554ec:	e0bffc15 	stw	r2,-16(fp)
   554f0:	00000506 	br	55508 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   554f4:	e0bffc17 	ldw	r2,-16(fp)
   554f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   554fc:	e0bffc17 	ldw	r2,-16(fp)
   55500:	10800804 	addi	r2,r2,32
   55504:	e0bffc15 	stw	r2,-16(fp)
   55508:	e0fffc17 	ldw	r3,-16(fp)
   5550c:	e0bffd17 	ldw	r2,-12(fp)
   55510:	18bff836 	bltu	r3,r2,554f4 <__alt_data_end+0xfffee3f4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   55514:	e0bffe17 	ldw	r2,-8(fp)
   55518:	108007cc 	andi	r2,r2,31
   5551c:	10000226 	beq	r2,zero,55528 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   55520:	e0bffc17 	ldw	r2,-16(fp)
   55524:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   55528:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   5552c:	0001883a 	nop
   55530:	e037883a 	mov	sp,fp
   55534:	df000017 	ldw	fp,0(sp)
   55538:	dec00104 	addi	sp,sp,4
   5553c:	f800283a 	ret

00055540 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   55540:	defffe04 	addi	sp,sp,-8
   55544:	df000115 	stw	fp,4(sp)
   55548:	df000104 	addi	fp,sp,4
   5554c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   55550:	e0bfff17 	ldw	r2,-4(fp)
   55554:	10bffe84 	addi	r2,r2,-6
   55558:	10c00428 	cmpgeui	r3,r2,16
   5555c:	18001a1e 	bne	r3,zero,555c8 <alt_exception_cause_generated_bad_addr+0x88>
   55560:	100690ba 	slli	r3,r2,2
   55564:	00800174 	movhi	r2,5
   55568:	10955e04 	addi	r2,r2,21880
   5556c:	1885883a 	add	r2,r3,r2
   55570:	10800017 	ldw	r2,0(r2)
   55574:	1000683a 	jmp	r2
   55578:	000555b8 	rdprs	zero,zero,5462
   5557c:	000555b8 	rdprs	zero,zero,5462
   55580:	000555c8 	cmpgei	zero,zero,5463
   55584:	000555c8 	cmpgei	zero,zero,5463
   55588:	000555c8 	cmpgei	zero,zero,5463
   5558c:	000555b8 	rdprs	zero,zero,5462
   55590:	000555c0 	call	555c <__alt_mem_onchip_memory2-0x3aaa4>
   55594:	000555c8 	cmpgei	zero,zero,5463
   55598:	000555b8 	rdprs	zero,zero,5462
   5559c:	000555b8 	rdprs	zero,zero,5462
   555a0:	000555c8 	cmpgei	zero,zero,5463
   555a4:	000555b8 	rdprs	zero,zero,5462
   555a8:	000555c0 	call	555c <__alt_mem_onchip_memory2-0x3aaa4>
   555ac:	000555c8 	cmpgei	zero,zero,5463
   555b0:	000555c8 	cmpgei	zero,zero,5463
   555b4:	000555b8 	rdprs	zero,zero,5462
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   555b8:	00800044 	movi	r2,1
   555bc:	00000306 	br	555cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   555c0:	0005883a 	mov	r2,zero
   555c4:	00000106 	br	555cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   555c8:	0005883a 	mov	r2,zero
  }
}
   555cc:	e037883a 	mov	sp,fp
   555d0:	df000017 	ldw	fp,0(sp)
   555d4:	dec00104 	addi	sp,sp,4
   555d8:	f800283a 	ret

000555dc <atexit>:
   555dc:	200b883a 	mov	r5,r4
   555e0:	000f883a 	mov	r7,zero
   555e4:	000d883a 	mov	r6,zero
   555e8:	0009883a 	mov	r4,zero
   555ec:	005580c1 	jmpi	5580c <__register_exitproc>

000555f0 <exit>:
   555f0:	defffe04 	addi	sp,sp,-8
   555f4:	000b883a 	mov	r5,zero
   555f8:	dc000015 	stw	r16,0(sp)
   555fc:	dfc00115 	stw	ra,4(sp)
   55600:	2021883a 	mov	r16,r4
   55604:	00559240 	call	55924 <__call_exitprocs>
   55608:	00800174 	movhi	r2,5
   5560c:	109e6f04 	addi	r2,r2,31164
   55610:	11000017 	ldw	r4,0(r2)
   55614:	20800f17 	ldw	r2,60(r4)
   55618:	10000126 	beq	r2,zero,55620 <exit+0x30>
   5561c:	103ee83a 	callr	r2
   55620:	8009883a 	mov	r4,r16
   55624:	0055aa40 	call	55aa4 <_exit>

00055628 <memcmp>:
   55628:	01c000c4 	movi	r7,3
   5562c:	3980192e 	bgeu	r7,r6,55694 <memcmp+0x6c>
   55630:	2144b03a 	or	r2,r4,r5
   55634:	11c4703a 	and	r2,r2,r7
   55638:	10000f26 	beq	r2,zero,55678 <memcmp+0x50>
   5563c:	20800003 	ldbu	r2,0(r4)
   55640:	28c00003 	ldbu	r3,0(r5)
   55644:	10c0151e 	bne	r2,r3,5569c <memcmp+0x74>
   55648:	31bfff84 	addi	r6,r6,-2
   5564c:	01ffffc4 	movi	r7,-1
   55650:	00000406 	br	55664 <memcmp+0x3c>
   55654:	20800003 	ldbu	r2,0(r4)
   55658:	28c00003 	ldbu	r3,0(r5)
   5565c:	31bfffc4 	addi	r6,r6,-1
   55660:	10c00e1e 	bne	r2,r3,5569c <memcmp+0x74>
   55664:	21000044 	addi	r4,r4,1
   55668:	29400044 	addi	r5,r5,1
   5566c:	31fff91e 	bne	r6,r7,55654 <__alt_data_end+0xfffee554>
   55670:	0005883a 	mov	r2,zero
   55674:	f800283a 	ret
   55678:	20c00017 	ldw	r3,0(r4)
   5567c:	28800017 	ldw	r2,0(r5)
   55680:	18bfee1e 	bne	r3,r2,5563c <__alt_data_end+0xfffee53c>
   55684:	31bfff04 	addi	r6,r6,-4
   55688:	21000104 	addi	r4,r4,4
   5568c:	29400104 	addi	r5,r5,4
   55690:	39bff936 	bltu	r7,r6,55678 <__alt_data_end+0xfffee578>
   55694:	303fe91e 	bne	r6,zero,5563c <__alt_data_end+0xfffee53c>
   55698:	003ff506 	br	55670 <__alt_data_end+0xfffee570>
   5569c:	10c5c83a 	sub	r2,r2,r3
   556a0:	f800283a 	ret

000556a4 <_putc_r>:
   556a4:	defffc04 	addi	sp,sp,-16
   556a8:	dc000215 	stw	r16,8(sp)
   556ac:	dfc00315 	stw	ra,12(sp)
   556b0:	2021883a 	mov	r16,r4
   556b4:	20000226 	beq	r4,zero,556c0 <_putc_r+0x1c>
   556b8:	20800e17 	ldw	r2,56(r4)
   556bc:	10001b26 	beq	r2,zero,5572c <_putc_r+0x88>
   556c0:	30800217 	ldw	r2,8(r6)
   556c4:	10bfffc4 	addi	r2,r2,-1
   556c8:	30800215 	stw	r2,8(r6)
   556cc:	10000a16 	blt	r2,zero,556f8 <_putc_r+0x54>
   556d0:	30800017 	ldw	r2,0(r6)
   556d4:	11400005 	stb	r5,0(r2)
   556d8:	30800017 	ldw	r2,0(r6)
   556dc:	10c00044 	addi	r3,r2,1
   556e0:	30c00015 	stw	r3,0(r6)
   556e4:	10800003 	ldbu	r2,0(r2)
   556e8:	dfc00317 	ldw	ra,12(sp)
   556ec:	dc000217 	ldw	r16,8(sp)
   556f0:	dec00404 	addi	sp,sp,16
   556f4:	f800283a 	ret
   556f8:	30c00617 	ldw	r3,24(r6)
   556fc:	10c00616 	blt	r2,r3,55718 <_putc_r+0x74>
   55700:	30800017 	ldw	r2,0(r6)
   55704:	00c00284 	movi	r3,10
   55708:	11400005 	stb	r5,0(r2)
   5570c:	30800017 	ldw	r2,0(r6)
   55710:	11400003 	ldbu	r5,0(r2)
   55714:	28fff11e 	bne	r5,r3,556dc <__alt_data_end+0xfffee5dc>
   55718:	8009883a 	mov	r4,r16
   5571c:	dfc00317 	ldw	ra,12(sp)
   55720:	dc000217 	ldw	r16,8(sp)
   55724:	dec00404 	addi	sp,sp,16
   55728:	00502681 	jmpi	50268 <__swbuf_r>
   5572c:	d9400015 	stw	r5,0(sp)
   55730:	d9800115 	stw	r6,4(sp)
   55734:	004b4440 	call	4b444 <__sinit>
   55738:	d9800117 	ldw	r6,4(sp)
   5573c:	d9400017 	ldw	r5,0(sp)
   55740:	003fdf06 	br	556c0 <__alt_data_end+0xfffee5c0>

00055744 <putc>:
   55744:	00800174 	movhi	r2,5
   55748:	defffc04 	addi	sp,sp,-16
   5574c:	109e7004 	addi	r2,r2,31168
   55750:	dc000115 	stw	r16,4(sp)
   55754:	14000017 	ldw	r16,0(r2)
   55758:	dc400215 	stw	r17,8(sp)
   5575c:	dfc00315 	stw	ra,12(sp)
   55760:	2023883a 	mov	r17,r4
   55764:	80000226 	beq	r16,zero,55770 <putc+0x2c>
   55768:	80800e17 	ldw	r2,56(r16)
   5576c:	10001a26 	beq	r2,zero,557d8 <putc+0x94>
   55770:	28800217 	ldw	r2,8(r5)
   55774:	10bfffc4 	addi	r2,r2,-1
   55778:	28800215 	stw	r2,8(r5)
   5577c:	10000b16 	blt	r2,zero,557ac <putc+0x68>
   55780:	28800017 	ldw	r2,0(r5)
   55784:	14400005 	stb	r17,0(r2)
   55788:	28800017 	ldw	r2,0(r5)
   5578c:	10c00044 	addi	r3,r2,1
   55790:	28c00015 	stw	r3,0(r5)
   55794:	10800003 	ldbu	r2,0(r2)
   55798:	dfc00317 	ldw	ra,12(sp)
   5579c:	dc400217 	ldw	r17,8(sp)
   557a0:	dc000117 	ldw	r16,4(sp)
   557a4:	dec00404 	addi	sp,sp,16
   557a8:	f800283a 	ret
   557ac:	28c00617 	ldw	r3,24(r5)
   557b0:	10c00e16 	blt	r2,r3,557ec <putc+0xa8>
   557b4:	28800017 	ldw	r2,0(r5)
   557b8:	01000284 	movi	r4,10
   557bc:	14400005 	stb	r17,0(r2)
   557c0:	28800017 	ldw	r2,0(r5)
   557c4:	10c00003 	ldbu	r3,0(r2)
   557c8:	193ff01e 	bne	r3,r4,5578c <__alt_data_end+0xfffee68c>
   557cc:	280d883a 	mov	r6,r5
   557d0:	180b883a 	mov	r5,r3
   557d4:	00000706 	br	557f4 <putc+0xb0>
   557d8:	8009883a 	mov	r4,r16
   557dc:	d9400015 	stw	r5,0(sp)
   557e0:	004b4440 	call	4b444 <__sinit>
   557e4:	d9400017 	ldw	r5,0(sp)
   557e8:	003fe106 	br	55770 <__alt_data_end+0xfffee670>
   557ec:	280d883a 	mov	r6,r5
   557f0:	880b883a 	mov	r5,r17
   557f4:	8009883a 	mov	r4,r16
   557f8:	dfc00317 	ldw	ra,12(sp)
   557fc:	dc400217 	ldw	r17,8(sp)
   55800:	dc000117 	ldw	r16,4(sp)
   55804:	dec00404 	addi	sp,sp,16
   55808:	00502681 	jmpi	50268 <__swbuf_r>

0005580c <__register_exitproc>:
   5580c:	defffa04 	addi	sp,sp,-24
   55810:	dc000315 	stw	r16,12(sp)
   55814:	04000174 	movhi	r16,5
   55818:	841e6f04 	addi	r16,r16,31164
   5581c:	80c00017 	ldw	r3,0(r16)
   55820:	dc400415 	stw	r17,16(sp)
   55824:	dfc00515 	stw	ra,20(sp)
   55828:	18805217 	ldw	r2,328(r3)
   5582c:	2023883a 	mov	r17,r4
   55830:	10003726 	beq	r2,zero,55910 <__register_exitproc+0x104>
   55834:	10c00117 	ldw	r3,4(r2)
   55838:	010007c4 	movi	r4,31
   5583c:	20c00e16 	blt	r4,r3,55878 <__register_exitproc+0x6c>
   55840:	1a000044 	addi	r8,r3,1
   55844:	8800221e 	bne	r17,zero,558d0 <__register_exitproc+0xc4>
   55848:	18c00084 	addi	r3,r3,2
   5584c:	18c7883a 	add	r3,r3,r3
   55850:	18c7883a 	add	r3,r3,r3
   55854:	12000115 	stw	r8,4(r2)
   55858:	10c7883a 	add	r3,r2,r3
   5585c:	19400015 	stw	r5,0(r3)
   55860:	0005883a 	mov	r2,zero
   55864:	dfc00517 	ldw	ra,20(sp)
   55868:	dc400417 	ldw	r17,16(sp)
   5586c:	dc000317 	ldw	r16,12(sp)
   55870:	dec00604 	addi	sp,sp,24
   55874:	f800283a 	ret
   55878:	00800034 	movhi	r2,0
   5587c:	10800004 	addi	r2,r2,0
   55880:	10002626 	beq	r2,zero,5591c <__register_exitproc+0x110>
   55884:	01006404 	movi	r4,400
   55888:	d9400015 	stw	r5,0(sp)
   5588c:	d9800115 	stw	r6,4(sp)
   55890:	d9c00215 	stw	r7,8(sp)
   55894:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   55898:	d9400017 	ldw	r5,0(sp)
   5589c:	d9800117 	ldw	r6,4(sp)
   558a0:	d9c00217 	ldw	r7,8(sp)
   558a4:	10001d26 	beq	r2,zero,5591c <__register_exitproc+0x110>
   558a8:	81000017 	ldw	r4,0(r16)
   558ac:	10000115 	stw	zero,4(r2)
   558b0:	02000044 	movi	r8,1
   558b4:	22405217 	ldw	r9,328(r4)
   558b8:	0007883a 	mov	r3,zero
   558bc:	12400015 	stw	r9,0(r2)
   558c0:	20805215 	stw	r2,328(r4)
   558c4:	10006215 	stw	zero,392(r2)
   558c8:	10006315 	stw	zero,396(r2)
   558cc:	883fde26 	beq	r17,zero,55848 <__alt_data_end+0xfffee748>
   558d0:	18c9883a 	add	r4,r3,r3
   558d4:	2109883a 	add	r4,r4,r4
   558d8:	1109883a 	add	r4,r2,r4
   558dc:	21802215 	stw	r6,136(r4)
   558e0:	01800044 	movi	r6,1
   558e4:	12406217 	ldw	r9,392(r2)
   558e8:	30cc983a 	sll	r6,r6,r3
   558ec:	4992b03a 	or	r9,r9,r6
   558f0:	12406215 	stw	r9,392(r2)
   558f4:	21c04215 	stw	r7,264(r4)
   558f8:	01000084 	movi	r4,2
   558fc:	893fd21e 	bne	r17,r4,55848 <__alt_data_end+0xfffee748>
   55900:	11006317 	ldw	r4,396(r2)
   55904:	218cb03a 	or	r6,r4,r6
   55908:	11806315 	stw	r6,396(r2)
   5590c:	003fce06 	br	55848 <__alt_data_end+0xfffee748>
   55910:	18805304 	addi	r2,r3,332
   55914:	18805215 	stw	r2,328(r3)
   55918:	003fc606 	br	55834 <__alt_data_end+0xfffee734>
   5591c:	00bfffc4 	movi	r2,-1
   55920:	003fd006 	br	55864 <__alt_data_end+0xfffee764>

00055924 <__call_exitprocs>:
   55924:	defff504 	addi	sp,sp,-44
   55928:	df000915 	stw	fp,36(sp)
   5592c:	dd400615 	stw	r21,24(sp)
   55930:	dc800315 	stw	r18,12(sp)
   55934:	dfc00a15 	stw	ra,40(sp)
   55938:	ddc00815 	stw	r23,32(sp)
   5593c:	dd800715 	stw	r22,28(sp)
   55940:	dd000515 	stw	r20,20(sp)
   55944:	dcc00415 	stw	r19,16(sp)
   55948:	dc400215 	stw	r17,8(sp)
   5594c:	dc000115 	stw	r16,4(sp)
   55950:	d9000015 	stw	r4,0(sp)
   55954:	2839883a 	mov	fp,r5
   55958:	04800044 	movi	r18,1
   5595c:	057fffc4 	movi	r21,-1
   55960:	00800174 	movhi	r2,5
   55964:	109e6f04 	addi	r2,r2,31164
   55968:	12000017 	ldw	r8,0(r2)
   5596c:	45005217 	ldw	r20,328(r8)
   55970:	44c05204 	addi	r19,r8,328
   55974:	a0001c26 	beq	r20,zero,559e8 <__call_exitprocs+0xc4>
   55978:	a0800117 	ldw	r2,4(r20)
   5597c:	15ffffc4 	addi	r23,r2,-1
   55980:	b8000d16 	blt	r23,zero,559b8 <__call_exitprocs+0x94>
   55984:	14000044 	addi	r16,r2,1
   55988:	8421883a 	add	r16,r16,r16
   5598c:	8421883a 	add	r16,r16,r16
   55990:	84402004 	addi	r17,r16,128
   55994:	a463883a 	add	r17,r20,r17
   55998:	a421883a 	add	r16,r20,r16
   5599c:	e0001e26 	beq	fp,zero,55a18 <__call_exitprocs+0xf4>
   559a0:	80804017 	ldw	r2,256(r16)
   559a4:	e0801c26 	beq	fp,r2,55a18 <__call_exitprocs+0xf4>
   559a8:	bdffffc4 	addi	r23,r23,-1
   559ac:	843fff04 	addi	r16,r16,-4
   559b0:	8c7fff04 	addi	r17,r17,-4
   559b4:	bd7ff91e 	bne	r23,r21,5599c <__alt_data_end+0xfffee89c>
   559b8:	00800034 	movhi	r2,0
   559bc:	10800004 	addi	r2,r2,0
   559c0:	10000926 	beq	r2,zero,559e8 <__call_exitprocs+0xc4>
   559c4:	a0800117 	ldw	r2,4(r20)
   559c8:	1000301e 	bne	r2,zero,55a8c <__call_exitprocs+0x168>
   559cc:	a0800017 	ldw	r2,0(r20)
   559d0:	10003226 	beq	r2,zero,55a9c <__call_exitprocs+0x178>
   559d4:	a009883a 	mov	r4,r20
   559d8:	98800015 	stw	r2,0(r19)
   559dc:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   559e0:	9d000017 	ldw	r20,0(r19)
   559e4:	a03fe41e 	bne	r20,zero,55978 <__alt_data_end+0xfffee878>
   559e8:	dfc00a17 	ldw	ra,40(sp)
   559ec:	df000917 	ldw	fp,36(sp)
   559f0:	ddc00817 	ldw	r23,32(sp)
   559f4:	dd800717 	ldw	r22,28(sp)
   559f8:	dd400617 	ldw	r21,24(sp)
   559fc:	dd000517 	ldw	r20,20(sp)
   55a00:	dcc00417 	ldw	r19,16(sp)
   55a04:	dc800317 	ldw	r18,12(sp)
   55a08:	dc400217 	ldw	r17,8(sp)
   55a0c:	dc000117 	ldw	r16,4(sp)
   55a10:	dec00b04 	addi	sp,sp,44
   55a14:	f800283a 	ret
   55a18:	a0800117 	ldw	r2,4(r20)
   55a1c:	80c00017 	ldw	r3,0(r16)
   55a20:	10bfffc4 	addi	r2,r2,-1
   55a24:	15c01426 	beq	r2,r23,55a78 <__call_exitprocs+0x154>
   55a28:	80000015 	stw	zero,0(r16)
   55a2c:	183fde26 	beq	r3,zero,559a8 <__alt_data_end+0xfffee8a8>
   55a30:	95c8983a 	sll	r4,r18,r23
   55a34:	a0806217 	ldw	r2,392(r20)
   55a38:	a5800117 	ldw	r22,4(r20)
   55a3c:	2084703a 	and	r2,r4,r2
   55a40:	10000b26 	beq	r2,zero,55a70 <__call_exitprocs+0x14c>
   55a44:	a0806317 	ldw	r2,396(r20)
   55a48:	2088703a 	and	r4,r4,r2
   55a4c:	20000c1e 	bne	r4,zero,55a80 <__call_exitprocs+0x15c>
   55a50:	89400017 	ldw	r5,0(r17)
   55a54:	d9000017 	ldw	r4,0(sp)
   55a58:	183ee83a 	callr	r3
   55a5c:	a0800117 	ldw	r2,4(r20)
   55a60:	15bfbf1e 	bne	r2,r22,55960 <__alt_data_end+0xfffee860>
   55a64:	98800017 	ldw	r2,0(r19)
   55a68:	153fcf26 	beq	r2,r20,559a8 <__alt_data_end+0xfffee8a8>
   55a6c:	003fbc06 	br	55960 <__alt_data_end+0xfffee860>
   55a70:	183ee83a 	callr	r3
   55a74:	003ff906 	br	55a5c <__alt_data_end+0xfffee95c>
   55a78:	a5c00115 	stw	r23,4(r20)
   55a7c:	003feb06 	br	55a2c <__alt_data_end+0xfffee92c>
   55a80:	89000017 	ldw	r4,0(r17)
   55a84:	183ee83a 	callr	r3
   55a88:	003ff406 	br	55a5c <__alt_data_end+0xfffee95c>
   55a8c:	a0800017 	ldw	r2,0(r20)
   55a90:	a027883a 	mov	r19,r20
   55a94:	1029883a 	mov	r20,r2
   55a98:	003fb606 	br	55974 <__alt_data_end+0xfffee874>
   55a9c:	0005883a 	mov	r2,zero
   55aa0:	003ffb06 	br	55a90 <__alt_data_end+0xfffee990>

00055aa4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   55aa4:	defffd04 	addi	sp,sp,-12
   55aa8:	df000215 	stw	fp,8(sp)
   55aac:	df000204 	addi	fp,sp,8
   55ab0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   55ab4:	0001883a 	nop
   55ab8:	e0bfff17 	ldw	r2,-4(fp)
   55abc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   55ac0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   55ac4:	10000226 	beq	r2,zero,55ad0 <_exit+0x2c>
    ALT_SIM_FAIL();
   55ac8:	002af070 	cmpltui	zero,zero,43969
   55acc:	00000106 	br	55ad4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   55ad0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   55ad4:	003fff06 	br	55ad4 <__alt_data_end+0xfffee9d4>
