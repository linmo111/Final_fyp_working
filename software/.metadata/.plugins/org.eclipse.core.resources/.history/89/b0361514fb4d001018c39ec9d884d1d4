#include <stdio.h>
#include <io.h>
#include <unistd.h>
#include <stdint.h>

#include "system.h"
#include <math.h>

#include "altera_avalon_i2c.h"  // Include Avalon I2C API
//#include "ff.h"


//#define ALT_CI_RECONSTRUCTION_TOP_0(A) __builtin_custom_ini(ALT_CI_RECONSTRUCTION_TOP_0_N,(A))
//#define ALT_CI_RECONSTRUCTION_TOP_0_N 0x1
//
//#define ALT_CI_RECON_TOP_PIPELINE_0(A) __builtin_custom_ini(ALT_CI_RECON_TOP_PIPELINE_0_N,(A))
//#define ALT_CI_RECON_TOP_PIPELINE_0_N 0x0

#define ALT_CI_RECON_PIPE_N_0(A,B) __builtin_custom_inii(ALT_CI_RECON_PIPE_N_0_N,(A),(B))
#define ALT_CI_RECON_PIPE_N_0_N 0x0
#define ALT_CI_RECON_PIPE_1_0(A,B) __builtin_custom_inii(ALT_CI_RECON_PIPE_1_0_N,(A),(B))
#define ALT_CI_RECON_PIPE_1_0_N 0x1

#define MA_WINDOW_SIZE 100  // Size of the moving average window
typedef struct {
    float buffer[MA_WINDOW_SIZE];
    int index;
    int count;
    float sum;
} MovingAverage;

void initMovingAverage(MovingAverage *ma) {
    ma->index = 0;
    ma->count = 0;
    ma->sum = 0.0;

    for (int i = 0; i < MA_WINDOW_SIZE; i++) {
        ma->buffer[i] = 0.0;
    }
}

//}
float updateMovingAverage(MovingAverage *ma, float new_sample) {
    // Remove the oldest sample from the sum
    ma->sum -= ma->buffer[ma->index];

    // Add the new sample to the buffer and sum
    ma->buffer[ma->index] = new_sample;
    ma->sum += new_sample;

    // Update the index (circular buffer)
    ma->index = (ma->index + 1) % MA_WINDOW_SIZE;

    // Update the count (if less than window size)
    if (ma->count < MA_WINDOW_SIZE) {
        ma->count++;
    }

    // Compute the moving average
    return ma->sum / ma->count;
}



#define MAX_ORDER 100
#define MAX_J 5
typedef struct {
    float lam;
    float prev_y;
    float prev_eps;
    int initialized;
    float max_in;
    int order;
    int diff_reset;
    int anti_diff_reset;
    float diff_buffer[MAX_ORDER+1];
    float anti_diff_buffer[MAX_ORDER+1];

    // the code below are not in use, it is the kn coefficient part
    float sampling_interval;
    int J;                      // buffer size (e.g. 10)

    float s1[MAX_ORDER];          // first cumulative sum per layer
    float s2[MAX_ORDER];          // second cumulative sum per layer
    float s1_hist[MAX_ORDER][MAX_J]; // history of s2 for reset count
    float s2_hist[MAX_ORDER][MAX_J]; // history of s2 for reset count
    float in_hist[MAX_ORDER][MAX_J]; // history of s2 for reset count
    int res_index[MAX_ORDER];     // index for each layer



} UnlimitedSamplerReconstructor;

/* Initialize the reconstructor */
void initReconstructor(UnlimitedSamplerReconstructor *recon, float lam) {
    recon->lam = lam;
    recon->prev_y = 0.0;
    recon->prev_eps = 0.0;
    recon->initialized = 0;
    recon->max_in=0.001;
    recon->sampling_interval=0.000001;
    recon->diff_reset=0;
    recon-> anti_diff_reset=0;
//    recon->max_order=10;
    recon->order=1;
//    recon->J=MAX_J;

    for (int i = 0; i < MAX_ORDER+1; i++) {
        recon->diff_buffer[i] = 0.0;
        recon->anti_diff_buffer[i] = 0.0;
    }
    for (int i = 0; i < MAX_ORDER; ++i) {
        recon->s1[i] = 0.0f;
        recon->s2[i] = 0.0f;
        recon->res_index[i] = 0;
        for (int j = 0; j < MAX_J; ++j){
        	recon->s1_hist[i][j] = 0.0f;
            recon->s2_hist[i][j] = 0.0f;
        	recon->in_hist[i][j] = 0.0f;
    }
    }
    for (int i = 0; i <= MAX_ORDER; ++i)
        recon->anti_diff_buffer[i] = 0.0f;


}
float nth_order_difference(float new_sample,UnlimitedSamplerReconstructor *recon) {
	float x = new_sample;
	if (recon->diff_reset >0){
		for (int i = 0; i <= recon->order; ++i){
		recon->diff_buffer[i]=0;

		}
		recon->diff_reset=0;
	}else
	{
		for (int i = 0; i <= recon->order; ++i) {
			float delta = x - recon->diff_buffer[i];
			recon->diff_buffer[i] = x;
			x = delta;
	//        }
		}
	}
    return recon->diff_buffer[recon->order];
}

float anti_diff_nth(float diffN,UnlimitedSamplerReconstructor *recon) {
	float x = diffN;  // the N-th difference input (Δⁿε[k])

	for (int i = 0; i < recon->order-1; ++i) {
//		int idx = recon->res_index[i] % recon->J;
	    // 1. Integrate current level
	    x = recon->anti_diff_buffer[i] + x;
	    x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
//	    x+=2*recon->lam*(6*recon->max_in/recon->lam+1);
	    recon->anti_diff_buffer[i] = x;


//	    // 2. Update cumulative sums for this layer
//	    recon->s1[i] = recon->s1[i]+x-recon->in_hist[i][idx];
//	    recon->s2[i] = recon->s2[i]+recon->s1[i]-recon->s1_hist[i][idx];
//	    recon->in_hist[i][idx]=x;
//
//
//	    recon->s1_hist[i][idx]=recon->s1[i];
//
//	    float s2_past=recon->s2_hist[i][idx];
//	    float s2_now= recon->s2[i];
//	    recon->s2_hist[i][idx] = recon->s2[i];
//	    recon->res_index[i]++;
//
//	    // 3. Estimate Kn only after J samples
//	    int Kn = 0;
//	    if (recon->res_index[i] >= recon->J) {
//	        int now = (recon->res_index[i]-1) % recon->J;
//	        int past = (recon->res_index[i]) % recon->J;
//
//	        float s2_now = recon->s2_hist[i][now];
//	        float s2_past = recon->s2_hist[i][past];
//	        float kn_est = (s2_now - s2_past) / (12.0f * recon->max_in);

	        // Round to nearest integer
//	        Kn = (int)(kn_est + 0.5f);  // floor(x + 0.5) for round

//	         Optional clamping
//	        if (Kn > 5) Kn = 5;
//	        if (Kn < -5) Kn = -5;
	   // }
//	    printf("kn at layer %d= %d.\n", i,(Kn) );


//	     4. Apply correction


//	    x += 2.0f * recon->lam * Kn;
//	    printf("anti_diff_buffer at layer %d= %f.\n", i,recon->anti_diff_buffer[i] );

	}

	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
	recon->anti_diff_buffer[recon->order-1] = x;

	return x;  // final reconstructed sample g[k]
}

float anti_diff_3rd(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
	float x = diffN;  // the N-th difference input (Δⁿε[k])

	x = recon->anti_diff_buffer[0] + x;
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
	float avg1 = updateMovingAverage(ma1, x);

	recon->anti_diff_buffer[0] = x;

	x=x-avg1;

	x = recon->anti_diff_buffer[1] + x;
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
	float avg2 = updateMovingAverage(ma2, x);

	recon->anti_diff_buffer[1] = x;
	x=x-avg2;


	// Final integration
	x = recon->anti_diff_buffer[recon->order-1] + x;
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));

	recon->anti_diff_buffer[recon->order-1] = x;
	float avg3 = updateMovingAverage(ma3, x);
//	x = hpf_update(hpf, x);
	x=x-avg3;

	return x;  // final reconstructed sample g[k]
}
float anti_diff_2nd(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
	float x = diffN;  // the N-th difference input (Δⁿε[k])
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));

	x = recon->anti_diff_buffer[0] + x;






	recon->anti_diff_buffer[0] = x;
	float avg1 = updateMovingAverage(ma1, x);
	x=x-avg1;



	// Final integration
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));
	x = recon->anti_diff_buffer[recon->order-1] + x;


	recon->anti_diff_buffer[recon->order-1] = x;


	float avg2 = updateMovingAverage(ma2, x);
//	x = hpf_update(hpf, x);
	x=x-avg2;


	return x;  // final reconstructed sample g[k]
}
float anti_diff_1st(float diffN,UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2, MovingAverage *ma3) {
	float x = diffN;  // the N-th difference input (Δⁿε[k])

	// Final integration

	x = recon->anti_diff_buffer[recon->order-1] + x;
	x=2.0 * recon->lam * round(x / (2.0 * recon->lam));


	recon->anti_diff_buffer[recon->order-1] = x;

	float avg2 = updateMovingAverage(ma2, x);
//	x = hpf_update(hpf, x);
	x=x-avg2;


	return x;  // final reconstructed sample g[k]
}

int calc_order(UnlimitedSamplerReconstructor *recon) {
	float denominator = recon->sampling_interval * M_PI * M_E;

    if (recon->lam <= 0 || recon->max_in <= 0 || denominator <= 0) {
        // Handle invalid input
        return 1;  // or any other error signal
    }

    float ratio = log(recon->lam) - log(recon->max_in);
    float denom_log = log(denominator);
    int N = (int)ceil(ratio / denom_log);
//    return N;
    if (N> MAX_ORDER){
    	N=MAX_ORDER;
    }
    return N > 1 ? N : 1;
}
/* Centered modulo function into [-λ, λ) */
float modulo(float x, float lam) {
    float two_lam = 2.0 * lam;
    float mod = fmod(x + lam, two_lam);
    if (mod < 0) mod += two_lam;
    return mod - lam;
}
float center_to_2lam(float x, float lam) {
    return 2.0f * lam * roundf(x / (2.0f * lam));
}

float update(UnlimitedSamplerReconstructor *recon, int order, float yk,MovingAverage *ma1,MovingAverage *ma2,MovingAverage *ma3) {
	if (yk> recon->max_in){
		recon->max_in=(2*recon->lam)*round(yk/(2*recon->lam));
//		printf("new largest= %f \n",recon->max_in);
//		recon->order = calc_order(recon);
//		printf("new order= %d \n",recon->order);

	}
	recon->order =order;

    float dy= nth_order_difference(yk,recon);

    // Step 2: Apply modulo to Δy[k]
    float mod_dy = modulo(dy, recon->lam);

    // Step 3: Compute Δε[k]
    float delta_eps = mod_dy - dy;

    // Step 4: Update ε[k], round to nearest 2λ

    // use this function if you want no filters, or
//    recon->prev_eps =anti_diff_nth(delta_eps,recon);

    if (recon->order ==2){
    	recon->prev_eps =anti_diff_2nd(delta_eps,recon,ma1,ma2,ma3);
    }
    else if (recon->order ==1){
    	recon->prev_eps =anti_diff_1st(delta_eps,recon,ma1,ma2,ma3);
    }
    else if (recon->order ==3){
    	recon->prev_eps =anti_diff_3rd(delta_eps,recon,ma1,ma2,ma3);
    }
    else {
    	printf("order not implemented");

    }


    float eps_k=recon->prev_eps;

    // Step 5: Recover g[k]
    float gk = yk + eps_k;
//    printf("reconstructed val%f.\n", gk);

    // Update state
    recon->prev_y = yk;


//    return eps_k;
    return gk;

}




/* Initialize the moving average filter */

/* Update the moving average with a new sample */


float convert_adc_to_signal(int adc_value, int ADC_MAX_VALUE, float V_REF, float OFFSET_VOLTAGE) {
    // Calculate the input voltage
    float input_voltage = (adc_value / (float)ADC_MAX_VALUE) * V_REF;

    // Subtract the offset to get the original signal value
    float signal_value = input_voltage - OFFSET_VOLTAGE;

    return signal_value;
}


uint8_t float_to_dac(float signal_value, int DAC_MAX_VALUE, float V_REF, float OFFSET) {
    float dac_voltage;
    uint8_t dac_value;

    // Apply offset
    dac_voltage = signal_value + OFFSET;

    // Clamp to DAC range (0V to 5V)
    if (dac_voltage < 0.0f) {
        dac_voltage = 0.0f;
    } else if (dac_voltage > V_REF) {
        dac_voltage = V_REF;
    }

    // Convert to DAC value
    dac_value = (uint8_t)((dac_voltage / V_REF) * DAC_MAX_VALUE);

    return dac_value;
}










int send_to_PCF(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 dac_value) {
    alt_u8 txbuffer[2];  // Buffer to hold data to send
    ALT_AVALON_I2C_STATUS_CODE status;

    // Prepare the control byte and DAC data
    txbuffer[0] = 0x40;     // Control byte: Enable DAC
    txbuffer[1] = dac_value; // Data byte: Value to set DAC output

    // Write the data to the DAC
    status = alt_avalon_i2c_master_tx(i2c_dev, txbuffer, 2, ALT_AVALON_I2C_NO_INTERRUPTS);
    if (status != ALT_AVALON_I2C_SUCCESS) {
        printf("Error: I2C write to DAC failed with status code: %d\n", status);
        return -1; // Return error
    }
   // printf("inhere");
    return 0; // Success
}


float y_prev = 0.0f;
//float alpha = 0.1f;  // Adjust based on desired cutoff
float fc = 5000.0f;
float fs = 10000.0f;


float process_lowpass(float x) {
	float alpha = (2.0f * M_PI * fc) / (fs + 2.0f * M_PI * fc);
    float y = alpha * x + (1.0f - alpha) * y_prev;
    y_prev = y;
    return y;
}
float a=0.1; // the top scale factor

int top(int adc_value,int order, UnlimitedSamplerReconstructor *recon, MovingAverage *ma1,MovingAverage *ma2,MovingAverage *ma3  ){

	float signal_in=convert_adc_to_signal(adc_value,4095,4.096,0);
	float reconstructed_val=update(recon,order, signal_in,ma1,ma2,ma3)*a;

//	printf("reconstructed val = %f \n", reconstructed_val);
//	float avg = updateMovingAverage(ma1, reconstructed_val);
//	reconstructed_val=reconstructed_val-avg;
//	reconstructed_val=process_lowpass(reconstructed_val);
//	avg = updateMovingAverage(ma2, reconstructed_val);
//	int dac_out=float_to_dac(reconstructed_val-avg,255,5,1.5);

	int dac_out=float_to_dac(reconstructed_val,255,5,1.5);

	//int dac_out=float_to_dac(signal_in,255,5,1.5);

	return dac_out;
}
int stream_adc_out(int adc_value ){

	float signal_in=convert_adc_to_signal(adc_value,4095,4.096,0);


	int dac_out=float_to_dac(signal_in,255,5,0);

	return dac_out;
}



void main(void){
//	printf("running \n");
	int sample_max=10000;
	int sample_written=0;
//    FILE *fp = fopen("/mnt/host/adc_readings.txt", "w");
////    FILE *rfp = fopen("/mnt/host/reconstructed.txt", "w");
//    printf("opened file \n");
//    if (!fp) {
//        printf("Failed to open file on host\n");
//    }


	int ch = 0;
	const int nReadNum = 1; // max 1024
	int i, ADC_value, nIndex=0;
	uint16_t DAC_val=0;
	float signal_val, reconstructed_val=0;
//	printf("ADC Demo\r\n");
    ALT_AVALON_I2C_DEV_t *i2c_dev;  // Pointer to I2C instance structure
   // int adc_value = 0;             // Example ADC value to send
    int result;
    float lam = 1.1;
	int downsample_ratio=1; // to downsample,this reads a sample every n adc samples
	int count=1;
    UnlimitedSamplerReconstructor recon;
    initReconstructor(&recon, lam);

    MovingAverage ma;
    initMovingAverage(&ma);
    MovingAverage ma2;
    initMovingAverage(&ma2);
    MovingAverage ma3;
    initMovingAverage(&ma3);

    i2c_dev = alt_avalon_i2c_open("/dev/i2c_dac");
    if (NULL == i2c_dev) {
        printf("Error: Cannot find /dev/i2c_dac\n");
        return ;
    }
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;


    // Set the target device address (PCF8591T address is typically 0x48)
    alt_avalon_i2c_master_target_set(i2c_dev, 0x48);
//    alt_avalon_i2c_master_config_set(i2c_dev, &cfg);
//     alt_avalon_i2c_master_target_set(i2c_dev, 0x72);
     if (i2c_dev) {
    	 printf("DAC CONNECTED\n");
         alt_avalon_i2c_master_config_speed_set(i2c_dev,&cfg, 400000); // Set 400 kHz
         alt_avalon_i2c_master_config_set(i2c_dev, &cfg);
     }



    IOWR(ADC_LTC2308_BASE, 0x01, nReadNum);

	while(1){

		// start measure
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x01);
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
//		usleep(1);

		// wait measure done
//		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);

		// read adc value

		for(i=0;i<nReadNum;i+=1){
			if (count<downsample_ratio){
				count+=1;
				IORD(ADC_LTC2308_BASE, 0x01);

			}
			else{
				count=1;
// save adc sampled files to text file, run in debug mode.

				ADC_value = IORD(ADC_LTC2308_BASE, 0x01);
//				DAC_val=top(ADC_value,1,&recon,&ma, &ma2, &ma3);
//				if(sample_written<sample_max){
//					sample_written+=1;
//					fprintf(fp, "%d\n", ADC_value);
////					fprintf(rfp, "%d\n", DAC_val);
//
//				}

//			    printf("calculated adc_VAL %d.\n", ADC_value);

// baseline pipelined models
//				DAC_val=ALT_CI_RECON_TOP_PIPELINE_0(ADC_value);
				DAC_val=ALT_CI_RECON_PIPE_1_0(ADC_value,0);

// theoretical c model




// printing adc values as dac output
//				DAC_val=stream_adc_out(ADC_value);

//nth order pipelined model
				DAC_val=ALT_CI_RECON_PIPE_N_0(ADC_value,1);

//				printf("calculated dac_VAL %d.\n", DAC_val);


				result = send_to_PCF(i2c_dev, DAC_val);
				//	        result = send_to_PCF(i2c_dev, (8)Value);
				////			result = send_to_LTC2607(i2c_dev,0, (alt_u16)Value);
				if (result != 0) {
					printf("Failed to send data to DAC.\n");
					break;
				}
				else{
//		        	printf("sent DAC_VAL %d.\n", DAC_val);
				}
			}



	}
	}
}

