module fixed_to_float #(
    parameter TOTAL_BITS = 16,       // Total fixed-point bits
    parameter FRACTIONAL_BITS = 13   // Number of fractional bits
)(
    input  wire [TOTAL_BITS-1:0] fixed_in,  // Fixed-point input
    output reg  [31:0] float_out            // 32-bit IEEE-754 float output
);

// Step 1: Interpret sign
wire sign;
assign sign = fixed_in[TOTAL_BITS-1];

// Step 2: Absolute value
wire [TOTAL_BITS-1:0] abs_fixed;
assign abs_fixed = sign ? (~fixed_in + 1'b1) : fixed_in;

// Step 3: Find leading 1 position (normalize)
integer i;
reg [7:0] leading_one_pos;
always @(*) begin
    leading_one_pos = 0;
    for (i = TOTAL_BITS-1; i >= 0; i = i - 1) begin
        if (abs_fixed[i] == 1'b1 && leading_one_pos == 0) begin
            leading_one_pos = i;
        end
    end
end

// Step 4: Build mantissa (normalize to 23 bits)
wire [22:0] mantissa;
assign mantissa = (abs_fixed << (22 - leading_one_pos))[22:0];

// Step 5: Build exponent
wire [7:0] exponent;
assign exponent = (leading_one_pos == 0) ? 8'd0 : (127 + leading_one_pos - FRACTIONAL_BITS);

// Step 6: Assemble float
always @(*) begin
    if (abs_fixed == 0) begin
        float_out = 32'b0;  // Zero
    end else begin
        float_out = {sign, exponent, mantissa};
    end
end

endmodule
