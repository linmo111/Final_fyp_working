module modulo_residual #(
    parameter WIDTH = 16,          // Data width of input/output
    parameter LAMBDA = 10          // Modulo threshold λ
) (
    input  logic                  clk,           // Clock signal
    input  logic                  reset,         // Reset signal
    input  logic                  valid_in,      // Valid input signal
    input  logic signed [WIDTH-1:0] diff_in,     // Higher-order difference Δ^N y[k]
    output logic                  valid_out,     // Output valid signal
    output logic signed [WIDTH-1:0] residual_out // Modulo residual Δ^N ε_y[k]
);

    // Internal signal for modulo operation
    logic signed [WIDTH-1:0] modulo_result;

    // Centered modulo operation
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            modulo_result <= 0;
            residual_out <= 0;
            valid_out <= 0;
        end else if (valid_in) begin
            // Centered modulo operation: 
				modulo_result <= (diff_in + λ) % (2 * λ) - λ
//            if (diff_in >= LAMBDA) begin
//                modulo_result <= diff_in - (2 * LAMBDA);
//            end else if (diff_in < -LAMBDA) begin
//                modulo_result <= diff_in + (2 * LAMBDA);
//            end else begin
//                modulo_result <= diff_in;  // No folding needed
//            end

            // Compute residual: residual_out = modulo_result - diff_in
            residual_out <= modulo_result - diff_in;

            // Output valid signal
            valid_out <= 1;
        end else begin
            valid_out <= 0;
        end
    end

endmodule
